//====================================================================
//      SvCompiler V6.06
//By A.Sibilev
//====================================================================
//cblock

;sfVpuVersion <int()>
;sfCreateTask <int(,*<void()>,int)>
;sfLog <void(,cstring,int,int,int)>
;sfLogOpen <void(,cstring)>
;sfLogClose <void()>
;sfWaitFrameOut <void(,int)>
;sfIsFrameOut <int(,int)>
;sfWaitNextFrame <void()>
;sfSlotIndex <int(,cstring)>
;sfAbs <int(,int)>
;sfIMin <int(,int,int)>
;sfIMax <int(,int,int)>
;sfUMin <int(,int,int)>
;sfUMax <int(,int,int)>
;sfILimit <int(,int,int,int)>
;sfStop <void()>
;sfStartSlot <void(,int)>
;sfBip <void(,int,int)>
;sfFreeGroup <void(,int)>
;sfPoseGroup <void(,int,int,int)>
;sfPoseGroupDelay <void(,int,int,int,int)>
;sfPoseCorrect <void(,int,int)>
;sfQueueGroup <void(,int,int,int)>
;sfPoseIdx <void(,int,int,int)>
;sfPoseGroupLin <void(,int,int,int)>
;sfStrainGroup <void(,int)>
;sfPlaySamples <void(,int,*cblock,int)>
;sfAccumSetup1 <void(,*int)>
;sfAccumSetup2 <void(,*int,*int)>
;sfAccumSetup3 <void(,*int,*int,*int)>
;sfAccumSetup4 <void(,*int,*int,*int,*int)>
;sfAccumTrigger <void()>
;sfAccumReset <void()>
;sfMathAcos <int(,int,int)>
;sfMathSqrti <int(,int)>
;sfMathAngleOfTriangle <int(,int,int,int)>
;sfMathAngleOfKnee <int(,int,int,int)>
;sfMathCathetOfSquareTriangle <int(,int,int)>
;sfMathHypotenuseOfSquareTriangle <int(,int,int)>
;sfMathTableSin <int(,int,int)>
;sfHumoModelSetup <void()>
;sfHumoModelFootAtFloor <void(,int,int,int)>
;sfHumoModelFootPush <void(,int,int,int)>
;sfIndexOfMask <int(,int)>
;sfQueueIdxAppend <int(,int,int,int)>
;sfQueueIdxOffsets <int(,int,int,*cblock,int)>
;sfQueueIdxSinMove <int(,int,int,int,int)>
;sfQueueIdxLast <int(,int)>
;sfQueueIdxCount <int(,int)>
;sfQueueMax <int()>
;sfIkSetup <void()>
;sfIkAngle <void(,float,float,float,float,float,float,float)>
;sfMathCos <float(,float)>
;sfMathSin <float(,float)>
;sfQuaternionToEuler <void(,float,float,float,float)>
;sfQuaternionToEulerImu <void()>
;sfFMathACos <float(,float)>
;sfFMathASin <float(,float)>
;sfFMathATan <float(,float)>
;sfFMathATan2 <float(,float,float)>
;sfFMathCos <float(,float)>
;sfFMathSin <float(,float)>
;sfFMathTan <float(,float)>
;sfFMathCosh <float(,float)>
;sfFMathSinh <float(,float)>
;sfFMathTanh <float(,float)>
;sfFMathExp <float(,float)>
;sfFMathFrExp <float(,float,*int)>
;sfFMathLdExp <float(,float,int)>
;sfFMathLog <float(,float)>
;sfFMathLog10 <float(,float)>
;sfFMathModf <float(,float,*float)>
;sfFMathPow <float(,float,float)>
;sfFMathSqrt <float(,float)>
;sfFMathCeil <float(,float)>
;sfFMathFAbs <float(,float)>
;sfFMathFloor <float(,float)>
;sfFMathFMod <float(,float,float)>
;sfWaitFrame <void(,int)>
[3:348] ;sfWaitFrameOut( frame + svFrameCount );
VBC5_PUSH_CONST 17 | 0x80000000 //import func index sfWaitFrameOut
VBC2_PUSH_LOCAL 2 //frame
VBC3_PUSH_GLOBAL 1 //svFrameCount
VBC1_ADD
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[2:10] ;
VBC1_RETURN
;setup <void()>
[1:112] ;orderFromHead = 0;
VBC2_PUSH_CONST 4 //orderFromHead
VBC1_PUSH_0 
VBC1_POP
[1:113] ;rotationFromHead = 0;
VBC2_PUSH_CONST 5 //rotationFromHead
VBC1_PUSH_0 
VBC1_POP_CF
[1:114] ;imu_factor = -1;
VBC2_PUSH_CONST 19 //imu_factor
VBC2_PUSH_CONST -1 // -
VBC1_POP_CF
[1:115] ;vision_factor = 1;
VBC2_PUSH_CONST 20 //vision_factor
VBC1_PUSH_1 
VBC1_POP_CF
[1:116] ;flag_event = 0;
VBC2_PUSH_CONST 74 //flag_event
VBC1_PUSH_0 
VBC1_POP
[1:117] ;cycle_number = 1000;
VBC2_PUSH_CONST 8 //cycle_number
VBC3_PUSH_CONST 1000 
VBC1_POP
[1:118] ;rotationYieldRight = 0.23;
VBC2_PUSH_CONST 38 //rotationYieldRight
VBC5_PUSH_CONST 1047233823 
VBC1_POP
[1:119] ;rotationYieldLeft = 0.23;
VBC2_PUSH_CONST 39 //rotationYieldLeft
VBC5_PUSH_CONST 1047233823 
VBC1_POP
[1:121] ;svIkA5 = 40.2; 
VBC3_PUSH_CONST 1215 //svIkA5
VBC5_PUSH_CONST 1109445837 
VBC1_POP
[1:122] ;svIkB5 = 0;    
VBC3_PUSH_CONST 1216 //svIkB5
VBC1_PUSH_0 
VBC1_POP_CF
[1:123] ;svIkC5 = 0;    
VBC3_PUSH_CONST 1217 //svIkC5
VBC1_PUSH_0 
VBC1_POP_CF
[1:124] ;svIkA6 = 0;    
VBC3_PUSH_CONST 1218 //svIkA6
VBC1_PUSH_0 
VBC1_POP_CF
[1:125] ;svIkA7 = 99;   
VBC3_PUSH_CONST 1219 //svIkA7
VBC2_PUSH_CONST 99 
VBC1_POP_CF
[1:126] ;svIkA8 = 99;   
VBC3_PUSH_CONST 1220 //svIkA8
VBC2_PUSH_CONST 99 
VBC1_POP_CF
[1:127] ;svIkA9 = 0;    
VBC3_PUSH_CONST 1221 //svIkA9
VBC1_PUSH_0 
VBC1_POP_CF
[1:128] ;svIkA10 = 13.7;  
VBC3_PUSH_CONST 1222 //svIkA10
VBC5_PUSH_CONST 1096495923 
VBC1_POP
[1:129] ;svIkB10 = 23.8;  
VBC3_PUSH_CONST 1223 //svIkB10
VBC5_PUSH_CONST 1102997094 
VBC1_POP
[1:130] ;svIkC10 = 0;   
VBC3_PUSH_CONST 1224 //svIkC10
VBC1_PUSH_0 
VBC1_POP_CF
[1:132] ;e10 = 55;      
VBC2_PUSH_CONST 58 //e10
VBC2_PUSH_CONST 55 
VBC1_POP_CF
[1:133] ;d10 = 62;      
VBC2_PUSH_CONST 59 //d10
VBC2_PUSH_CONST 62 
VBC1_POP_CF
[1:136] ;svIkLimA5min = -90 * 0.017453293;
VBC3_PUSH_CONST 1225 //svIkLimA5min
VBC5_PUSH_CONST -1077342245 
VBC1_POP
[1:137] ;svIkLimA5max = 90 * 0.017453293;
VBC3_PUSH_CONST 1226 //svIkLimA5max
VBC5_PUSH_CONST 1070141403 
VBC1_POP
[1:140] ;svIkLimA6min = -108 * 0.017453293;
VBC3_PUSH_CONST 1227 //svIkLimA6min
VBC5_PUSH_CONST -1074706887 
VBC1_POP
[1:141] ;svIkLimA6max = 15 * 0.017453293;
VBC3_PUSH_CONST 1228 //svIkLimA6max
VBC5_PUSH_CONST 1048971922 
VBC1_POP
[1:143] ;svIkLimA7min = -130 * 0.017453293;
VBC3_PUSH_CONST 1229 //svIkLimA7min
VBC5_PUSH_CONST -1072613858 
VBC1_POP
[1:144] ;svIkLimA7max = 50 * 0.017453293;
VBC3_PUSH_CONST 1230 //svIkLimA7max
VBC5_PUSH_CONST 1063216883 
VBC1_POP
[1:147] ;svIkLimA8min = -180 * 0.017453293;
VBC3_PUSH_CONST 1231 //svIkLimA8min
VBC5_PUSH_CONST -1068953637 
VBC1_POP
[1:148] ;svIkLimA8max = 8 * 0.017453293;
VBC3_PUSH_CONST 1232 //svIkLimA8max
VBC5_PUSH_CONST 1041168949 
VBC1_POP
[1:151] ;svIkLimA9min = -45 * 0.017453293;
VBC3_PUSH_CONST 1233 //svIkLimA9min
VBC5_PUSH_CONST -1085730853 
VBC1_POP
[1:152] ;svIkLimA9max = 78 * 0.017453293;
VBC3_PUSH_CONST 1234 //svIkLimA9max
VBC5_PUSH_CONST 1068384497 
VBC1_POP
[1:155] ;svIkLimA10min = -24 * 0.017453293;
VBC3_PUSH_CONST 1235 //svIkLimA10min
VBC5_PUSH_CONST -1093241008 
VBC1_POP
[1:156] ;svIkLimA10max = 24 * 0.017453293;
VBC3_PUSH_CONST 1236 //svIkLimA10max
VBC5_PUSH_CONST 1054242640 
VBC1_POP
[1:157] ;sfIkSetup();
VBC5_PUSH_CONST 200 | 0x80000000 //import func index sfIkSetup
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:159] ;framestep = 2;
VBC2_PUSH_CONST 40 //framestep
VBC1_PUSH_2 
VBC1_POP
[1:163] ;selfMotionShiftCorrectionX = 0.0;
VBC2_PUSH_CONST 25 //selfMotionShiftCorrectionX
VBC1_PUSH_0 
VBC1_POP
[1:164] ;selfMotionShiftCorrectionY = 0.0;
VBC2_PUSH_CONST 26 //selfMotionShiftCorrectionY
VBC1_PUSH_0 
VBC1_POP
[1:168] ;ztr0 = -(svIkC5+svIkA6+svIkA7+svIkA8+svIkA9+svIkB10 - 1); 
VBC2_PUSH_CONST 66 //ztr0
VBC3_PUSH_GLOBAL 1217 //svIkC5
VBC3_PUSH_GLOBAL 1218 //svIkA6
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1219 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1220 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1221 //svIkA9
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1223 //svIkB10
VBC1_ADD_FF
VBC1_PUSH_1 
VBC1_SUB_FI
VBC1_NEG_F
VBC1_POP
[1:169] ;ztl0 = -(svIkC5+svIkA6+svIkA7+svIkA8+svIkA9+svIkB10 - 1); 
VBC2_PUSH_CONST 67 //ztl0
VBC3_PUSH_GLOBAL 1217 //svIkC5
VBC3_PUSH_GLOBAL 1218 //svIkA6
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1219 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1220 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1221 //svIkA9
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1223 //svIkB10
VBC1_ADD_FF
VBC1_PUSH_1 
VBC1_SUB_FI
VBC1_NEG_F
VBC1_POP
[1:171] ;zr = zl = -1;
VBC2_PUSH_CONST 47 //zr
VBC2_PUSH_CONST 55 //zl
VBC2_PUSH_CONST -1 // -
VBC1_STORE_CF
VBC1_POP
[1:174] ;selfInitPoses = 10;
VBC2_PUSH_CONST 34 //selfInitPoses
VBC2_PUSH_CONST 10 
VBC1_POP
[1:177] ;stepLength = 0.0;    
VBC2_PUSH_CONST 22 //stepLength
VBC1_PUSH_0 
VBC1_POP
[1:178] ;sideLength = 0.0;    
VBC2_PUSH_CONST 23 //sideLength
VBC1_PUSH_0 
VBC1_POP
[1:179] ;rotation = 0;        
VBC2_PUSH_CONST 24 //rotation
VBC1_PUSH_0 
VBC1_POP_CF
[1:180] ;selfFirstLegIsRightLeg = 1; 
VBC2_PUSH_CONST 31 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_POP
[1:181] ;motion_to_right = 1;
VBC2_PUSH_CONST 32 //motion_to_right
VBC1_PUSH_1 
VBC1_POP
[1:182] ;side_motion = 0.0;
VBC2_PUSH_CONST 33 //side_motion
VBC1_PUSH_0 
VBC1_POP
[1:183] ;selfInitPoses = 20; 
VBC2_PUSH_CONST 34 //selfInitPoses
VBC2_PUSH_CONST 20 
VBC1_POP
[1:185] ;stepZtr = (ztr0 + gaitHeight) / selfInitPoses;
VBC2_PUSH_CONST 68 //stepZtr
VBC3_PUSH_GLOBAL 66 //ztr0
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_ADD_FI
VBC3_PUSH_GLOBAL 34 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:186] ;stepZtl = (ztl0 + gaitHeight) / selfInitPoses;
VBC2_PUSH_CONST 69 //stepZtl
VBC3_PUSH_GLOBAL 67 //ztl0
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_ADD_FI
VBC3_PUSH_GLOBAL 34 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:188] ;solyLandingSkew = 0.00;
VBC2_PUSH_CONST 17 //solyLandingSkew
VBC1_PUSH_0 
VBC1_POP
[1:190] ;tors_angle = 0;     
VBC2_PUSH_CONST 76 //tors_angle
VBC1_PUSH_0 
VBC1_POP_CF
[1:192] ;stepYtr = amplitude / 2.0 / selfInitPoses;
VBC2_PUSH_CONST 70 //stepYtr
VBC3_PUSH_GLOBAL 60 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 34 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:193] ;stepYtl = amplitude / 2.0 / selfInitPoses;
VBC2_PUSH_CONST 71 //stepYtl
VBC3_PUSH_GLOBAL 60 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 34 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:198] ;alpha01 = 3.141592654;
VBC2_PUSH_CONST 61 //alpha01
VBC5_PUSH_CONST 1078530011 
VBC1_POP
[1:199] ;if( fr1 != 0 )
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_PUSH_0 
VBC1_NOT_EQU
VBC4_FALSE_JUMP LAB511 //if to false
;alpha01 = alpha01 * 2 / fr1;
VBC2_PUSH_CONST 61 //alpha01
VBC3_PUSH_GLOBAL 61 //alpha01
VBC1_PUSH_2 
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_DIV_FI
VBC1_POP
LAB511: //if else
[1:207] ;timeStep = 1;
VBC2_PUSH_CONST 3 //timeStep
VBC1_PUSH_1 
VBC1_POP
[1:209] ;reducer = 0.5;
VBC2_PUSH_CONST 77 //reducer
VBC5_PUSH_CONST 1056964608 
VBC1_POP
[1:211] ;stepLengthOrder = 60;
VBC2_PUSH_CONST 10 //stepLengthOrder
VBC2_PUSH_CONST 60 
VBC1_POP
[1:212] ;ugol_torsa = 0.7;  	
VBC2_PUSH_CONST 18 //ugol_torsa
VBC5_PUSH_CONST 1060320051 
VBC1_POP
[1:213] ;bodyTiltAtWalk = 0.055;
VBC2_PUSH_CONST 16 //bodyTiltAtWalk
VBC5_PUSH_CONST 1029785518 
VBC1_POP
[1:214] ;hipTilt = 0;
VBC2_PUSH_CONST 9 //hipTilt
VBC1_PUSH_0 
VBC1_POP
[1:215] ;gaitHeight = 180; 
VBC2_PUSH_CONST 14 //gaitHeight
VBC3_PUSH_CONST 180 
VBC1_POP
[1:216] ;stepHeight = 40; 
VBC2_PUSH_CONST 15 //stepHeight
VBC2_PUSH_CONST 40 
VBC1_POP
[1:217] ;fps = 4;
VBC2_PUSH_CONST 11 //fps
VBC2_PUSH_CONST 4 
VBC1_POP
[1:218] ;fr1 = 4;           
VBC2_PUSH_CONST 12 //fr1
VBC2_PUSH_CONST 4 
VBC1_POP
[1:219] ;fr2 = 6;          
VBC2_PUSH_CONST 13 //fr2
VBC2_PUSH_CONST 6 
VBC1_POP
[1:220] ;amplitude = 32;    
VBC2_PUSH_CONST 60 //amplitude
VBC2_PUSH_CONST 32 
VBC1_POP_CF
[1:222] ;if (timeStep == 1){
VBC3_PUSH_GLOBAL 3 //timeStep
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB645 //if to false
;
[1:223] ;stepLengthOrder = 30;
VBC2_PUSH_CONST 10 //stepLengthOrder
VBC2_PUSH_CONST 30 
VBC1_POP
[1:224] ;ugol_torsa = 0.3;
VBC2_PUSH_CONST 18 //ugol_torsa
VBC5_PUSH_CONST 1050253722 
VBC1_POP
[1:225] ;bodyTiltAtWalk = -0.02; 
VBC2_PUSH_CONST 16 //bodyTiltAtWalk
VBC5_PUSH_CONST -1130113270 // -
VBC1_POP
[1:226] ;hipTilt = 500;
VBC2_PUSH_CONST 9 //hipTilt
VBC3_PUSH_CONST 500 
VBC1_POP
[1:227] ;gaitHeight = 135;
VBC2_PUSH_CONST 14 //gaitHeight
VBC3_PUSH_CONST 135 
VBC1_POP
[1:228] ;stepHeight = 35;
VBC2_PUSH_CONST 15 //stepHeight
VBC2_PUSH_CONST 35 
VBC1_POP
[1:229] ;fps = 2;
VBC2_PUSH_CONST 11 //fps
VBC1_PUSH_2 
VBC1_POP
[1:230] ;fr1 = 4;           
VBC2_PUSH_CONST 12 //fr1
VBC2_PUSH_CONST 4 
VBC1_POP
[1:231] ;fr2 = 9;          
VBC2_PUSH_CONST 13 //fr2
VBC2_PUSH_CONST 9 
VBC1_POP
[1:232] ;amplitude = 40;    
VBC2_PUSH_CONST 60 //amplitude
VBC2_PUSH_CONST 40 
VBC1_POP_CF
LAB645: //if else
[1:242] ;
VBC1_RETURN
;sitToStart <void(,int)>
[1:247] ;frameCount = 80;
VBC2_PUSH_B_OFFSET 2 //frameCount
VBC2_PUSH_CONST 80 
VBC1_POP
[1:248] ;sfPoseGroup( 33554432 , 700, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 33554432 
VBC3_PUSH_CONST 700 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:249] ;sfPoseGroup( 4 , 1370, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 4 
VBC3_PUSH_CONST 1370 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:250] ;sfPoseGroup( 8 , 1370, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 8 
VBC3_PUSH_CONST 1370 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:251] ;sfPoseGroup( 64 , 700, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 64 
VBC3_PUSH_CONST 700 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:252] ;sfPoseGroup( 128 , 700, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 128 
VBC3_PUSH_CONST 700 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:253] ;sfPoseGroup( 256 , 4500, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 256 
VBC3_PUSH_CONST 4500 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:254] ;sfPoseGroup( 512 , 4500, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 512 
VBC3_PUSH_CONST 4500 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:255] ;sfPoseGroup( 4096 , 410, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 4096 
VBC3_PUSH_CONST 410 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:256] ;sfPoseGroup( 8192 , -174, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 8192 
VBC3_PUSH_CONST -174 // -
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:257] ;sfPoseGroup( 16384 , 4350, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 16384 
VBC3_PUSH_CONST 4350 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:258] ;sfPoseGroup( 32768 , 4240, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 32768 
VBC3_PUSH_CONST 4240 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:259] ;sfPoseGroup( 65536 , 4800, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 65536 
VBC3_PUSH_CONST 4800 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:260] ;sfPoseGroup( 131072 , 5400, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 131072 
VBC3_PUSH_CONST 5400 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:261] ;sfPoseGroup( 262144 , 2518, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 262144 
VBC3_PUSH_CONST 2518 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:262] ;sfPoseGroup( 524288 , 2550, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 524288 
VBC3_PUSH_CONST 2550 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:263] ;sfPoseGroup( 1048576 , 430, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_CONST 430 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:264] ;sfPoseGroup( 2097152 , -174, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_CONST -174 // -
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:265] ;sfPoseGroup( 67108864 , 2050, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 67108864 
VBC3_PUSH_CONST 2050 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:266] ;sfPoseGroup( 134217728 , 1380, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 134217728 
VBC3_PUSH_CONST 1380 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:267] ;sfWaitFrame( frameCount );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:268] ;sfFreeGroup( 65536 | 131072  );
VBC5_PUSH_CONST 50 | 0x80000000 //import func index sfFreeGroup
VBC4_PUSH_CONST 196608 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:271] ;
VBC1_RETURN
;stabilizeRotationByIMU <void()>
[1:273] ;sfQuaternionToEulerImu();
VBC5_PUSH_CONST 303 | 0x80000000 //import func index sfQuaternionToEulerImu
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:274] ;rotation = (forwardDirection - svEulerYaw) * 1.1;
VBC2_PUSH_CONST 24 //rotation
VBC3_PUSH_GLOBAL 79 //forwardDirection
VBC3_PUSH_GLOBAL 1025 //svEulerYaw
VBC1_SUB_FF
VBC5_PUSH_CONST 1066192077 
VBC1_MUL_FF
VBC1_POP
[1:275] ;if( rotation > 3.141592654 ) rotation -= 2 * 3.141592654;
VBC3_PUSH_GLOBAL 24 //rotation
VBC5_PUSH_CONST 1078530011 
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB1011 //if to false
;if( rotation > 3.141592654 ) rotation -= 2 * 3.141592654;
VBC2_PUSH_CONST 24 //rotation
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1086918619 
VBC1_SUB_FF
VBC1_POP
LAB1011: //if else
[1:276] ;if( rotation < -3.141592654 ) rotation += 2 * 3.141592654;
VBC3_PUSH_GLOBAL 24 //rotation
VBC5_PUSH_CONST -1068953637 // -
VBC1_LESS_FF
VBC4_FALSE_JUMP LAB1035 //if to false
;if( rotation < -3.141592654 ) rotation += 2 * 3.141592654;
VBC2_PUSH_CONST 24 //rotation
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1086918619 
VBC1_ADD_FF
VBC1_POP
LAB1035: //if else
[1:278] ;if (orderFromHead != 0) correctedRotation = vision_factor * rotationFromHead;
VBC3_PUSH_GLOBAL 4 //orderFromHead
VBC1_PUSH_0 
VBC1_NOT_EQU
VBC4_FALSE_JUMP LAB1058 //if to false
;if (orderFromHead != 0) correctedRotation = vision_factor * rotationFromHead;
VBC2_PUSH_CONST 80 //correctedRotation
VBC3_PUSH_GLOBAL 20 //vision_factor
VBC3_PUSH_GLOBAL 5 //rotationFromHead
VBC1_MUL_FF
VBC1_POP
VBC4_JUMP LAB1068 //if to exit
LAB1058: //if else
;else correctedRotation = imu_factor * rotation;
VBC2_PUSH_CONST 80 //correctedRotation
VBC3_PUSH_GLOBAL 19 //imu_factor
VBC3_PUSH_GLOBAL 24 //rotation
VBC1_MUL_FF
VBC1_POP
LAB1068: //if exit
[1:280] ;if (correctedRotation > 0.5) correctedRotation = 0.5;
VBC3_PUSH_GLOBAL 80 //correctedRotation
VBC5_PUSH_CONST 1056964608 
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB1089 //if to false
;if (correctedRotation > 0.5) correctedRotation = 0.5;
VBC2_PUSH_CONST 80 //correctedRotation
VBC5_PUSH_CONST 1056964608 
VBC1_POP
LAB1089: //if else
[1:281] ;if (correctedRotation < -0.5) correctedRotation = -0.5;
VBC3_PUSH_GLOBAL 80 //correctedRotation
VBC5_PUSH_CONST -1090519040 // -
VBC1_LESS_FF
VBC4_FALSE_JUMP LAB1110 //if to false
;if (correctedRotation < -0.5) correctedRotation = -0.5;
VBC2_PUSH_CONST 80 //correctedRotation
VBC5_PUSH_CONST -1090519040 // -
VBC1_POP
LAB1110: //if else
[1:286] ;
VBC1_RETURN
;computeAlphaForWalk <int()>
[1:290] ;flag = 0;
VBC2_PUSH_CONST 73 //flag
VBC1_PUSH_0 
VBC1_POP
[1:291] ;torsoAdd = tors_angle * 2607.594587 ;
VBC2_PUSH_CONST 78 //torsoAdd
VBC3_PUSH_GLOBAL 76 //tors_angle
VBC5_PUSH_CONST 1159920003 
VBC1_MUL_FF
VBC1_POP_CI
[1:305] ;sfIkAngle( xtr, ytr, ztr, xr, yr, zr, wr );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 42 //xtr
VBC3_PUSH_GLOBAL 43 //ytr
VBC3_PUSH_GLOBAL 44 //ztr
VBC3_PUSH_GLOBAL 45 //xr
VBC3_PUSH_GLOBAL 46 //yr
VBC3_PUSH_GLOBAL 47 //zr
VBC3_PUSH_GLOBAL 48 //wr
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
[1:306] ;if( svIkOutPresent ) {
VBC3_PUSH_GLOBAL 1237 //svIkOutPresent
VBC4_FALSE_JUMP LAB1530 //if to false
;
[1:307] ;flag = flag + 1;
VBC2_PUSH_CONST 73 //flag
VBC3_PUSH_GLOBAL 73 //flag
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
[1:309] ;if (selfFirstLegIsRightLeg == 1){
VBC3_PUSH_GLOBAL 31 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB1356 //if to false
;
[1:310] ;sfPoseGroupLin( 1024 , -(svIkEncA5 - torsoAdd), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC3_PUSH_GLOBAL 78 //torsoAdd
VBC1_SUB
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:311] ;sfPoseGroupLin( 4096 , -svIkEncA6, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:312] ;sfPoseGroupLin( 16384 , -svIkEncA7 + hipTilt, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 9 //hipTilt
VBC1_ADD
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:313] ;sfPoseGroupLin( 65536 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:314] ;sfPoseGroupLin( 67108864 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 67108864 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:315] ;sfPoseGroupLin( 262144 , svIkEncA9, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:316] ;sfPoseGroupLin( 1048576 , -svIkEncA10, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:317] ;sfPoseGroupLin( 2 , -torsoAdd, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 78 //torsoAdd
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:318] ;sfPoseGroupLin( 4 , (1400 - xtl * 30), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_CONST 4 
VBC3_PUSH_CONST 1400 
VBC3_PUSH_GLOBAL 50 //xtl
VBC2_PUSH_CONST 30 
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB1530 //if to exit
LAB1356: //if else
;
[1:321] ;sfPoseGroupLin( 2048 , (svIkEncA5 - tors_angle), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC3_PUSH_GLOBAL 76 //tors_angle
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:322] ;sfPoseGroupLin( 8192 , -svIkEncA6, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:323] ;sfPoseGroupLin( 32768 , -svIkEncA7 + hipTilt, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 9 //hipTilt
VBC1_ADD
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:324] ;sfPoseGroupLin( 131072 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:325] ;sfPoseGroupLin( 134217728 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 134217728 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:326] ;sfPoseGroupLin( 524288 , svIkEncA9, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:327] ;sfPoseGroupLin( 2097152 , -svIkEncA10, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:328] ;sfPoseGroupLin(2 , -torsoAdd, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 78 //torsoAdd
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:329] ;sfPoseGroupLin( 8 , (1400 - xtr * 30), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_CONST 8 
VBC3_PUSH_CONST 1400 
VBC3_PUSH_GLOBAL 42 //xtr
VBC2_PUSH_CONST 30 
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB1530: //if exit
LAB1530: //if else
[1:335] ;sfIkAngle( xtl, -ytl, ztl, xl, -yl, zl, wl );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 50 //xtl
VBC3_PUSH_GLOBAL 51 //ytl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 52 //ztl
VBC3_PUSH_GLOBAL 53 //xl
VBC3_PUSH_GLOBAL 54 //yl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 55 //zl
VBC3_PUSH_GLOBAL 56 //wl
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
[1:346] ;if( svIkOutPresent ) {
VBC3_PUSH_GLOBAL 1237 //svIkOutPresent
VBC4_FALSE_JUMP LAB1905 //if to false
;
[1:347] ;flag = flag + 1;
VBC2_PUSH_CONST 73 //flag
VBC3_PUSH_GLOBAL 73 //flag
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
[1:349] ;if (selfFirstLegIsRightLeg == 1){
VBC3_PUSH_GLOBAL 31 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB1747 //if to false
;
[1:350] ;sfPoseGroupLin( 2048 , -(svIkEncA5 + torsoAdd), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC3_PUSH_GLOBAL 78 //torsoAdd
VBC1_ADD
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:351] ;sfPoseGroupLin( 8192 , -svIkEncA6, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:352] ;sfPoseGroupLin( 32768 , -svIkEncA7 + hipTilt, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 9 //hipTilt
VBC1_ADD
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:353] ;sfPoseGroupLin( 131072 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:354] ;sfPoseGroupLin( 134217728 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 134217728 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:355] ;sfPoseGroupLin( 524288 , svIkEncA9, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:356] ;sfPoseGroupLin( 2097152 , -svIkEncA10, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:357] ;sfPoseGroupLin( 8 , (1400 - xtr * 30), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_CONST 8 
VBC3_PUSH_CONST 1400 
VBC3_PUSH_GLOBAL 42 //xtr
VBC2_PUSH_CONST 30 
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB1905 //if to exit
LAB1747: //if else
;
[1:360] ;sfPoseGroupLin( 1024 , (svIkEncA5 - tors_angle), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC3_PUSH_GLOBAL 76 //tors_angle
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:361] ;sfPoseGroupLin( 4096 , -svIkEncA6, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:362] ;sfPoseGroupLin( 16384 , -svIkEncA7 + hipTilt, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 9 //hipTilt
VBC1_ADD
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:363] ;sfPoseGroupLin( 65536 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:364] ;sfPoseGroupLin( 67108864 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 67108864 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:365] ;sfPoseGroupLin( 262144 , svIkEncA9, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:366] ;sfPoseGroupLin( 1048576 , -svIkEncA10, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:367] ;sfPoseGroupLin( 4 , (1400 - xtl * 30), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_CONST 4 
VBC3_PUSH_CONST 1400 
VBC3_PUSH_GLOBAL 50 //xtl
VBC2_PUSH_CONST 30 
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB1905: //if exit
LAB1905: //if else
[1:371] ;sfWaitFrame( timeStep );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 3 //timeStep
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:372] ;if (flag < 2) flag_event = flag_event + 1;
VBC3_PUSH_GLOBAL 73 //flag
VBC1_PUSH_2 
VBC1_LESS
VBC4_FALSE_JUMP LAB1929 //if to false
;if (flag < 2) flag_event = flag_event + 1;
VBC2_PUSH_CONST 74 //flag_event
VBC3_PUSH_GLOBAL 74 //flag_event
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
LAB1929: //if else
[1:373] ;return 1;
VBC1_PUSH_1 
VBC2_POP_RESULT 2
VBC1_RETURN
;computeAlphaForWalkFine <void(,int)>
[1:388] ;sfIkAngle( xtr, ytr, ztr, xr, yr, zr, wr );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 42 //xtr
VBC3_PUSH_GLOBAL 43 //ytr
VBC3_PUSH_GLOBAL 44 //ztr
VBC3_PUSH_GLOBAL 45 //xr
VBC3_PUSH_GLOBAL 46 //yr
VBC3_PUSH_GLOBAL 47 //zr
VBC3_PUSH_GLOBAL 48 //wr
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
[1:390] ;if( svIkOutPresent ) {
VBC3_PUSH_GLOBAL 1237 //svIkOutPresent
VBC4_FALSE_JUMP LAB2221 //if to false
;
[1:392] ;if (selfFirstLegIsRightLeg == 1){
VBC3_PUSH_GLOBAL 31 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB2101 //if to false
;
[1:393] ;sfPoseGroupLin( 1024 , -svIkEncA5, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:394] ;sfPoseGroupLin( 4096 , -svIkEncA6, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:395] ;sfPoseGroupLin( 16384 , -svIkEncA7, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:396] ;sfPoseGroupLin( 65536 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:397] ;sfPoseGroupLin( 67108864 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 67108864 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:398] ;sfPoseGroupLin( 262144 , svIkEncA9, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:399] ;sfPoseGroupLin( 1048576 , -svIkEncA10, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB2221 //if to exit
LAB2101: //if else
;
[1:402] ;sfPoseGroupLin( 2048 , svIkEncA5, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:403] ;sfPoseGroupLin( 8192 , -svIkEncA6, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:404] ;sfPoseGroupLin( 32768 , -svIkEncA7, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:405] ;sfPoseGroupLin( 131072 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:406] ;sfPoseGroupLin( 134217728 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 134217728 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:407] ;sfPoseGroupLin( 524288 , svIkEncA9, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:408] ;sfPoseGroupLin( 2097152 , -svIkEncA10, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB2221: //if exit
LAB2221: //if else
[1:414] ;sfIkAngle( xtl, -ytl, ztl, xl, -yl, zl, wl );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 50 //xtl
VBC3_PUSH_GLOBAL 51 //ytl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 52 //ztl
VBC3_PUSH_GLOBAL 53 //xl
VBC3_PUSH_GLOBAL 54 //yl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 55 //zl
VBC3_PUSH_GLOBAL 56 //wl
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
[1:415] ;if( svIkOutPresent ) {
VBC3_PUSH_GLOBAL 1237 //svIkOutPresent
VBC4_FALSE_JUMP LAB2511 //if to false
;
[1:417] ;if (selfFirstLegIsRightLeg == 1){
VBC3_PUSH_GLOBAL 31 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB2392 //if to false
;
[1:418] ;sfPoseGroupLin( 2048 , -svIkEncA5, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:419] ;sfPoseGroupLin( 8192 , -svIkEncA6, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:420] ;sfPoseGroupLin( 32768 , -svIkEncA7, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:421] ;sfPoseGroupLin( 131072 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:422] ;sfPoseGroupLin( 134217728 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 134217728 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:423] ;sfPoseGroupLin( 524288 , svIkEncA9, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:424] ;sfPoseGroupLin( 2097152 , -svIkEncA10, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB2511 //if to exit
LAB2392: //if else
;
[1:427] ;sfPoseGroupLin( 1024 , svIkEncA5, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:428] ;sfPoseGroupLin( 4096 , -svIkEncA6, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:429] ;sfPoseGroupLin( 16384 , -svIkEncA7, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:430] ;sfPoseGroupLin( 65536 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:431] ;sfPoseGroupLin( 67108864 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 67108864 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:432] ;sfPoseGroupLin( 262144 , svIkEncA9, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:433] ;sfPoseGroupLin( 1048576 , -svIkEncA10, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB2511: //if exit
LAB2511: //if else
[1:437] ;sfPoseGroupLin( 256  | 512 , 4540, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 768 
VBC3_PUSH_CONST 4540 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:438] ;sfPoseGroupLin( 4  | 8 , 1400, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_CONST 12 
VBC3_PUSH_CONST 1400 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:439] ;sfPoseGroupLin( 64  | 128 , 700, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 192 
VBC3_PUSH_CONST 700 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:440] ;sfWaitFrame( frameCount );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:443] ;
VBC1_RETURN
;standUp <void()>
[1:444] ;if (fallingFlag == 1) {  
VBC3_PUSH_GLOBAL 36 //fallingFlag
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB2936 //if to false
;
[1:446] ;frameCount = 10;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 10 
VBC1_POP
[1:447] ;sfPoseGroup(1056964607 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 1056964607 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:448] ;sfPoseGroup(256  | 512 , 5145, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 768 
VBC3_PUSH_CONST 5145 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:449] ;sfPoseGroup(4  | 8 , 384, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 12 
VBC3_PUSH_CONST 384 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:450] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:452] ;frameCount = 50;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 50 
VBC1_POP
[1:453] ;sfPoseGroup(262144  | 524288 , 3698, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 786432 
VBC3_PUSH_CONST 3698 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:454] ;sfPoseGroup(65536  | 131072 , 6144, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 196608 
VBC3_PUSH_CONST 6144 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:455] ;sfPoseGroup(16384  | 32768 , 6084, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 49152 
VBC3_PUSH_CONST 6084 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:456] ;sfPoseGroup(256  | 512 , 5836, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 768 
VBC3_PUSH_CONST 5836 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:457] ;sfPoseGroup(4  | 8 , 3087, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 12 
VBC3_PUSH_CONST 3087 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:458] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:460] ;frameCount = 10;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 10 
VBC1_POP
[1:461] ;sfPoseGroup(262144  | 524288 , 3072, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 786432 
VBC3_PUSH_CONST 3072 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:462] ;sfPoseGroup(16384  | 32768 , 5222, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 49152 
VBC3_PUSH_CONST 5222 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:463] ;sfPoseGroup(256  | 512 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 768 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:464] ;sfPoseGroup(4  | 8 , 3072, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 12 
VBC3_PUSH_CONST 3072 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:465] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:467] ;frameCount = 10;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 10 
VBC1_POP
[1:468] ;sfPoseGroup(262144  | 524288 , 2267, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 786432 
VBC3_PUSH_CONST 2267 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:469] ;sfPoseGroup(65536  | 131072 , 6144, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 196608 
VBC3_PUSH_CONST 6144 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:470] ;sfPoseGroup(16384  | 32768 , 5130, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 49152 
VBC3_PUSH_CONST 5130 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:471] ;sfPoseGroup(4  | 8 , 2304, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 12 
VBC3_PUSH_CONST 2304 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:472] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:474] ;frameCount = 50;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 50 
VBC1_POP
[1:475] ;sfPoseGroup(1056964607 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 1056964607 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:476] ;sfPoseGroup(256  | 512 , 5145, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 768 
VBC3_PUSH_CONST 5145 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:477] ;sfPoseGroup(4  | 8 , 384, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 12 
VBC3_PUSH_CONST 384 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:478] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB2936: //if else
[1:480] ;if (fallingFlag == -1) {  
VBC3_PUSH_GLOBAL 36 //fallingFlag
VBC2_PUSH_CONST -1 // -
VBC1_EQU
VBC4_FALSE_JUMP LAB3419 //if to false
;
[1:482] ;frameCount = 20;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 20 
VBC1_POP
[1:483] ;sfPoseGroup(1056964607 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 1056964607 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:484] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:486] ;frameCount = 30;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 30 
VBC1_POP
[1:487] ;sfPoseGroup(262144  | 524288 , 3532, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 786432 
VBC3_PUSH_CONST 3532 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:488] ;sfPoseGroup(65536  | 131072 , 5376, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 196608 
VBC3_PUSH_CONST 5376 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:489] ;sfPoseGroup(16384  | 32768 , -2457, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 49152 
VBC3_PUSH_CONST -2457 // -
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:490] ;sfPoseGroup(256  | 512 , 2150, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 768 
VBC3_PUSH_CONST 2150 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:491] ;sfPoseGroup(64  | 128 , -3072, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 192 
VBC3_PUSH_CONST -3072 // -
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:492] ;sfPoseGroup(16  | 32 , 7680, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 48 
VBC3_PUSH_CONST 7680 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:493] ;sfPoseGroup(4  | 8 , 2764, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 12 
VBC3_PUSH_CONST 2764 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:494] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:496] ;frameCount = 20;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 20 
VBC1_POP
[1:497] ;sfPoseGroup(65536  | 131072 , 3717, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 196608 
VBC3_PUSH_CONST 3717 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:498] ;sfPoseGroup(16384  | 32768 , -2274, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 49152 
VBC3_PUSH_CONST -2274 // -
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:499] ;sfPoseGroup(256  | 512 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 768 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:500] ;sfPoseGroup(4  | 8 , 4254, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 12 
VBC3_PUSH_CONST 4254 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:501] ;sfPoseGroup(33554432 , 4712, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 33554432 
VBC3_PUSH_CONST 4712 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:502] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:504] ;frameCount = 50;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 50 
VBC1_POP
[1:505] ;sfPoseGroup(1048576  | 2097152 , 102, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 3145728 
VBC2_PUSH_CONST 102 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:506] ;sfPoseGroup(262144  | 524288 , 1721, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 786432 
VBC3_PUSH_CONST 1721 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:507] ;sfPoseGroup(65536  | 131072 , 3445, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 196608 
VBC3_PUSH_CONST 3445 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:508] ;sfPoseGroup(16384  | 32768 , 1721, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 49152 
VBC3_PUSH_CONST 1721 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:509] ;sfPoseGroup(4096  | 8192 , 102, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 12288 
VBC2_PUSH_CONST 102 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:510] ;sfPoseGroup(256  | 512 , 4094, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 768 
VBC3_PUSH_CONST 4094 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:511] ;sfPoseGroup(64  | 128 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 192 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:512] ;sfPoseGroup(16  | 32 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 48 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:513] ;sfPoseGroup(4  | 8 , 399, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 12 
VBC3_PUSH_CONST 399 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:514] ;sfPoseGroup(33554432 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 33554432 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:515] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:517] ;frameCount = 10;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 10 
VBC1_POP
[1:518] ;sfPoseGroup(1056964607 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 1056964607 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:519] ;sfPoseGroup(256  | 512 , 5145, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 768 
VBC3_PUSH_CONST 5145 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:520] ;sfPoseGroup(4  | 8 , 384, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 12 
VBC3_PUSH_CONST 384 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:521] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB3419: //if else
[1:523] ;if (fallingFlag == 2) {  
VBC3_PUSH_GLOBAL 36 //fallingFlag
VBC1_PUSH_2 
VBC1_EQU
VBC4_FALSE_JUMP LAB3634 //if to false
;
[1:525] ;frameCount = 40;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 40 
VBC1_POP
[1:526] ;sfPoseGroup(1056964607 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 1056964607 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:527] ;sfPoseGroup(256 , 3072, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 256 
VBC3_PUSH_CONST 3072 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:528] ;sfPoseGroup(16 , 768, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 16 
VBC3_PUSH_CONST 768 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:529] ;sfPoseGroup(4 , -768, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 4 
VBC3_PUSH_CONST -768 // -
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:530] ;sfPoseGroup(512 , 3840, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 512 
VBC3_PUSH_CONST 3840 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:531] ;sfPoseGroup(32 , 3840, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 32 
VBC3_PUSH_CONST 3840 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:532] ;sfPoseGroup(8 , 3840, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 8 
VBC3_PUSH_CONST 3840 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:533] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:535] ;frameCount = 60;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 60 
VBC1_POP
[1:536] ;sfPoseGroup(256  | 512 , 3072, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 768 
VBC3_PUSH_CONST 3072 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:537] ;sfPoseGroup(16  | 32 , 307, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 48 
VBC3_PUSH_CONST 307 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:538] ;sfPoseGroup(4  | 8 , -1228, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 12 
VBC3_PUSH_CONST -1228 // -
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:539] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:541] ;frameCount = 20;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 20 
VBC1_POP
[1:542] ;sfPoseGroup(1056964607 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 1056964607 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:543] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB3634: //if else
[1:545] ;if (fallingFlag == -2) {  
VBC3_PUSH_GLOBAL 36 //fallingFlag
VBC2_PUSH_CONST -2 // -
VBC1_EQU
VBC4_FALSE_JUMP LAB3850 //if to false
;
[1:547] ;frameCount = 40;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 40 
VBC1_POP
[1:548] ;sfPoseGroup(1056964607 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 1056964607 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:549] ;sfPoseGroup(256 , 3840, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 256 
VBC3_PUSH_CONST 3840 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:550] ;sfPoseGroup(16 , 3840, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 16 
VBC3_PUSH_CONST 3840 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:551] ;sfPoseGroup(4 , 3840, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 4 
VBC3_PUSH_CONST 3840 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:552] ;sfPoseGroup(512 , 3072, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 512 
VBC3_PUSH_CONST 3072 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:553] ;sfPoseGroup(32 , 768, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 32 
VBC3_PUSH_CONST 768 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:554] ;sfPoseGroup(8 , -768, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 8 
VBC3_PUSH_CONST -768 // -
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:555] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:557] ;frameCount = 60;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 60 
VBC1_POP
[1:558] ;sfPoseGroup(256  | 512 , 3072, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 768 
VBC3_PUSH_CONST 3072 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:559] ;sfPoseGroup(16  | 32 , 307, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 48 
VBC3_PUSH_CONST 307 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:560] ;sfPoseGroup(4  | 8 , -1228, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 12 
VBC3_PUSH_CONST -1228 // -
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:561] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:563] ;frameCount = 20;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 20 
VBC1_POP
[1:564] ;sfPoseGroup(1056964607 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 1056964607 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:565] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB3850: //if else
[1:571] ;
VBC1_RETURN
;testDrop <void()>
[1:572] ;if( sfAbs(svImuAccX) > 50000 || sfAbs(svImuAccZ) > 50000 ) {
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 1000 //svImuAccX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC4_PUSH_CONST 50000 
VBC1_GREAT
VBC4_TRUE_JUMP_KEEP LAB3890
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 1002 //svImuAccZ
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC4_PUSH_CONST 50000 
VBC1_GREAT
VBC4_TRUE_JUMP_KEEP LAB3890
VBC1_PUSH_0
LAB3890:
VBC4_FALSE_JUMP LAB3961 //if to false
;
[1:574] ;if (svImuAccX > 5000) fallingFlag = 1; 
VBC3_PUSH_GLOBAL 1000 //svImuAccX
VBC3_PUSH_CONST 5000 
VBC1_GREAT
VBC4_FALSE_JUMP LAB3909 //if to false
;if (svImuAccX > 5000) fallingFlag = 1; 
VBC2_PUSH_CONST 36 //fallingFlag
VBC1_PUSH_1 
VBC1_POP
LAB3909: //if else
[1:575] ;if (svImuAccX < 5000) fallingFlag = -1; 
VBC3_PUSH_GLOBAL 1000 //svImuAccX
VBC3_PUSH_CONST 5000 
VBC1_LESS
VBC4_FALSE_JUMP LAB3925 //if to false
;if (svImuAccX < 5000) fallingFlag = -1; 
VBC2_PUSH_CONST 36 //fallingFlag
VBC2_PUSH_CONST -1 // -
VBC1_POP
LAB3925: //if else
[1:576] ;if (svImuAccZ > 5000) fallingFlag = 2; 
VBC3_PUSH_GLOBAL 1002 //svImuAccZ
VBC3_PUSH_CONST 5000 
VBC1_GREAT
VBC4_FALSE_JUMP LAB3940 //if to false
;if (svImuAccZ > 5000) fallingFlag = 2; 
VBC2_PUSH_CONST 36 //fallingFlag
VBC1_PUSH_2 
VBC1_POP
LAB3940: //if else
[1:577] ;if (svImuAccZ < 5000) fallingFlag = -2; 
VBC3_PUSH_GLOBAL 1002 //svImuAccZ
VBC3_PUSH_CONST 5000 
VBC1_LESS
VBC4_FALSE_JUMP LAB3956 //if to false
;if (svImuAccZ < 5000) fallingFlag = -2; 
VBC2_PUSH_CONST 36 //fallingFlag
VBC2_PUSH_CONST -2 // -
VBC1_POP
LAB3956: //if else
[1:583] ;standUp();
VBC3_PUSH_CONST 2562  //func address standUp
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB3961: //if else
[1:587] ;
VBC1_RETURN
;walkInitialPose <void()>
[1:592] ;xtr = xtl = 0;
VBC2_PUSH_CONST 42 //xtr
VBC2_PUSH_CONST 50 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:593] ;for( j = 0; j < selfInitPoses; j++ ) {
VBC2_PUSH_CONST 81 //j
VBC1_PUSH_0 
VBC1_POP
LAB3973: //for condition
VBC3_PUSH_GLOBAL 81 //j
VBC3_PUSH_GLOBAL 34 //selfInitPoses
VBC1_LESS
VBC4_FALSE_JUMP LAB4058 //to for exit
;
[1:595] ;ztr = ztr0 - j * stepZtr;
VBC2_PUSH_CONST 44 //ztr
VBC3_PUSH_GLOBAL 66 //ztr0
VBC3_PUSH_GLOBAL 81 //j
VBC3_PUSH_GLOBAL 68 //stepZtr
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:596] ;ztl = ztl0 - j * stepZtl;
VBC2_PUSH_CONST 52 //ztl
VBC3_PUSH_GLOBAL 67 //ztl0
VBC3_PUSH_GLOBAL 81 //j
VBC3_PUSH_GLOBAL 69 //stepZtl
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:597] ;ytr = -d10 - j * stepYtr;
VBC2_PUSH_CONST 43 //ytr
VBC3_PUSH_GLOBAL 59 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 81 //j
VBC3_PUSH_GLOBAL 70 //stepYtr
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:598] ;ytl =  d10 - j * stepYtl;
VBC2_PUSH_CONST 51 //ytl
VBC3_PUSH_GLOBAL 59 //d10
VBC3_PUSH_GLOBAL 81 //j
VBC3_PUSH_GLOBAL 71 //stepYtl
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:600] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 1111  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB4051 //if to false
;return;
VBC1_RETURN
LAB4051: //if else
LAB4051: //for step
VBC2_PUSH_CONST 81 //j
VBC1_INC
VBC4_JUMP LAB3973 //to condition
LAB4058: //for exit
[1:610] ;
VBC1_RETURN
;walkInitialPoseFine <void()>
[1:611] ;xtr = xtl = 0;
VBC2_PUSH_CONST 42 //xtr
VBC2_PUSH_CONST 50 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:612] ;ztr = ztl = -gaitHeight;
VBC2_PUSH_CONST 44 //ztr
VBC2_PUSH_CONST 52 //ztl
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC1_STORE_CF
VBC1_POP
[1:613] ;ytr = -d10 - amplitude / 2.0;
VBC2_PUSH_CONST 43 //ytr
VBC3_PUSH_GLOBAL 59 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 60 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:614] ;ytl =  d10 - amplitude / 2.0;
VBC2_PUSH_CONST 51 //ytl
VBC3_PUSH_GLOBAL 59 //d10
VBC3_PUSH_GLOBAL 60 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:615] ;computeAlphaForWalkFine( 80 );
VBC3_PUSH_CONST 1933  //func address computeAlphaForWalkFine
VBC2_PUSH_CONST 80 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:619] ;
VBC1_RETURN
;walkFinalPose <void()>
[1:620] ;for( j = 0; j < selfInitPoses; j++ ) {
VBC2_PUSH_CONST 81 //j
VBC1_PUSH_0 
VBC1_POP
LAB4121: //for condition
VBC3_PUSH_GLOBAL 81 //j
VBC3_PUSH_GLOBAL 34 //selfInitPoses
VBC1_LESS
VBC4_FALSE_JUMP LAB4224 //to for exit
;
[1:622] ;ztr = -gaitHeight + (j+1) * stepZtr;
VBC2_PUSH_CONST 44 //ztr
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 81 //j
VBC1_PUSH_1 
VBC1_ADD
VBC3_PUSH_GLOBAL 68 //stepZtr
VBC1_MUL_IF
VBC1_ADD_IF
VBC1_POP
[1:623] ;ztl = -gaitHeight + (j+1) * stepZtr;
VBC2_PUSH_CONST 52 //ztl
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 81 //j
VBC1_PUSH_1 
VBC1_ADD
VBC3_PUSH_GLOBAL 68 //stepZtr
VBC1_MUL_IF
VBC1_ADD_IF
VBC1_POP
[1:624] ;ytr = -d10 + (selfInitPoses - (j+1)) * stepYtr;
VBC2_PUSH_CONST 43 //ytr
VBC3_PUSH_GLOBAL 59 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 34 //selfInitPoses
VBC3_PUSH_GLOBAL 81 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_SUB
VBC3_PUSH_GLOBAL 70 //stepYtr
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:625] ;ytl =  d10 + (selfInitPoses - (j+1)) * stepYtl;
VBC2_PUSH_CONST 51 //ytl
VBC3_PUSH_GLOBAL 59 //d10
VBC3_PUSH_GLOBAL 34 //selfInitPoses
VBC3_PUSH_GLOBAL 81 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_SUB
VBC3_PUSH_GLOBAL 71 //stepYtl
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:627] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 1111  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB4217 //if to false
;return;
VBC1_RETURN
LAB4217: //if else
LAB4217: //for step
VBC2_PUSH_CONST 81 //j
VBC1_INC
VBC4_JUMP LAB4121 //to condition
LAB4224: //for exit
[1:638] ;
VBC1_RETURN
;walkFinalPoseFine <void()>
[1:639] ;xtr = xtl = 0;
VBC2_PUSH_CONST 42 //xtr
VBC2_PUSH_CONST 50 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:640] ;ztr = ztl = -(svIkC5+svIkA6+svIkA7+svIkA8+svIkA9+svIkB10 - 1);
VBC2_PUSH_CONST 44 //ztr
VBC2_PUSH_CONST 52 //ztl
VBC3_PUSH_GLOBAL 1217 //svIkC5
VBC3_PUSH_GLOBAL 1218 //svIkA6
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1219 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1220 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1221 //svIkA9
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1223 //svIkB10
VBC1_ADD_FF
VBC1_PUSH_1 
VBC1_SUB_FI
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:641] ;ytr = -d10;
VBC2_PUSH_CONST 43 //ytr
VBC3_PUSH_GLOBAL 59 //d10
VBC1_NEG_F
VBC1_POP
[1:642] ;ytl =  d10;
VBC2_PUSH_CONST 51 //ytl
VBC3_PUSH_GLOBAL 59 //d10
VBC1_POP
[1:643] ;computeAlphaForWalkFine( 40 );
VBC3_PUSH_CONST 1933  //func address computeAlphaForWalkFine
VBC2_PUSH_CONST 40 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:646] ;
VBC1_RETURN
;walkInit <void()>
[1:660] ;correctedStepLenght = stepLength + selfMotionShiftCorrectionX;
VBC2_PUSH_CONST 62 //correctedStepLenght
VBC3_PUSH_GLOBAL 22 //stepLength
VBC3_PUSH_GLOBAL 25 //selfMotionShiftCorrectionX
VBC1_ADD_FF
VBC1_POP
[1:661] ;correctedStepLenghtHalf = correctedStepLenght / 2;
VBC2_PUSH_CONST 63 //correctedStepLenghtHalf
VBC3_PUSH_GLOBAL 62 //correctedStepLenght
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_POP
[1:662] ;correctedSideLenght = sideLength - selfMotionShiftCorrectionY;
VBC2_PUSH_CONST 64 //correctedSideLenght
VBC3_PUSH_GLOBAL 23 //sideLength
VBC3_PUSH_GLOBAL 26 //selfMotionShiftCorrectionY
VBC1_SUB_FF
VBC1_POP
[1:663] ;correctedSideLenghtHalf = correctedSideLenght / 2;
VBC2_PUSH_CONST 65 //correctedSideLenghtHalf
VBC3_PUSH_GLOBAL 64 //correctedSideLenght
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_POP
[1:669] ;stepRotation = correctedRotation / (fr2 - 2.0) * 2;
VBC2_PUSH_CONST 93 //stepRotation
VBC3_PUSH_GLOBAL 80 //correctedRotation
VBC3_PUSH_GLOBAL 13 //fr2
VBC5_PUSH_CONST 1073741824 
VBC1_SUB_IF
VBC1_DIV_FF
VBC1_PUSH_2 
VBC1_MUL_FI
VBC1_POP
[1:671] ;dx0Typical = correctedStepLenght / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 84 //dx0Typical
VBC3_PUSH_GLOBAL 62 //correctedStepLenght
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_POP
[1:672] ;dy0Typical = correctedSideLenght / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 85 //dy0Typical
VBC3_PUSH_GLOBAL 64 //correctedSideLenght
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_POP
[1:673] ;dobavka_x_ot_torsa = svIkA5 * 2.0 * sfMathSin(ugol_torsa) / fr2;
VBC2_PUSH_CONST 75 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC5_PUSH_CONST 1073741824 
VBC1_MUL_FF
VBC5_PUSH_CONST 301 | 0x80000000 //import func index sfMathSin
//alloc addon amount for result
VBC3_PUSH_GLOBAL 18 //ugol_torsa
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_DIV_FI
VBC1_POP
[1:675] ;xr = xl = bodyTiltAtWalk;
VBC2_PUSH_CONST 45 //xr
VBC2_PUSH_CONST 53 //xl
VBC3_PUSH_GLOBAL 16 //bodyTiltAtWalk
VBC1_STORE
VBC1_POP
[1:676] ;yl =  solyLandingSkew;
VBC2_PUSH_CONST 54 //yl
VBC3_PUSH_GLOBAL 17 //solyLandingSkew
VBC1_POP
[1:677] ;yr = -solyLandingSkew;
VBC2_PUSH_CONST 46 //yr
VBC3_PUSH_GLOBAL 17 //solyLandingSkew
VBC1_NEG_F
VBC1_POP
[1:678] ;fase_offset = 0.7; 
VBC2_PUSH_CONST 87 //fase_offset
VBC5_PUSH_CONST 1060320051 
VBC1_POP
[1:679] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 964  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:684] ;
VBC1_RETURN
;walkPhasa1 <void()>
[1:685] ;ztl = ztr = -gaitHeight;
VBC2_PUSH_CONST 52 //ztl
VBC2_PUSH_CONST 44 //ztr
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC1_STORE_CF
VBC1_POP
[1:686] ;xtl_plan = correctedStepLenght * (0.5 - fr1 / (2.0 * fr1 + fr2)) - dobavka_x_ot_torsa * fr1 * fr2 / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 94 //xtl_plan
VBC3_PUSH_GLOBAL 62 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 12 //fr1
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD_FI
VBC1_DIV_IF
VBC1_SUB_FF
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 75 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_MUL_FI
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:687] ;for( j = 0; j < fr1; j ++ ) {
VBC2_PUSH_CONST 81 //j
VBC1_PUSH_0 
VBC1_POP
LAB4512: //for condition
VBC3_PUSH_GLOBAL 81 //j
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_LESS
VBC4_FALSE_JUMP LAB4654 //to for exit
;
[1:689] ;s = (amplitude / 2 + correctedSideLenghtHalf) * sfMathCos(alpha01 * (j / 2 + fase_offset * framestep));
VBC2_PUSH_CONST 86 //s
VBC3_PUSH_GLOBAL 60 //amplitude
VBC1_PUSH_2 
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 65 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 61 //alpha01
VBC3_PUSH_GLOBAL 81 //j
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 87 //fase_offset
VBC3_PUSH_GLOBAL 40 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_MUL_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_MUL_FF
VBC1_POP
[1:690] ;ytr = s - d10 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 43 //ytr
VBC3_PUSH_GLOBAL 86 //s
VBC3_PUSH_GLOBAL 59 //d10
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 65 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
[1:691] ;ytl = s + d10 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 51 //ytl
VBC3_PUSH_GLOBAL 86 //s
VBC3_PUSH_GLOBAL 59 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 65 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
[1:692] ;if( stepType == 0 ) continue;
VBC3_PUSH_GLOBAL 72 //stepType
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB4601 //if to false
;if( stepType == 0 ) continue;
VBC4_JUMP LAB4647 //to loop condition
LAB4601: //if else
[1:693] ;dx1 = (xtl_plan - xtl) / (fr1 - j);
VBC2_PUSH_CONST 90 //dx1
VBC3_PUSH_GLOBAL 94 //xtl_plan
VBC3_PUSH_GLOBAL 50 //xtl
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 12 //fr1
VBC3_PUSH_GLOBAL 81 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:694] ;xtr += dx1;
VBC2_PUSH_CONST 42 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 90 //dx1
VBC1_ADD_FF
VBC1_POP
[1:695] ;xtl += dx1;
VBC2_PUSH_CONST 50 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 90 //dx1
VBC1_ADD_FF
VBC1_POP
[1:697] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 1111  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB4647 //if to false
;return;
VBC1_RETURN
LAB4647: //if else
LAB4647: //for step
VBC2_PUSH_CONST 81 //j
VBC1_INC
VBC4_JUMP LAB4512 //to condition
LAB4654: //for exit
[1:704] ;
VBC1_RETURN
;walkPhasa3 <void()>
[1:705] ;ztl = ztr = -gaitHeight;
VBC2_PUSH_CONST 52 //ztl
VBC2_PUSH_CONST 44 //ztr
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC1_STORE_CF
VBC1_POP
[1:706] ;xtr_plan = correctedStepLenght * (0.5 - fr1 / (2.0 * fr1 + fr2)) - dobavka_x_ot_torsa * fr1 * fr2 / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 95 //xtr_plan
VBC3_PUSH_GLOBAL 62 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 12 //fr1
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD_FI
VBC1_DIV_IF
VBC1_SUB_FF
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 75 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_MUL_FI
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:707] ;for( j = 0; j < fr1; j ++ ) {
VBC2_PUSH_CONST 81 //j
VBC1_PUSH_0 
VBC1_POP
LAB4725: //for condition
VBC3_PUSH_GLOBAL 81 //j
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_LESS
VBC4_FALSE_JUMP LAB4858 //to for exit
;
[1:709] ;s = (amplitude / 2 + correctedSideLenghtHalf) * sfMathCos(alpha01 * ((j -fr2) / 2 + fase_offset * framestep));
VBC2_PUSH_CONST 86 //s
VBC3_PUSH_GLOBAL 60 //amplitude
VBC1_PUSH_2 
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 65 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 61 //alpha01
VBC3_PUSH_GLOBAL 81 //j
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_SUB
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 87 //fase_offset
VBC3_PUSH_GLOBAL 40 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_MUL_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_MUL_FF
VBC1_POP
[1:710] ;ytr = s - d10 - correctedSideLenghtHalf; 
VBC2_PUSH_CONST 43 //ytr
VBC3_PUSH_GLOBAL 86 //s
VBC3_PUSH_GLOBAL 59 //d10
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 65 //correctedSideLenghtHalf
VBC1_SUB_FF
VBC1_POP
[1:711] ;ytl = s + d10 + correctedSideLenghtHalf; 
VBC2_PUSH_CONST 51 //ytl
VBC3_PUSH_GLOBAL 86 //s
VBC3_PUSH_GLOBAL 59 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 65 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
[1:712] ;dx1 = (xtr_plan - xtr) / (fr1 - j);
VBC2_PUSH_CONST 90 //dx1
VBC3_PUSH_GLOBAL 95 //xtr_plan
VBC3_PUSH_GLOBAL 42 //xtr
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 12 //fr1
VBC3_PUSH_GLOBAL 81 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:713] ;xtr += dx1;
VBC2_PUSH_CONST 42 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 90 //dx1
VBC1_ADD_FF
VBC1_POP
[1:714] ;xtl += dx1;
VBC2_PUSH_CONST 50 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 90 //dx1
VBC1_ADD_FF
VBC1_POP
[1:716] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 1111  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB4851 //if to false
;return;
VBC1_RETURN
LAB4851: //if else
LAB4851: //for step
VBC2_PUSH_CONST 81 //j
VBC1_INC
VBC4_JUMP LAB4725 //to condition
LAB4858: //for exit
[1:723] ;
VBC1_RETURN
;walkPhasa2 <void()>
[1:724] ;wr0 = wr;
VBC2_PUSH_CONST 49 //wr0
VBC3_PUSH_GLOBAL 48 //wr
VBC1_POP
[1:725] ;wl0 = wl;
VBC2_PUSH_CONST 57 //wl0
VBC3_PUSH_GLOBAL 56 //wl
VBC1_POP
[1:727] ;dy = correctedSideLenght / fr2;
VBC2_PUSH_CONST 89 //dy
VBC3_PUSH_GLOBAL 64 //correctedSideLenght
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_DIV_FI
VBC1_POP
[1:728] ;xtl_plan = correctedStepLenght * (0.5 - (fr1 + fr2) / (2.0 * fr1 + fr2)) + dobavka_x_ot_torsa * fr1 * fr2 / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 94 //xtl_plan
VBC3_PUSH_GLOBAL 62 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 12 //fr1
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD_FI
VBC1_DIV_IF
VBC1_SUB_FF
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 75 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_MUL_FI
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_ADD_FF
VBC1_POP
[1:729] ;xtr_plan = correctedStepLenght * 0.5 + dx0Typical + dobavka_x_ot_torsa;
VBC2_PUSH_CONST 95 //xtr_plan
VBC3_PUSH_GLOBAL 62 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 84 //dx0Typical
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 75 //dobavka_x_ot_torsa
VBC1_ADD_FF
VBC1_POP
[1:730] ;for( j = 0; j < fr2; j ++ ) {
VBC2_PUSH_CONST 81 //j
VBC1_PUSH_0 
VBC1_POP
LAB4965: //for condition
VBC3_PUSH_GLOBAL 81 //j
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_LESS
VBC4_FALSE_JUMP LAB5376 //to for exit
;
[1:731] ;ztr = -gaitHeight + stepHeight;
VBC2_PUSH_CONST 44 //ztr
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 15 //stepHeight
VBC1_ADD
VBC1_POP_CF
[1:732] ;dx2 = (xtl_plan - xtl) / (fr2 - j);
VBC2_PUSH_CONST 91 //dx2
VBC3_PUSH_GLOBAL 94 //xtl_plan
VBC3_PUSH_GLOBAL 50 //xtl
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 13 //fr2
VBC3_PUSH_GLOBAL 81 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:733] ;if (stepType == 0)
VBC3_PUSH_GLOBAL 72 //stepType
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB5043 //if to false
;tors_angle = sfFMathASin(dobavka_x_ot_torsa / svIkA5 * (j + 1) / 2);
VBC2_PUSH_CONST 76 //tors_angle
VBC5_PUSH_CONST 352 | 0x80000000 //import func index sfFMathASin
//alloc addon amount for result
VBC3_PUSH_GLOBAL 75 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 81 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_MUL_FI
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_POP
VBC4_JUMP LAB5078 //if to exit
LAB5043: //if else
;tors_angle = sfFMathASin(sfMathSin(-ugol_torsa) + dobavka_x_ot_torsa / svIkA5 * (j + 1));
VBC2_PUSH_CONST 76 //tors_angle
VBC5_PUSH_CONST 352 | 0x80000000 //import func index sfFMathASin
//alloc addon amount for result
VBC5_PUSH_CONST 301 | 0x80000000 //import func index sfMathSin
//alloc addon amount for result
VBC3_PUSH_GLOBAL 18 //ugol_torsa
VBC1_NEG_F
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC3_PUSH_GLOBAL 75 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 81 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_MUL_FI
VBC1_ADD_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_POP
LAB5078: //if exit
[1:737] ;if( j == 0 ) {
VBC3_PUSH_GLOBAL 81 //j
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB5118 //if to false
;
[1:738] ;xtr += dx2 - dobavka_x_ot_torsa;
VBC2_PUSH_CONST 42 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 91 //dx2
VBC3_PUSH_GLOBAL 75 //dobavka_x_ot_torsa
VBC1_SUB_FF
VBC1_ADD_FF
VBC1_POP
[1:739] ;ytr  = s - d10 + dy0Typical;
VBC2_PUSH_CONST 43 //ytr
VBC3_PUSH_GLOBAL 86 //s
VBC3_PUSH_GLOBAL 59 //d10
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 85 //dy0Typical
VBC1_ADD_FF
VBC1_POP
VBC4_JUMP LAB5254 //if to exit
LAB5118: //if else
;else if( j == (fr2 - 1) ) {
VBC3_PUSH_GLOBAL 81 //j
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_PUSH_1 
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB5168 //if to false
;
[1:742] ;xtr += dx2 - dobavka_x_ot_torsa;
VBC2_PUSH_CONST 42 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 91 //dx2
VBC3_PUSH_GLOBAL 75 //dobavka_x_ot_torsa
VBC1_SUB_FF
VBC1_ADD_FF
VBC1_POP
[1:743] ;ytr  = s - d10 + 2 * dy0Typical - correctedSideLenght;
VBC2_PUSH_CONST 43 //ytr
VBC3_PUSH_GLOBAL 86 //s
VBC3_PUSH_GLOBAL 59 //d10
VBC1_SUB_FF
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 85 //dy0Typical
VBC1_MUL_IF
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 64 //correctedSideLenght
VBC1_SUB_FF
VBC1_POP
VBC4_JUMP LAB5254 //if to exit
LAB5168: //if else
;
[1:746] ;if (j == 1)
VBC3_PUSH_GLOBAL 81 //j
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB5194 //if to false
;ztr = -gaitHeight + stepHeight / 2.0;
VBC2_PUSH_CONST 44 //ztr
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 15 //stepHeight
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_IF
VBC1_ADD_IF
VBC1_POP
LAB5194: //if else
[1:748] ;dx = (xtr_plan - xtr) / (fr2 - j);
VBC2_PUSH_CONST 88 //dx
VBC3_PUSH_GLOBAL 95 //xtr_plan
VBC3_PUSH_GLOBAL 42 //xtr
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 13 //fr2
VBC3_PUSH_GLOBAL 81 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:749] ;xtr += dx;
VBC2_PUSH_CONST 42 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 88 //dx
VBC1_ADD_FF
VBC1_POP
[1:750] ;ytr  = s - 64 + dy0Typical - dy * fr2 / (fr2 - 2) * (j / 2);
VBC2_PUSH_CONST 43 //ytr
VBC3_PUSH_GLOBAL 86 //s
VBC2_PUSH_CONST 64 
VBC1_SUB_FI
VBC3_PUSH_GLOBAL 85 //dy0Typical
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 89 //dy
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_PUSH_2 
VBC1_SUB
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 81 //j
VBC1_PUSH_2 
VBC1_DIV
VBC1_MUL_FI
VBC1_SUB_FF
VBC1_POP
LAB5254: //if exit
LAB5254: //if exit
[1:754] ;if (correctedRotation < 0){
VBC3_PUSH_GLOBAL 80 //correctedRotation
VBC1_PUSH_0 
VBC1_LESS_FI
VBC4_FALSE_JUMP LAB5305 //if to false
;
[1:755] ;wl = j * correctedRotation / (fr2 - 1);
VBC2_PUSH_CONST 56 //wl
VBC3_PUSH_GLOBAL 81 //j
VBC3_PUSH_GLOBAL 80 //correctedRotation
VBC1_MUL_IF
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_PUSH_1 
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:756] ;wr = wr0 - (correctedRotation - wr0) * j / fr2;
VBC2_PUSH_CONST 48 //wr
VBC3_PUSH_GLOBAL 49 //wr0
VBC3_PUSH_GLOBAL 80 //correctedRotation
VBC3_PUSH_GLOBAL 49 //wr0
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 81 //j
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
VBC4_JUMP LAB5341 //if to exit
LAB5305: //if else
;
[1:759] ;wr = wr0 - wr0 * j / fr2;
VBC2_PUSH_CONST 48 //wr
VBC3_PUSH_GLOBAL 49 //wr0
VBC3_PUSH_GLOBAL 49 //wr0
VBC3_PUSH_GLOBAL 81 //j
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
[1:760] ;wl = wl0 - wl0 * j / fr2;
VBC2_PUSH_CONST 56 //wl
VBC3_PUSH_GLOBAL 57 //wl0
VBC3_PUSH_GLOBAL 57 //wl0
VBC3_PUSH_GLOBAL 81 //j
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
LAB5341: //if exit
[1:762] ;xtl += dx2;
VBC2_PUSH_CONST 50 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 91 //dx2
VBC1_ADD_FF
VBC1_POP
[1:763] ;ytl += dy0Typical;
VBC2_PUSH_CONST 51 //ytl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 85 //dy0Typical
VBC1_ADD_FF
VBC1_POP
[1:766] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 1111  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB5369 //if to false
;return;
VBC1_RETURN
LAB5369: //if else
LAB5369: //for step
VBC2_PUSH_CONST 81 //j
VBC1_INC
VBC4_JUMP LAB4965 //to condition
LAB5376: //for exit
[1:772] ;
VBC1_RETURN
;walkPhasa4 <void()>
[1:776] ;wr0 = wr;
VBC2_PUSH_CONST 49 //wr0
VBC3_PUSH_GLOBAL 48 //wr
VBC1_POP
[1:777] ;wl0 = wl;
VBC2_PUSH_CONST 57 //wl0
VBC3_PUSH_GLOBAL 56 //wl
VBC1_POP
[1:779] ;dy = correctedSideLenght / (fr2 - 2.0);
VBC2_PUSH_CONST 89 //dy
VBC3_PUSH_GLOBAL 64 //correctedSideLenght
VBC3_PUSH_GLOBAL 13 //fr2
VBC5_PUSH_CONST 1073741824 
VBC1_SUB_IF
VBC1_DIV_FF
VBC1_POP
[1:780] ;if( stepType == 1 ) {
VBC3_PUSH_GLOBAL 72 //stepType
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB5426 //if to false
;
[1:781] ;xtr_plan = 0;
VBC2_PUSH_CONST 95 //xtr_plan
VBC1_PUSH_0 
VBC1_POP_CF
[1:782] ;xtl_plan = 0;
VBC2_PUSH_CONST 94 //xtl_plan
VBC1_PUSH_0 
VBC1_POP_CF
VBC4_JUMP LAB5506 //if to exit
LAB5426: //if else
;
[1:785] ;xtr_plan = correctedStepLenght * (0.5 - (fr1 + fr2) / (2.0 * fr1 + fr2)) + dobavka_x_ot_torsa * fr1 * fr2 / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 95 //xtr_plan
VBC3_PUSH_GLOBAL 62 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 12 //fr1
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD_FI
VBC1_DIV_IF
VBC1_SUB_FF
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 75 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_MUL_FI
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_ADD_FF
VBC1_POP
[1:786] ;xtl_plan = correctedStepLenght * 0.5 + dx0Typical + dobavka_x_ot_torsa;
VBC2_PUSH_CONST 94 //xtl_plan
VBC3_PUSH_GLOBAL 62 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 84 //dx0Typical
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 75 //dobavka_x_ot_torsa
VBC1_ADD_FF
VBC1_POP
LAB5506: //if exit
[1:788] ;for( j = 0; j < fr2; j ++ ) {
VBC2_PUSH_CONST 81 //j
VBC1_PUSH_0 
VBC1_POP
LAB5510: //for condition
VBC3_PUSH_GLOBAL 81 //j
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_LESS
VBC4_FALSE_JUMP LAB5962 //to for exit
;
[1:789] ;ztl = -gaitHeight + stepHeight;
VBC2_PUSH_CONST 52 //ztl
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 15 //stepHeight
VBC1_ADD
VBC1_POP_CF
[1:791] ;if( stepType == 1 && j == (fr2 - 1) ) {
VBC3_PUSH_GLOBAL 72 //stepType
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB5555
VBC3_PUSH_GLOBAL 81 //j
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_PUSH_1 
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB5555
VBC1_PUSH_1
LAB5555:
VBC4_FALSE_JUMP LAB5616 //if to false
;
[1:792] ;ztl = -gaitHeight;
VBC2_PUSH_CONST 52 //ztl
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC1_POP_CF
[1:793] ;ytl = s + d10;
VBC2_PUSH_CONST 51 //ytl
VBC3_PUSH_GLOBAL 86 //s
VBC3_PUSH_GLOBAL 59 //d10
VBC1_ADD_FF
VBC1_POP
[1:794] ;tors_angle = sfFMathASin(sfMathSin(ugol_torsa) - dobavka_x_ot_torsa / svIkA5 * (j + 1) / 2);
VBC2_PUSH_CONST 76 //tors_angle
VBC5_PUSH_CONST 352 | 0x80000000 //import func index sfFMathASin
//alloc addon amount for result
VBC5_PUSH_CONST 301 | 0x80000000 //import func index sfMathSin
//alloc addon amount for result
VBC3_PUSH_GLOBAL 18 //ugol_torsa
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC3_PUSH_GLOBAL 75 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 81 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_MUL_FI
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_POP
VBC4_JUMP LAB5650 //if to exit
LAB5616: //if else
;else tors_angle = sfFMathASin(sfMathSin(ugol_torsa) - dobavka_x_ot_torsa / svIkA5 * (j + 1));
VBC2_PUSH_CONST 76 //tors_angle
VBC5_PUSH_CONST 352 | 0x80000000 //import func index sfFMathASin
//alloc addon amount for result
VBC5_PUSH_CONST 301 | 0x80000000 //import func index sfMathSin
//alloc addon amount for result
VBC3_PUSH_GLOBAL 18 //ugol_torsa
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC3_PUSH_GLOBAL 75 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 81 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_MUL_FI
VBC1_SUB_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_POP
LAB5650: //if exit
[1:797] ;dx4 = (xtr_plan - xtr) / (fr2 - j);
VBC2_PUSH_CONST 92 //dx4
VBC3_PUSH_GLOBAL 95 //xtr_plan
VBC3_PUSH_GLOBAL 42 //xtr
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 13 //fr2
VBC3_PUSH_GLOBAL 81 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:798] ;if( j == 0 ) {
VBC3_PUSH_GLOBAL 81 //j
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB5725 //if to false
;
[1:799] ;xtl += dx4 - dobavka_x_ot_torsa;
VBC2_PUSH_CONST 50 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 92 //dx4
VBC3_PUSH_GLOBAL 75 //dobavka_x_ot_torsa
VBC1_SUB_FF
VBC1_ADD_FF
VBC1_POP
[1:800] ;ytl = s + d10 + dy0Typical;
VBC2_PUSH_CONST 51 //ytl
VBC3_PUSH_GLOBAL 86 //s
VBC3_PUSH_GLOBAL 59 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 85 //dy0Typical
VBC1_ADD_FF
VBC1_POP
[1:801] ;ztl = -gaitHeight + stepHeight / 2.0;
VBC2_PUSH_CONST 52 //ztl
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 15 //stepHeight
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_IF
VBC1_ADD_IF
VBC1_POP
VBC4_JUMP LAB5855 //if to exit
LAB5725: //if else
;else if( j == (fr2 - 1) ) {
VBC3_PUSH_GLOBAL 81 //j
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_PUSH_1 
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB5779 //if to false
;
[1:804] ;xtl += dx4 - dobavka_x_ot_torsa;
VBC2_PUSH_CONST 50 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 92 //dx4
VBC3_PUSH_GLOBAL 75 //dobavka_x_ot_torsa
VBC1_SUB_FF
VBC1_ADD_FF
VBC1_POP
[1:805] ;ytl  = s + d10 + dy0Typical * 2.0 - correctedSideLenght;
VBC2_PUSH_CONST 51 //ytl
VBC3_PUSH_GLOBAL 86 //s
VBC3_PUSH_GLOBAL 59 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 85 //dy0Typical
VBC5_PUSH_CONST 1073741824 
VBC1_MUL_FF
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 64 //correctedSideLenght
VBC1_SUB_FF
VBC1_POP
VBC4_JUMP LAB5855 //if to exit
LAB5779: //if else
;
[1:808] ;if (j == 1)
VBC3_PUSH_GLOBAL 81 //j
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB5805 //if to false
;ztl = -gaitHeight + stepHeight / 2.0;
VBC2_PUSH_CONST 52 //ztl
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 15 //stepHeight
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_IF
VBC1_ADD_IF
VBC1_POP
LAB5805: //if else
[1:810] ;dx = (xtl_plan - xtl) / (fr2 - j);
VBC2_PUSH_CONST 88 //dx
VBC3_PUSH_GLOBAL 94 //xtl_plan
VBC3_PUSH_GLOBAL 50 //xtl
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 13 //fr2
VBC3_PUSH_GLOBAL 81 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:811] ;xtl += dx;
VBC2_PUSH_CONST 50 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 88 //dx
VBC1_ADD_FF
VBC1_POP
[1:812] ;ytl  = s + 64 + dy0Typical - dy * j / 2;
VBC2_PUSH_CONST 51 //ytl
VBC3_PUSH_GLOBAL 86 //s
VBC2_PUSH_CONST 64 
VBC1_ADD_FI
VBC3_PUSH_GLOBAL 85 //dy0Typical
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 89 //dy
VBC3_PUSH_GLOBAL 81 //j
VBC1_MUL_FI
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
LAB5855: //if exit
LAB5855: //if exit
[1:816] ;if (correctedRotation > 0){
VBC3_PUSH_GLOBAL 80 //correctedRotation
VBC1_PUSH_0 
VBC1_GREAT_FI
VBC4_FALSE_JUMP LAB5891 //if to false
;
[1:817] ;wr = -j * correctedRotation / (fr2 - 1);
VBC2_PUSH_CONST 48 //wr
VBC3_PUSH_GLOBAL 81 //j
VBC1_NEG
VBC3_PUSH_GLOBAL 80 //correctedRotation
VBC1_MUL_IF
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_PUSH_1 
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:818] ;wl = wr;
VBC2_PUSH_CONST 56 //wl
VBC3_PUSH_GLOBAL 48 //wr
VBC1_POP
VBC4_JUMP LAB5927 //if to exit
LAB5891: //if else
;
[1:821] ;wr = wr0 - wr0 * j / fr2;
VBC2_PUSH_CONST 48 //wr
VBC3_PUSH_GLOBAL 49 //wr0
VBC3_PUSH_GLOBAL 49 //wr0
VBC3_PUSH_GLOBAL 81 //j
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
[1:822] ;wl = wl0 - wl0 * j / fr2;
VBC2_PUSH_CONST 56 //wl
VBC3_PUSH_GLOBAL 57 //wl0
VBC3_PUSH_GLOBAL 57 //wl0
VBC3_PUSH_GLOBAL 81 //j
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
LAB5927: //if exit
[1:824] ;xtr += dx4;
VBC2_PUSH_CONST 42 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 92 //dx4
VBC1_ADD_FF
VBC1_POP
[1:825] ;ytr += dy0Typical;
VBC2_PUSH_CONST 43 //ytr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 85 //dy0Typical
VBC1_ADD_FF
VBC1_POP
[1:828] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 1111  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB5955 //if to false
;return;
VBC1_RETURN
LAB5955: //if else
LAB5955: //for step
VBC2_PUSH_CONST 81 //j
VBC1_INC
VBC4_JUMP LAB5510 //to condition
LAB5962: //for exit
[1:841] ;
VBC1_RETURN
;walkCycle <void(,int)>
VBC2_STACK -4//local vars 4
[1:843] ;
[1:843] ;float xrOld = xr;
VBC2_PUSH_B_OFFSET -1 //xrOld
VBC3_PUSH_GLOBAL 45 //xr
VBC1_POP
[1:844] ;
[1:844] ;float yrOld = yr;
VBC2_PUSH_B_OFFSET -2 //yrOld
VBC3_PUSH_GLOBAL 46 //yr
VBC1_POP
[1:845] ;
[1:845] ;float xlOld = xl;
VBC2_PUSH_B_OFFSET -3 //xlOld
VBC3_PUSH_GLOBAL 53 //xl
VBC1_POP
[1:846] ;
[1:846] ;float ylOld = yl;
VBC2_PUSH_B_OFFSET -4 //ylOld
VBC3_PUSH_GLOBAL 54 //yl
VBC1_POP
[1:849] ;walkInit();
VBC3_PUSH_CONST 4285  //func address walkInit
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:850] ;walkPhasa1();
VBC3_PUSH_CONST 4442  //func address walkPhasa1
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:851] ;walkPhasa2();
VBC3_PUSH_CONST 4859  //func address walkPhasa2
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:852] ;if (half == 0){
VBC2_PUSH_LOCAL 2 //half
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB6022 //if to false
;
[1:853] ;walkPhasa3();
VBC3_PUSH_CONST 4655  //func address walkPhasa3
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:854] ;walkPhasa4();
VBC3_PUSH_CONST 5377  //func address walkPhasa4
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB6022: //if else
[1:858] ;xr = xrOld;
VBC2_PUSH_CONST 45 //xr
VBC2_PUSH_LOCAL -1 //xrOld
VBC1_POP
[1:859] ;yr = yrOld;
VBC2_PUSH_CONST 46 //yr
VBC2_PUSH_LOCAL -2 //yrOld
VBC1_POP
[1:860] ;xl = xlOld;
VBC2_PUSH_CONST 53 //xl
VBC2_PUSH_LOCAL -3 //xlOld
VBC1_POP
[1:861] ;yl = ylOld;
VBC2_PUSH_CONST 54 //yl
VBC2_PUSH_LOCAL -4 //ylOld
VBC1_POP
[1:865] ;
VBC1_RETURN
;mixing <void()>
[1:870] ;leftRightFactor = 100;
VBC2_PUSH_CONST 97 //leftRightFactor
VBC2_PUSH_CONST 100 
VBC1_POP
[1:871] ;frontBackFactor = 180;
VBC2_PUSH_CONST 98 //frontBackFactor
VBC3_PUSH_CONST 180 
VBC1_POP
[1:873] ;while(1) {
LAB6054: //while condition
;
[1:875] ;leftFootSideAddonMix = -svImuGyroZ * leftRightFactor >> 10;
VBC3_PUSH_CONST 1117 //leftFootSideAddonMix
VBC3_PUSH_GLOBAL 1008 //svImuGyroZ
VBC1_NEG
VBC3_PUSH_GLOBAL 97 //leftRightFactor
VBC1_MUL
VBC2_PUSH_CONST 10 
VBC1_RSHIFT
VBC1_POP
[1:876] ;rightFootSideAddonMix = svImuGyroZ * leftRightFactor >> 10;
VBC3_PUSH_CONST 1113 //rightFootSideAddonMix
VBC3_PUSH_GLOBAL 1008 //svImuGyroZ
VBC3_PUSH_GLOBAL 97 //leftRightFactor
VBC1_MUL
VBC2_PUSH_CONST 10 
VBC1_RSHIFT
VBC1_POP
[1:879] ;rightFootFrontAddonMix = leftFootFrontAddonMix = -svImuGyroX * frontBackFactor >> 10;
VBC3_PUSH_CONST 1105 //rightFootFrontAddonMix
VBC3_PUSH_CONST 1109 //leftFootFrontAddonMix
VBC3_PUSH_GLOBAL 1006 //svImuGyroX
VBC1_NEG
VBC3_PUSH_GLOBAL 98 //frontBackFactor
VBC1_MUL
VBC2_PUSH_CONST 10 
VBC1_RSHIFT
VBC1_STORE
VBC1_POP
[1:882] ;sfWaitNextFrame();
VBC1_WAIT
VBC4_JUMP LAB6054 //while forever loop
LAB6107: //while exit
[1:886] ;
VBC1_RETURN
;runTest <void()>
VBC1_STACK_DN1//local vars 1
[1:888] ;walkInitialPoseFine();
VBC3_PUSH_CONST 4059  //func address walkInitialPoseFine
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:892] ;stepType = 0;
VBC2_PUSH_CONST 72 //stepType
VBC1_PUSH_0 
VBC1_POP
[1:893] ;stepLength = stepLengthOrder/ 3.0;
VBC2_PUSH_CONST 22 //stepLength
VBC3_PUSH_GLOBAL 10 //stepLengthOrder
VBC5_PUSH_CONST 1077936128 
VBC1_DIV_IF
VBC1_POP
[1:894] ;walkCycle(0);
VBC3_PUSH_CONST 5963  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:897] ;stepType = 2;
VBC2_PUSH_CONST 72 //stepType
VBC1_PUSH_2 
VBC1_POP
[1:898] ;stepLength = stepLengthOrder * 2.0 / 3.0;
VBC2_PUSH_CONST 22 //stepLength
VBC3_PUSH_GLOBAL 10 //stepLengthOrder
VBC5_PUSH_CONST 1073741824 
VBC1_MUL_IF
VBC5_PUSH_CONST 1077936128 
VBC1_DIV_FF
VBC1_POP
[1:899] ;walkCycle(0);
VBC3_PUSH_CONST 5963  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:902] ;stepLength = stepLengthOrder * 1.0;
VBC2_PUSH_CONST 22 //stepLength
VBC3_PUSH_GLOBAL 10 //stepLengthOrder
VBC5_PUSH_CONST 1065353216 
VBC1_MUL_IF
VBC1_POP
[1:903] ;
[1:904] ;for( i = 0; i < cycle_number; i++ ){
VBC2_PUSH_B_OFFSET -1 //i
VBC1_PUSH_0 
VBC1_POP
LAB6180: //for condition
VBC2_PUSH_LOCAL -1 //i
VBC3_PUSH_GLOBAL 8 //cycle_number
VBC1_LESS
VBC4_FALSE_JUMP LAB6222 //to for exit
;
[1:905] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 964  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:906] ;walkCycle(0);
VBC3_PUSH_CONST 5963  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:907] ;if(orderFromHead == 4) break;
VBC3_PUSH_GLOBAL 4 //orderFromHead
VBC2_PUSH_CONST 4 
VBC1_EQU
VBC4_FALSE_JUMP LAB6215 //if to false
;if(orderFromHead == 4) break;
VBC4_JUMP LAB6222 //to loop exit
LAB6215: //if else
LAB6215: //for step
VBC2_PUSH_B_OFFSET -1 //i
VBC1_INC
VBC4_JUMP LAB6180 //to condition
LAB6222: //for exit
[1:911] ;stepType = 1;
VBC2_PUSH_CONST 72 //stepType
VBC1_PUSH_1 
VBC1_POP
[1:912] ;walkCycle(0);
VBC3_PUSH_CONST 5963  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:915] ;walkFinalPoseFine();
VBC3_PUSH_CONST 4225  //func address walkFinalPoseFine
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:916] ;stepLengthOrder *= -1;  
VBC2_PUSH_CONST 10 //stepLengthOrder
VBC1_PUSH_TOS
VBC1_LOAD
VBC2_PUSH_CONST -1 // -
VBC1_MUL
VBC1_POP
[1:917] ;ugol_torsa *= -1;
VBC2_PUSH_CONST 18 //ugol_torsa
VBC1_PUSH_TOS
VBC1_LOAD
VBC2_PUSH_CONST -1 // -
VBC1_MUL_FI
VBC1_POP
[1:918] ;walkInitialPoseFine();
VBC3_PUSH_CONST 4059  //func address walkInitialPoseFine
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:919] ;stepType = 0;
VBC2_PUSH_CONST 72 //stepType
VBC1_PUSH_0 
VBC1_POP
[1:920] ;stepLength = stepLengthOrder/ 3.0;
VBC2_PUSH_CONST 22 //stepLength
VBC3_PUSH_GLOBAL 10 //stepLengthOrder
VBC5_PUSH_CONST 1077936128 
VBC1_DIV_IF
VBC1_POP
[1:921] ;walkCycle(0);
VBC3_PUSH_CONST 5963  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:922] ;stepType = 2;
VBC2_PUSH_CONST 72 //stepType
VBC1_PUSH_2 
VBC1_POP
[1:923] ;stepLength = stepLengthOrder * 2.0 / 3.0;
VBC2_PUSH_CONST 22 //stepLength
VBC3_PUSH_GLOBAL 10 //stepLengthOrder
VBC5_PUSH_CONST 1073741824 
VBC1_MUL_IF
VBC5_PUSH_CONST 1077936128 
VBC1_DIV_FF
VBC1_POP
[1:924] ;walkCycle(0);
VBC3_PUSH_CONST 5963  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:925] ;stepLength = stepLengthOrder * 1.0;
VBC2_PUSH_CONST 22 //stepLength
VBC3_PUSH_GLOBAL 10 //stepLengthOrder
VBC5_PUSH_CONST 1065353216 
VBC1_MUL_IF
VBC1_POP
[1:926] ;for( i = 0; i < 10; i++ ){
VBC2_PUSH_B_OFFSET -1 //i
VBC1_PUSH_0 
VBC1_POP
LAB6324: //for condition
VBC2_PUSH_LOCAL -1 //i
VBC2_PUSH_CONST 10 
VBC1_LESS
VBC4_FALSE_JUMP LAB6351 //to for exit
;
[1:927] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 964  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:928] ;walkCycle(0);
VBC3_PUSH_CONST 5963  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB6344: //for step
VBC2_PUSH_B_OFFSET -1 //i
VBC1_INC
VBC4_JUMP LAB6324 //to condition
LAB6351: //for exit
[1:932] ;
VBC1_RETURN
;turn <void(,int)>
VBC1_STACK_DN1//local vars 1
[1:933] ;
[1:933] ;int frameCount = 4;
VBC2_PUSH_B_OFFSET -1 //frameCount
VBC2_PUSH_CONST 4 
VBC1_POP
[1:934] ;if (direction == 1){
VBC2_PUSH_LOCAL 2 //direction
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB6396 //if to false
;
[1:935] ;sfPoseGroup( 1024 , -2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 1024 
VBC3_PUSH_CONST -2000 // -
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:936] ;sfPoseGroup( 2048 , 2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 2048 
VBC3_PUSH_CONST 2000 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB6396: //if else
[1:938] ;if (direction == -1){
VBC2_PUSH_LOCAL 2 //direction
VBC2_PUSH_CONST -1 // -
VBC1_EQU
VBC4_FALSE_JUMP LAB6435 //if to false
;
[1:939] ;sfPoseGroup( 1024 , 2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 1024 
VBC3_PUSH_CONST 2000 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:940] ;sfPoseGroup( 2048 , -2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 2048 
VBC3_PUSH_CONST -2000 // -
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB6435: //if else
[1:942] ;sfPoseGroup( 1048576 , 2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_CONST 2000 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:943] ;sfPoseGroup( 2097152 , 2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_CONST 2000 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:944] ;sfWaitFrame( frameCount );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:945] ;sfPoseGroup( 1024 , 0, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 1024 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:946] ;sfPoseGroup( 2048 , 0, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 2048 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:947] ;sfPoseGroup( 1048576 , 0, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 1048576 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:948] ;sfPoseGroup( 2097152 , 0, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 2097152 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:949] ;sfWaitFrame( frameCount );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:950] ;sfWaitFrame( 6 );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_CONST 6 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:953] ;
VBC1_RETURN
;main <void()>
VBC1_STACK_DN1//local vars 1
[1:954] ;fallingFlag = 0;
VBC2_PUSH_CONST 36 //fallingFlag
VBC1_PUSH_0 
VBC1_POP
[1:955] ;restart_flag = 0;
VBC1_PUSH_2 //restart_flag
VBC1_PUSH_0 
VBC1_POP
[1:956] ;pitStop = 0;
VBC2_PUSH_CONST 6 //pitStop
VBC1_PUSH_0 
VBC1_POP
[1:957] ;startStop = 0;
VBC2_PUSH_CONST 7 //startStop
VBC1_PUSH_0 
VBC1_POP
[1:958] ;slowWalk = 0;
VBC2_PUSH_CONST 21 //slowWalk
VBC1_PUSH_0 
VBC1_POP
[1:959] ;setup();
VBC2_PUSH_CONST 70  //func address setup
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:960] ;sideLength = 0;
VBC2_PUSH_CONST 23 //sideLength
VBC1_PUSH_0 
VBC1_POP_CF
[1:961] ;rotation = 0;
VBC2_PUSH_CONST 24 //rotation
VBC1_PUSH_0 
VBC1_POP_CF
[1:966] ;
[1:966] ;int frameCount = 80;
VBC2_PUSH_B_OFFSET -1 //frameCount
VBC2_PUSH_CONST 80 
VBC1_POP
[1:967] ;sfPoseGroup(1056964607 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 1056964607 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:968] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:971] ;sfQuaternionToEulerImu();
VBC5_PUSH_CONST 303 | 0x80000000 //import func index sfQuaternionToEulerImu
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:972] ;forwardDirection = svEulerYaw;
VBC2_PUSH_CONST 79 //forwardDirection
VBC3_PUSH_GLOBAL 1025 //svEulerYaw
VBC1_POP
[1:975] ;sfCreateTask( mixing, 20 );
VBC5_PUSH_CONST 2 | 0x80000000 //import func index sfCreateTask
VBC3_PUSH_CONST 6043  //func address mixing
VBC2_PUSH_CONST 20 
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
[1:976] ;while (pitStop == 0) sfWaitFrame(1); 
LAB6623: //while condition
VBC3_PUSH_GLOBAL 6 //pitStop
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB6641 //while to exit
;while (pitStop == 0) sfWaitFrame(1); 
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC1_PUSH_1 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
VBC4_JUMP LAB6623 //while forever loop
LAB6641: //while exit
[1:978] ;svButtonRight = -1 ;
VBC3_PUSH_CONST 1022 //svButtonRight
VBC2_PUSH_CONST -1 // -
VBC1_POP
[1:979] ;svButtonLeft = -1 ;
VBC3_PUSH_CONST 1021 //svButtonLeft
VBC2_PUSH_CONST -1 // -
VBC1_POP
[1:980] ;sfBip(1, 1);
VBC5_PUSH_CONST 43 | 0x80000000 //import func index sfBip
VBC1_PUSH_1 
VBC1_PUSH_1 
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
[1:981] ;while (svButtonPress != 2 ) sfWaitFrame(1); 
LAB6662: //while condition
VBC3_PUSH_GLOBAL 1023 //svButtonPress
VBC1_PUSH_2 
VBC1_NOT_EQU
VBC4_FALSE_JUMP LAB6680 //while to exit
;while (svButtonPress != 2 ) sfWaitFrame(1); 
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC1_PUSH_1 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
VBC4_JUMP LAB6662 //while forever loop
LAB6680: //while exit
[1:982] ;svButtonRight = 66 ;
VBC3_PUSH_CONST 1022 //svButtonRight
VBC2_PUSH_CONST 66 
VBC1_POP
[1:983] ;svButtonLeft = 69 ;
VBC3_PUSH_CONST 1021 //svButtonLeft
VBC2_PUSH_CONST 69 
VBC1_POP
[1:984] ;restart_flag = 1;
VBC1_PUSH_2 //restart_flag
VBC1_PUSH_1 
VBC1_POP
[1:986] ;runTest(); 
VBC3_PUSH_CONST 6108  //func address runTest
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:990] ;
VBC1_RETURN
//Init table
//Variables
svFrameCount : 1
svImuAccX : 1000
svImuAccY : 1001
svImuAccZ : 1002
svImuAccRawX : 1003
svImuAccRawY : 1004
svImuAccRawZ : 1005
svImuGyroX : 1006
svImuGyroY : 1007
svImuGyroZ : 1008
svImuGyroRawX : 1009
svImuGyroRawY : 1010
svImuGyroRawZ : 1011
svImuQuaterX : 1012
svImuQuaterY : 1013
svImuQuaterZ : 1014
svImuQuaterW : 1015
svImuQuaterAcc : 1016
svImuAccSlowX : 1017
svImuAccSlowY : 1018
svImuAccSlowZ : 1019
svAdc : 1020
svButtonLeft : 1021
svButtonRight : 1022
svButtonPress : 1023
svHeadControlMask : 1024
svEulerYaw F: 1025
svEulerPitch F: 1026
svEulerRoll F: 1027
svRemoteStatus : 1190
svRemoteButton : 1191
svRemoteLeftJoystick : 1192
svRemoteLeftJoystickX : 1193
svRemoteLeftJoystickY : 1194
svRemoteRightJoystick : 1195
svRemoteRightJoystickX : 1196
svRemoteRightJoystickY : 1197
svHumoModelDistPelvic : 1204
svHumoModelLengthPelvicHip : 1205
svHumoModelLengthHipHip : 1206
svHumoModelLengthHipKnee : 1207
svHumoModelLengthKneeFoot : 1208
svHumoModelLengthFootFoot : 1209
svHumoModelDistFootFloor : 1210
svHumoModelFootLength : 1211
svHumoModelFootWidth : 1212
svHumoModelFootCenterBack : 1213
svHumoModelFootCenterInner : 1214
svHumoModelAngPelvic : 1198
svHumoModelAngHipSide : 1200
svHumoModelAngHip : 1199
svHumoModelAngKnee : 1201
svHumoModelAngFoot : 1202
svHumoModelAngFootSide : 1203
svIkA5 F: 1215
svIkB5 F: 1216
svIkC5 F: 1217
svIkA6 F: 1218
svIkA7 F: 1219
svIkA8 F: 1220
svIkA9 F: 1221
svIkA10 F: 1222
svIkB10 F: 1223
svIkC10 F: 1224
svIkLimA5min F: 1225
svIkLimA5max F: 1226
svIkLimA6min F: 1227
svIkLimA6max F: 1228
svIkLimA7min F: 1229
svIkLimA7max F: 1230
svIkLimA8min F: 1231
svIkLimA8max F: 1232
svIkLimA9min F: 1233
svIkLimA9max F: 1234
svIkLimA10min F: 1235
svIkLimA10max F: 1236
svIkOutPresent : 1237
svIkEncA5 : 1238
svIkEncA6 : 1239
svIkEncA7 : 1240
svIkEncA8 : 1241
svIkEncA9 : 1242
svIkEncA10 : 1243
headRotateTarget : 1030
headRotateCurrent : 1031
headRotatePwm : 1032
headRotateAddonMix : 1033
torsoRotateTarget : 1034
torsoRotateCurrent : 1035
torsoRotatePwm : 1036
torsoRotateAddonMix : 1037
rightClavicleTarget : 1038
rightClavicleCurrent : 1039
rightClaviclePwm : 1040
rightClavicleAddonMix : 1041
leftClavicleTarget : 1042
leftClavicleCurrent : 1043
leftClaviclePwm : 1044
leftClavicleAddonMix : 1045
rightShoulderTarget : 1046
rightShoulderCurrent : 1047
rightShoulderPwm : 1048
rightShoulderAddonMix : 1049
leftShoulderTarget : 1050
leftShoulderCurrent : 1051
leftShoulderPwm : 1052
leftShoulderAddonMix : 1053
rightElbowSideTarget : 1054
rightElbowSideCurrent : 1055
rightElbowSidePwm : 1056
rightElbowSideAddonMix : 1057
leftElbowSideTarget : 1058
leftElbowSideCurrent : 1059
leftElbowSidePwm : 1060
leftElbowSideAddonMix : 1061
rightElbowTarget : 1062
rightElbowCurrent : 1063
rightElbowPwm : 1064
rightElbowAddonMix : 1065
leftElbowTarget : 1066
leftElbowCurrent : 1067
leftElbowPwm : 1068
leftElbowAddonMix : 1069
rightPelvicTarget : 1070
rightPelvicCurrent : 1071
rightPelvicPwm : 1072
rightPelvicAddonMix : 1073
leftPelvicTarget : 1074
leftPelvicCurrent : 1075
leftPelvicPwm : 1076
leftPelvicAddonMix : 1077
rightHipSideTarget : 1078
rightHipSideCurrent : 1079
rightHipSidePwm : 1080
rightHipSideAddonMix : 1081
leftHipSideTarget : 1082
leftHipSideCurrent : 1083
leftHipSidePwm : 1084
leftHipSideAddonMix : 1085
rightHipTarget : 1086
rightHipCurrent : 1087
rightHipPwm : 1088
rightHipAddonMix : 1089
leftHipTarget : 1090
leftHipCurrent : 1091
leftHipPwm : 1092
leftHipAddonMix : 1093
rightKneeTarget : 1094
rightKneeCurrent : 1095
rightKneePwm : 1096
rightKneeAddonMix : 1097
leftKneeTarget : 1098
leftKneeCurrent : 1099
leftKneePwm : 1100
leftKneeAddonMix : 1101
rightFootFrontTarget : 1102
rightFootFrontCurrent : 1103
rightFootFrontPwm : 1104
rightFootFrontAddonMix : 1105
leftFootFrontTarget : 1106
leftFootFrontCurrent : 1107
leftFootFrontPwm : 1108
leftFootFrontAddonMix : 1109
rightFootSideTarget : 1110
rightFootSideCurrent : 1111
rightFootSidePwm : 1112
rightFootSideAddonMix : 1113
leftFootSideTarget : 1114
leftFootSideCurrent : 1115
leftFootSidePwm : 1116
leftFootSideAddonMix : 1117
rightHandTarget : 1118
rightHandCurrent : 1119
rightHandPwm : 1120
rightHandAddonMix : 1121
leftHandTarget : 1122
leftHandCurrent : 1123
leftHandPwm : 1124
leftHandAddonMix : 1125
headTiltTarget : 1130
headTiltCurrent : 1131
headTiltPwm : 1132
headTiltAddonMix : 1133
rightKneeBotTarget : 1134
rightKneeBotCurrent : 1135
rightKneeBotPwm : 1136
rightKneeBotAddonMix : 1137
leftKneeBotTarget : 1138
leftKneeBotCurrent : 1139
leftKneeBotPwm : 1140
leftKneeBotAddonMix : 1141
rightClawTarget : 1142
rightClawCurrent : 1143
rightClawPwm : 1144
rightClawAddonMix : 1145
leftClawTarget : 1146
leftClawCurrent : 1147
leftClawPwm : 1148
leftClawAddonMix : 1149
restart_flag : 2
timeStep : 3
orderFromHead : 4
rotationFromHead F: 5
pitStop : 6
startStop : 7
cycle_number : 8
hipTilt : 9
stepLengthOrder : 10
fps : 11
fr1 : 12
fr2 : 13
gaitHeight : 14
stepHeight : 15
bodyTiltAtWalk F: 16
solyLandingSkew F: 17
ugol_torsa F: 18
imu_factor F: 19
vision_factor F: 20
slowWalk : 21
stepLength F: 22
sideLength F: 23
rotation F: 24
selfMotionShiftCorrectionX F: 25
selfMotionShiftCorrectionY F: 26
selfFirstStepYield F: 27
selfCycleStepYield F: 28
selfSideStepRightYield F: 29
selfSideStepLeftYield F: 30
selfFirstLegIsRightLeg : 31
motion_to_right : 32
side_motion F: 33
selfInitPoses : 34
selfExitFlag : 35
fallingFlag : 36
selfNeckPan : 37
rotationYieldRight F: 38
rotationYieldLeft F: 39
framestep : 40
frameCount : 41
xtr F: 42
ytr F: 43
ztr F: 44
xr F: 45
yr F: 46
zr F: 47
wr F: 48
wr0 F: 49
xtl F: 50
ytl F: 51
ztl F: 52
xl F: 53
yl F: 54
zl F: 55
wl F: 56
wl0 F: 57
e10 F: 58
d10 F: 59
amplitude F: 60
alpha01 F: 61
correctedStepLenght F: 62
correctedStepLenghtHalf F: 63
correctedSideLenght F: 64
correctedSideLenghtHalf F: 65
ztr0 F: 66
ztl0 F: 67
stepZtr F: 68
stepZtl F: 69
stepYtr F: 70
stepYtl F: 71
stepType : 72
flag : 73
flag_event : 74
dobavka_x_ot_torsa F: 75
tors_angle F: 76
reducer F: 77
torsoAdd : 78
forwardDirection F: 79
correctedRotation F: 80
j : 81
xtl0 F: 82
xtr0 F: 83
dx0Typical F: 84
dy0Typical F: 85
s F: 86
fase_offset F: 87
dx F: 88
dy F: 89
dx1 F: 90
dx2 F: 91
dx4 F: 92
stepRotation F: 93
xtl_plan F: 94
xtr_plan F: 95
dx0 F: 96
leftRightFactor : 97
frontBackFactor : 98
