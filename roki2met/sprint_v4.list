//====================================================================
//      SvCompiler V9.06
//By A.Sibilev
//====================================================================
//cblock

;sfVpuVersion <int()>
;sfCreateTask <int(,*<void()>,int)>
;sfLog <void(,cstring,int,int,int)>
;sfLogOpen <void(,cstring)>
;sfLogClose <void()>
;sfWaitFrameOut <void(,int)>
;sfIsFrameOut <int(,int)>
;sfWaitNextFrame <void()>
;sfSlotIndex <int(,cstring)>
;sfSoundIndex <int(,cstring)>
;sfAbs <int(,int)>
;sfIMin <int(,int,int)>
;sfIMax <int(,int,int)>
;sfUMin <int(,int,int)>
;sfUMax <int(,int,int)>
;sfILimit <int(,int,int,int)>
;sfStop <void()>
;sfStartSlot <void(,int)>
;sfBip <void(,int,int)>
;sfWriteFlash <void()>
;sfSoundPlay <void(,int)>
;sfSoundIsPlay <int()>
;sfFreeGroup <void(,int)>
;sfPoseGroup <void(,int,int,int)>
;sfPoseGroupDelay <void(,int,int,int,int)>
;sfPoseCorrect <void(,int,int)>
;sfQueueGroup <void(,int,int,int)>
;sfPoseIdx <void(,int,int,int)>
;sfPoseGroupLin <void(,int,int,int)>
;sfStrainGroup <void(,int)>
;sfPlaySamples <void(,int,int,int,*cblock)>
;sfPlayWSamples <void(,int,int,int,*cwblock)>
;sfAccumSetup1 <void(,*int)>
;sfAccumSetup2 <void(,*int,*int)>
;sfAccumSetup3 <void(,*int,*int,*int)>
;sfAccumSetup4 <void(,*int,*int,*int,*int)>
;sfAccumTrigger <void()>
;sfAccumReset <void()>
;sfUnitParamQueryRead <int(,int,int)>
;sfUnitParamQueryWrite <int(,int,int,int)>
;sfUnitParamStatusRead <int(,int,int,*int)>
;sfMathAcos <int(,int,int)>
;sfMathSqrti <int(,int)>
;sfMathAngleOfTriangle <int(,int,int,int)>
;sfMathAngleOfKnee <int(,int,int,int)>
;sfMathCathetOfSquareTriangle <int(,int,int)>
;sfMathHypotenuseOfSquareTriangle <int(,int,int)>
;sfMathTableSin <int(,int,int)>
;sfHumoModelSetup <void()>
;sfHumoModelFootAtFloor <void(,int,int,int)>
;sfHumoModelFootPush <void(,int,int,int)>
;sfIndexOfMask <int(,int)>
;sfQueueIdxAppend <int(,int,int,int)>
;sfQueueIdxOffsets <int(,int,int,*cblock,int)>
;sfQueueIdxSinMove <int(,int,int,int,int)>
;sfQueueIdxLast <int(,int)>
;sfQueueIdxCount <int(,int)>
;sfQueueMax <int()>
;sfIkSetup <void()>
;sfIkAngle <void(,float,float,float,float,float,float,float)>
;sfMathCos <float(,float)>
;sfMathSin <float(,float)>
;sfQuaternionToEuler <void(,float,float,float,float)>
;sfQuaternionToEulerImu <void()>
;sfFMathACos <float(,float)>
;sfFMathASin <float(,float)>
;sfFMathATan <float(,float)>
;sfFMathATan2 <float(,float,float)>
;sfFMathCos <float(,float)>
;sfFMathSin <float(,float)>
;sfFMathTan <float(,float)>
;sfFMathCosh <float(,float)>
;sfFMathSinh <float(,float)>
;sfFMathTanh <float(,float)>
;sfFMathExp <float(,float)>
;sfFMathFrExp <float(,float,*int)>
;sfFMathLdExp <float(,float,int)>
;sfFMathLog <float(,float)>
;sfFMathLog10 <float(,float)>
;sfFMathModf <float(,float,*float)>
;sfFMathPow <float(,float,float)>
;sfFMathSqrt <float(,float)>
;sfFMathCeil <float(,float)>
;sfFMathFAbs <float(,float)>
;sfFMathFloor <float(,float)>
;sfFMathFMod <float(,float,float)>
;sfQuaternionToMatrix <void(,*:SfMatrix3x3,float,float,float,float)>
;sfQuaternionToMatrixImu <void(,*:SfMatrix3x3)>
;sfGravityVector <void(,*:SfVector3)>
;sfVec3Set <void(,*:SfVector3,float,float,float)>
;sfVec3Sum <void(,*:SfVector3,*:SfVector3,*:SfVector3)>
;sfVec3Diff <void(,*:SfVector3,*:SfVector3,*:SfVector3)>
;sfVec3MulRowColCx <float(,*:SfVector3,float,float,float)>
;sfVec3MulRowCol <float(,*:SfVector3,*:SfVector3)>
;sfVec3ScSum <void(,*:SfVector3,*:SfVector3,float)>
;sfVec3ScDiff <void(,*:SfVector3,*:SfVector3,float)>
;sfVec3ScMul <void(,*:SfVector3,*:SfVector3,float)>
;sfVec3ScDiv <void(,*:SfVector3,*:SfVector3,float)>
;sfMat3x3Set <void(,*:SfMatrix3x3,float,float,float,float,float,float,float,float,float)>
;sfMat3x3SetAll <void(,*:SfMatrix3x3,float)>
;sfMat3x3SetDiag <void(,*:SfMatrix3x3,float)>
;sfMat3x3Copy <void(,*:SfMatrix3x3,*:SfMatrix3x3)>
;sfMat3x3Transpose <void(,*:SfMatrix3x3,*:SfMatrix3x3)>
;sfMat3x3Mul <void(,*:SfMatrix3x3,*:SfMatrix3x3,*:SfMatrix3x3)>
;sfMat3x3ScMul <void(,*:SfMatrix3x3,*:SfMatrix3x3,float)>
;sfMat3x3MulCol <void(,*:SfVector3,*:SfMatrix3x3,*:SfVector3)>
;sfMat3x3RowMul <void(,*:SfVector3,*:SfVector3,*:SfMatrix3x3)>
;sfWaitFrame <void(,int)>
[3:491] ;sfWaitFrameOut( frame + svFrameCount );
VBC5_PUSH_CONST 17 | 0x80000000 //import func index sfWaitFrameOut
VBC2_PUSH_LOCAL 2 //frame
VBC3_PUSH_GLOBAL 1 //svFrameCount
VBC1_ADD
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[3:497] ;
VBC1_RETURN
;sfUnitParamRead <int(,int,int,*int)>
[3:499] ;if( !sfUnitParamQueryRead( devId, paramIndex ) )
VBC5_PUSH_CONST 66 | 0x80000000 //import func index sfUnitParamQueryRead
VBC2_PUSH_LOCAL 4 //devId
VBC2_PUSH_LOCAL 3 //paramIndex
VBC1_CALL2
VBC1_STACK_UP2//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB90 //if to false
;return 0;
VBC1_PUSH_0 
VBC2_POP_RESULT 5
VBC1_RETURN
LAB90: //if else
[3:503] ;sfWaitNextFrame();
VBC1_WAIT
[3:504] ;sfWaitNextFrame();
VBC1_WAIT
[3:505] ;return sfUnitParamStatusRead( devId, paramIndex, paramValue );
VBC5_PUSH_CONST 68 | 0x80000000 //import func index sfUnitParamStatusRead
VBC2_PUSH_LOCAL 4 //devId
VBC2_PUSH_LOCAL 3 //paramIndex
VBC2_PUSH_LOCAL 2 //paramValue
VBC1_CALL3
VBC1_STACK_UP3//remove call address and params
VBC2_POP_RESULT 5
VBC1_RETURN
;setup <void()>
[1:113] ;orderFromHead = 0;
VBC2_PUSH_CONST 4 //orderFromHead
VBC1_PUSH_0 
VBC1_POP
[1:114] ;rotationFromHead = 0;
VBC2_PUSH_CONST 5 //rotationFromHead
VBC1_PUSH_0 
VBC1_POP_CF
[1:115] ;imu_factor = -1;
VBC2_PUSH_CONST 19 //imu_factor
VBC2_PUSH_CONST -1 // -
VBC1_POP_CF
[1:116] ;vision_factor = 1;
VBC2_PUSH_CONST 20 //vision_factor
VBC1_PUSH_1 
VBC1_POP_CF
[1:117] ;flag_event = 0;
VBC2_PUSH_CONST 74 //flag_event
VBC1_PUSH_0 
VBC1_POP
[1:118] ;cycle_number = 1000;
VBC2_PUSH_CONST 8 //cycle_number
VBC3_PUSH_CONST 1000 
VBC1_POP
[1:119] ;rotationYieldRight = 0.23;
VBC2_PUSH_CONST 38 //rotationYieldRight
VBC5_PUSH_CONST 1047233823 
VBC1_POP
[1:120] ;rotationYieldLeft = 0.23;
VBC2_PUSH_CONST 39 //rotationYieldLeft
VBC5_PUSH_CONST 1047233823 
VBC1_POP
[1:122] ;svIkA5 = 40.2; 
VBC3_PUSH_CONST 3275 //svIkA5
VBC5_PUSH_CONST 1109445837 
VBC1_POP
[1:123] ;svIkB5 = 0;    
VBC3_PUSH_CONST 3276 //svIkB5
VBC1_PUSH_0 
VBC1_POP_CF
[1:124] ;svIkC5 = 0;    
VBC3_PUSH_CONST 3277 //svIkC5
VBC1_PUSH_0 
VBC1_POP_CF
[1:125] ;svIkA6 = 0;    
VBC3_PUSH_CONST 3278 //svIkA6
VBC1_PUSH_0 
VBC1_POP_CF
[1:126] ;svIkA7 = 99;   
VBC3_PUSH_CONST 3279 //svIkA7
VBC2_PUSH_CONST 99 
VBC1_POP_CF
[1:127] ;svIkA8 = 99;   
VBC3_PUSH_CONST 3280 //svIkA8
VBC2_PUSH_CONST 99 
VBC1_POP_CF
[1:128] ;svIkA9 = 0;    
VBC3_PUSH_CONST 3281 //svIkA9
VBC1_PUSH_0 
VBC1_POP_CF
[1:129] ;svIkA10 = 13.7;  
VBC3_PUSH_CONST 3282 //svIkA10
VBC5_PUSH_CONST 1096495923 
VBC1_POP
[1:130] ;svIkB10 = 23.8;  
VBC3_PUSH_CONST 3283 //svIkB10
VBC5_PUSH_CONST 1102997094 
VBC1_POP
[1:131] ;svIkC10 = 0;   
VBC3_PUSH_CONST 3284 //svIkC10
VBC1_PUSH_0 
VBC1_POP_CF
[1:133] ;e10 = 55;      
VBC2_PUSH_CONST 58 //e10
VBC2_PUSH_CONST 55 
VBC1_POP_CF
[1:134] ;d10 = 62;      
VBC2_PUSH_CONST 59 //d10
VBC2_PUSH_CONST 62 
VBC1_POP_CF
[1:137] ;svIkLimA5min = -90 * 0.017453293;
VBC3_PUSH_CONST 3285 //svIkLimA5min
VBC5_PUSH_CONST -1077342245 
VBC1_POP
[1:138] ;svIkLimA5max = 90 * 0.017453293;
VBC3_PUSH_CONST 3286 //svIkLimA5max
VBC5_PUSH_CONST 1070141403 
VBC1_POP
[1:141] ;svIkLimA6min = -108 * 0.017453293;
VBC3_PUSH_CONST 3287 //svIkLimA6min
VBC5_PUSH_CONST -1074706887 
VBC1_POP
[1:142] ;svIkLimA6max = 15 * 0.017453293;
VBC3_PUSH_CONST 3288 //svIkLimA6max
VBC5_PUSH_CONST 1048971922 
VBC1_POP
[1:144] ;svIkLimA7min = -130 * 0.017453293;
VBC3_PUSH_CONST 3289 //svIkLimA7min
VBC5_PUSH_CONST -1072613858 
VBC1_POP
[1:145] ;svIkLimA7max = 50 * 0.017453293;
VBC3_PUSH_CONST 3290 //svIkLimA7max
VBC5_PUSH_CONST 1063216883 
VBC1_POP
[1:148] ;svIkLimA8min = -180 * 0.017453293;
VBC3_PUSH_CONST 3291 //svIkLimA8min
VBC5_PUSH_CONST -1068953637 
VBC1_POP
[1:149] ;svIkLimA8max = 8 * 0.017453293;
VBC3_PUSH_CONST 3292 //svIkLimA8max
VBC5_PUSH_CONST 1041168949 
VBC1_POP
[1:152] ;svIkLimA9min = -45 * 0.017453293;
VBC3_PUSH_CONST 3293 //svIkLimA9min
VBC5_PUSH_CONST -1085730853 
VBC1_POP
[1:153] ;svIkLimA9max = 78 * 0.017453293;
VBC3_PUSH_CONST 3294 //svIkLimA9max
VBC5_PUSH_CONST 1068384497 
VBC1_POP
[1:156] ;svIkLimA10min = -24 * 0.017453293;
VBC3_PUSH_CONST 3295 //svIkLimA10min
VBC5_PUSH_CONST -1093241008 
VBC1_POP
[1:157] ;svIkLimA10max = 24 * 0.017453293;
VBC3_PUSH_CONST 3296 //svIkLimA10max
VBC5_PUSH_CONST 1054242640 
VBC1_POP
[1:158] ;sfIkSetup();
VBC5_PUSH_CONST 200 | 0x80000000 //import func index sfIkSetup
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:160] ;framestep = 2;
VBC2_PUSH_CONST 40 //framestep
VBC1_PUSH_2 
VBC1_POP
[1:164] ;selfMotionShiftCorrectionX = 0.0;
VBC2_PUSH_CONST 25 //selfMotionShiftCorrectionX
VBC1_PUSH_0 
VBC1_POP
[1:165] ;selfMotionShiftCorrectionY = 0.0;
VBC2_PUSH_CONST 26 //selfMotionShiftCorrectionY
VBC1_PUSH_0 
VBC1_POP
[1:169] ;ztr0 = -(svIkC5+svIkA6+svIkA7+svIkA8+svIkA9+svIkB10 - 1); 
VBC2_PUSH_CONST 66 //ztr0
VBC3_PUSH_GLOBAL 3277 //svIkC5
VBC3_PUSH_GLOBAL 3278 //svIkA6
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3279 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3280 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3281 //svIkA9
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3283 //svIkB10
VBC1_ADD_FF
VBC1_PUSH_1 
VBC1_SUB_FI
VBC1_NEG_F
VBC1_POP
[1:170] ;ztl0 = -(svIkC5+svIkA6+svIkA7+svIkA8+svIkA9+svIkB10 - 1); 
VBC2_PUSH_CONST 67 //ztl0
VBC3_PUSH_GLOBAL 3277 //svIkC5
VBC3_PUSH_GLOBAL 3278 //svIkA6
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3279 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3280 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3281 //svIkA9
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3283 //svIkB10
VBC1_ADD_FF
VBC1_PUSH_1 
VBC1_SUB_FI
VBC1_NEG_F
VBC1_POP
[1:172] ;zr = zl = -1;
VBC2_PUSH_CONST 47 //zr
VBC2_PUSH_CONST 55 //zl
VBC2_PUSH_CONST -1 // -
VBC1_STORE_CF
VBC1_POP
[1:175] ;selfInitPoses = 10;
VBC2_PUSH_CONST 34 //selfInitPoses
VBC2_PUSH_CONST 10 
VBC1_POP
[1:178] ;stepLength = 0.0;    
VBC2_PUSH_CONST 22 //stepLength
VBC1_PUSH_0 
VBC1_POP
[1:179] ;sideLength = 0.0;    
VBC2_PUSH_CONST 23 //sideLength
VBC1_PUSH_0 
VBC1_POP
[1:180] ;rotation = 0;        
VBC2_PUSH_CONST 24 //rotation
VBC1_PUSH_0 
VBC1_POP_CF
[1:181] ;selfFirstLegIsRightLeg = 1; 
VBC2_PUSH_CONST 31 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_POP
[1:182] ;motion_to_right = 1;
VBC2_PUSH_CONST 32 //motion_to_right
VBC1_PUSH_1 
VBC1_POP
[1:183] ;side_motion = 0.0;
VBC2_PUSH_CONST 33 //side_motion
VBC1_PUSH_0 
VBC1_POP
[1:184] ;selfInitPoses = 20; 
VBC2_PUSH_CONST 34 //selfInitPoses
VBC2_PUSH_CONST 20 
VBC1_POP
[1:186] ;stepZtr = (ztr0 + gaitHeight) / selfInitPoses;
VBC2_PUSH_CONST 68 //stepZtr
VBC3_PUSH_GLOBAL 66 //ztr0
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_ADD_FI
VBC3_PUSH_GLOBAL 34 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:187] ;stepZtl = (ztl0 + gaitHeight) / selfInitPoses;
VBC2_PUSH_CONST 69 //stepZtl
VBC3_PUSH_GLOBAL 67 //ztl0
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_ADD_FI
VBC3_PUSH_GLOBAL 34 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:189] ;solyLandingSkew = 0.00;
VBC2_PUSH_CONST 17 //solyLandingSkew
VBC1_PUSH_0 
VBC1_POP
[1:191] ;tors_angle = 0;     
VBC2_PUSH_CONST 76 //tors_angle
VBC1_PUSH_0 
VBC1_POP_CF
[1:193] ;stepYtr = amplitude / 2.0 / selfInitPoses;
VBC2_PUSH_CONST 70 //stepYtr
VBC3_PUSH_GLOBAL 60 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 34 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:194] ;stepYtl = amplitude / 2.0 / selfInitPoses;
VBC2_PUSH_CONST 71 //stepYtl
VBC3_PUSH_GLOBAL 60 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 34 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:199] ;alpha01 = 3.141592654;
VBC2_PUSH_CONST 61 //alpha01
VBC5_PUSH_CONST 1078530011 
VBC1_POP
[1:200] ;if( fr1 != 0 )
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_PUSH_0 
VBC1_NOT_EQU
VBC4_FALSE_JUMP LAB549 //if to false
;alpha01 = alpha01 * 2 / fr1;
VBC2_PUSH_CONST 61 //alpha01
VBC3_PUSH_GLOBAL 61 //alpha01
VBC1_PUSH_2 
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_DIV_FI
VBC1_POP
LAB549: //if else
[1:208] ;timeStep = 1;
VBC2_PUSH_CONST 3 //timeStep
VBC1_PUSH_1 
VBC1_POP
[1:210] ;reducer = 0.5;
VBC2_PUSH_CONST 77 //reducer
VBC5_PUSH_CONST 1056964608 
VBC1_POP
[1:212] ;stepLengthOrder = 60;
VBC2_PUSH_CONST 10 //stepLengthOrder
VBC2_PUSH_CONST 60 
VBC1_POP
[1:213] ;ugol_torsa = 0.7;  	
VBC2_PUSH_CONST 18 //ugol_torsa
VBC5_PUSH_CONST 1060320051 
VBC1_POP
[1:214] ;bodyTiltAtWalk = 0.055;
VBC2_PUSH_CONST 16 //bodyTiltAtWalk
VBC5_PUSH_CONST 1029785518 
VBC1_POP
[1:215] ;hipTilt = 0;
VBC2_PUSH_CONST 9 //hipTilt
VBC1_PUSH_0 
VBC1_POP
[1:216] ;gaitHeight = 180; 
VBC2_PUSH_CONST 14 //gaitHeight
VBC3_PUSH_CONST 180 
VBC1_POP
[1:217] ;stepHeight = 40; 
VBC2_PUSH_CONST 15 //stepHeight
VBC2_PUSH_CONST 40 
VBC1_POP
[1:218] ;fps = 4;
VBC2_PUSH_CONST 11 //fps
VBC2_PUSH_CONST 4 
VBC1_POP
[1:219] ;fr1 = 4;           
VBC2_PUSH_CONST 12 //fr1
VBC2_PUSH_CONST 4 
VBC1_POP
[1:220] ;fr2 = 6;          
VBC2_PUSH_CONST 13 //fr2
VBC2_PUSH_CONST 6 
VBC1_POP
[1:221] ;amplitude = 32;    
VBC2_PUSH_CONST 60 //amplitude
VBC2_PUSH_CONST 32 
VBC1_POP_CF
[1:223] ;if (timeStep == 1){
VBC3_PUSH_GLOBAL 3 //timeStep
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB683 //if to false
;
[1:224] ;stepLengthOrder = 30;
VBC2_PUSH_CONST 10 //stepLengthOrder
VBC2_PUSH_CONST 30 
VBC1_POP
[1:225] ;ugol_torsa = 0.3;
VBC2_PUSH_CONST 18 //ugol_torsa
VBC5_PUSH_CONST 1050253722 
VBC1_POP
[1:226] ;bodyTiltAtWalk = -0.02; 
VBC2_PUSH_CONST 16 //bodyTiltAtWalk
VBC5_PUSH_CONST -1130113270 // -
VBC1_POP
[1:227] ;hipTilt = 500;
VBC2_PUSH_CONST 9 //hipTilt
VBC3_PUSH_CONST 500 
VBC1_POP
[1:228] ;gaitHeight = 135;
VBC2_PUSH_CONST 14 //gaitHeight
VBC3_PUSH_CONST 135 
VBC1_POP
[1:229] ;stepHeight = 35;
VBC2_PUSH_CONST 15 //stepHeight
VBC2_PUSH_CONST 35 
VBC1_POP
[1:230] ;fps = 2;
VBC2_PUSH_CONST 11 //fps
VBC1_PUSH_2 
VBC1_POP
[1:231] ;fr1 = 4;           
VBC2_PUSH_CONST 12 //fr1
VBC2_PUSH_CONST 4 
VBC1_POP
[1:232] ;fr2 = 9;          
VBC2_PUSH_CONST 13 //fr2
VBC2_PUSH_CONST 9 
VBC1_POP
[1:233] ;amplitude = 40;    
VBC2_PUSH_CONST 60 //amplitude
VBC2_PUSH_CONST 40 
VBC1_POP_CF
LAB683: //if else
[1:243] ;
VBC1_RETURN
;sitToStart <void(,int)>
[1:248] ;frameCount = 80;
VBC2_PUSH_B_OFFSET 2 //frameCount
VBC2_PUSH_CONST 80 
VBC1_POP
[1:249] ;sfPoseGroup( 33554432 , 700, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 33554432 
VBC3_PUSH_CONST 700 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:250] ;sfPoseGroup( 4 , 1370, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 4 
VBC3_PUSH_CONST 1370 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:251] ;sfPoseGroup( 8 , 1370, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 8 
VBC3_PUSH_CONST 1370 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:252] ;sfPoseGroup( 64 , 1000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 64 
VBC3_PUSH_CONST 1000 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:253] ;sfPoseGroup( 128 , 700, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 128 
VBC3_PUSH_CONST 700 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:254] ;sfPoseGroup( 256 , 4500, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 256 
VBC3_PUSH_CONST 4500 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:255] ;sfPoseGroup( 512 , 4500, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 512 
VBC3_PUSH_CONST 4500 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:256] ;sfPoseGroup( 4096 , 410, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 4096 
VBC3_PUSH_CONST 410 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:257] ;sfPoseGroup( 8192 , -174, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 8192 
VBC3_PUSH_CONST -174 // -
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:258] ;sfPoseGroup( 16384 , 4350, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 16384 
VBC3_PUSH_CONST 4350 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:259] ;sfPoseGroup( 32768 , 4240, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 32768 
VBC3_PUSH_CONST 4240 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:260] ;sfPoseGroup( 65536 , 4800, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 65536 
VBC3_PUSH_CONST 4800 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:261] ;sfPoseGroup( 131072 , 5400, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 131072 
VBC3_PUSH_CONST 5400 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:262] ;sfPoseGroup( 262144 , 2518, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 262144 
VBC3_PUSH_CONST 2518 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:263] ;sfPoseGroup( 524288 , 2550, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 524288 
VBC3_PUSH_CONST 2550 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:264] ;sfPoseGroup( 1048576 , 430, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_CONST 430 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:265] ;sfPoseGroup( 2097152 , -174, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_CONST -174 // -
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:266] ;sfPoseGroup( 67108864 , 2050, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 67108864 
VBC3_PUSH_CONST 2050 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:267] ;sfPoseGroup( 134217728 , 1380, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 134217728 
VBC3_PUSH_CONST 1380 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:268] ;sfWaitFrame( frameCount );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:269] ;sfFreeGroup( 65536 | 131072  );
VBC5_PUSH_CONST 50 | 0x80000000 //import func index sfFreeGroup
VBC4_PUSH_CONST 196608 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:272] ;
VBC1_RETURN
;stabilizeRotationByIMU <void()>
[1:274] ;sfQuaternionToEulerImu();
VBC5_PUSH_CONST 303 | 0x80000000 //import func index sfQuaternionToEulerImu
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:275] ;rotation = (forwardDirection - svEulerYaw) * 1.1;
VBC2_PUSH_CONST 24 //rotation
VBC3_PUSH_GLOBAL 79 //forwardDirection
VBC3_PUSH_GLOBAL 2600 //svEulerYaw
VBC1_SUB_FF
VBC5_PUSH_CONST 1066192077 
VBC1_MUL_FF
VBC1_POP
[1:276] ;if( rotation > 3.141592654 ) rotation -= 2 * 3.141592654;
VBC3_PUSH_GLOBAL 24 //rotation
VBC5_PUSH_CONST 1078530011 
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB1049 //if to false
;if( rotation > 3.141592654 ) rotation -= 2 * 3.141592654;
VBC2_PUSH_CONST 24 //rotation
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1086918619 
VBC1_SUB_FF
VBC1_POP
LAB1049: //if else
[1:277] ;if( rotation < -3.141592654 ) rotation += 2 * 3.141592654;
VBC3_PUSH_GLOBAL 24 //rotation
VBC5_PUSH_CONST -1068953637 // -
VBC1_LESS_FF
VBC4_FALSE_JUMP LAB1073 //if to false
;if( rotation < -3.141592654 ) rotation += 2 * 3.141592654;
VBC2_PUSH_CONST 24 //rotation
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1086918619 
VBC1_ADD_FF
VBC1_POP
LAB1073: //if else
[1:279] ;if (orderFromHead != 0) correctedRotation = vision_factor * rotationFromHead;
VBC3_PUSH_GLOBAL 4 //orderFromHead
VBC1_PUSH_0 
VBC1_NOT_EQU
VBC4_FALSE_JUMP LAB1096 //if to false
;if (orderFromHead != 0) correctedRotation = vision_factor * rotationFromHead;
VBC2_PUSH_CONST 80 //correctedRotation
VBC3_PUSH_GLOBAL 20 //vision_factor
VBC3_PUSH_GLOBAL 5 //rotationFromHead
VBC1_MUL_FF
VBC1_POP
VBC4_JUMP LAB1106 //if to exit
LAB1096: //if else
;else correctedRotation = imu_factor * rotation;
VBC2_PUSH_CONST 80 //correctedRotation
VBC3_PUSH_GLOBAL 19 //imu_factor
VBC3_PUSH_GLOBAL 24 //rotation
VBC1_MUL_FF
VBC1_POP
LAB1106: //if exit
[1:281] ;if (correctedRotation > 0.5) correctedRotation = 0.5;
VBC3_PUSH_GLOBAL 80 //correctedRotation
VBC5_PUSH_CONST 1056964608 
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB1127 //if to false
;if (correctedRotation > 0.5) correctedRotation = 0.5;
VBC2_PUSH_CONST 80 //correctedRotation
VBC5_PUSH_CONST 1056964608 
VBC1_POP
LAB1127: //if else
[1:282] ;if (correctedRotation < -0.5) correctedRotation = -0.5;
VBC3_PUSH_GLOBAL 80 //correctedRotation
VBC5_PUSH_CONST -1090519040 // -
VBC1_LESS_FF
VBC4_FALSE_JUMP LAB1148 //if to false
;if (correctedRotation < -0.5) correctedRotation = -0.5;
VBC2_PUSH_CONST 80 //correctedRotation
VBC5_PUSH_CONST -1090519040 // -
VBC1_POP
LAB1148: //if else
[1:287] ;
VBC1_RETURN
;computeAlphaForWalk <int()>
[1:291] ;flag = 0;
VBC2_PUSH_CONST 73 //flag
VBC1_PUSH_0 
VBC1_POP
[1:292] ;torsoAdd = tors_angle * 2607.594587 ;
VBC2_PUSH_CONST 78 //torsoAdd
VBC3_PUSH_GLOBAL 76 //tors_angle
VBC5_PUSH_CONST 1159920003 
VBC1_MUL_FF
VBC1_POP_CI
[1:306] ;sfIkAngle( xtr, ytr, ztr, xr, yr, zr, wr );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 42 //xtr
VBC3_PUSH_GLOBAL 43 //ytr
VBC3_PUSH_GLOBAL 44 //ztr
VBC3_PUSH_GLOBAL 45 //xr
VBC3_PUSH_GLOBAL 46 //yr
VBC3_PUSH_GLOBAL 47 //zr
VBC3_PUSH_GLOBAL 48 //wr
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
[1:307] ;if( svIkOutPresent ) {
VBC3_PUSH_GLOBAL 3297 //svIkOutPresent
VBC4_FALSE_JUMP LAB1568 //if to false
;
[1:308] ;flag = flag + 1;
VBC2_PUSH_CONST 73 //flag
VBC3_PUSH_GLOBAL 73 //flag
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
[1:310] ;if (selfFirstLegIsRightLeg == 1){
VBC3_PUSH_GLOBAL 31 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB1394 //if to false
;
[1:311] ;sfPoseGroupLin( 1024 , -(svIkEncA5 - torsoAdd), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 3298 //svIkEncA5
VBC3_PUSH_GLOBAL 78 //torsoAdd
VBC1_SUB
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:312] ;sfPoseGroupLin( 4096 , -svIkEncA6, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 3299 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:313] ;sfPoseGroupLin( 16384 , -svIkEncA7 + hipTilt, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 3300 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 9 //hipTilt
VBC1_ADD
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:314] ;sfPoseGroupLin( 65536 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:315] ;sfPoseGroupLin( 67108864 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 67108864 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:316] ;sfPoseGroupLin( 262144 , svIkEncA9, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 3302 //svIkEncA9
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:317] ;sfPoseGroupLin( 1048576 , -svIkEncA10, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 3303 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:318] ;sfPoseGroupLin( 2 , -torsoAdd, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 78 //torsoAdd
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:319] ;sfPoseGroupLin( 4 , (1400 - xtl * 30), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_CONST 4 
VBC3_PUSH_CONST 1400 
VBC3_PUSH_GLOBAL 50 //xtl
VBC2_PUSH_CONST 30 
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB1568 //if to exit
LAB1394: //if else
;
[1:322] ;sfPoseGroupLin( 2048 , (svIkEncA5 - tors_angle), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 3298 //svIkEncA5
VBC3_PUSH_GLOBAL 76 //tors_angle
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:323] ;sfPoseGroupLin( 8192 , -svIkEncA6, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 3299 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:324] ;sfPoseGroupLin( 32768 , -svIkEncA7 + hipTilt, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 3300 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 9 //hipTilt
VBC1_ADD
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:325] ;sfPoseGroupLin( 131072 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:326] ;sfPoseGroupLin( 134217728 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 134217728 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:327] ;sfPoseGroupLin( 524288 , svIkEncA9, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 3302 //svIkEncA9
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:328] ;sfPoseGroupLin( 2097152 , -svIkEncA10, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 3303 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:329] ;sfPoseGroupLin(2 , -torsoAdd, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 78 //torsoAdd
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:330] ;sfPoseGroupLin( 8 , (1400 - xtr * 30), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_CONST 8 
VBC3_PUSH_CONST 1400 
VBC3_PUSH_GLOBAL 42 //xtr
VBC2_PUSH_CONST 30 
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB1568: //if exit
LAB1568: //if else
[1:336] ;sfIkAngle( xtl, -ytl, ztl, xl, -yl, zl, wl );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 50 //xtl
VBC3_PUSH_GLOBAL 51 //ytl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 52 //ztl
VBC3_PUSH_GLOBAL 53 //xl
VBC3_PUSH_GLOBAL 54 //yl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 55 //zl
VBC3_PUSH_GLOBAL 56 //wl
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
[1:347] ;if( svIkOutPresent ) {
VBC3_PUSH_GLOBAL 3297 //svIkOutPresent
VBC4_FALSE_JUMP LAB1943 //if to false
;
[1:348] ;flag = flag + 1;
VBC2_PUSH_CONST 73 //flag
VBC3_PUSH_GLOBAL 73 //flag
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
[1:350] ;if (selfFirstLegIsRightLeg == 1){
VBC3_PUSH_GLOBAL 31 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB1785 //if to false
;
[1:351] ;sfPoseGroupLin( 2048 , -(svIkEncA5 + torsoAdd), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 3298 //svIkEncA5
VBC3_PUSH_GLOBAL 78 //torsoAdd
VBC1_ADD
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:352] ;sfPoseGroupLin( 8192 , -svIkEncA6, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 3299 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:353] ;sfPoseGroupLin( 32768 , -svIkEncA7 + hipTilt, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 3300 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 9 //hipTilt
VBC1_ADD
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:354] ;sfPoseGroupLin( 131072 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:355] ;sfPoseGroupLin( 134217728 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 134217728 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:356] ;sfPoseGroupLin( 524288 , svIkEncA9, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 3302 //svIkEncA9
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:357] ;sfPoseGroupLin( 2097152 , -svIkEncA10, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 3303 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:358] ;sfPoseGroupLin( 8 , (1400 - xtr * 30), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_CONST 8 
VBC3_PUSH_CONST 1400 
VBC3_PUSH_GLOBAL 42 //xtr
VBC2_PUSH_CONST 30 
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB1943 //if to exit
LAB1785: //if else
;
[1:361] ;sfPoseGroupLin( 1024 , (svIkEncA5 - tors_angle), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 3298 //svIkEncA5
VBC3_PUSH_GLOBAL 76 //tors_angle
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:362] ;sfPoseGroupLin( 4096 , -svIkEncA6, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 3299 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:363] ;sfPoseGroupLin( 16384 , -svIkEncA7 + hipTilt, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 3300 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 9 //hipTilt
VBC1_ADD
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:364] ;sfPoseGroupLin( 65536 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:365] ;sfPoseGroupLin( 67108864 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 67108864 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:366] ;sfPoseGroupLin( 262144 , svIkEncA9, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 3302 //svIkEncA9
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:367] ;sfPoseGroupLin( 1048576 , -svIkEncA10, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 3303 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:368] ;sfPoseGroupLin( 4 , (1400 - xtl * 30), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_CONST 4 
VBC3_PUSH_CONST 1400 
VBC3_PUSH_GLOBAL 50 //xtl
VBC2_PUSH_CONST 30 
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB1943: //if exit
LAB1943: //if else
[1:372] ;sfWaitFrame( timeStep );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 3 //timeStep
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:373] ;if (flag < 2) flag_event = flag_event + 1;
VBC3_PUSH_GLOBAL 73 //flag
VBC1_PUSH_2 
VBC1_LESS
VBC4_FALSE_JUMP LAB1967 //if to false
;if (flag < 2) flag_event = flag_event + 1;
VBC2_PUSH_CONST 74 //flag_event
VBC3_PUSH_GLOBAL 74 //flag_event
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
LAB1967: //if else
[1:374] ;return 1;
VBC1_PUSH_1 
VBC2_POP_RESULT 2
VBC1_RETURN
;computeAlphaForWalkFine <void(,int)>
[1:389] ;sfIkAngle( xtr, ytr, ztr, xr, yr, zr, wr );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 42 //xtr
VBC3_PUSH_GLOBAL 43 //ytr
VBC3_PUSH_GLOBAL 44 //ztr
VBC3_PUSH_GLOBAL 45 //xr
VBC3_PUSH_GLOBAL 46 //yr
VBC3_PUSH_GLOBAL 47 //zr
VBC3_PUSH_GLOBAL 48 //wr
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
[1:391] ;if( svIkOutPresent ) {
VBC3_PUSH_GLOBAL 3297 //svIkOutPresent
VBC4_FALSE_JUMP LAB2259 //if to false
;
[1:393] ;if (selfFirstLegIsRightLeg == 1){
VBC3_PUSH_GLOBAL 31 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB2139 //if to false
;
[1:394] ;sfPoseGroupLin( 1024 , -svIkEncA5, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 3298 //svIkEncA5
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:395] ;sfPoseGroupLin( 4096 , -svIkEncA6, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 3299 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:396] ;sfPoseGroupLin( 16384 , -svIkEncA7, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 3300 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:397] ;sfPoseGroupLin( 65536 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:398] ;sfPoseGroupLin( 67108864 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 67108864 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:399] ;sfPoseGroupLin( 262144 , svIkEncA9, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 3302 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:400] ;sfPoseGroupLin( 1048576 , -svIkEncA10, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 3303 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB2259 //if to exit
LAB2139: //if else
;
[1:403] ;sfPoseGroupLin( 2048 , svIkEncA5, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 3298 //svIkEncA5
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:404] ;sfPoseGroupLin( 8192 , -svIkEncA6, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 3299 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:405] ;sfPoseGroupLin( 32768 , -svIkEncA7, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 3300 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:406] ;sfPoseGroupLin( 131072 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:407] ;sfPoseGroupLin( 134217728 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 134217728 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:408] ;sfPoseGroupLin( 524288 , svIkEncA9, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 3302 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:409] ;sfPoseGroupLin( 2097152 , -svIkEncA10, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 3303 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB2259: //if exit
LAB2259: //if else
[1:415] ;sfIkAngle( xtl, -ytl, ztl, xl, -yl, zl, wl );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 50 //xtl
VBC3_PUSH_GLOBAL 51 //ytl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 52 //ztl
VBC3_PUSH_GLOBAL 53 //xl
VBC3_PUSH_GLOBAL 54 //yl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 55 //zl
VBC3_PUSH_GLOBAL 56 //wl
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
[1:416] ;if( svIkOutPresent ) {
VBC3_PUSH_GLOBAL 3297 //svIkOutPresent
VBC4_FALSE_JUMP LAB2549 //if to false
;
[1:418] ;if (selfFirstLegIsRightLeg == 1){
VBC3_PUSH_GLOBAL 31 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB2430 //if to false
;
[1:419] ;sfPoseGroupLin( 2048 , -svIkEncA5, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 3298 //svIkEncA5
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:420] ;sfPoseGroupLin( 8192 , -svIkEncA6, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 3299 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:421] ;sfPoseGroupLin( 32768 , -svIkEncA7, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 3300 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:422] ;sfPoseGroupLin( 131072 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:423] ;sfPoseGroupLin( 134217728 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 134217728 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:424] ;sfPoseGroupLin( 524288 , svIkEncA9, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 3302 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:425] ;sfPoseGroupLin( 2097152 , -svIkEncA10, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 3303 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB2549 //if to exit
LAB2430: //if else
;
[1:428] ;sfPoseGroupLin( 1024 , svIkEncA5, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 3298 //svIkEncA5
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:429] ;sfPoseGroupLin( 4096 , -svIkEncA6, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 3299 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:430] ;sfPoseGroupLin( 16384 , -svIkEncA7, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 3300 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:431] ;sfPoseGroupLin( 65536 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:432] ;sfPoseGroupLin( 67108864 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 67108864 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:433] ;sfPoseGroupLin( 262144 , svIkEncA9, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 3302 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:434] ;sfPoseGroupLin( 1048576 , -svIkEncA10, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 3303 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB2549: //if exit
LAB2549: //if else
[1:438] ;sfPoseGroupLin( 256  | 512 , 4540, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 768 
VBC3_PUSH_CONST 4540 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:439] ;sfPoseGroupLin( 4  | 8 , 1400, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_CONST 12 
VBC3_PUSH_CONST 1400 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:440] ;sfPoseGroupLin( 64  | 128 , 1000, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 192 
VBC3_PUSH_CONST 1000 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:441] ;sfPoseGroupLin( 16  | 32 , 1000, frameCount);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_CONST 48 
VBC3_PUSH_CONST 1000 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:442] ;sfWaitFrame( frameCount );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:445] ;
VBC1_RETURN
;standUp <void()>
[1:446] ;if (fallingFlag == 1) {  
VBC3_PUSH_GLOBAL 36 //fallingFlag
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB2988 //if to false
;
[1:448] ;frameCount = 10;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 10 
VBC1_POP
[1:449] ;sfPoseGroup(1056964607 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 1056964607 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:450] ;sfPoseGroup(256  | 512 , 5145, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 768 
VBC3_PUSH_CONST 5145 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:451] ;sfPoseGroup(4  | 8 , 384, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 12 
VBC3_PUSH_CONST 384 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:452] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:454] ;frameCount = 50;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 50 
VBC1_POP
[1:455] ;sfPoseGroup(262144  | 524288 , 3698, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 786432 
VBC3_PUSH_CONST 3698 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:456] ;sfPoseGroup(65536  | 131072 , 6144, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 196608 
VBC3_PUSH_CONST 6144 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:457] ;sfPoseGroup(16384  | 32768 , 6084, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 49152 
VBC3_PUSH_CONST 6084 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:458] ;sfPoseGroup(256  | 512 , 5836, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 768 
VBC3_PUSH_CONST 5836 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:459] ;sfPoseGroup(4  | 8 , 3087, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 12 
VBC3_PUSH_CONST 3087 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:460] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:462] ;frameCount = 10;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 10 
VBC1_POP
[1:463] ;sfPoseGroup(262144  | 524288 , 3072, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 786432 
VBC3_PUSH_CONST 3072 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:464] ;sfPoseGroup(16384  | 32768 , 5222, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 49152 
VBC3_PUSH_CONST 5222 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:465] ;sfPoseGroup(256  | 512 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 768 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:466] ;sfPoseGroup(4  | 8 , 3072, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 12 
VBC3_PUSH_CONST 3072 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:467] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:469] ;frameCount = 10;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 10 
VBC1_POP
[1:470] ;sfPoseGroup(262144  | 524288 , 2267, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 786432 
VBC3_PUSH_CONST 2267 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:471] ;sfPoseGroup(65536  | 131072 , 6144, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 196608 
VBC3_PUSH_CONST 6144 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:472] ;sfPoseGroup(16384  | 32768 , 5130, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 49152 
VBC3_PUSH_CONST 5130 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:473] ;sfPoseGroup(4  | 8 , 2304, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 12 
VBC3_PUSH_CONST 2304 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:474] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:476] ;frameCount = 50;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 50 
VBC1_POP
[1:477] ;sfPoseGroup(1056964607 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 1056964607 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:478] ;sfPoseGroup(256  | 512 , 5145, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 768 
VBC3_PUSH_CONST 5145 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:479] ;sfPoseGroup(4  | 8 , 384, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 12 
VBC3_PUSH_CONST 384 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:480] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB2988: //if else
[1:482] ;if (fallingFlag == -1) {  
VBC3_PUSH_GLOBAL 36 //fallingFlag
VBC2_PUSH_CONST -1 // -
VBC1_EQU
VBC4_FALSE_JUMP LAB3471 //if to false
;
[1:484] ;frameCount = 20;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 20 
VBC1_POP
[1:485] ;sfPoseGroup(1056964607 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 1056964607 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:486] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:488] ;frameCount = 30;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 30 
VBC1_POP
[1:489] ;sfPoseGroup(262144  | 524288 , 3532, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 786432 
VBC3_PUSH_CONST 3532 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:490] ;sfPoseGroup(65536  | 131072 , 5376, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 196608 
VBC3_PUSH_CONST 5376 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:491] ;sfPoseGroup(16384  | 32768 , -2457, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 49152 
VBC3_PUSH_CONST -2457 // -
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:492] ;sfPoseGroup(256  | 512 , 2150, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 768 
VBC3_PUSH_CONST 2150 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:493] ;sfPoseGroup(64  | 128 , -3072, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 192 
VBC3_PUSH_CONST -3072 // -
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:494] ;sfPoseGroup(16  | 32 , 7680, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 48 
VBC3_PUSH_CONST 7680 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:495] ;sfPoseGroup(4  | 8 , 2764, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 12 
VBC3_PUSH_CONST 2764 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:496] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:498] ;frameCount = 20;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 20 
VBC1_POP
[1:499] ;sfPoseGroup(65536  | 131072 , 3717, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 196608 
VBC3_PUSH_CONST 3717 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:500] ;sfPoseGroup(16384  | 32768 , -2274, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 49152 
VBC3_PUSH_CONST -2274 // -
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:501] ;sfPoseGroup(256  | 512 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 768 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:502] ;sfPoseGroup(4  | 8 , 4254, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 12 
VBC3_PUSH_CONST 4254 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:503] ;sfPoseGroup(33554432 , 4712, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 33554432 
VBC3_PUSH_CONST 4712 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:504] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:506] ;frameCount = 50;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 50 
VBC1_POP
[1:507] ;sfPoseGroup(1048576  | 2097152 , 102, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 3145728 
VBC2_PUSH_CONST 102 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:508] ;sfPoseGroup(262144  | 524288 , 1721, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 786432 
VBC3_PUSH_CONST 1721 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:509] ;sfPoseGroup(65536  | 131072 , 3445, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 196608 
VBC3_PUSH_CONST 3445 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:510] ;sfPoseGroup(16384  | 32768 , 1721, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 49152 
VBC3_PUSH_CONST 1721 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:511] ;sfPoseGroup(4096  | 8192 , 102, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 12288 
VBC2_PUSH_CONST 102 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:512] ;sfPoseGroup(256  | 512 , 4094, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 768 
VBC3_PUSH_CONST 4094 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:513] ;sfPoseGroup(64  | 128 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 192 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:514] ;sfPoseGroup(16  | 32 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 48 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:515] ;sfPoseGroup(4  | 8 , 399, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 12 
VBC3_PUSH_CONST 399 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:516] ;sfPoseGroup(33554432 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 33554432 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:517] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:519] ;frameCount = 10;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 10 
VBC1_POP
[1:520] ;sfPoseGroup(1056964607 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 1056964607 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:521] ;sfPoseGroup(256  | 512 , 5145, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 768 
VBC3_PUSH_CONST 5145 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:522] ;sfPoseGroup(4  | 8 , 384, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 12 
VBC3_PUSH_CONST 384 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:523] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB3471: //if else
[1:525] ;if (fallingFlag == 2) {  
VBC3_PUSH_GLOBAL 36 //fallingFlag
VBC1_PUSH_2 
VBC1_EQU
VBC4_FALSE_JUMP LAB3686 //if to false
;
[1:527] ;frameCount = 40;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 40 
VBC1_POP
[1:528] ;sfPoseGroup(1056964607 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 1056964607 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:529] ;sfPoseGroup(256 , 3072, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 256 
VBC3_PUSH_CONST 3072 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:530] ;sfPoseGroup(16 , 768, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 16 
VBC3_PUSH_CONST 768 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:531] ;sfPoseGroup(4 , -768, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 4 
VBC3_PUSH_CONST -768 // -
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:532] ;sfPoseGroup(512 , 3840, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 512 
VBC3_PUSH_CONST 3840 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:533] ;sfPoseGroup(32 , 3840, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 32 
VBC3_PUSH_CONST 3840 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:534] ;sfPoseGroup(8 , 3840, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 8 
VBC3_PUSH_CONST 3840 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:535] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:537] ;frameCount = 60;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 60 
VBC1_POP
[1:538] ;sfPoseGroup(256  | 512 , 3072, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 768 
VBC3_PUSH_CONST 3072 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:539] ;sfPoseGroup(16  | 32 , 307, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 48 
VBC3_PUSH_CONST 307 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:540] ;sfPoseGroup(4  | 8 , -1228, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 12 
VBC3_PUSH_CONST -1228 // -
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:541] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:543] ;frameCount = 20;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 20 
VBC1_POP
[1:544] ;sfPoseGroup(1056964607 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 1056964607 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:545] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB3686: //if else
[1:547] ;if (fallingFlag == -2) {  
VBC3_PUSH_GLOBAL 36 //fallingFlag
VBC2_PUSH_CONST -2 // -
VBC1_EQU
VBC4_FALSE_JUMP LAB3902 //if to false
;
[1:549] ;frameCount = 40;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 40 
VBC1_POP
[1:550] ;sfPoseGroup(1056964607 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 1056964607 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:551] ;sfPoseGroup(256 , 3840, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 256 
VBC3_PUSH_CONST 3840 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:552] ;sfPoseGroup(16 , 3840, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 16 
VBC3_PUSH_CONST 3840 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:553] ;sfPoseGroup(4 , 3840, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 4 
VBC3_PUSH_CONST 3840 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:554] ;sfPoseGroup(512 , 3072, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 512 
VBC3_PUSH_CONST 3072 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:555] ;sfPoseGroup(32 , 768, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 32 
VBC3_PUSH_CONST 768 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:556] ;sfPoseGroup(8 , -768, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 8 
VBC3_PUSH_CONST -768 // -
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:557] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:559] ;frameCount = 60;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 60 
VBC1_POP
[1:560] ;sfPoseGroup(256  | 512 , 3072, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 768 
VBC3_PUSH_CONST 3072 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:561] ;sfPoseGroup(16  | 32 , 307, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 48 
VBC3_PUSH_CONST 307 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:562] ;sfPoseGroup(4  | 8 , -1228, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 12 
VBC3_PUSH_CONST -1228 // -
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:563] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:565] ;frameCount = 20;
VBC2_PUSH_CONST 41 //frameCount
VBC2_PUSH_CONST 20 
VBC1_POP
[1:566] ;sfPoseGroup(1056964607 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 1056964607 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:567] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 41 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB3902: //if else
[1:573] ;
VBC1_RETURN
;testDrop <void()>
[1:574] ;if( sfAbs(svImuAccX) > 50000 || sfAbs(svImuAccZ) > 50000 ) {
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 2560 //svImuAccX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC4_PUSH_CONST 50000 
VBC1_GREAT
VBC4_TRUE_JUMP_KEEP LAB3942
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 2562 //svImuAccZ
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC4_PUSH_CONST 50000 
VBC1_GREAT
VBC4_TRUE_JUMP_KEEP LAB3942
VBC1_PUSH_0
LAB3942:
VBC4_FALSE_JUMP LAB4013 //if to false
;
[1:576] ;if (svImuAccX > 5000) fallingFlag = 1; 
VBC3_PUSH_GLOBAL 2560 //svImuAccX
VBC3_PUSH_CONST 5000 
VBC1_GREAT
VBC4_FALSE_JUMP LAB3961 //if to false
;if (svImuAccX > 5000) fallingFlag = 1; 
VBC2_PUSH_CONST 36 //fallingFlag
VBC1_PUSH_1 
VBC1_POP
LAB3961: //if else
[1:577] ;if (svImuAccX < 5000) fallingFlag = -1; 
VBC3_PUSH_GLOBAL 2560 //svImuAccX
VBC3_PUSH_CONST 5000 
VBC1_LESS
VBC4_FALSE_JUMP LAB3977 //if to false
;if (svImuAccX < 5000) fallingFlag = -1; 
VBC2_PUSH_CONST 36 //fallingFlag
VBC2_PUSH_CONST -1 // -
VBC1_POP
LAB3977: //if else
[1:578] ;if (svImuAccZ > 5000) fallingFlag = 2; 
VBC3_PUSH_GLOBAL 2562 //svImuAccZ
VBC3_PUSH_CONST 5000 
VBC1_GREAT
VBC4_FALSE_JUMP LAB3992 //if to false
;if (svImuAccZ > 5000) fallingFlag = 2; 
VBC2_PUSH_CONST 36 //fallingFlag
VBC1_PUSH_2 
VBC1_POP
LAB3992: //if else
[1:579] ;if (svImuAccZ < 5000) fallingFlag = -2; 
VBC3_PUSH_GLOBAL 2562 //svImuAccZ
VBC3_PUSH_CONST 5000 
VBC1_LESS
VBC4_FALSE_JUMP LAB4008 //if to false
;if (svImuAccZ < 5000) fallingFlag = -2; 
VBC2_PUSH_CONST 36 //fallingFlag
VBC2_PUSH_CONST -2 // -
VBC1_POP
LAB4008: //if else
[1:585] ;standUp();
VBC3_PUSH_CONST 2614  //func address standUp
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB4013: //if else
[1:589] ;
VBC1_RETURN
;walkInitialPose <void()>
[1:594] ;xtr = xtl = 0;
VBC2_PUSH_CONST 42 //xtr
VBC2_PUSH_CONST 50 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:595] ;for( j = 0; j < selfInitPoses; j++ ) {
VBC2_PUSH_CONST 81 //j
VBC1_PUSH_0 
VBC1_POP
LAB4025: //for condition
VBC3_PUSH_GLOBAL 81 //j
VBC3_PUSH_GLOBAL 34 //selfInitPoses
VBC1_LESS
VBC4_FALSE_JUMP LAB4110 //to for exit
;
[1:597] ;ztr = ztr0 - j * stepZtr;
VBC2_PUSH_CONST 44 //ztr
VBC3_PUSH_GLOBAL 66 //ztr0
VBC3_PUSH_GLOBAL 81 //j
VBC3_PUSH_GLOBAL 68 //stepZtr
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:598] ;ztl = ztl0 - j * stepZtl;
VBC2_PUSH_CONST 52 //ztl
VBC3_PUSH_GLOBAL 67 //ztl0
VBC3_PUSH_GLOBAL 81 //j
VBC3_PUSH_GLOBAL 69 //stepZtl
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:599] ;ytr = -d10 - j * stepYtr;
VBC2_PUSH_CONST 43 //ytr
VBC3_PUSH_GLOBAL 59 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 81 //j
VBC3_PUSH_GLOBAL 70 //stepYtr
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:600] ;ytl =  d10 - j * stepYtl;
VBC2_PUSH_CONST 51 //ytl
VBC3_PUSH_GLOBAL 59 //d10
VBC3_PUSH_GLOBAL 81 //j
VBC3_PUSH_GLOBAL 71 //stepYtl
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:602] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 1149  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB4103 //if to false
;return;
VBC1_RETURN
LAB4103: //if else
LAB4103: //for step
VBC2_PUSH_CONST 81 //j
VBC1_INC
VBC4_JUMP LAB4025 //to condition
LAB4110: //for exit
[1:612] ;
VBC1_RETURN
;walkInitialPoseFine <void()>
[1:613] ;xtr = xtl = 0;
VBC2_PUSH_CONST 42 //xtr
VBC2_PUSH_CONST 50 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:614] ;ztr = ztl = -gaitHeight;
VBC2_PUSH_CONST 44 //ztr
VBC2_PUSH_CONST 52 //ztl
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC1_STORE_CF
VBC1_POP
[1:615] ;ytr = -d10 - amplitude / 2.0;
VBC2_PUSH_CONST 43 //ytr
VBC3_PUSH_GLOBAL 59 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 60 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:616] ;ytl =  d10 - amplitude / 2.0;
VBC2_PUSH_CONST 51 //ytl
VBC3_PUSH_GLOBAL 59 //d10
VBC3_PUSH_GLOBAL 60 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:617] ;computeAlphaForWalkFine( 80 );
VBC3_PUSH_CONST 1971  //func address computeAlphaForWalkFine
VBC2_PUSH_CONST 80 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:621] ;
VBC1_RETURN
;walkFinalPose <void()>
[1:622] ;for( j = 0; j < selfInitPoses; j++ ) {
VBC2_PUSH_CONST 81 //j
VBC1_PUSH_0 
VBC1_POP
LAB4173: //for condition
VBC3_PUSH_GLOBAL 81 //j
VBC3_PUSH_GLOBAL 34 //selfInitPoses
VBC1_LESS
VBC4_FALSE_JUMP LAB4276 //to for exit
;
[1:624] ;ztr = -gaitHeight + (j+1) * stepZtr;
VBC2_PUSH_CONST 44 //ztr
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 81 //j
VBC1_PUSH_1 
VBC1_ADD
VBC3_PUSH_GLOBAL 68 //stepZtr
VBC1_MUL_IF
VBC1_ADD_IF
VBC1_POP
[1:625] ;ztl = -gaitHeight + (j+1) * stepZtr;
VBC2_PUSH_CONST 52 //ztl
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 81 //j
VBC1_PUSH_1 
VBC1_ADD
VBC3_PUSH_GLOBAL 68 //stepZtr
VBC1_MUL_IF
VBC1_ADD_IF
VBC1_POP
[1:626] ;ytr = -d10 + (selfInitPoses - (j+1)) * stepYtr;
VBC2_PUSH_CONST 43 //ytr
VBC3_PUSH_GLOBAL 59 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 34 //selfInitPoses
VBC3_PUSH_GLOBAL 81 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_SUB
VBC3_PUSH_GLOBAL 70 //stepYtr
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:627] ;ytl =  d10 + (selfInitPoses - (j+1)) * stepYtl;
VBC2_PUSH_CONST 51 //ytl
VBC3_PUSH_GLOBAL 59 //d10
VBC3_PUSH_GLOBAL 34 //selfInitPoses
VBC3_PUSH_GLOBAL 81 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_SUB
VBC3_PUSH_GLOBAL 71 //stepYtl
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:629] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 1149  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB4269 //if to false
;return;
VBC1_RETURN
LAB4269: //if else
LAB4269: //for step
VBC2_PUSH_CONST 81 //j
VBC1_INC
VBC4_JUMP LAB4173 //to condition
LAB4276: //for exit
[1:640] ;
VBC1_RETURN
;walkFinalPoseFine <void()>
[1:641] ;xtr = xtl = 0;
VBC2_PUSH_CONST 42 //xtr
VBC2_PUSH_CONST 50 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:642] ;ztr = ztl = -(svIkC5+svIkA6+svIkA7+svIkA8+svIkA9+svIkB10 - 1);
VBC2_PUSH_CONST 44 //ztr
VBC2_PUSH_CONST 52 //ztl
VBC3_PUSH_GLOBAL 3277 //svIkC5
VBC3_PUSH_GLOBAL 3278 //svIkA6
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3279 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3280 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3281 //svIkA9
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3283 //svIkB10
VBC1_ADD_FF
VBC1_PUSH_1 
VBC1_SUB_FI
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:643] ;ytr = -d10;
VBC2_PUSH_CONST 43 //ytr
VBC3_PUSH_GLOBAL 59 //d10
VBC1_NEG_F
VBC1_POP
[1:644] ;ytl =  d10;
VBC2_PUSH_CONST 51 //ytl
VBC3_PUSH_GLOBAL 59 //d10
VBC1_POP
[1:645] ;computeAlphaForWalkFine( 40 );
VBC3_PUSH_CONST 1971  //func address computeAlphaForWalkFine
VBC2_PUSH_CONST 40 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:648] ;
VBC1_RETURN
;walkInit <void()>
[1:662] ;correctedStepLenght = stepLength + selfMotionShiftCorrectionX;
VBC2_PUSH_CONST 62 //correctedStepLenght
VBC3_PUSH_GLOBAL 22 //stepLength
VBC3_PUSH_GLOBAL 25 //selfMotionShiftCorrectionX
VBC1_ADD_FF
VBC1_POP
[1:663] ;correctedStepLenghtHalf = correctedStepLenght / 2;
VBC2_PUSH_CONST 63 //correctedStepLenghtHalf
VBC3_PUSH_GLOBAL 62 //correctedStepLenght
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_POP
[1:664] ;correctedSideLenght = sideLength - selfMotionShiftCorrectionY;
VBC2_PUSH_CONST 64 //correctedSideLenght
VBC3_PUSH_GLOBAL 23 //sideLength
VBC3_PUSH_GLOBAL 26 //selfMotionShiftCorrectionY
VBC1_SUB_FF
VBC1_POP
[1:665] ;correctedSideLenghtHalf = correctedSideLenght / 2;
VBC2_PUSH_CONST 65 //correctedSideLenghtHalf
VBC3_PUSH_GLOBAL 64 //correctedSideLenght
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_POP
[1:671] ;stepRotation = correctedRotation / (fr2 - 2.0) * 2;
VBC2_PUSH_CONST 93 //stepRotation
VBC3_PUSH_GLOBAL 80 //correctedRotation
VBC3_PUSH_GLOBAL 13 //fr2
VBC5_PUSH_CONST 1073741824 
VBC1_SUB_IF
VBC1_DIV_FF
VBC1_PUSH_2 
VBC1_MUL_FI
VBC1_POP
[1:673] ;dx0Typical = correctedStepLenght / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 84 //dx0Typical
VBC3_PUSH_GLOBAL 62 //correctedStepLenght
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_POP
[1:674] ;dy0Typical = correctedSideLenght / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 85 //dy0Typical
VBC3_PUSH_GLOBAL 64 //correctedSideLenght
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_POP
[1:675] ;dobavka_x_ot_torsa = svIkA5 * 2.0 * sfMathSin(ugol_torsa) / fr2;
VBC2_PUSH_CONST 75 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 3275 //svIkA5
VBC5_PUSH_CONST 1073741824 
VBC1_MUL_FF
VBC5_PUSH_CONST 301 | 0x80000000 //import func index sfMathSin
//alloc addon amount for result
VBC3_PUSH_GLOBAL 18 //ugol_torsa
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_DIV_FI
VBC1_POP
[1:677] ;xr = xl = bodyTiltAtWalk;
VBC2_PUSH_CONST 45 //xr
VBC2_PUSH_CONST 53 //xl
VBC3_PUSH_GLOBAL 16 //bodyTiltAtWalk
VBC1_STORE
VBC1_POP
[1:678] ;yl =  solyLandingSkew;
VBC2_PUSH_CONST 54 //yl
VBC3_PUSH_GLOBAL 17 //solyLandingSkew
VBC1_POP
[1:679] ;yr = -solyLandingSkew;
VBC2_PUSH_CONST 46 //yr
VBC3_PUSH_GLOBAL 17 //solyLandingSkew
VBC1_NEG_F
VBC1_POP
[1:680] ;fase_offset = 0.7; 
VBC2_PUSH_CONST 87 //fase_offset
VBC5_PUSH_CONST 1060320051 
VBC1_POP
[1:681] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 1002  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:686] ;
VBC1_RETURN
;walkPhasa1 <void()>
[1:687] ;ztl = ztr = -gaitHeight;
VBC2_PUSH_CONST 52 //ztl
VBC2_PUSH_CONST 44 //ztr
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC1_STORE_CF
VBC1_POP
[1:688] ;xtl_plan = correctedStepLenght * (0.5 - fr1 / (2.0 * fr1 + fr2)) - dobavka_x_ot_torsa * fr1 * fr2 / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 94 //xtl_plan
VBC3_PUSH_GLOBAL 62 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 12 //fr1
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD_FI
VBC1_DIV_IF
VBC1_SUB_FF
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 75 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_MUL_FI
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:689] ;for( j = 0; j < fr1; j ++ ) {
VBC2_PUSH_CONST 81 //j
VBC1_PUSH_0 
VBC1_POP
LAB4564: //for condition
VBC3_PUSH_GLOBAL 81 //j
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_LESS
VBC4_FALSE_JUMP LAB4706 //to for exit
;
[1:691] ;s = (amplitude / 2 + correctedSideLenghtHalf) * sfMathCos(alpha01 * (j / 2 + fase_offset * framestep));
VBC2_PUSH_CONST 86 //s
VBC3_PUSH_GLOBAL 60 //amplitude
VBC1_PUSH_2 
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 65 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 61 //alpha01
VBC3_PUSH_GLOBAL 81 //j
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 87 //fase_offset
VBC3_PUSH_GLOBAL 40 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_MUL_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_MUL_FF
VBC1_POP
[1:692] ;ytr = s - d10 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 43 //ytr
VBC3_PUSH_GLOBAL 86 //s
VBC3_PUSH_GLOBAL 59 //d10
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 65 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
[1:693] ;ytl = s + d10 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 51 //ytl
VBC3_PUSH_GLOBAL 86 //s
VBC3_PUSH_GLOBAL 59 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 65 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
[1:694] ;if( stepType == 0 ) continue;
VBC3_PUSH_GLOBAL 72 //stepType
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB4653 //if to false
;if( stepType == 0 ) continue;
VBC4_JUMP LAB4699 //to loop condition
LAB4653: //if else
[1:695] ;dx1 = (xtl_plan - xtl) / (fr1 - j);
VBC2_PUSH_CONST 90 //dx1
VBC3_PUSH_GLOBAL 94 //xtl_plan
VBC3_PUSH_GLOBAL 50 //xtl
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 12 //fr1
VBC3_PUSH_GLOBAL 81 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:696] ;xtr += dx1;
VBC2_PUSH_CONST 42 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 90 //dx1
VBC1_ADD_FF
VBC1_POP
[1:697] ;xtl += dx1;
VBC2_PUSH_CONST 50 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 90 //dx1
VBC1_ADD_FF
VBC1_POP
[1:699] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 1149  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB4699 //if to false
;return;
VBC1_RETURN
LAB4699: //if else
LAB4699: //for step
VBC2_PUSH_CONST 81 //j
VBC1_INC
VBC4_JUMP LAB4564 //to condition
LAB4706: //for exit
[1:706] ;
VBC1_RETURN
;walkPhasa3 <void()>
[1:707] ;ztl = ztr = -gaitHeight;
VBC2_PUSH_CONST 52 //ztl
VBC2_PUSH_CONST 44 //ztr
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC1_STORE_CF
VBC1_POP
[1:708] ;xtr_plan = correctedStepLenght * (0.5 - fr1 / (2.0 * fr1 + fr2)) - dobavka_x_ot_torsa * fr1 * fr2 / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 95 //xtr_plan
VBC3_PUSH_GLOBAL 62 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 12 //fr1
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD_FI
VBC1_DIV_IF
VBC1_SUB_FF
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 75 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_MUL_FI
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:709] ;for( j = 0; j < fr1; j ++ ) {
VBC2_PUSH_CONST 81 //j
VBC1_PUSH_0 
VBC1_POP
LAB4777: //for condition
VBC3_PUSH_GLOBAL 81 //j
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_LESS
VBC4_FALSE_JUMP LAB4910 //to for exit
;
[1:711] ;s = (amplitude / 2 + correctedSideLenghtHalf) * sfMathCos(alpha01 * ((j -fr2) / 2 + fase_offset * framestep));
VBC2_PUSH_CONST 86 //s
VBC3_PUSH_GLOBAL 60 //amplitude
VBC1_PUSH_2 
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 65 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 61 //alpha01
VBC3_PUSH_GLOBAL 81 //j
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_SUB
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 87 //fase_offset
VBC3_PUSH_GLOBAL 40 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_MUL_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_MUL_FF
VBC1_POP
[1:712] ;ytr = s - d10 - correctedSideLenghtHalf; 
VBC2_PUSH_CONST 43 //ytr
VBC3_PUSH_GLOBAL 86 //s
VBC3_PUSH_GLOBAL 59 //d10
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 65 //correctedSideLenghtHalf
VBC1_SUB_FF
VBC1_POP
[1:713] ;ytl = s + d10 + correctedSideLenghtHalf; 
VBC2_PUSH_CONST 51 //ytl
VBC3_PUSH_GLOBAL 86 //s
VBC3_PUSH_GLOBAL 59 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 65 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
[1:714] ;dx1 = (xtr_plan - xtr) / (fr1 - j);
VBC2_PUSH_CONST 90 //dx1
VBC3_PUSH_GLOBAL 95 //xtr_plan
VBC3_PUSH_GLOBAL 42 //xtr
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 12 //fr1
VBC3_PUSH_GLOBAL 81 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:715] ;xtr += dx1;
VBC2_PUSH_CONST 42 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 90 //dx1
VBC1_ADD_FF
VBC1_POP
[1:716] ;xtl += dx1;
VBC2_PUSH_CONST 50 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 90 //dx1
VBC1_ADD_FF
VBC1_POP
[1:718] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 1149  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB4903 //if to false
;return;
VBC1_RETURN
LAB4903: //if else
LAB4903: //for step
VBC2_PUSH_CONST 81 //j
VBC1_INC
VBC4_JUMP LAB4777 //to condition
LAB4910: //for exit
[1:725] ;
VBC1_RETURN
;walkPhasa2 <void()>
[1:726] ;wr0 = wr;
VBC2_PUSH_CONST 49 //wr0
VBC3_PUSH_GLOBAL 48 //wr
VBC1_POP
[1:727] ;wl0 = wl;
VBC2_PUSH_CONST 57 //wl0
VBC3_PUSH_GLOBAL 56 //wl
VBC1_POP
[1:729] ;dy = correctedSideLenght / fr2;
VBC2_PUSH_CONST 89 //dy
VBC3_PUSH_GLOBAL 64 //correctedSideLenght
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_DIV_FI
VBC1_POP
[1:730] ;xtl_plan = correctedStepLenght * (0.5 - (fr1 + fr2) / (2.0 * fr1 + fr2)) + dobavka_x_ot_torsa * fr1 * fr2 / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 94 //xtl_plan
VBC3_PUSH_GLOBAL 62 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 12 //fr1
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD_FI
VBC1_DIV_IF
VBC1_SUB_FF
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 75 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_MUL_FI
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_ADD_FF
VBC1_POP
[1:731] ;xtr_plan = correctedStepLenght * 0.5 + dx0Typical + dobavka_x_ot_torsa;
VBC2_PUSH_CONST 95 //xtr_plan
VBC3_PUSH_GLOBAL 62 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 84 //dx0Typical
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 75 //dobavka_x_ot_torsa
VBC1_ADD_FF
VBC1_POP
[1:732] ;for( j = 0; j < fr2; j ++ ) {
VBC2_PUSH_CONST 81 //j
VBC1_PUSH_0 
VBC1_POP
LAB5017: //for condition
VBC3_PUSH_GLOBAL 81 //j
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_LESS
VBC4_FALSE_JUMP LAB5428 //to for exit
;
[1:733] ;ztr = -gaitHeight + stepHeight;
VBC2_PUSH_CONST 44 //ztr
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 15 //stepHeight
VBC1_ADD
VBC1_POP_CF
[1:734] ;dx2 = (xtl_plan - xtl) / (fr2 - j);
VBC2_PUSH_CONST 91 //dx2
VBC3_PUSH_GLOBAL 94 //xtl_plan
VBC3_PUSH_GLOBAL 50 //xtl
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 13 //fr2
VBC3_PUSH_GLOBAL 81 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:735] ;if (stepType == 0)
VBC3_PUSH_GLOBAL 72 //stepType
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB5095 //if to false
;tors_angle = sfFMathASin(dobavka_x_ot_torsa / svIkA5 * (j + 1) / 2);
VBC2_PUSH_CONST 76 //tors_angle
VBC5_PUSH_CONST 352 | 0x80000000 //import func index sfFMathASin
//alloc addon amount for result
VBC3_PUSH_GLOBAL 75 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 3275 //svIkA5
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 81 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_MUL_FI
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_POP
VBC4_JUMP LAB5130 //if to exit
LAB5095: //if else
;tors_angle = sfFMathASin(sfMathSin(-ugol_torsa) + dobavka_x_ot_torsa / svIkA5 * (j + 1));
VBC2_PUSH_CONST 76 //tors_angle
VBC5_PUSH_CONST 352 | 0x80000000 //import func index sfFMathASin
//alloc addon amount for result
VBC5_PUSH_CONST 301 | 0x80000000 //import func index sfMathSin
//alloc addon amount for result
VBC3_PUSH_GLOBAL 18 //ugol_torsa
VBC1_NEG_F
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC3_PUSH_GLOBAL 75 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 3275 //svIkA5
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 81 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_MUL_FI
VBC1_ADD_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_POP
LAB5130: //if exit
[1:739] ;if( j == 0 ) {
VBC3_PUSH_GLOBAL 81 //j
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB5170 //if to false
;
[1:740] ;xtr += dx2 - dobavka_x_ot_torsa;
VBC2_PUSH_CONST 42 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 91 //dx2
VBC3_PUSH_GLOBAL 75 //dobavka_x_ot_torsa
VBC1_SUB_FF
VBC1_ADD_FF
VBC1_POP
[1:741] ;ytr  = s - d10 + dy0Typical;
VBC2_PUSH_CONST 43 //ytr
VBC3_PUSH_GLOBAL 86 //s
VBC3_PUSH_GLOBAL 59 //d10
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 85 //dy0Typical
VBC1_ADD_FF
VBC1_POP
VBC4_JUMP LAB5306 //if to exit
LAB5170: //if else
;else if( j == (fr2 - 1) ) {
VBC3_PUSH_GLOBAL 81 //j
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_PUSH_1 
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB5220 //if to false
;
[1:744] ;xtr += dx2 - dobavka_x_ot_torsa;
VBC2_PUSH_CONST 42 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 91 //dx2
VBC3_PUSH_GLOBAL 75 //dobavka_x_ot_torsa
VBC1_SUB_FF
VBC1_ADD_FF
VBC1_POP
[1:745] ;ytr  = s - d10 + 2 * dy0Typical - correctedSideLenght;
VBC2_PUSH_CONST 43 //ytr
VBC3_PUSH_GLOBAL 86 //s
VBC3_PUSH_GLOBAL 59 //d10
VBC1_SUB_FF
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 85 //dy0Typical
VBC1_MUL_IF
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 64 //correctedSideLenght
VBC1_SUB_FF
VBC1_POP
VBC4_JUMP LAB5306 //if to exit
LAB5220: //if else
;
[1:748] ;if (j == 1)
VBC3_PUSH_GLOBAL 81 //j
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB5246 //if to false
;ztr = -gaitHeight + stepHeight / 2.0;
VBC2_PUSH_CONST 44 //ztr
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 15 //stepHeight
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_IF
VBC1_ADD_IF
VBC1_POP
LAB5246: //if else
[1:750] ;dx = (xtr_plan - xtr) / (fr2 - j);
VBC2_PUSH_CONST 88 //dx
VBC3_PUSH_GLOBAL 95 //xtr_plan
VBC3_PUSH_GLOBAL 42 //xtr
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 13 //fr2
VBC3_PUSH_GLOBAL 81 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:751] ;xtr += dx;
VBC2_PUSH_CONST 42 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 88 //dx
VBC1_ADD_FF
VBC1_POP
[1:752] ;ytr  = s - 64 + dy0Typical - dy * fr2 / (fr2 - 2) * (j / 2);
VBC2_PUSH_CONST 43 //ytr
VBC3_PUSH_GLOBAL 86 //s
VBC2_PUSH_CONST 64 
VBC1_SUB_FI
VBC3_PUSH_GLOBAL 85 //dy0Typical
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 89 //dy
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_PUSH_2 
VBC1_SUB
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 81 //j
VBC1_PUSH_2 
VBC1_DIV
VBC1_MUL_FI
VBC1_SUB_FF
VBC1_POP
LAB5306: //if exit
LAB5306: //if exit
[1:756] ;if (correctedRotation < 0){
VBC3_PUSH_GLOBAL 80 //correctedRotation
VBC1_PUSH_0 
VBC1_LESS_FI
VBC4_FALSE_JUMP LAB5357 //if to false
;
[1:757] ;wl = j * correctedRotation / (fr2 - 1);
VBC2_PUSH_CONST 56 //wl
VBC3_PUSH_GLOBAL 81 //j
VBC3_PUSH_GLOBAL 80 //correctedRotation
VBC1_MUL_IF
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_PUSH_1 
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:758] ;wr = wr0 - (correctedRotation - wr0) * j / fr2;
VBC2_PUSH_CONST 48 //wr
VBC3_PUSH_GLOBAL 49 //wr0
VBC3_PUSH_GLOBAL 80 //correctedRotation
VBC3_PUSH_GLOBAL 49 //wr0
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 81 //j
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
VBC4_JUMP LAB5393 //if to exit
LAB5357: //if else
;
[1:761] ;wr = wr0 - wr0 * j / fr2;
VBC2_PUSH_CONST 48 //wr
VBC3_PUSH_GLOBAL 49 //wr0
VBC3_PUSH_GLOBAL 49 //wr0
VBC3_PUSH_GLOBAL 81 //j
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
[1:762] ;wl = wl0 - wl0 * j / fr2;
VBC2_PUSH_CONST 56 //wl
VBC3_PUSH_GLOBAL 57 //wl0
VBC3_PUSH_GLOBAL 57 //wl0
VBC3_PUSH_GLOBAL 81 //j
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
LAB5393: //if exit
[1:764] ;xtl += dx2;
VBC2_PUSH_CONST 50 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 91 //dx2
VBC1_ADD_FF
VBC1_POP
[1:765] ;ytl += dy0Typical;
VBC2_PUSH_CONST 51 //ytl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 85 //dy0Typical
VBC1_ADD_FF
VBC1_POP
[1:768] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 1149  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB5421 //if to false
;return;
VBC1_RETURN
LAB5421: //if else
LAB5421: //for step
VBC2_PUSH_CONST 81 //j
VBC1_INC
VBC4_JUMP LAB5017 //to condition
LAB5428: //for exit
[1:774] ;
VBC1_RETURN
;walkPhasa4 <void()>
[1:778] ;wr0 = wr;
VBC2_PUSH_CONST 49 //wr0
VBC3_PUSH_GLOBAL 48 //wr
VBC1_POP
[1:779] ;wl0 = wl;
VBC2_PUSH_CONST 57 //wl0
VBC3_PUSH_GLOBAL 56 //wl
VBC1_POP
[1:781] ;dy = correctedSideLenght / (fr2 - 2.0);
VBC2_PUSH_CONST 89 //dy
VBC3_PUSH_GLOBAL 64 //correctedSideLenght
VBC3_PUSH_GLOBAL 13 //fr2
VBC5_PUSH_CONST 1073741824 
VBC1_SUB_IF
VBC1_DIV_FF
VBC1_POP
[1:782] ;if( stepType == 2 ) {
VBC3_PUSH_GLOBAL 72 //stepType
VBC1_PUSH_2 
VBC1_EQU
VBC4_FALSE_JUMP LAB5478 //if to false
;
[1:783] ;xtr_plan = 0;
VBC2_PUSH_CONST 95 //xtr_plan
VBC1_PUSH_0 
VBC1_POP_CF
[1:784] ;xtl_plan = 0;
VBC2_PUSH_CONST 94 //xtl_plan
VBC1_PUSH_0 
VBC1_POP_CF
VBC4_JUMP LAB5558 //if to exit
LAB5478: //if else
;
[1:787] ;xtr_plan = correctedStepLenght * (0.5 - (fr1 + fr2) / (2.0 * fr1 + fr2)) + dobavka_x_ot_torsa * fr1 * fr2 / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 95 //xtr_plan
VBC3_PUSH_GLOBAL 62 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 12 //fr1
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD_FI
VBC1_DIV_IF
VBC1_SUB_FF
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 75 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_MUL_FI
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_ADD_FF
VBC1_POP
[1:788] ;xtl_plan = correctedStepLenght * 0.5 + dx0Typical + dobavka_x_ot_torsa;
VBC2_PUSH_CONST 94 //xtl_plan
VBC3_PUSH_GLOBAL 62 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 84 //dx0Typical
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 75 //dobavka_x_ot_torsa
VBC1_ADD_FF
VBC1_POP
LAB5558: //if exit
[1:790] ;for( j = 0; j < fr2; j ++ ) {
VBC2_PUSH_CONST 81 //j
VBC1_PUSH_0 
VBC1_POP
LAB5562: //for condition
VBC3_PUSH_GLOBAL 81 //j
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_LESS
VBC4_FALSE_JUMP LAB6014 //to for exit
;
[1:791] ;ztl = -gaitHeight + stepHeight;
VBC2_PUSH_CONST 52 //ztl
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 15 //stepHeight
VBC1_ADD
VBC1_POP_CF
[1:793] ;if( stepType == 2 && j == (fr2 - 1) ) {
VBC3_PUSH_GLOBAL 72 //stepType
VBC1_PUSH_2 
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB5607
VBC3_PUSH_GLOBAL 81 //j
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_PUSH_1 
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB5607
VBC1_PUSH_1
LAB5607:
VBC4_FALSE_JUMP LAB5668 //if to false
;
[1:794] ;ztl = -gaitHeight;
VBC2_PUSH_CONST 52 //ztl
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC1_POP_CF
[1:795] ;ytl = s + d10;
VBC2_PUSH_CONST 51 //ytl
VBC3_PUSH_GLOBAL 86 //s
VBC3_PUSH_GLOBAL 59 //d10
VBC1_ADD_FF
VBC1_POP
[1:796] ;tors_angle = sfFMathASin(sfMathSin(ugol_torsa) - dobavka_x_ot_torsa / svIkA5 * (j + 1) / 2);
VBC2_PUSH_CONST 76 //tors_angle
VBC5_PUSH_CONST 352 | 0x80000000 //import func index sfFMathASin
//alloc addon amount for result
VBC5_PUSH_CONST 301 | 0x80000000 //import func index sfMathSin
//alloc addon amount for result
VBC3_PUSH_GLOBAL 18 //ugol_torsa
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC3_PUSH_GLOBAL 75 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 3275 //svIkA5
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 81 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_MUL_FI
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_POP
VBC4_JUMP LAB5702 //if to exit
LAB5668: //if else
;else tors_angle = sfFMathASin(sfMathSin(ugol_torsa) - dobavka_x_ot_torsa / svIkA5 * (j + 1));
VBC2_PUSH_CONST 76 //tors_angle
VBC5_PUSH_CONST 352 | 0x80000000 //import func index sfFMathASin
//alloc addon amount for result
VBC5_PUSH_CONST 301 | 0x80000000 //import func index sfMathSin
//alloc addon amount for result
VBC3_PUSH_GLOBAL 18 //ugol_torsa
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC3_PUSH_GLOBAL 75 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 3275 //svIkA5
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 81 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_MUL_FI
VBC1_SUB_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_POP
LAB5702: //if exit
[1:799] ;dx4 = (xtr_plan - xtr) / (fr2 - j);
VBC2_PUSH_CONST 92 //dx4
VBC3_PUSH_GLOBAL 95 //xtr_plan
VBC3_PUSH_GLOBAL 42 //xtr
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 13 //fr2
VBC3_PUSH_GLOBAL 81 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:800] ;if( j == 0 ) {
VBC3_PUSH_GLOBAL 81 //j
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB5777 //if to false
;
[1:801] ;xtl += dx4 - dobavka_x_ot_torsa;
VBC2_PUSH_CONST 50 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 92 //dx4
VBC3_PUSH_GLOBAL 75 //dobavka_x_ot_torsa
VBC1_SUB_FF
VBC1_ADD_FF
VBC1_POP
[1:802] ;ytl = s + d10 + dy0Typical;
VBC2_PUSH_CONST 51 //ytl
VBC3_PUSH_GLOBAL 86 //s
VBC3_PUSH_GLOBAL 59 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 85 //dy0Typical
VBC1_ADD_FF
VBC1_POP
[1:803] ;ztl = -gaitHeight + stepHeight / 2.0;
VBC2_PUSH_CONST 52 //ztl
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 15 //stepHeight
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_IF
VBC1_ADD_IF
VBC1_POP
VBC4_JUMP LAB5907 //if to exit
LAB5777: //if else
;else if( j == (fr2 - 1) ) {
VBC3_PUSH_GLOBAL 81 //j
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_PUSH_1 
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB5831 //if to false
;
[1:806] ;xtl += dx4 - dobavka_x_ot_torsa;
VBC2_PUSH_CONST 50 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 92 //dx4
VBC3_PUSH_GLOBAL 75 //dobavka_x_ot_torsa
VBC1_SUB_FF
VBC1_ADD_FF
VBC1_POP
[1:807] ;ytl  = s + d10 + dy0Typical * 2.0 - correctedSideLenght;
VBC2_PUSH_CONST 51 //ytl
VBC3_PUSH_GLOBAL 86 //s
VBC3_PUSH_GLOBAL 59 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 85 //dy0Typical
VBC5_PUSH_CONST 1073741824 
VBC1_MUL_FF
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 64 //correctedSideLenght
VBC1_SUB_FF
VBC1_POP
VBC4_JUMP LAB5907 //if to exit
LAB5831: //if else
;
[1:810] ;if (j == 1)
VBC3_PUSH_GLOBAL 81 //j
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB5857 //if to false
;ztl = -gaitHeight + stepHeight / 2.0;
VBC2_PUSH_CONST 52 //ztl
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 15 //stepHeight
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_IF
VBC1_ADD_IF
VBC1_POP
LAB5857: //if else
[1:812] ;dx = (xtl_plan - xtl) / (fr2 - j);
VBC2_PUSH_CONST 88 //dx
VBC3_PUSH_GLOBAL 94 //xtl_plan
VBC3_PUSH_GLOBAL 50 //xtl
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 13 //fr2
VBC3_PUSH_GLOBAL 81 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:813] ;xtl += dx;
VBC2_PUSH_CONST 50 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 88 //dx
VBC1_ADD_FF
VBC1_POP
[1:814] ;ytl  = s + 64 + dy0Typical - dy * j / 2;
VBC2_PUSH_CONST 51 //ytl
VBC3_PUSH_GLOBAL 86 //s
VBC2_PUSH_CONST 64 
VBC1_ADD_FI
VBC3_PUSH_GLOBAL 85 //dy0Typical
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 89 //dy
VBC3_PUSH_GLOBAL 81 //j
VBC1_MUL_FI
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
LAB5907: //if exit
LAB5907: //if exit
[1:818] ;if (correctedRotation > 0){
VBC3_PUSH_GLOBAL 80 //correctedRotation
VBC1_PUSH_0 
VBC1_GREAT_FI
VBC4_FALSE_JUMP LAB5943 //if to false
;
[1:819] ;wr = -j * correctedRotation / (fr2 - 1);
VBC2_PUSH_CONST 48 //wr
VBC3_PUSH_GLOBAL 81 //j
VBC1_NEG
VBC3_PUSH_GLOBAL 80 //correctedRotation
VBC1_MUL_IF
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_PUSH_1 
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:820] ;wl = wr;
VBC2_PUSH_CONST 56 //wl
VBC3_PUSH_GLOBAL 48 //wr
VBC1_POP
VBC4_JUMP LAB5979 //if to exit
LAB5943: //if else
;
[1:823] ;wr = wr0 - wr0 * j / fr2;
VBC2_PUSH_CONST 48 //wr
VBC3_PUSH_GLOBAL 49 //wr0
VBC3_PUSH_GLOBAL 49 //wr0
VBC3_PUSH_GLOBAL 81 //j
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
[1:824] ;wl = wl0 - wl0 * j / fr2;
VBC2_PUSH_CONST 56 //wl
VBC3_PUSH_GLOBAL 57 //wl0
VBC3_PUSH_GLOBAL 57 //wl0
VBC3_PUSH_GLOBAL 81 //j
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
LAB5979: //if exit
[1:826] ;xtr += dx4;
VBC2_PUSH_CONST 42 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 92 //dx4
VBC1_ADD_FF
VBC1_POP
[1:827] ;ytr += dy0Typical;
VBC2_PUSH_CONST 43 //ytr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 85 //dy0Typical
VBC1_ADD_FF
VBC1_POP
[1:830] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 1149  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB6007 //if to false
;return;
VBC1_RETURN
LAB6007: //if else
LAB6007: //for step
VBC2_PUSH_CONST 81 //j
VBC1_INC
VBC4_JUMP LAB5562 //to condition
LAB6014: //for exit
[1:843] ;
VBC1_RETURN
;walkCycle <void(,int)>
VBC2_STACK -4//local vars 4
[1:845] ;
[1:845] ;float xrOld = xr;
VBC2_PUSH_B_OFFSET -1 //xrOld
VBC3_PUSH_GLOBAL 45 //xr
VBC1_POP
[1:846] ;
[1:846] ;float yrOld = yr;
VBC2_PUSH_B_OFFSET -2 //yrOld
VBC3_PUSH_GLOBAL 46 //yr
VBC1_POP
[1:847] ;
[1:847] ;float xlOld = xl;
VBC2_PUSH_B_OFFSET -3 //xlOld
VBC3_PUSH_GLOBAL 53 //xl
VBC1_POP
[1:848] ;
[1:848] ;float ylOld = yl;
VBC2_PUSH_B_OFFSET -4 //ylOld
VBC3_PUSH_GLOBAL 54 //yl
VBC1_POP
[1:851] ;walkInit();
VBC3_PUSH_CONST 4337  //func address walkInit
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:852] ;walkPhasa1();
VBC3_PUSH_CONST 4494  //func address walkPhasa1
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:853] ;walkPhasa2();
VBC3_PUSH_CONST 4911  //func address walkPhasa2
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:854] ;if (half == 0){
VBC2_PUSH_LOCAL 2 //half
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB6074 //if to false
;
[1:855] ;walkPhasa3();
VBC3_PUSH_CONST 4707  //func address walkPhasa3
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:856] ;walkPhasa4();
VBC3_PUSH_CONST 5429  //func address walkPhasa4
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB6074: //if else
[1:860] ;xr = xrOld;
VBC2_PUSH_CONST 45 //xr
VBC2_PUSH_LOCAL -1 //xrOld
VBC1_POP
[1:861] ;yr = yrOld;
VBC2_PUSH_CONST 46 //yr
VBC2_PUSH_LOCAL -2 //yrOld
VBC1_POP
[1:862] ;xl = xlOld;
VBC2_PUSH_CONST 53 //xl
VBC2_PUSH_LOCAL -3 //xlOld
VBC1_POP
[1:863] ;yl = ylOld;
VBC2_PUSH_CONST 54 //yl
VBC2_PUSH_LOCAL -4 //ylOld
VBC1_POP
[1:867] ;
VBC1_RETURN
;mixing <void()>
[1:872] ;leftRightFactor = 100;
VBC2_PUSH_CONST 97 //leftRightFactor
VBC2_PUSH_CONST 100 
VBC1_POP
[1:873] ;frontBackFactor = 180;
VBC2_PUSH_CONST 98 //frontBackFactor
VBC3_PUSH_CONST 180 
VBC1_POP
[1:875] ;while(1) {
LAB6106: //while condition
;
[1:877] ;leftFootSideAddonMix = -svImuGyroZ * leftRightFactor >> 10;
VBC3_PUSH_CONST 2953 //leftFootSideAddonMix
VBC3_PUSH_GLOBAL 2568 //svImuGyroZ
VBC1_NEG
VBC3_PUSH_GLOBAL 97 //leftRightFactor
VBC1_MUL
VBC2_PUSH_CONST 10 
VBC1_RSHIFT
VBC1_POP
[1:878] ;rightFootSideAddonMix = svImuGyroZ * leftRightFactor >> 10;
VBC3_PUSH_CONST 2937 //rightFootSideAddonMix
VBC3_PUSH_GLOBAL 2568 //svImuGyroZ
VBC3_PUSH_GLOBAL 97 //leftRightFactor
VBC1_MUL
VBC2_PUSH_CONST 10 
VBC1_RSHIFT
VBC1_POP
[1:881] ;rightFootFrontAddonMix = leftFootFrontAddonMix = -svImuGyroX * frontBackFactor >> 10;
VBC3_PUSH_CONST 2905 //rightFootFrontAddonMix
VBC3_PUSH_CONST 2921 //leftFootFrontAddonMix
VBC3_PUSH_GLOBAL 2566 //svImuGyroX
VBC1_NEG
VBC3_PUSH_GLOBAL 98 //frontBackFactor
VBC1_MUL
VBC2_PUSH_CONST 10 
VBC1_RSHIFT
VBC1_STORE
VBC1_POP
[1:884] ;sfWaitNextFrame();
VBC1_WAIT
VBC4_JUMP LAB6106 //while forever loop
LAB6159: //while exit
[1:888] ;
VBC1_RETURN
;runTest <void()>
VBC1_STACK_DN1//local vars 1
[1:890] ;walkInitialPoseFine();
VBC3_PUSH_CONST 4111  //func address walkInitialPoseFine
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:894] ;stepType = 0;
VBC2_PUSH_CONST 72 //stepType
VBC1_PUSH_0 
VBC1_POP
[1:895] ;stepLength = stepLengthOrder/ 4.0;
VBC2_PUSH_CONST 22 //stepLength
VBC3_PUSH_GLOBAL 10 //stepLengthOrder
VBC5_PUSH_CONST 1082130432 
VBC1_DIV_IF
VBC1_POP
[1:896] ;walkCycle(0);
VBC3_PUSH_CONST 6015  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:898] ;stepType = 1;
VBC2_PUSH_CONST 72 //stepType
VBC1_PUSH_1 
VBC1_POP
[1:899] ;stepLength = stepLengthOrder / 2.0;
VBC2_PUSH_CONST 22 //stepLength
VBC3_PUSH_GLOBAL 10 //stepLengthOrder
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_IF
VBC1_POP
[1:900] ;walkCycle(0);
VBC3_PUSH_CONST 6015  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:903] ;stepType = 3;
VBC2_PUSH_CONST 72 //stepType
VBC2_PUSH_CONST 3 
VBC1_POP
[1:904] ;stepLength = stepLengthOrder * 3.0 / 4.0;
VBC2_PUSH_CONST 22 //stepLength
VBC3_PUSH_GLOBAL 10 //stepLengthOrder
VBC5_PUSH_CONST 1077936128 
VBC1_MUL_IF
VBC5_PUSH_CONST 1082130432 
VBC1_DIV_FF
VBC1_POP
[1:905] ;walkCycle(0);
VBC3_PUSH_CONST 6015  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:908] ;stepLength = stepLengthOrder * 1.0;
VBC2_PUSH_CONST 22 //stepLength
VBC3_PUSH_GLOBAL 10 //stepLengthOrder
VBC5_PUSH_CONST 1065353216 
VBC1_MUL_IF
VBC1_POP
[1:909] ;
[1:910] ;for( i = 0; i < cycle_number; i++ ){
VBC2_PUSH_B_OFFSET -1 //i
VBC1_PUSH_0 
VBC1_POP
LAB6255: //for condition
VBC2_PUSH_LOCAL -1 //i
VBC3_PUSH_GLOBAL 8 //cycle_number
VBC1_LESS
VBC4_FALSE_JUMP LAB6297 //to for exit
;
[1:911] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 1002  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:912] ;walkCycle(0);
VBC3_PUSH_CONST 6015  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:913] ;if(orderFromHead == 4) break;
VBC3_PUSH_GLOBAL 4 //orderFromHead
VBC2_PUSH_CONST 4 
VBC1_EQU
VBC4_FALSE_JUMP LAB6290 //if to false
;if(orderFromHead == 4) break;
VBC4_JUMP LAB6297 //to loop exit
LAB6290: //if else
LAB6290: //for step
VBC2_PUSH_B_OFFSET -1 //i
VBC1_INC
VBC4_JUMP LAB6255 //to condition
LAB6297: //for exit
[1:917] ;stepType = 2;
VBC2_PUSH_CONST 72 //stepType
VBC1_PUSH_2 
VBC1_POP
[1:918] ;walkCycle(0);
VBC3_PUSH_CONST 6015  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:921] ;walkFinalPoseFine();
VBC3_PUSH_CONST 4277  //func address walkFinalPoseFine
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:922] ;stepLengthOrder *= -1;  
VBC2_PUSH_CONST 10 //stepLengthOrder
VBC1_PUSH_TOS
VBC1_LOAD
VBC2_PUSH_CONST -1 // -
VBC1_MUL
VBC1_POP
[1:923] ;ugol_torsa *= -1;
VBC2_PUSH_CONST 18 //ugol_torsa
VBC1_PUSH_TOS
VBC1_LOAD
VBC2_PUSH_CONST -1 // -
VBC1_MUL_FI
VBC1_POP
[1:924] ;walkInitialPoseFine();
VBC3_PUSH_CONST 4111  //func address walkInitialPoseFine
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:925] ;stepType = 0;
VBC2_PUSH_CONST 72 //stepType
VBC1_PUSH_0 
VBC1_POP
[1:926] ;stepLength = stepLengthOrder/ 4.0;
VBC2_PUSH_CONST 22 //stepLength
VBC3_PUSH_GLOBAL 10 //stepLengthOrder
VBC5_PUSH_CONST 1082130432 
VBC1_DIV_IF
VBC1_POP
[1:927] ;walkCycle(0);
VBC3_PUSH_CONST 6015  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:928] ;stepType = 1;
VBC2_PUSH_CONST 72 //stepType
VBC1_PUSH_1 
VBC1_POP
[1:929] ;stepLength = stepLengthOrder / 2.0;
VBC2_PUSH_CONST 22 //stepLength
VBC3_PUSH_GLOBAL 10 //stepLengthOrder
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_IF
VBC1_POP
[1:930] ;walkCycle(0);
VBC3_PUSH_CONST 6015  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:931] ;stepType = 3;
VBC2_PUSH_CONST 72 //stepType
VBC2_PUSH_CONST 3 
VBC1_POP
[1:932] ;stepLength = stepLengthOrder * 3.0 / 4.0;
VBC2_PUSH_CONST 22 //stepLength
VBC3_PUSH_GLOBAL 10 //stepLengthOrder
VBC5_PUSH_CONST 1077936128 
VBC1_MUL_IF
VBC5_PUSH_CONST 1082130432 
VBC1_DIV_FF
VBC1_POP
[1:933] ;walkCycle(0);
VBC3_PUSH_CONST 6015  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:934] ;stepLength = stepLengthOrder * 1.0;
VBC2_PUSH_CONST 22 //stepLength
VBC3_PUSH_GLOBAL 10 //stepLengthOrder
VBC5_PUSH_CONST 1065353216 
VBC1_MUL_IF
VBC1_POP
[1:935] ;for( i = 0; i < 10; i++ ){
VBC2_PUSH_B_OFFSET -1 //i
VBC1_PUSH_0 
VBC1_POP
LAB6422: //for condition
VBC2_PUSH_LOCAL -1 //i
VBC2_PUSH_CONST 10 
VBC1_LESS
VBC4_FALSE_JUMP LAB6449 //to for exit
;
[1:936] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 1002  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:937] ;walkCycle(0);
VBC3_PUSH_CONST 6015  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB6442: //for step
VBC2_PUSH_B_OFFSET -1 //i
VBC1_INC
VBC4_JUMP LAB6422 //to condition
LAB6449: //for exit
[1:941] ;
VBC1_RETURN
;turn <void(,int)>
VBC1_STACK_DN1//local vars 1
[1:942] ;
[1:942] ;int frameCount = 4;
VBC2_PUSH_B_OFFSET -1 //frameCount
VBC2_PUSH_CONST 4 
VBC1_POP
[1:943] ;if (direction == 1){
VBC2_PUSH_LOCAL 2 //direction
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB6494 //if to false
;
[1:944] ;sfPoseGroup( 1024 , -2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 1024 
VBC3_PUSH_CONST -2000 // -
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:945] ;sfPoseGroup( 2048 , 2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 2048 
VBC3_PUSH_CONST 2000 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB6494: //if else
[1:947] ;if (direction == -1){
VBC2_PUSH_LOCAL 2 //direction
VBC2_PUSH_CONST -1 // -
VBC1_EQU
VBC4_FALSE_JUMP LAB6533 //if to false
;
[1:948] ;sfPoseGroup( 1024 , 2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 1024 
VBC3_PUSH_CONST 2000 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:949] ;sfPoseGroup( 2048 , -2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 2048 
VBC3_PUSH_CONST -2000 // -
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB6533: //if else
[1:951] ;sfPoseGroup( 1048576 , 2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_CONST 2000 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:952] ;sfPoseGroup( 2097152 , 2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_CONST 2000 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:953] ;sfWaitFrame( frameCount );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:954] ;sfPoseGroup( 1024 , 0, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 1024 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:955] ;sfPoseGroup( 2048 , 0, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 2048 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:956] ;sfPoseGroup( 1048576 , 0, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 1048576 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:957] ;sfPoseGroup( 2097152 , 0, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 2097152 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:958] ;sfWaitFrame( frameCount );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:959] ;sfWaitFrame( 6 );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_CONST 6 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:962] ;
VBC1_RETURN
;main <void()>
VBC1_STACK_DN1//local vars 1
[1:963] ;fallingFlag = 0;
VBC2_PUSH_CONST 36 //fallingFlag
VBC1_PUSH_0 
VBC1_POP
[1:964] ;restart_flag = 0;
VBC1_PUSH_2 //restart_flag
VBC1_PUSH_0 
VBC1_POP
[1:965] ;pitStop = 0;
VBC2_PUSH_CONST 6 //pitStop
VBC1_PUSH_0 
VBC1_POP
[1:966] ;startStop = 0;
VBC2_PUSH_CONST 7 //startStop
VBC1_PUSH_0 
VBC1_POP
[1:967] ;slowWalk = 0;
VBC2_PUSH_CONST 21 //slowWalk
VBC1_PUSH_0 
VBC1_POP
[1:968] ;setup();
VBC2_PUSH_CONST 108  //func address setup
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:969] ;sideLength = 0;
VBC2_PUSH_CONST 23 //sideLength
VBC1_PUSH_0 
VBC1_POP_CF
[1:970] ;rotation = 0;
VBC2_PUSH_CONST 24 //rotation
VBC1_PUSH_0 
VBC1_POP_CF
[1:975] ;
[1:975] ;int frameCount = 80;
VBC2_PUSH_B_OFFSET -1 //frameCount
VBC2_PUSH_CONST 80 
VBC1_POP
[1:976] ;sfPoseGroup(1056964607 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 1056964607 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:977] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:980] ;sfQuaternionToEulerImu();
VBC5_PUSH_CONST 303 | 0x80000000 //import func index sfQuaternionToEulerImu
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:981] ;forwardDirection = svEulerYaw;
VBC2_PUSH_CONST 79 //forwardDirection
VBC3_PUSH_GLOBAL 2600 //svEulerYaw
VBC1_POP
[1:984] ;sfCreateTask( mixing, 20 );
VBC5_PUSH_CONST 2 | 0x80000000 //import func index sfCreateTask
VBC3_PUSH_CONST 6095  //func address mixing
VBC2_PUSH_CONST 20 
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
[1:985] ;while (pitStop == 0) sfWaitFrame(1); 
LAB6721: //while condition
VBC3_PUSH_GLOBAL 6 //pitStop
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB6739 //while to exit
;while (pitStop == 0) sfWaitFrame(1); 
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC1_PUSH_1 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
VBC4_JUMP LAB6721 //while forever loop
LAB6739: //while exit
[1:987] ;svButtonRight = -1 ;
VBC3_PUSH_CONST 2582 //svButtonRight
VBC2_PUSH_CONST -1 // -
VBC1_POP
[1:988] ;svButtonLeft = -1 ;
VBC3_PUSH_CONST 2581 //svButtonLeft
VBC2_PUSH_CONST -1 // -
VBC1_POP
[1:989] ;sfBip(1, 1);
VBC5_PUSH_CONST 43 | 0x80000000 //import func index sfBip
VBC1_PUSH_1 
VBC1_PUSH_1 
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
[1:990] ;while (svButtonPress != 2 ) sfWaitFrame(1); 
LAB6760: //while condition
VBC3_PUSH_GLOBAL 2583 //svButtonPress
VBC1_PUSH_2 
VBC1_NOT_EQU
VBC4_FALSE_JUMP LAB6778 //while to exit
;while (svButtonPress != 2 ) sfWaitFrame(1); 
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC1_PUSH_1 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
VBC4_JUMP LAB6760 //while forever loop
LAB6778: //while exit
[1:991] ;svButtonRight = 66 ;
VBC3_PUSH_CONST 2582 //svButtonRight
VBC2_PUSH_CONST 66 
VBC1_POP
[1:992] ;svButtonLeft = 69 ;
VBC3_PUSH_CONST 2581 //svButtonLeft
VBC2_PUSH_CONST 69 
VBC1_POP
[1:993] ;restart_flag = 1;
VBC1_PUSH_2 //restart_flag
VBC1_PUSH_1 
VBC1_POP
[1:995] ;runTest(); 
VBC3_PUSH_CONST 6160  //func address runTest
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:999] ;
VBC1_RETURN
//Init table
//Variables
svFrameCount : 1
svImuAccX : 2560
svImuAccY : 2561
svImuAccZ : 2562
svImuAccRawX : 2563
svImuAccRawY : 2564
svImuAccRawZ : 2565
svImuGyroX : 2566
svImuGyroY : 2567
svImuGyroZ : 2568
svImuGyroRawX : 2569
svImuGyroRawY : 2570
svImuGyroRawZ : 2571
svImuQuaterX : 2572
svImuQuaterY : 2573
svImuQuaterZ : 2574
svImuQuaterW : 2575
svImuQuaterAcc : 2576
svImuAccSlowX : 2577
svImuAccSlowY : 2578
svImuAccSlowZ : 2579
svAdc : 2580
svButtonLeft : 2581
svButtonRight : 2582
svButtonPress : 2583
svHeadControlMask : 2584
svDefFrameCount : 2585
svEulerYaw F: 2600
svEulerPitch F: 2601
svEulerRoll F: 2602
svRemoteStatus : 3250
svRemoteButton : 3251
svRemoteLeftJoystick : 3252
svRemoteLeftJoystickX : 3253
svRemoteLeftJoystickY : 3254
svRemoteRightJoystick : 3255
svRemoteRightJoystickX : 3256
svRemoteRightJoystickY : 3257
svHumoModelDistPelvic : 3264
svHumoModelLengthPelvicHip : 3265
svHumoModelLengthHipHip : 3266
svHumoModelLengthHipKnee : 3267
svHumoModelLengthKneeFoot : 3268
svHumoModelLengthFootFoot : 3269
svHumoModelDistFootFloor : 3270
svHumoModelFootLength : 3271
svHumoModelFootWidth : 3272
svHumoModelFootCenterBack : 3273
svHumoModelFootCenterInner : 3274
svHumoModelAngPelvic : 3258
svHumoModelAngHipSide : 3260
svHumoModelAngHip : 3259
svHumoModelAngKnee : 3261
svHumoModelAngFoot : 3262
svHumoModelAngFootSide : 3263
svIkA5 F: 3275
svIkB5 F: 3276
svIkC5 F: 3277
svIkA6 F: 3278
svIkA7 F: 3279
svIkA8 F: 3280
svIkA9 F: 3281
svIkA10 F: 3282
svIkB10 F: 3283
svIkC10 F: 3284
svIkLimA5min F: 3285
svIkLimA5max F: 3286
svIkLimA6min F: 3287
svIkLimA6max F: 3288
svIkLimA7min F: 3289
svIkLimA7max F: 3290
svIkLimA8min F: 3291
svIkLimA8max F: 3292
svIkLimA9min F: 3293
svIkLimA9max F: 3294
svIkLimA10min F: 3295
svIkLimA10max F: 3296
svIkOutPresent : 3297
svIkEncA5 : 3298
svIkEncA6 : 3299
svIkEncA7 : 3300
svIkEncA8 : 3301
svIkEncA9 : 3302
svIkEncA10 : 3303
headRotateTarget : 2610
headRotateCurrent : 2611
headRotatePwm : 2612
headRotateVelo : 2613
headRotateFlags : 2615
headRotateAddonMix : 2617
torsoRotateTarget : 2626
torsoRotateCurrent : 2627
torsoRotatePwm : 2628
torsoRotateVelo : 2629
torsoRotateFlags : 2631
torsoRotateAddonMix : 2633
rightClavicleTarget : 2642
rightClavicleCurrent : 2643
rightClaviclePwm : 2644
rightClavicleVelo : 2645
rightClavicleFlags : 2647
rightClavicleAddonMix : 2649
leftClavicleTarget : 2658
leftClavicleCurrent : 2659
leftClaviclePwm : 2660
leftClavicleVelo : 2661
leftClavicleFlags : 2663
leftClavicleAddonMix : 2665
rightShoulderTarget : 2674
rightShoulderCurrent : 2675
rightShoulderPwm : 2676
rightShoulderVelo : 2677
rightShoulderFlags : 2679
rightShoulderAddonMix : 2681
leftShoulderTarget : 2690
leftShoulderCurrent : 2691
leftShoulderPwm : 2692
leftShoulderVelo : 2693
leftShoulderFlags : 2695
leftShoulderAddonMix : 2697
rightElbowSideTarget : 2706
rightElbowSideCurrent : 2707
rightElbowSidePwm : 2708
rightElbowSideVelo : 2709
rightElbowSideFlags : 2711
rightElbowSideAddonMix : 2713
leftElbowSideTarget : 2722
leftElbowSideCurrent : 2723
leftElbowSidePwm : 2724
leftElbowSideVelo : 2725
leftElbowSideFlags : 2727
leftElbowSideAddonMix : 2729
rightElbowTarget : 2738
rightElbowCurrent : 2739
rightElbowPwm : 2740
rightElbowVelo : 2741
rightElbowFlags : 2743
rightElbowAddonMix : 2745
leftElbowTarget : 2754
leftElbowCurrent : 2755
leftElbowPwm : 2756
leftElbowVelo : 2757
leftElbowFlags : 2759
leftElbowAddonMix : 2761
rightPelvicTarget : 2770
rightPelvicCurrent : 2771
rightPelvicPwm : 2772
rightPelvicVelo : 2773
rightPelvicFlags : 2775
rightPelvicAddonMix : 2777
leftPelvicTarget : 2786
leftPelvicCurrent : 2787
leftPelvicPwm : 2788
leftPelvicVelo : 2789
leftPelvicFlags : 2791
leftPelvicAddonMix : 2793
rightHipSideTarget : 2802
rightHipSideCurrent : 2803
rightHipSidePwm : 2804
rightHipSideVelo : 2805
rightHipSideFlags : 2807
rightHipSideAddonMix : 2809
leftHipSideTarget : 2818
leftHipSideCurrent : 2819
leftHipSidePwm : 2820
leftHipSideVelo : 2821
leftHipSideFlags : 2823
leftHipSideAddonMix : 2825
rightHipTarget : 2834
rightHipCurrent : 2835
rightHipPwm : 2836
rightHipVelo : 2837
rightHipFlags : 2839
rightHipAddonMix : 2841
leftHipTarget : 2850
leftHipCurrent : 2851
leftHipPwm : 2852
leftHipVelo : 2853
leftHipFlags : 2855
leftHipAddonMix : 2857
rightKneeTarget : 2866
rightKneeCurrent : 2867
rightKneePwm : 2868
rightKneeVelo : 2869
rightKneeFlags : 2871
rightKneeAddonMix : 2873
leftKneeTarget : 2882
leftKneeCurrent : 2883
leftKneePwm : 2884
leftKneeVelo : 2885
leftKneeFlags : 2887
leftKneeAddonMix : 2889
rightFootFrontTarget : 2898
rightFootFrontCurrent : 2899
rightFootFrontPwm : 2900
rightFootFrontVelo : 2901
rightFootFrontFlags : 2903
rightFootFrontAddonMix : 2905
leftFootFrontTarget : 2914
leftFootFrontCurrent : 2915
leftFootFrontPwm : 2916
leftFootFrontVelo : 2917
leftFootFrontFlags : 2919
leftFootFrontAddonMix : 2921
rightFootSideTarget : 2930
rightFootSideCurrent : 2931
rightFootSidePwm : 2932
rightFootSideVelo : 2933
rightFootSideFlags : 2935
rightFootSideAddonMix : 2937
leftFootSideTarget : 2946
leftFootSideCurrent : 2947
leftFootSidePwm : 2948
leftFootSideVelo : 2949
leftFootSideFlags : 2951
leftFootSideAddonMix : 2953
rightHandTarget : 2962
rightHandCurrent : 2963
rightHandPwm : 2964
rightHandVelo : 2965
rightHandFlags : 2967
rightHandAddonMix : 2969
leftHandTarget : 2978
leftHandCurrent : 2979
leftHandPwm : 2980
leftHandVelo : 2981
leftHandFlags : 2983
leftHandAddonMix : 2985
headTiltTarget : 3010
headTiltCurrent : 3011
headTiltPwm : 3012
headTiltVelo : 3013
headTiltFlags : 3015
headTiltAddonMix : 3017
rightKneeBotTarget : 3026
rightKneeBotCurrent : 3027
rightKneeBotPwm : 3028
rightKneeBotVelo : 3029
rightKneeBotFlags : 3031
rightKneeBotAddonMix : 3033
leftKneeBotTarget : 3042
leftKneeBotCurrent : 3043
leftKneeBotPwm : 3044
leftKneeBotVelo : 3045
leftKneeBotFlags : 3047
leftKneeBotAddonMix : 3049
rightClawTarget : 3058
rightClawCurrent : 3059
rightClawPwm : 3060
rightClawVelo : 3061
rightClawFlags : 3063
rightClawAddonMix : 3065
leftClawTarget : 3074
leftClawCurrent : 3075
leftClawPwm : 3076
leftClawVelo : 3077
leftClawFlags : 3079
leftClawAddonMix : 3081
restart_flag : 2
timeStep : 3
orderFromHead : 4
rotationFromHead F: 5
pitStop : 6
startStop : 7
cycle_number : 8
hipTilt : 9
stepLengthOrder : 10
fps : 11
fr1 : 12
fr2 : 13
gaitHeight : 14
stepHeight : 15
bodyTiltAtWalk F: 16
solyLandingSkew F: 17
ugol_torsa F: 18
imu_factor F: 19
vision_factor F: 20
slowWalk : 21
stepLength F: 22
sideLength F: 23
rotation F: 24
selfMotionShiftCorrectionX F: 25
selfMotionShiftCorrectionY F: 26
selfFirstStepYield F: 27
selfCycleStepYield F: 28
selfSideStepRightYield F: 29
selfSideStepLeftYield F: 30
selfFirstLegIsRightLeg : 31
motion_to_right : 32
side_motion F: 33
selfInitPoses : 34
selfExitFlag : 35
fallingFlag : 36
selfNeckPan : 37
rotationYieldRight F: 38
rotationYieldLeft F: 39
framestep : 40
frameCount : 41
xtr F: 42
ytr F: 43
ztr F: 44
xr F: 45
yr F: 46
zr F: 47
wr F: 48
wr0 F: 49
xtl F: 50
ytl F: 51
ztl F: 52
xl F: 53
yl F: 54
zl F: 55
wl F: 56
wl0 F: 57
e10 F: 58
d10 F: 59
amplitude F: 60
alpha01 F: 61
correctedStepLenght F: 62
correctedStepLenghtHalf F: 63
correctedSideLenght F: 64
correctedSideLenghtHalf F: 65
ztr0 F: 66
ztl0 F: 67
stepZtr F: 68
stepZtl F: 69
stepYtr F: 70
stepYtl F: 71
stepType : 72
flag : 73
flag_event : 74
dobavka_x_ot_torsa F: 75
tors_angle F: 76
reducer F: 77
torsoAdd : 78
forwardDirection F: 79
correctedRotation F: 80
j : 81
xtl0 F: 82
xtr0 F: 83
dx0Typical F: 84
dy0Typical F: 85
s F: 86
fase_offset F: 87
dx F: 88
dy F: 89
dx1 F: 90
dx2 F: 91
dx4 F: 92
stepRotation F: 93
xtl_plan F: 94
xtr_plan F: 95
dx0 F: 96
leftRightFactor : 97
frontBackFactor : 98
