//====================================================================
//      SvCompiler V6.06
//By A.Sibilev
//====================================================================
//cblock

;sfVpuVersion <int()>
;sfCreateTask <int(,*<void()>,int)>
;sfLog <void(,cstring,int,int,int)>
;sfLogOpen <void(,cstring)>
;sfLogClose <void()>
;sfWaitFrameOut <void(,int)>
;sfIsFrameOut <int(,int)>
;sfWaitNextFrame <void()>
;sfSlotIndex <int(,cstring)>
;sfAbs <int(,int)>
;sfIMin <int(,int,int)>
;sfIMax <int(,int,int)>
;sfUMin <int(,int,int)>
;sfUMax <int(,int,int)>
;sfILimit <int(,int,int,int)>
;sfStop <void()>
;sfStartSlot <void(,int)>
;sfBip <void(,int,int)>
;sfFreeGroup <void(,int)>
;sfPoseGroup <void(,int,int,int)>
;sfPoseGroupDelay <void(,int,int,int,int)>
;sfPoseCorrect <void(,int,int)>
;sfQueueGroup <void(,int,int,int)>
;sfPoseIdx <void(,int,int,int)>
;sfPoseGroupLin <void(,int,int,int)>
;sfStrainGroup <void(,int)>
;sfPlaySamples <void(,int,*cblock,int)>
;sfAccumSetup1 <void(,*int)>
;sfAccumSetup2 <void(,*int,*int)>
;sfAccumSetup3 <void(,*int,*int,*int)>
;sfAccumSetup4 <void(,*int,*int,*int,*int)>
;sfAccumTrigger <void()>
;sfAccumReset <void()>
;sfMathAcos <int(,int,int)>
;sfMathSqrti <int(,int)>
;sfMathAngleOfTriangle <int(,int,int,int)>
;sfMathAngleOfKnee <int(,int,int,int)>
;sfMathCathetOfSquareTriangle <int(,int,int)>
;sfMathHypotenuseOfSquareTriangle <int(,int,int)>
;sfMathTableSin <int(,int,int)>
;sfHumoModelSetup <void()>
;sfHumoModelFootAtFloor <void(,int,int,int)>
;sfHumoModelFootPush <void(,int,int,int)>
;sfIndexOfMask <int(,int)>
;sfQueueIdxAppend <int(,int,int,int)>
;sfQueueIdxOffsets <int(,int,int,*cblock,int)>
;sfQueueIdxSinMove <int(,int,int,int,int)>
;sfQueueIdxLast <int(,int)>
;sfQueueIdxCount <int(,int)>
;sfQueueMax <int()>
;sfIkSetup <void()>
;sfIkAngle <void(,float,float,float,float,float,float,float)>
;sfMathCos <float(,float)>
;sfMathSin <float(,float)>
;sfQuaternionToEuler <void(,float,float,float,float)>
;sfQuaternionToEulerImu <void()>
;sfFMathACos <float(,float)>
;sfFMathASin <float(,float)>
;sfFMathATan <float(,float)>
;sfFMathATan2 <float(,float,float)>
;sfFMathCos <float(,float)>
;sfFMathSin <float(,float)>
;sfFMathTan <float(,float)>
;sfFMathCosh <float(,float)>
;sfFMathSinh <float(,float)>
;sfFMathTanh <float(,float)>
;sfFMathExp <float(,float)>
;sfFMathFrExp <float(,float,*int)>
;sfFMathLdExp <float(,float,int)>
;sfFMathLog <float(,float)>
;sfFMathLog10 <float(,float)>
;sfFMathModf <float(,float,*float)>
;sfFMathPow <float(,float,float)>
;sfFMathSqrt <float(,float)>
;sfFMathCeil <float(,float)>
;sfFMathFAbs <float(,float)>
;sfFMathFloor <float(,float)>
;sfFMathFMod <float(,float,float)>
;sfWaitFrame <void(,int)>
[3:348] ;sfWaitFrameOut( frame + svFrameCount );
VBC5_PUSH_CONST 17 | 0x80000000 //import func index sfWaitFrameOut
VBC2_PUSH_LOCAL 2 //frame
VBC3_PUSH_GLOBAL 1 //svFrameCount
VBC1_ADD
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[2:10] ;
VBC1_RETURN
;setup <void()>
[1:106] ;orderFromHead = 0;
VBC2_PUSH_CONST 4 //orderFromHead
VBC1_PUSH_0 
VBC1_POP
[1:107] ;flag_event = 0;
VBC2_PUSH_CONST 68 //flag_event
VBC1_PUSH_0 
VBC1_POP
[1:108] ;cycle_number = 30;
VBC2_PUSH_CONST 7 //cycle_number
VBC2_PUSH_CONST 30 
VBC1_POP
[1:109] ;rotationYieldRight = 0.23;
VBC2_PUSH_CONST 35 //rotationYieldRight
VBC5_PUSH_CONST 1047233823 
VBC1_POP
[1:110] ;rotationYieldLeft = 0.23;
VBC2_PUSH_CONST 36 //rotationYieldLeft
VBC5_PUSH_CONST 1047233823 
VBC1_POP
[1:112] ;svIkA5 = 40.2; 
VBC3_PUSH_CONST 1215 //svIkA5
VBC5_PUSH_CONST 1109445837 
VBC1_POP
[1:113] ;svIkB5 = 0;    
VBC3_PUSH_CONST 1216 //svIkB5
VBC1_PUSH_0 
VBC1_POP_CF
[1:114] ;svIkC5 = 0;    
VBC3_PUSH_CONST 1217 //svIkC5
VBC1_PUSH_0 
VBC1_POP_CF
[1:115] ;svIkA6 = 0;    
VBC3_PUSH_CONST 1218 //svIkA6
VBC1_PUSH_0 
VBC1_POP_CF
[1:116] ;svIkA7 = 99;   
VBC3_PUSH_CONST 1219 //svIkA7
VBC2_PUSH_CONST 99 
VBC1_POP_CF
[1:117] ;svIkA8 = 99;   
VBC3_PUSH_CONST 1220 //svIkA8
VBC2_PUSH_CONST 99 
VBC1_POP_CF
[1:118] ;svIkA9 = 0;    
VBC3_PUSH_CONST 1221 //svIkA9
VBC1_PUSH_0 
VBC1_POP_CF
[1:119] ;svIkA10 = 13.7;  
VBC3_PUSH_CONST 1222 //svIkA10
VBC5_PUSH_CONST 1096495923 
VBC1_POP
[1:120] ;svIkB10 = 23.8;  
VBC3_PUSH_CONST 1223 //svIkB10
VBC5_PUSH_CONST 1102997094 
VBC1_POP
[1:121] ;svIkC10 = 0;   
VBC3_PUSH_CONST 1224 //svIkC10
VBC1_PUSH_0 
VBC1_POP_CF
[1:123] ;e10 = 55;      
VBC2_PUSH_CONST 52 //e10
VBC2_PUSH_CONST 55 
VBC1_POP_CF
[1:124] ;d10 = 62;      
VBC2_PUSH_CONST 53 //d10
VBC2_PUSH_CONST 62 
VBC1_POP_CF
[1:127] ;svIkLimA5min = -90 * 0.017453293;
VBC3_PUSH_CONST 1225 //svIkLimA5min
VBC5_PUSH_CONST -1077342245 
VBC1_POP
[1:128] ;svIkLimA5max = 90 * 0.017453293;
VBC3_PUSH_CONST 1226 //svIkLimA5max
VBC5_PUSH_CONST 1070141403 
VBC1_POP
[1:131] ;svIkLimA6min = -108 * 0.017453293;
VBC3_PUSH_CONST 1227 //svIkLimA6min
VBC5_PUSH_CONST -1074706887 
VBC1_POP
[1:132] ;svIkLimA6max = 15 * 0.017453293;
VBC3_PUSH_CONST 1228 //svIkLimA6max
VBC5_PUSH_CONST 1048971922 
VBC1_POP
[1:134] ;svIkLimA7min = -130 * 0.017453293;
VBC3_PUSH_CONST 1229 //svIkLimA7min
VBC5_PUSH_CONST -1072613858 
VBC1_POP
[1:135] ;svIkLimA7max = 50 * 0.017453293;
VBC3_PUSH_CONST 1230 //svIkLimA7max
VBC5_PUSH_CONST 1063216883 
VBC1_POP
[1:138] ;svIkLimA8min = -180 * 0.017453293;
VBC3_PUSH_CONST 1231 //svIkLimA8min
VBC5_PUSH_CONST -1068953637 
VBC1_POP
[1:139] ;svIkLimA8max = 8 * 0.017453293;
VBC3_PUSH_CONST 1232 //svIkLimA8max
VBC5_PUSH_CONST 1041168949 
VBC1_POP
[1:142] ;svIkLimA9min = -45 * 0.017453293;
VBC3_PUSH_CONST 1233 //svIkLimA9min
VBC5_PUSH_CONST -1085730853 
VBC1_POP
[1:143] ;svIkLimA9max = 78 * 0.017453293;
VBC3_PUSH_CONST 1234 //svIkLimA9max
VBC5_PUSH_CONST 1068384497 
VBC1_POP
[1:146] ;svIkLimA10min = -24 * 0.017453293;
VBC3_PUSH_CONST 1235 //svIkLimA10min
VBC5_PUSH_CONST -1093241008 
VBC1_POP
[1:147] ;svIkLimA10max = 24 * 0.017453293;
VBC3_PUSH_CONST 1236 //svIkLimA10max
VBC5_PUSH_CONST 1054242640 
VBC1_POP
[1:148] ;sfIkSetup();
VBC5_PUSH_CONST 200 | 0x80000000 //import func index sfIkSetup
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:150] ;framestep = 2;
VBC2_PUSH_CONST 37 //framestep
VBC1_PUSH_2 
VBC1_POP
[1:154] ;selfMotionShiftCorrectionX = 0.0;
VBC2_PUSH_CONST 22 //selfMotionShiftCorrectionX
VBC1_PUSH_0 
VBC1_POP
[1:155] ;selfMotionShiftCorrectionY = 0.0;
VBC2_PUSH_CONST 23 //selfMotionShiftCorrectionY
VBC1_PUSH_0 
VBC1_POP
[1:159] ;ztr0 = -(svIkC5+svIkA6+svIkA7+svIkA8+svIkA9+svIkB10 - 1); 
VBC2_PUSH_CONST 60 //ztr0
VBC3_PUSH_GLOBAL 1217 //svIkC5
VBC3_PUSH_GLOBAL 1218 //svIkA6
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1219 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1220 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1221 //svIkA9
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1223 //svIkB10
VBC1_ADD_FF
VBC1_PUSH_1 
VBC1_SUB_FI
VBC1_NEG_F
VBC1_POP
[1:160] ;ztl0 = -(svIkC5+svIkA6+svIkA7+svIkA8+svIkA9+svIkB10 - 1); 
VBC2_PUSH_CONST 61 //ztl0
VBC3_PUSH_GLOBAL 1217 //svIkC5
VBC3_PUSH_GLOBAL 1218 //svIkA6
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1219 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1220 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1221 //svIkA9
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1223 //svIkB10
VBC1_ADD_FF
VBC1_PUSH_1 
VBC1_SUB_FI
VBC1_NEG_F
VBC1_POP
[1:162] ;zr = zl = -1;
VBC2_PUSH_CONST 43 //zr
VBC2_PUSH_CONST 50 //zl
VBC2_PUSH_CONST -1 // -
VBC1_STORE_CF
VBC1_POP
[1:165] ;selfInitPoses = 10;
VBC2_PUSH_CONST 31 //selfInitPoses
VBC2_PUSH_CONST 10 
VBC1_POP
[1:168] ;stepLength = 0.0;    
VBC2_PUSH_CONST 19 //stepLength
VBC1_PUSH_0 
VBC1_POP
[1:169] ;sideLength = 0.0;    
VBC2_PUSH_CONST 20 //sideLength
VBC1_PUSH_0 
VBC1_POP
[1:170] ;rotation = 0;        
VBC2_PUSH_CONST 21 //rotation
VBC1_PUSH_0 
VBC1_POP_CF
[1:171] ;selfFirstLegIsRightLeg = 1; 
VBC2_PUSH_CONST 28 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_POP
[1:172] ;motion_to_right = 1;
VBC2_PUSH_CONST 29 //motion_to_right
VBC1_PUSH_1 
VBC1_POP
[1:173] ;side_motion = 0.0;
VBC2_PUSH_CONST 30 //side_motion
VBC1_PUSH_0 
VBC1_POP
[1:174] ;selfInitPoses = 20; 
VBC2_PUSH_CONST 31 //selfInitPoses
VBC2_PUSH_CONST 20 
VBC1_POP
[1:176] ;stepZtr = (ztr0 + gaitHeight) / selfInitPoses;
VBC2_PUSH_CONST 62 //stepZtr
VBC3_PUSH_GLOBAL 60 //ztr0
VBC3_PUSH_GLOBAL 13 //gaitHeight
VBC1_ADD_FI
VBC3_PUSH_GLOBAL 31 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:177] ;stepZtl = (ztl0 + gaitHeight) / selfInitPoses;
VBC2_PUSH_CONST 63 //stepZtl
VBC3_PUSH_GLOBAL 61 //ztl0
VBC3_PUSH_GLOBAL 13 //gaitHeight
VBC1_ADD_FI
VBC3_PUSH_GLOBAL 31 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:179] ;solyLandingSkew = 0.00;
VBC2_PUSH_CONST 16 //solyLandingSkew
VBC1_PUSH_0 
VBC1_POP
[1:181] ;tors_angle = 0;     
VBC2_PUSH_CONST 70 //tors_angle
VBC1_PUSH_0 
VBC1_POP_CF
[1:183] ;stepYtr = amplitude / 2.0 / selfInitPoses;
VBC2_PUSH_CONST 64 //stepYtr
VBC3_PUSH_GLOBAL 54 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 31 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:184] ;stepYtl = amplitude / 2.0 / selfInitPoses;
VBC2_PUSH_CONST 65 //stepYtl
VBC3_PUSH_GLOBAL 54 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 31 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:189] ;alpha01 = 3.141592654;
VBC2_PUSH_CONST 55 //alpha01
VBC5_PUSH_CONST 1078530011 
VBC1_POP
[1:190] ;if( fr1 != 0 )
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_PUSH_0 
VBC1_NOT_EQU
VBC4_FALSE_JUMP LAB497 //if to false
;alpha01 = alpha01 * 2 / fr1;
VBC2_PUSH_CONST 55 //alpha01
VBC3_PUSH_GLOBAL 55 //alpha01
VBC1_PUSH_2 
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_DIV_FI
VBC1_POP
LAB497: //if else
[1:198] ;timeStep = 1;
VBC2_PUSH_CONST 3 //timeStep
VBC1_PUSH_1 
VBC1_POP
[1:200] ;reducer = 0.5;
VBC2_PUSH_CONST 71 //reducer
VBC5_PUSH_CONST 1056964608 
VBC1_POP
[1:202] ;stepLengthOrder = 60;
VBC2_PUSH_CONST 9 //stepLengthOrder
VBC2_PUSH_CONST 60 
VBC1_POP
[1:203] ;ugol_torsa = 0.7;  	
VBC2_PUSH_CONST 17 //ugol_torsa
VBC5_PUSH_CONST 1060320051 
VBC1_POP
[1:204] ;bodyTiltAtWalk = 0.055;
VBC2_PUSH_CONST 15 //bodyTiltAtWalk
VBC5_PUSH_CONST 1029785518 
VBC1_POP
[1:205] ;hipTilt = 0;
VBC2_PUSH_CONST 8 //hipTilt
VBC1_PUSH_0 
VBC1_POP
[1:206] ;gaitHeight = 180; 
VBC2_PUSH_CONST 13 //gaitHeight
VBC3_PUSH_CONST 180 
VBC1_POP
[1:207] ;stepHeight = 40; 
VBC2_PUSH_CONST 14 //stepHeight
VBC2_PUSH_CONST 40 
VBC1_POP
[1:208] ;fps = 4;
VBC2_PUSH_CONST 10 //fps
VBC2_PUSH_CONST 4 
VBC1_POP
[1:209] ;fr1 = 4;           
VBC2_PUSH_CONST 11 //fr1
VBC2_PUSH_CONST 4 
VBC1_POP
[1:210] ;fr2 = 6;          
VBC2_PUSH_CONST 12 //fr2
VBC2_PUSH_CONST 6 
VBC1_POP
[1:211] ;amplitude = 32;    
VBC2_PUSH_CONST 54 //amplitude
VBC2_PUSH_CONST 32 
VBC1_POP_CF
[1:213] ;if (timeStep == 1){
VBC3_PUSH_GLOBAL 3 //timeStep
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB631 //if to false
;
[1:214] ;stepLengthOrder = 30;
VBC2_PUSH_CONST 9 //stepLengthOrder
VBC2_PUSH_CONST 30 
VBC1_POP
[1:215] ;ugol_torsa = 0.3;
VBC2_PUSH_CONST 17 //ugol_torsa
VBC5_PUSH_CONST 1050253722 
VBC1_POP
[1:216] ;bodyTiltAtWalk = -0.02; 
VBC2_PUSH_CONST 15 //bodyTiltAtWalk
VBC5_PUSH_CONST -1130113270 // -
VBC1_POP
[1:217] ;hipTilt = 300;
VBC2_PUSH_CONST 8 //hipTilt
VBC3_PUSH_CONST 300 
VBC1_POP
[1:218] ;gaitHeight = 135;
VBC2_PUSH_CONST 13 //gaitHeight
VBC3_PUSH_CONST 135 
VBC1_POP
[1:219] ;stepHeight = 35;
VBC2_PUSH_CONST 14 //stepHeight
VBC2_PUSH_CONST 35 
VBC1_POP
[1:220] ;fps = 2;
VBC2_PUSH_CONST 10 //fps
VBC1_PUSH_2 
VBC1_POP
[1:221] ;fr1 = 4;           
VBC2_PUSH_CONST 11 //fr1
VBC2_PUSH_CONST 4 
VBC1_POP
[1:222] ;fr2 = 9;          
VBC2_PUSH_CONST 12 //fr2
VBC2_PUSH_CONST 9 
VBC1_POP
[1:223] ;amplitude = 40;    
VBC2_PUSH_CONST 54 //amplitude
VBC2_PUSH_CONST 40 
VBC1_POP_CF
LAB631: //if else
[1:233] ;
VBC1_RETURN
;sitToStart <void(,int)>
[1:238] ;frameCount = 80;
VBC2_PUSH_B_OFFSET 2 //frameCount
VBC2_PUSH_CONST 80 
VBC1_POP
[1:239] ;sfPoseGroup( 33554432 , 700, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 33554432 
VBC3_PUSH_CONST 700 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:240] ;sfPoseGroup( 4 , 1370, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 4 
VBC3_PUSH_CONST 1370 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:241] ;sfPoseGroup( 8 , 1370, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 8 
VBC3_PUSH_CONST 1370 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:242] ;sfPoseGroup( 64 , 700, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 64 
VBC3_PUSH_CONST 700 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:243] ;sfPoseGroup( 128 , 700, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 128 
VBC3_PUSH_CONST 700 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:244] ;sfPoseGroup( 256 , 4500, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 256 
VBC3_PUSH_CONST 4500 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:245] ;sfPoseGroup( 512 , 4500, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 512 
VBC3_PUSH_CONST 4500 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:246] ;sfPoseGroup( 4096 , 410, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 4096 
VBC3_PUSH_CONST 410 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:247] ;sfPoseGroup( 8192 , -174, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 8192 
VBC3_PUSH_CONST -174 // -
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:248] ;sfPoseGroup( 16384 , 4350, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 16384 
VBC3_PUSH_CONST 4350 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:249] ;sfPoseGroup( 32768 , 4240, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 32768 
VBC3_PUSH_CONST 4240 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:250] ;sfPoseGroup( 65536 , 4800, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 65536 
VBC3_PUSH_CONST 4800 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:251] ;sfPoseGroup( 131072 , 5400, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 131072 
VBC3_PUSH_CONST 5400 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:252] ;sfPoseGroup( 262144 , 2518, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 262144 
VBC3_PUSH_CONST 2518 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:253] ;sfPoseGroup( 524288 , 2550, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 524288 
VBC3_PUSH_CONST 2550 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:254] ;sfPoseGroup( 1048576 , 430, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_CONST 430 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:255] ;sfPoseGroup( 2097152 , -174, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_CONST -174 // -
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:256] ;sfPoseGroup( 67108864 , 2050, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 67108864 
VBC3_PUSH_CONST 2050 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:257] ;sfPoseGroup( 134217728 , 1380, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 134217728 
VBC3_PUSH_CONST 1380 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:258] ;sfWaitFrame( frameCount );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:259] ;sfFreeGroup( 65536 | 131072  );
VBC5_PUSH_CONST 50 | 0x80000000 //import func index sfFreeGroup
VBC4_PUSH_CONST 196608 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:262] ;
VBC1_RETURN
;stabilizeRotationByIMU <void()>
[1:264] ;sfQuaternionToEulerImu();
VBC5_PUSH_CONST 303 | 0x80000000 //import func index sfQuaternionToEulerImu
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:265] ;rotation = (forwardDirection - svEulerYaw) * 1.1;
VBC2_PUSH_CONST 21 //rotation
VBC3_PUSH_GLOBAL 73 //forwardDirection
VBC3_PUSH_GLOBAL 1025 //svEulerYaw
VBC1_SUB_FF
VBC5_PUSH_CONST 1066192077 
VBC1_MUL_FF
VBC1_POP
[1:266] ;if( rotation > 3.141592654 ) rotation -= 2 * 3.141592654;
VBC3_PUSH_GLOBAL 21 //rotation
VBC5_PUSH_CONST 1078530011 
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB997 //if to false
;if( rotation > 3.141592654 ) rotation -= 2 * 3.141592654;
VBC2_PUSH_CONST 21 //rotation
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1086918619 
VBC1_SUB_FF
VBC1_POP
LAB997: //if else
[1:267] ;if( rotation < -3.141592654 ) rotation += 2 * 3.141592654;
VBC3_PUSH_GLOBAL 21 //rotation
VBC5_PUSH_CONST -1068953637 // -
VBC1_LESS_FF
VBC4_FALSE_JUMP LAB1021 //if to false
;if( rotation < -3.141592654 ) rotation += 2 * 3.141592654;
VBC2_PUSH_CONST 21 //rotation
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1086918619 
VBC1_ADD_FF
VBC1_POP
LAB1021: //if else
[1:268] ;if( rotation > 0.3 ) rotation = 0.3;
VBC3_PUSH_GLOBAL 21 //rotation
VBC5_PUSH_CONST 1050253722 
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB1042 //if to false
;if( rotation > 0.3 ) rotation = 0.3;
VBC2_PUSH_CONST 21 //rotation
VBC5_PUSH_CONST 1050253722 
VBC1_POP
LAB1042: //if else
[1:269] ;if( rotation < -0.3 ) rotation = -0.3;
VBC3_PUSH_GLOBAL 21 //rotation
VBC5_PUSH_CONST -1097229926 // -
VBC1_LESS_FF
VBC4_FALSE_JUMP LAB1063 //if to false
;if( rotation < -0.3 ) rotation = -0.3;
VBC2_PUSH_CONST 21 //rotation
VBC5_PUSH_CONST -1097229926 // -
VBC1_POP
LAB1063: //if else
[1:271] ;if (orderFromHead == 1)correctedRotation = 0;
VBC3_PUSH_GLOBAL 4 //orderFromHead
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB1080 //if to false
;if (orderFromHead == 1)correctedRotation = 0;
VBC2_PUSH_CONST 74 //correctedRotation
VBC1_PUSH_0 
VBC1_POP_CF
VBC4_JUMP LAB1130 //if to exit
LAB1080: //if else
;else if (orderFromHead == 2) correctedRotation = 0.3;
VBC3_PUSH_GLOBAL 4 //orderFromHead
VBC1_PUSH_2 
VBC1_EQU
VBC4_FALSE_JUMP LAB1101 //if to false
;else if (orderFromHead == 2) correctedRotation = 0.3;
VBC2_PUSH_CONST 74 //correctedRotation
VBC5_PUSH_CONST 1050253722 
VBC1_POP
VBC4_JUMP LAB1130 //if to exit
LAB1101: //if else
;else if (orderFromHead == 3) correctedRotation = -0.3;
VBC3_PUSH_GLOBAL 4 //orderFromHead
VBC2_PUSH_CONST 3 
VBC1_EQU
VBC4_FALSE_JUMP LAB1123 //if to false
;else if (orderFromHead == 3) correctedRotation = -0.3;
VBC2_PUSH_CONST 74 //correctedRotation
VBC5_PUSH_CONST -1097229926 // -
VBC1_POP
VBC4_JUMP LAB1130 //if to exit
LAB1123: //if else
;else correctedRotation = -rotation;
VBC2_PUSH_CONST 74 //correctedRotation
VBC3_PUSH_GLOBAL 21 //rotation
VBC1_NEG_F
VBC1_POP
LAB1130: //if exit
LAB1130: //if exit
LAB1130: //if exit
[1:279] ;
VBC1_RETURN
;computeAlphaForWalk <int()>
[1:283] ;flag = 0;
VBC2_PUSH_CONST 67 //flag
VBC1_PUSH_0 
VBC1_POP
[1:284] ;torsoAdd = tors_angle * 2607.594587 ;
VBC2_PUSH_CONST 72 //torsoAdd
VBC3_PUSH_GLOBAL 70 //tors_angle
VBC5_PUSH_CONST 1159920003 
VBC1_MUL_FF
VBC1_POP_CI
[1:286] ;if (correctedRotation > 0) {
VBC3_PUSH_GLOBAL 74 //correctedRotation
VBC1_PUSH_0 
VBC1_GREAT_FI
VBC4_FALSE_JUMP LAB1178 //if to false
;
[1:287] ;xtr *= 1.5;
VBC2_PUSH_CONST 38 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1069547520 
VBC1_MUL_FF
VBC1_POP
[1:288] ;xtl *= 0.5;
VBC2_PUSH_CONST 45 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1056964608 
VBC1_MUL_FF
VBC1_POP
LAB1178: //if else
[1:291] ;if (correctedRotation < 0) {
VBC3_PUSH_GLOBAL 74 //correctedRotation
VBC1_PUSH_0 
VBC1_LESS_FI
VBC4_FALSE_JUMP LAB1209 //if to false
;
[1:292] ;xtr *= 0.5;
VBC2_PUSH_CONST 38 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1056964608 
VBC1_MUL_FF
VBC1_POP
[1:293] ;xtl *= 1.5;
VBC2_PUSH_CONST 45 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1069547520 
VBC1_MUL_FF
VBC1_POP
LAB1209: //if else
[1:296] ;sfIkAngle( xtr, ytr, ztr, xr, yr, zr, wr );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 38 //xtr
VBC3_PUSH_GLOBAL 39 //ytr
VBC3_PUSH_GLOBAL 40 //ztr
VBC3_PUSH_GLOBAL 41 //xr
VBC3_PUSH_GLOBAL 42 //yr
VBC3_PUSH_GLOBAL 43 //zr
VBC3_PUSH_GLOBAL 44 //wr
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
[1:297] ;if( svIkOutPresent ) {
VBC3_PUSH_GLOBAL 1237 //svIkOutPresent
VBC4_FALSE_JUMP LAB1612 //if to false
;
[1:298] ;flag = flag + 1;
VBC2_PUSH_CONST 67 //flag
VBC3_PUSH_GLOBAL 67 //flag
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
[1:300] ;if (selfFirstLegIsRightLeg == 1){
VBC3_PUSH_GLOBAL 28 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB1438 //if to false
;
[1:301] ;sfPoseGroupLin( 1024 , -(svIkEncA5 - torsoAdd), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC3_PUSH_GLOBAL 72 //torsoAdd
VBC1_SUB
VBC1_NEG
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:302] ;sfPoseGroupLin( 4096 , -svIkEncA6, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:303] ;sfPoseGroupLin( 16384 , -svIkEncA7 + hipTilt, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 8 //hipTilt
VBC1_ADD
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:304] ;sfPoseGroupLin( 65536 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:305] ;sfPoseGroupLin( 67108864 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 67108864 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:306] ;sfPoseGroupLin( 262144 , svIkEncA9, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:307] ;sfPoseGroupLin( 1048576 , -svIkEncA10, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:308] ;sfPoseGroupLin( 2 , -torsoAdd, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 72 //torsoAdd
VBC1_NEG
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:309] ;sfPoseGroupLin( 4 , (1400 - xtl * 30), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_CONST 4 
VBC3_PUSH_CONST 1400 
VBC3_PUSH_GLOBAL 45 //xtl
VBC2_PUSH_CONST 30 
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB1612 //if to exit
LAB1438: //if else
;
[1:312] ;sfPoseGroupLin( 2048 , (svIkEncA5 - tors_angle), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC3_PUSH_GLOBAL 70 //tors_angle
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:313] ;sfPoseGroupLin( 8192 , -svIkEncA6, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:314] ;sfPoseGroupLin( 32768 , -svIkEncA7 + hipTilt, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 8 //hipTilt
VBC1_ADD
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:315] ;sfPoseGroupLin( 131072 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:316] ;sfPoseGroupLin( 134217728 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 134217728 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:317] ;sfPoseGroupLin( 524288 , svIkEncA9, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:318] ;sfPoseGroupLin( 2097152 , -svIkEncA10, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:319] ;sfPoseGroupLin(2 , -torsoAdd, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 72 //torsoAdd
VBC1_NEG
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:320] ;sfPoseGroupLin( 8 , (1400 - xtr * 30), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_CONST 8 
VBC3_PUSH_CONST 1400 
VBC3_PUSH_GLOBAL 38 //xtr
VBC2_PUSH_CONST 30 
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB1612: //if exit
LAB1612: //if else
[1:326] ;sfIkAngle( xtl, -ytl, ztl, xl, -yl, zl, wl );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 45 //xtl
VBC3_PUSH_GLOBAL 46 //ytl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 47 //ztl
VBC3_PUSH_GLOBAL 48 //xl
VBC3_PUSH_GLOBAL 49 //yl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 50 //zl
VBC3_PUSH_GLOBAL 51 //wl
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
[1:327] ;if (correctedRotation > 0) {
VBC3_PUSH_GLOBAL 74 //correctedRotation
VBC1_PUSH_0 
VBC1_GREAT_FI
VBC4_FALSE_JUMP LAB1673 //if to false
;
[1:328] ;xtr /= 1.5;
VBC2_PUSH_CONST 38 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1069547520 
VBC1_DIV_FF
VBC1_POP
[1:329] ;xtl /= 0.5;
VBC2_PUSH_CONST 45 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1056964608 
VBC1_DIV_FF
VBC1_POP
LAB1673: //if else
[1:331] ;if (correctedRotation < 0) {
VBC3_PUSH_GLOBAL 74 //correctedRotation
VBC1_PUSH_0 
VBC1_LESS_FI
VBC4_FALSE_JUMP LAB1704 //if to false
;
[1:332] ;xtr /= 0.5;
VBC2_PUSH_CONST 38 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1056964608 
VBC1_DIV_FF
VBC1_POP
[1:333] ;xtl /= 1.5;
VBC2_PUSH_CONST 45 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1069547520 
VBC1_DIV_FF
VBC1_POP
LAB1704: //if else
[1:335] ;if( svIkOutPresent ) {
VBC3_PUSH_GLOBAL 1237 //svIkOutPresent
VBC4_FALSE_JUMP LAB2049 //if to false
;
[1:336] ;flag = flag + 1;
VBC2_PUSH_CONST 67 //flag
VBC3_PUSH_GLOBAL 67 //flag
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
[1:338] ;if (selfFirstLegIsRightLeg == 1){
VBC3_PUSH_GLOBAL 28 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB1891 //if to false
;
[1:339] ;sfPoseGroupLin( 2048 , -(svIkEncA5 + torsoAdd), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC3_PUSH_GLOBAL 72 //torsoAdd
VBC1_ADD
VBC1_NEG
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:340] ;sfPoseGroupLin( 8192 , -svIkEncA6, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:341] ;sfPoseGroupLin( 32768 , -svIkEncA7 + hipTilt, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 8 //hipTilt
VBC1_ADD
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:342] ;sfPoseGroupLin( 131072 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:343] ;sfPoseGroupLin( 134217728 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 134217728 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:344] ;sfPoseGroupLin( 524288 , svIkEncA9, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:345] ;sfPoseGroupLin( 2097152 , -svIkEncA10, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:346] ;sfPoseGroupLin( 8 , (1400 - xtr * 30), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_CONST 8 
VBC3_PUSH_CONST 1400 
VBC3_PUSH_GLOBAL 38 //xtr
VBC2_PUSH_CONST 30 
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB2049 //if to exit
LAB1891: //if else
;
[1:349] ;sfPoseGroupLin( 1024 , (svIkEncA5 - tors_angle), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC3_PUSH_GLOBAL 70 //tors_angle
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:350] ;sfPoseGroupLin( 4096 , -svIkEncA6, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:351] ;sfPoseGroupLin( 16384 , -svIkEncA7 + hipTilt, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 8 //hipTilt
VBC1_ADD
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:352] ;sfPoseGroupLin( 65536 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:353] ;sfPoseGroupLin( 67108864 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 67108864 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:354] ;sfPoseGroupLin( 262144 , svIkEncA9, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:355] ;sfPoseGroupLin( 1048576 , -svIkEncA10, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:356] ;sfPoseGroupLin( 4 , (1400 - xtl * 30), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_CONST 4 
VBC3_PUSH_CONST 1400 
VBC3_PUSH_GLOBAL 45 //xtl
VBC2_PUSH_CONST 30 
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB2049: //if exit
LAB2049: //if else
[1:360] ;sfWaitFrame( timeStep );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 3 //timeStep
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:361] ;if (flag < 2) flag_event = flag_event + 1;
VBC3_PUSH_GLOBAL 67 //flag
VBC1_PUSH_2 
VBC1_LESS
VBC4_FALSE_JUMP LAB2073 //if to false
;if (flag < 2) flag_event = flag_event + 1;
VBC2_PUSH_CONST 68 //flag_event
VBC3_PUSH_GLOBAL 68 //flag_event
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
LAB2073: //if else
[1:362] ;return 1;
VBC1_PUSH_1 
VBC2_POP_RESULT 2
VBC1_RETURN
;computeAlphaForWalkFine <void(,int)>
[1:377] ;sfIkAngle( xtr, ytr, ztr, xr, yr, zr, wr );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 38 //xtr
VBC3_PUSH_GLOBAL 39 //ytr
VBC3_PUSH_GLOBAL 40 //ztr
VBC3_PUSH_GLOBAL 41 //xr
VBC3_PUSH_GLOBAL 42 //yr
VBC3_PUSH_GLOBAL 43 //zr
VBC3_PUSH_GLOBAL 44 //wr
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
[1:379] ;if( svIkOutPresent ) {
VBC3_PUSH_GLOBAL 1237 //svIkOutPresent
VBC4_FALSE_JUMP LAB2365 //if to false
;
[1:381] ;if (selfFirstLegIsRightLeg == 1){
VBC3_PUSH_GLOBAL 28 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB2245 //if to false
;
[1:382] ;sfPoseGroupLin( 1024 , -svIkEncA5, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:383] ;sfPoseGroupLin( 4096 , -svIkEncA6, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:384] ;sfPoseGroupLin( 16384 , -svIkEncA7, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:385] ;sfPoseGroupLin( 65536 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:386] ;sfPoseGroupLin( 67108864 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 67108864 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:387] ;sfPoseGroupLin( 262144 , svIkEncA9, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:388] ;sfPoseGroupLin( 1048576 , -svIkEncA10, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB2365 //if to exit
LAB2245: //if else
;
[1:391] ;sfPoseGroupLin( 2048 , svIkEncA5, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:392] ;sfPoseGroupLin( 8192 , -svIkEncA6, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:393] ;sfPoseGroupLin( 32768 , -svIkEncA7, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:394] ;sfPoseGroupLin( 131072 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:395] ;sfPoseGroupLin( 134217728 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 134217728 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:396] ;sfPoseGroupLin( 524288 , svIkEncA9, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:397] ;sfPoseGroupLin( 2097152 , -svIkEncA10, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB2365: //if exit
LAB2365: //if else
[1:403] ;sfIkAngle( xtl, -ytl, ztl, xl, -yl, zl, wl );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 45 //xtl
VBC3_PUSH_GLOBAL 46 //ytl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 47 //ztl
VBC3_PUSH_GLOBAL 48 //xl
VBC3_PUSH_GLOBAL 49 //yl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 50 //zl
VBC3_PUSH_GLOBAL 51 //wl
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
[1:404] ;if( svIkOutPresent ) {
VBC3_PUSH_GLOBAL 1237 //svIkOutPresent
VBC4_FALSE_JUMP LAB2655 //if to false
;
[1:406] ;if (selfFirstLegIsRightLeg == 1){
VBC3_PUSH_GLOBAL 28 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB2536 //if to false
;
[1:407] ;sfPoseGroupLin( 2048 , -svIkEncA5, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:408] ;sfPoseGroupLin( 8192 , -svIkEncA6, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:409] ;sfPoseGroupLin( 32768 , -svIkEncA7, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:410] ;sfPoseGroupLin( 131072 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:411] ;sfPoseGroupLin( 134217728 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 134217728 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:412] ;sfPoseGroupLin( 524288 , svIkEncA9, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:413] ;sfPoseGroupLin( 2097152 , -svIkEncA10, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB2655 //if to exit
LAB2536: //if else
;
[1:416] ;sfPoseGroupLin( 1024 , svIkEncA5, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:417] ;sfPoseGroupLin( 4096 , -svIkEncA6, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:418] ;sfPoseGroupLin( 16384 , -svIkEncA7, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:419] ;sfPoseGroupLin( 65536 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:420] ;sfPoseGroupLin( 67108864 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 67108864 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:421] ;sfPoseGroupLin( 262144 , svIkEncA9, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:422] ;sfPoseGroupLin( 1048576 , -svIkEncA10, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB2655: //if exit
LAB2655: //if else
[1:426] ;sfPoseGroupLin( 256  | 512 , 4540, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 768 
VBC3_PUSH_CONST 4540 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:427] ;sfPoseGroupLin( 4  | 8 , 1400, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_CONST 12 
VBC3_PUSH_CONST 1400 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:428] ;sfPoseGroupLin( 64  | 128 , 700, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 192 
VBC3_PUSH_CONST 700 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:429] ;sfWaitFrame( frameCount );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:436] ;
VBC1_RETURN
;testDrop <void()>
[1:437] ;if( sfAbs(svImuAccX) > 50000 || sfAbs(svImuAccZ) > 50000 ) {
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 1000 //svImuAccX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC4_PUSH_CONST 50000 
VBC1_GREAT
VBC4_TRUE_JUMP_KEEP LAB2745
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 1002 //svImuAccZ
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC4_PUSH_CONST 50000 
VBC1_GREAT
VBC4_TRUE_JUMP_KEEP LAB2745
VBC1_PUSH_0
LAB2745:
VBC4_FALSE_JUMP LAB2755 //if to false
;
[1:442] ;sfWaitFrame(100);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_CONST 100 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB2755: //if else
[1:448] ;
VBC1_RETURN
;walkInitialPose <void()>
[1:453] ;xtr = xtl = 0;
VBC2_PUSH_CONST 38 //xtr
VBC2_PUSH_CONST 45 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:454] ;for( j = 0; j < selfInitPoses; j++ ) {
VBC2_PUSH_CONST 75 //j
VBC1_PUSH_0 
VBC1_POP
LAB2767: //for condition
VBC3_PUSH_GLOBAL 75 //j
VBC3_PUSH_GLOBAL 31 //selfInitPoses
VBC1_LESS
VBC4_FALSE_JUMP LAB2852 //to for exit
;
[1:456] ;ztr = ztr0 - j * stepZtr;
VBC2_PUSH_CONST 40 //ztr
VBC3_PUSH_GLOBAL 60 //ztr0
VBC3_PUSH_GLOBAL 75 //j
VBC3_PUSH_GLOBAL 62 //stepZtr
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:457] ;ztl = ztl0 - j * stepZtl;
VBC2_PUSH_CONST 47 //ztl
VBC3_PUSH_GLOBAL 61 //ztl0
VBC3_PUSH_GLOBAL 75 //j
VBC3_PUSH_GLOBAL 63 //stepZtl
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:458] ;ytr = -d10 - j * stepYtr;
VBC2_PUSH_CONST 39 //ytr
VBC3_PUSH_GLOBAL 53 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 75 //j
VBC3_PUSH_GLOBAL 64 //stepYtr
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:459] ;ytl =  d10 - j * stepYtl;
VBC2_PUSH_CONST 46 //ytl
VBC3_PUSH_GLOBAL 53 //d10
VBC3_PUSH_GLOBAL 75 //j
VBC3_PUSH_GLOBAL 65 //stepYtl
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:461] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 1131  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB2845 //if to false
;return;
VBC1_RETURN
LAB2845: //if else
LAB2845: //for step
VBC2_PUSH_CONST 75 //j
VBC1_INC
VBC4_JUMP LAB2767 //to condition
LAB2852: //for exit
[1:471] ;
VBC1_RETURN
;walkInitialPoseFine <void()>
[1:472] ;xtr = xtl = 0;
VBC2_PUSH_CONST 38 //xtr
VBC2_PUSH_CONST 45 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:473] ;ztr = ztl = -gaitHeight;
VBC2_PUSH_CONST 40 //ztr
VBC2_PUSH_CONST 47 //ztl
VBC3_PUSH_GLOBAL 13 //gaitHeight
VBC1_NEG
VBC1_STORE_CF
VBC1_POP
[1:474] ;ytr = -d10 - amplitude / 2.0;
VBC2_PUSH_CONST 39 //ytr
VBC3_PUSH_GLOBAL 53 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 54 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:475] ;ytl =  d10 - amplitude / 2.0;
VBC2_PUSH_CONST 46 //ytl
VBC3_PUSH_GLOBAL 53 //d10
VBC3_PUSH_GLOBAL 54 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:476] ;computeAlphaForWalkFine( 40 );
VBC3_PUSH_CONST 2077  //func address computeAlphaForWalkFine
VBC2_PUSH_CONST 40 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:480] ;
VBC1_RETURN
;walkFinalPose <void()>
[1:481] ;for( j = 0; j < selfInitPoses; j++ ) {
VBC2_PUSH_CONST 75 //j
VBC1_PUSH_0 
VBC1_POP
LAB2915: //for condition
VBC3_PUSH_GLOBAL 75 //j
VBC3_PUSH_GLOBAL 31 //selfInitPoses
VBC1_LESS
VBC4_FALSE_JUMP LAB3018 //to for exit
;
[1:483] ;ztr = -gaitHeight + (j+1) * stepZtr;
VBC2_PUSH_CONST 40 //ztr
VBC3_PUSH_GLOBAL 13 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 75 //j
VBC1_PUSH_1 
VBC1_ADD
VBC3_PUSH_GLOBAL 62 //stepZtr
VBC1_MUL_IF
VBC1_ADD_IF
VBC1_POP
[1:484] ;ztl = -gaitHeight + (j+1) * stepZtr;
VBC2_PUSH_CONST 47 //ztl
VBC3_PUSH_GLOBAL 13 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 75 //j
VBC1_PUSH_1 
VBC1_ADD
VBC3_PUSH_GLOBAL 62 //stepZtr
VBC1_MUL_IF
VBC1_ADD_IF
VBC1_POP
[1:485] ;ytr = -d10 + (selfInitPoses - (j+1)) * stepYtr;
VBC2_PUSH_CONST 39 //ytr
VBC3_PUSH_GLOBAL 53 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 31 //selfInitPoses
VBC3_PUSH_GLOBAL 75 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_SUB
VBC3_PUSH_GLOBAL 64 //stepYtr
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:486] ;ytl =  d10 + (selfInitPoses - (j+1)) * stepYtl;
VBC2_PUSH_CONST 46 //ytl
VBC3_PUSH_GLOBAL 53 //d10
VBC3_PUSH_GLOBAL 31 //selfInitPoses
VBC3_PUSH_GLOBAL 75 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_SUB
VBC3_PUSH_GLOBAL 65 //stepYtl
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:488] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 1131  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB3011 //if to false
;return;
VBC1_RETURN
LAB3011: //if else
LAB3011: //for step
VBC2_PUSH_CONST 75 //j
VBC1_INC
VBC4_JUMP LAB2915 //to condition
LAB3018: //for exit
[1:499] ;
VBC1_RETURN
;walkFinalPoseFine <void()>
[1:500] ;xtr = xtl = 0;
VBC2_PUSH_CONST 38 //xtr
VBC2_PUSH_CONST 45 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:501] ;ztr = ztl = -(svIkC5+svIkA6+svIkA7+svIkA8+svIkA9+svIkB10 - 1);
VBC2_PUSH_CONST 40 //ztr
VBC2_PUSH_CONST 47 //ztl
VBC3_PUSH_GLOBAL 1217 //svIkC5
VBC3_PUSH_GLOBAL 1218 //svIkA6
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1219 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1220 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1221 //svIkA9
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1223 //svIkB10
VBC1_ADD_FF
VBC1_PUSH_1 
VBC1_SUB_FI
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:502] ;ytr = -d10;
VBC2_PUSH_CONST 39 //ytr
VBC3_PUSH_GLOBAL 53 //d10
VBC1_NEG_F
VBC1_POP
[1:503] ;ytl =  d10;
VBC2_PUSH_CONST 46 //ytl
VBC3_PUSH_GLOBAL 53 //d10
VBC1_POP
[1:504] ;computeAlphaForWalkFine( 40 );
VBC3_PUSH_CONST 2077  //func address computeAlphaForWalkFine
VBC2_PUSH_CONST 40 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:507] ;
VBC1_RETURN
;walkInit <void()>
[1:521] ;correctedStepLenght = stepLength + selfMotionShiftCorrectionX;
VBC2_PUSH_CONST 56 //correctedStepLenght
VBC3_PUSH_GLOBAL 19 //stepLength
VBC3_PUSH_GLOBAL 22 //selfMotionShiftCorrectionX
VBC1_ADD_FF
VBC1_POP
[1:522] ;correctedStepLenghtHalf = correctedStepLenght / 2;
VBC2_PUSH_CONST 57 //correctedStepLenghtHalf
VBC3_PUSH_GLOBAL 56 //correctedStepLenght
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_POP
[1:523] ;correctedSideLenght = sideLength - selfMotionShiftCorrectionY;
VBC2_PUSH_CONST 58 //correctedSideLenght
VBC3_PUSH_GLOBAL 20 //sideLength
VBC3_PUSH_GLOBAL 23 //selfMotionShiftCorrectionY
VBC1_SUB_FF
VBC1_POP
[1:524] ;correctedSideLenghtHalf = correctedSideLenght / 2;
VBC2_PUSH_CONST 59 //correctedSideLenghtHalf
VBC3_PUSH_GLOBAL 58 //correctedSideLenght
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_POP
[1:530] ;stepRotation = correctedRotation / (fr2 - 2.0) * 2;
VBC2_PUSH_CONST 87 //stepRotation
VBC3_PUSH_GLOBAL 74 //correctedRotation
VBC3_PUSH_GLOBAL 12 //fr2
VBC5_PUSH_CONST 1073741824 
VBC1_SUB_IF
VBC1_DIV_FF
VBC1_PUSH_2 
VBC1_MUL_FI
VBC1_POP
[1:532] ;dx0Typical = correctedStepLenght / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 78 //dx0Typical
VBC3_PUSH_GLOBAL 56 //correctedStepLenght
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_POP
[1:533] ;dy0Typical = correctedSideLenght / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 79 //dy0Typical
VBC3_PUSH_GLOBAL 58 //correctedSideLenght
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_POP
[1:534] ;dobavka_x_ot_torsa = svIkA5 * 2.0 * sfMathSin(ugol_torsa) / fr2;
VBC2_PUSH_CONST 69 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC5_PUSH_CONST 1073741824 
VBC1_MUL_FF
VBC5_PUSH_CONST 301 | 0x80000000 //import func index sfMathSin
//alloc addon amount for result
VBC3_PUSH_GLOBAL 17 //ugol_torsa
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_DIV_FI
VBC1_POP
[1:536] ;xr = xl = bodyTiltAtWalk;
VBC2_PUSH_CONST 41 //xr
VBC2_PUSH_CONST 48 //xl
VBC3_PUSH_GLOBAL 15 //bodyTiltAtWalk
VBC1_STORE
VBC1_POP
[1:537] ;yl =  solyLandingSkew;
VBC2_PUSH_CONST 49 //yl
VBC3_PUSH_GLOBAL 16 //solyLandingSkew
VBC1_POP
[1:538] ;yr = -solyLandingSkew;
VBC2_PUSH_CONST 42 //yr
VBC3_PUSH_GLOBAL 16 //solyLandingSkew
VBC1_NEG_F
VBC1_POP
[1:539] ;fase_offset = 0.7; 
VBC2_PUSH_CONST 81 //fase_offset
VBC5_PUSH_CONST 1060320051 
VBC1_POP
[1:540] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 950  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:545] ;
VBC1_RETURN
;walkPhasa1 <void()>
[1:546] ;ztl = ztr = -gaitHeight;
VBC2_PUSH_CONST 47 //ztl
VBC2_PUSH_CONST 40 //ztr
VBC3_PUSH_GLOBAL 13 //gaitHeight
VBC1_NEG
VBC1_STORE_CF
VBC1_POP
[1:547] ;xtl_plan = correctedStepLenght * (0.5 - fr1 / (2.0 * fr1 + fr2)) - dobavka_x_ot_torsa * fr1 * fr2 / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 88 //xtl_plan
VBC3_PUSH_GLOBAL 56 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 11 //fr1
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_ADD_FI
VBC1_DIV_IF
VBC1_SUB_FF
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 69 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_MUL_FI
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:548] ;for( j = 0; j < fr1; j ++ ) {
VBC2_PUSH_CONST 75 //j
VBC1_PUSH_0 
VBC1_POP
LAB3306: //for condition
VBC3_PUSH_GLOBAL 75 //j
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_LESS
VBC4_FALSE_JUMP LAB3448 //to for exit
;
[1:550] ;s = (amplitude / 2 + correctedSideLenghtHalf) * sfMathCos(alpha01 * (j / 2 + fase_offset * framestep));
VBC2_PUSH_CONST 80 //s
VBC3_PUSH_GLOBAL 54 //amplitude
VBC1_PUSH_2 
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 59 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 55 //alpha01
VBC3_PUSH_GLOBAL 75 //j
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 81 //fase_offset
VBC3_PUSH_GLOBAL 37 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_MUL_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_MUL_FF
VBC1_POP
[1:551] ;ytr = s - d10 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 39 //ytr
VBC3_PUSH_GLOBAL 80 //s
VBC3_PUSH_GLOBAL 53 //d10
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 59 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
[1:552] ;ytl = s + d10 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 46 //ytl
VBC3_PUSH_GLOBAL 80 //s
VBC3_PUSH_GLOBAL 53 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 59 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
[1:553] ;if( stepType == 0 ) continue;
VBC3_PUSH_GLOBAL 66 //stepType
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB3395 //if to false
;if( stepType == 0 ) continue;
VBC4_JUMP LAB3441 //to loop condition
LAB3395: //if else
[1:554] ;dx1 = (xtl_plan - xtl) / (fr1 - j);
VBC2_PUSH_CONST 84 //dx1
VBC3_PUSH_GLOBAL 88 //xtl_plan
VBC3_PUSH_GLOBAL 45 //xtl
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 11 //fr1
VBC3_PUSH_GLOBAL 75 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:555] ;xtr += dx1;
VBC2_PUSH_CONST 38 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 84 //dx1
VBC1_ADD_FF
VBC1_POP
[1:556] ;xtl += dx1;
VBC2_PUSH_CONST 45 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 84 //dx1
VBC1_ADD_FF
VBC1_POP
[1:558] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 1131  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB3441 //if to false
;return;
VBC1_RETURN
LAB3441: //if else
LAB3441: //for step
VBC2_PUSH_CONST 75 //j
VBC1_INC
VBC4_JUMP LAB3306 //to condition
LAB3448: //for exit
[1:565] ;
VBC1_RETURN
;walkPhasa3 <void()>
[1:566] ;ztl = ztr = -gaitHeight;
VBC2_PUSH_CONST 47 //ztl
VBC2_PUSH_CONST 40 //ztr
VBC3_PUSH_GLOBAL 13 //gaitHeight
VBC1_NEG
VBC1_STORE_CF
VBC1_POP
[1:567] ;xtr_plan = correctedStepLenght * (0.5 - fr1 / (2.0 * fr1 + fr2)) - dobavka_x_ot_torsa * fr1 * fr2 / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 89 //xtr_plan
VBC3_PUSH_GLOBAL 56 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 11 //fr1
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_ADD_FI
VBC1_DIV_IF
VBC1_SUB_FF
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 69 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_MUL_FI
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:568] ;for( j = 0; j < fr1; j ++ ) {
VBC2_PUSH_CONST 75 //j
VBC1_PUSH_0 
VBC1_POP
LAB3519: //for condition
VBC3_PUSH_GLOBAL 75 //j
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_LESS
VBC4_FALSE_JUMP LAB3652 //to for exit
;
[1:570] ;s = (amplitude / 2 + correctedSideLenghtHalf) * sfMathCos(alpha01 * ((j -fr2) / 2 + fase_offset * framestep));
VBC2_PUSH_CONST 80 //s
VBC3_PUSH_GLOBAL 54 //amplitude
VBC1_PUSH_2 
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 59 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 55 //alpha01
VBC3_PUSH_GLOBAL 75 //j
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_SUB
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 81 //fase_offset
VBC3_PUSH_GLOBAL 37 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_MUL_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_MUL_FF
VBC1_POP
[1:571] ;ytr = s - d10 - correctedSideLenghtHalf; 
VBC2_PUSH_CONST 39 //ytr
VBC3_PUSH_GLOBAL 80 //s
VBC3_PUSH_GLOBAL 53 //d10
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 59 //correctedSideLenghtHalf
VBC1_SUB_FF
VBC1_POP
[1:572] ;ytl = s + d10 + correctedSideLenghtHalf; 
VBC2_PUSH_CONST 46 //ytl
VBC3_PUSH_GLOBAL 80 //s
VBC3_PUSH_GLOBAL 53 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 59 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
[1:573] ;dx1 = (xtr_plan - xtr) / (fr1 - j);
VBC2_PUSH_CONST 84 //dx1
VBC3_PUSH_GLOBAL 89 //xtr_plan
VBC3_PUSH_GLOBAL 38 //xtr
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 11 //fr1
VBC3_PUSH_GLOBAL 75 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:574] ;xtr += dx1;
VBC2_PUSH_CONST 38 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 84 //dx1
VBC1_ADD_FF
VBC1_POP
[1:575] ;xtl += dx1;
VBC2_PUSH_CONST 45 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 84 //dx1
VBC1_ADD_FF
VBC1_POP
[1:577] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 1131  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB3645 //if to false
;return;
VBC1_RETURN
LAB3645: //if else
LAB3645: //for step
VBC2_PUSH_CONST 75 //j
VBC1_INC
VBC4_JUMP LAB3519 //to condition
LAB3652: //for exit
[1:584] ;
VBC1_RETURN
;walkPhasa2 <void()>
[1:585] ;wr = 0; wl = 0;
VBC2_PUSH_CONST 44 //wr
VBC1_PUSH_0 
VBC1_POP_CF
[1:585] ;wr = 0; wl = 0;
VBC2_PUSH_CONST 51 //wl
VBC1_PUSH_0 
VBC1_POP_CF
[1:586] ;dy = correctedSideLenght / fr2;
VBC2_PUSH_CONST 83 //dy
VBC3_PUSH_GLOBAL 58 //correctedSideLenght
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_DIV_FI
VBC1_POP
[1:587] ;xtl_plan = correctedStepLenght * (0.5 - (fr1 + fr2) / (2.0 * fr1 + fr2)) + dobavka_x_ot_torsa * fr1 * fr2 / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 88 //xtl_plan
VBC3_PUSH_GLOBAL 56 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 11 //fr1
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_ADD_FI
VBC1_DIV_IF
VBC1_SUB_FF
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 69 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_MUL_FI
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_ADD_FF
VBC1_POP
[1:588] ;xtr_plan = correctedStepLenght * 0.5 + dx0Typical + dobavka_x_ot_torsa;
VBC2_PUSH_CONST 89 //xtr_plan
VBC3_PUSH_GLOBAL 56 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 78 //dx0Typical
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 69 //dobavka_x_ot_torsa
VBC1_ADD_FF
VBC1_POP
[1:589] ;for( j = 0; j < fr2; j ++ ) {
VBC2_PUSH_CONST 75 //j
VBC1_PUSH_0 
VBC1_POP
LAB3755: //for condition
VBC3_PUSH_GLOBAL 75 //j
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_LESS
VBC4_FALSE_JUMP LAB4079 //to for exit
;
[1:590] ;ztr = -gaitHeight + stepHeight;
VBC2_PUSH_CONST 40 //ztr
VBC3_PUSH_GLOBAL 13 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 14 //stepHeight
VBC1_ADD
VBC1_POP_CF
[1:591] ;dx2 = (xtl_plan - xtl) / (fr2 - j);
VBC2_PUSH_CONST 85 //dx2
VBC3_PUSH_GLOBAL 88 //xtl_plan
VBC3_PUSH_GLOBAL 45 //xtl
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 12 //fr2
VBC3_PUSH_GLOBAL 75 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:592] ;if (stepType == 0)
VBC3_PUSH_GLOBAL 66 //stepType
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB3833 //if to false
;tors_angle = sfFMathASin(dobavka_x_ot_torsa / svIkA5 * (j + 1) / 2);
VBC2_PUSH_CONST 70 //tors_angle
VBC5_PUSH_CONST 352 | 0x80000000 //import func index sfFMathASin
//alloc addon amount for result
VBC3_PUSH_GLOBAL 69 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 75 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_MUL_FI
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_POP
VBC4_JUMP LAB3868 //if to exit
LAB3833: //if else
;tors_angle = sfFMathASin(sfMathSin(-ugol_torsa) + dobavka_x_ot_torsa / svIkA5 * (j + 1));
VBC2_PUSH_CONST 70 //tors_angle
VBC5_PUSH_CONST 352 | 0x80000000 //import func index sfFMathASin
//alloc addon amount for result
VBC5_PUSH_CONST 301 | 0x80000000 //import func index sfMathSin
//alloc addon amount for result
VBC3_PUSH_GLOBAL 17 //ugol_torsa
VBC1_NEG_F
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC3_PUSH_GLOBAL 69 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 75 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_MUL_FI
VBC1_ADD_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_POP
LAB3868: //if exit
[1:596] ;if( j == 0 ) {
VBC3_PUSH_GLOBAL 75 //j
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB3908 //if to false
;
[1:597] ;xtr += dx2 - dobavka_x_ot_torsa;
VBC2_PUSH_CONST 38 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 85 //dx2
VBC3_PUSH_GLOBAL 69 //dobavka_x_ot_torsa
VBC1_SUB_FF
VBC1_ADD_FF
VBC1_POP
[1:598] ;ytr  = s - d10 + dy0Typical;
VBC2_PUSH_CONST 39 //ytr
VBC3_PUSH_GLOBAL 80 //s
VBC3_PUSH_GLOBAL 53 //d10
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 79 //dy0Typical
VBC1_ADD_FF
VBC1_POP
VBC4_JUMP LAB4044 //if to exit
LAB3908: //if else
;else if( j == (fr2 - 1) ) {
VBC3_PUSH_GLOBAL 75 //j
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_PUSH_1 
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB3958 //if to false
;
[1:601] ;xtr += dx2 - dobavka_x_ot_torsa;
VBC2_PUSH_CONST 38 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 85 //dx2
VBC3_PUSH_GLOBAL 69 //dobavka_x_ot_torsa
VBC1_SUB_FF
VBC1_ADD_FF
VBC1_POP
[1:602] ;ytr  = s - d10 + 2 * dy0Typical - correctedSideLenght;
VBC2_PUSH_CONST 39 //ytr
VBC3_PUSH_GLOBAL 80 //s
VBC3_PUSH_GLOBAL 53 //d10
VBC1_SUB_FF
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 79 //dy0Typical
VBC1_MUL_IF
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 58 //correctedSideLenght
VBC1_SUB_FF
VBC1_POP
VBC4_JUMP LAB4044 //if to exit
LAB3958: //if else
;
[1:605] ;if (j == 1)
VBC3_PUSH_GLOBAL 75 //j
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB3984 //if to false
;ztr = -gaitHeight + stepHeight / 2.0;
VBC2_PUSH_CONST 40 //ztr
VBC3_PUSH_GLOBAL 13 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 14 //stepHeight
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_IF
VBC1_ADD_IF
VBC1_POP
LAB3984: //if else
[1:607] ;dx = (xtr_plan - xtr) / (fr2 - j);
VBC2_PUSH_CONST 82 //dx
VBC3_PUSH_GLOBAL 89 //xtr_plan
VBC3_PUSH_GLOBAL 38 //xtr
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 12 //fr2
VBC3_PUSH_GLOBAL 75 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:608] ;xtr += dx;
VBC2_PUSH_CONST 38 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 82 //dx
VBC1_ADD_FF
VBC1_POP
[1:609] ;ytr  = s - 64 + dy0Typical - dy * fr2 / (fr2 - 2) * (j / 2);
VBC2_PUSH_CONST 39 //ytr
VBC3_PUSH_GLOBAL 80 //s
VBC2_PUSH_CONST 64 
VBC1_SUB_FI
VBC3_PUSH_GLOBAL 79 //dy0Typical
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 83 //dy
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_PUSH_2 
VBC1_SUB
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 75 //j
VBC1_PUSH_2 
VBC1_DIV
VBC1_MUL_FI
VBC1_SUB_FF
VBC1_POP
LAB4044: //if exit
LAB4044: //if exit
[1:614] ;xtl += dx2;
VBC2_PUSH_CONST 45 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 85 //dx2
VBC1_ADD_FF
VBC1_POP
[1:615] ;ytl += dy0Typical;
VBC2_PUSH_CONST 46 //ytl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 79 //dy0Typical
VBC1_ADD_FF
VBC1_POP
[1:618] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 1131  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB4072 //if to false
;return;
VBC1_RETURN
LAB4072: //if else
LAB4072: //for step
VBC2_PUSH_CONST 75 //j
VBC1_INC
VBC4_JUMP LAB3755 //to condition
LAB4079: //for exit
[1:624] ;
VBC1_RETURN
;walkPhasa4 <void()>
[1:628] ;wr = 0; wl = 0;
VBC2_PUSH_CONST 44 //wr
VBC1_PUSH_0 
VBC1_POP_CF
[1:628] ;wr = 0; wl = 0;
VBC2_PUSH_CONST 51 //wl
VBC1_PUSH_0 
VBC1_POP_CF
[1:629] ;dy = correctedSideLenght / (fr2 - 2.0);
VBC2_PUSH_CONST 83 //dy
VBC3_PUSH_GLOBAL 58 //correctedSideLenght
VBC3_PUSH_GLOBAL 12 //fr2
VBC5_PUSH_CONST 1073741824 
VBC1_SUB_IF
VBC1_DIV_FF
VBC1_POP
[1:630] ;if( stepType == 1 ) {
VBC3_PUSH_GLOBAL 66 //stepType
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB4125 //if to false
;
[1:631] ;xtr_plan = 0;
VBC2_PUSH_CONST 89 //xtr_plan
VBC1_PUSH_0 
VBC1_POP_CF
[1:632] ;xtl_plan = 0;
VBC2_PUSH_CONST 88 //xtl_plan
VBC1_PUSH_0 
VBC1_POP_CF
VBC4_JUMP LAB4205 //if to exit
LAB4125: //if else
;
[1:635] ;xtr_plan = correctedStepLenght * (0.5 - (fr1 + fr2) / (2.0 * fr1 + fr2)) + dobavka_x_ot_torsa * fr1 * fr2 / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 89 //xtr_plan
VBC3_PUSH_GLOBAL 56 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 11 //fr1
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_ADD_FI
VBC1_DIV_IF
VBC1_SUB_FF
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 69 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_MUL_FI
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_ADD_FF
VBC1_POP
[1:636] ;xtl_plan = correctedStepLenght * 0.5 + dx0Typical + dobavka_x_ot_torsa;
VBC2_PUSH_CONST 88 //xtl_plan
VBC3_PUSH_GLOBAL 56 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 78 //dx0Typical
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 69 //dobavka_x_ot_torsa
VBC1_ADD_FF
VBC1_POP
LAB4205: //if exit
[1:638] ;for( j = 0; j < fr2; j ++ ) {
VBC2_PUSH_CONST 75 //j
VBC1_PUSH_0 
VBC1_POP
LAB4209: //for condition
VBC3_PUSH_GLOBAL 75 //j
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_LESS
VBC4_FALSE_JUMP LAB4589 //to for exit
;
[1:639] ;ztl = -gaitHeight + stepHeight;
VBC2_PUSH_CONST 47 //ztl
VBC3_PUSH_GLOBAL 13 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 14 //stepHeight
VBC1_ADD
VBC1_POP_CF
[1:641] ;if( stepType == 1 && j == (fr2 - 1) ) {
VBC3_PUSH_GLOBAL 66 //stepType
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB4254
VBC3_PUSH_GLOBAL 75 //j
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_PUSH_1 
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB4254
VBC1_PUSH_1
LAB4254:
VBC4_FALSE_JUMP LAB4315 //if to false
;
[1:642] ;ztl = -gaitHeight;
VBC2_PUSH_CONST 47 //ztl
VBC3_PUSH_GLOBAL 13 //gaitHeight
VBC1_NEG
VBC1_POP_CF
[1:643] ;ytl = s + d10;
VBC2_PUSH_CONST 46 //ytl
VBC3_PUSH_GLOBAL 80 //s
VBC3_PUSH_GLOBAL 53 //d10
VBC1_ADD_FF
VBC1_POP
[1:644] ;tors_angle = sfFMathASin(sfMathSin(ugol_torsa) - dobavka_x_ot_torsa / svIkA5 * (j + 1) / 2);
VBC2_PUSH_CONST 70 //tors_angle
VBC5_PUSH_CONST 352 | 0x80000000 //import func index sfFMathASin
//alloc addon amount for result
VBC5_PUSH_CONST 301 | 0x80000000 //import func index sfMathSin
//alloc addon amount for result
VBC3_PUSH_GLOBAL 17 //ugol_torsa
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC3_PUSH_GLOBAL 69 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 75 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_MUL_FI
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_POP
VBC4_JUMP LAB4349 //if to exit
LAB4315: //if else
;else tors_angle = sfFMathASin(sfMathSin(ugol_torsa) - dobavka_x_ot_torsa / svIkA5 * (j + 1));
VBC2_PUSH_CONST 70 //tors_angle
VBC5_PUSH_CONST 352 | 0x80000000 //import func index sfFMathASin
//alloc addon amount for result
VBC5_PUSH_CONST 301 | 0x80000000 //import func index sfMathSin
//alloc addon amount for result
VBC3_PUSH_GLOBAL 17 //ugol_torsa
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC3_PUSH_GLOBAL 69 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 75 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_MUL_FI
VBC1_SUB_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_POP
LAB4349: //if exit
[1:647] ;dx4 = (xtr_plan - xtr) / (fr2 - j);
VBC2_PUSH_CONST 86 //dx4
VBC3_PUSH_GLOBAL 89 //xtr_plan
VBC3_PUSH_GLOBAL 38 //xtr
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 12 //fr2
VBC3_PUSH_GLOBAL 75 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:648] ;if( j == 0 ) {
VBC3_PUSH_GLOBAL 75 //j
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB4424 //if to false
;
[1:649] ;xtl += dx4 - dobavka_x_ot_torsa;
VBC2_PUSH_CONST 45 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 86 //dx4
VBC3_PUSH_GLOBAL 69 //dobavka_x_ot_torsa
VBC1_SUB_FF
VBC1_ADD_FF
VBC1_POP
[1:650] ;ytl = s + d10 + dy0Typical;
VBC2_PUSH_CONST 46 //ytl
VBC3_PUSH_GLOBAL 80 //s
VBC3_PUSH_GLOBAL 53 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 79 //dy0Typical
VBC1_ADD_FF
VBC1_POP
[1:651] ;ztl = -gaitHeight + stepHeight / 2.0;
VBC2_PUSH_CONST 47 //ztl
VBC3_PUSH_GLOBAL 13 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 14 //stepHeight
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_IF
VBC1_ADD_IF
VBC1_POP
VBC4_JUMP LAB4554 //if to exit
LAB4424: //if else
;else if( j == (fr2 - 1) ) {
VBC3_PUSH_GLOBAL 75 //j
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_PUSH_1 
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB4478 //if to false
;
[1:654] ;xtl += dx4 - dobavka_x_ot_torsa;
VBC2_PUSH_CONST 45 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 86 //dx4
VBC3_PUSH_GLOBAL 69 //dobavka_x_ot_torsa
VBC1_SUB_FF
VBC1_ADD_FF
VBC1_POP
[1:655] ;ytl  = s + d10 + dy0Typical * 2.0 - correctedSideLenght;
VBC2_PUSH_CONST 46 //ytl
VBC3_PUSH_GLOBAL 80 //s
VBC3_PUSH_GLOBAL 53 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 79 //dy0Typical
VBC5_PUSH_CONST 1073741824 
VBC1_MUL_FF
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 58 //correctedSideLenght
VBC1_SUB_FF
VBC1_POP
VBC4_JUMP LAB4554 //if to exit
LAB4478: //if else
;
[1:658] ;if (j == 1)
VBC3_PUSH_GLOBAL 75 //j
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB4504 //if to false
;ztl = -gaitHeight + stepHeight / 2.0;
VBC2_PUSH_CONST 47 //ztl
VBC3_PUSH_GLOBAL 13 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 14 //stepHeight
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_IF
VBC1_ADD_IF
VBC1_POP
LAB4504: //if else
[1:660] ;dx = (xtl_plan - xtl) / (fr2 - j);
VBC2_PUSH_CONST 82 //dx
VBC3_PUSH_GLOBAL 88 //xtl_plan
VBC3_PUSH_GLOBAL 45 //xtl
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 12 //fr2
VBC3_PUSH_GLOBAL 75 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:661] ;xtl += dx;
VBC2_PUSH_CONST 45 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 82 //dx
VBC1_ADD_FF
VBC1_POP
[1:662] ;ytl  = s + 64 + dy0Typical - dy * j / 2;
VBC2_PUSH_CONST 46 //ytl
VBC3_PUSH_GLOBAL 80 //s
VBC2_PUSH_CONST 64 
VBC1_ADD_FI
VBC3_PUSH_GLOBAL 79 //dy0Typical
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 83 //dy
VBC3_PUSH_GLOBAL 75 //j
VBC1_MUL_FI
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
LAB4554: //if exit
LAB4554: //if exit
[1:667] ;xtr += dx4;
VBC2_PUSH_CONST 38 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 86 //dx4
VBC1_ADD_FF
VBC1_POP
[1:668] ;ytr += dy0Typical;
VBC2_PUSH_CONST 39 //ytr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 79 //dy0Typical
VBC1_ADD_FF
VBC1_POP
[1:671] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 1131  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB4582 //if to false
;return;
VBC1_RETURN
LAB4582: //if else
LAB4582: //for step
VBC2_PUSH_CONST 75 //j
VBC1_INC
VBC4_JUMP LAB4209 //to condition
LAB4589: //for exit
[1:684] ;
VBC1_RETURN
;walkCycle <void(,int)>
VBC2_STACK -4//local vars 4
[1:686] ;
[1:686] ;float xrOld = xr;
VBC2_PUSH_B_OFFSET -1 //xrOld
VBC3_PUSH_GLOBAL 41 //xr
VBC1_POP
[1:687] ;
[1:687] ;float yrOld = yr;
VBC2_PUSH_B_OFFSET -2 //yrOld
VBC3_PUSH_GLOBAL 42 //yr
VBC1_POP
[1:688] ;
[1:688] ;float xlOld = xl;
VBC2_PUSH_B_OFFSET -3 //xlOld
VBC3_PUSH_GLOBAL 48 //xl
VBC1_POP
[1:689] ;
[1:689] ;float ylOld = yl;
VBC2_PUSH_B_OFFSET -4 //ylOld
VBC3_PUSH_GLOBAL 49 //yl
VBC1_POP
[1:692] ;walkInit();
VBC3_PUSH_CONST 3079  //func address walkInit
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:693] ;walkPhasa1();
VBC3_PUSH_CONST 3236  //func address walkPhasa1
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:694] ;walkPhasa2();
VBC3_PUSH_CONST 3653  //func address walkPhasa2
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:695] ;if (half == 0){
VBC2_PUSH_LOCAL 2 //half
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB4649 //if to false
;
[1:696] ;walkPhasa3();
VBC3_PUSH_CONST 3449  //func address walkPhasa3
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:697] ;walkPhasa4();
VBC3_PUSH_CONST 4080  //func address walkPhasa4
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB4649: //if else
[1:701] ;xr = xrOld;
VBC2_PUSH_CONST 41 //xr
VBC2_PUSH_LOCAL -1 //xrOld
VBC1_POP
[1:702] ;yr = yrOld;
VBC2_PUSH_CONST 42 //yr
VBC2_PUSH_LOCAL -2 //yrOld
VBC1_POP
[1:703] ;xl = xlOld;
VBC2_PUSH_CONST 48 //xl
VBC2_PUSH_LOCAL -3 //xlOld
VBC1_POP
[1:704] ;yl = ylOld;
VBC2_PUSH_CONST 49 //yl
VBC2_PUSH_LOCAL -4 //ylOld
VBC1_POP
[1:708] ;
VBC1_RETURN
;mixing <void()>
[1:713] ;leftRightFactor = 100;
VBC2_PUSH_CONST 91 //leftRightFactor
VBC2_PUSH_CONST 100 
VBC1_POP
[1:714] ;frontBackFactor = 180;
VBC2_PUSH_CONST 92 //frontBackFactor
VBC3_PUSH_CONST 180 
VBC1_POP
[1:716] ;while(1) {
LAB4681: //while condition
;
[1:718] ;leftFootSideAddonMix = -svImuGyroZ * leftRightFactor >> 10;
VBC3_PUSH_CONST 1117 //leftFootSideAddonMix
VBC3_PUSH_GLOBAL 1008 //svImuGyroZ
VBC1_NEG
VBC3_PUSH_GLOBAL 91 //leftRightFactor
VBC1_MUL
VBC2_PUSH_CONST 10 
VBC1_RSHIFT
VBC1_POP
[1:719] ;rightFootSideAddonMix = svImuGyroZ * leftRightFactor >> 10;
VBC3_PUSH_CONST 1113 //rightFootSideAddonMix
VBC3_PUSH_GLOBAL 1008 //svImuGyroZ
VBC3_PUSH_GLOBAL 91 //leftRightFactor
VBC1_MUL
VBC2_PUSH_CONST 10 
VBC1_RSHIFT
VBC1_POP
[1:722] ;rightFootFrontAddonMix = leftFootFrontAddonMix = -svImuGyroX * frontBackFactor >> 10;
VBC3_PUSH_CONST 1105 //rightFootFrontAddonMix
VBC3_PUSH_CONST 1109 //leftFootFrontAddonMix
VBC3_PUSH_GLOBAL 1006 //svImuGyroX
VBC1_NEG
VBC3_PUSH_GLOBAL 92 //frontBackFactor
VBC1_MUL
VBC2_PUSH_CONST 10 
VBC1_RSHIFT
VBC1_STORE
VBC1_POP
[1:725] ;sfWaitNextFrame();
VBC1_WAIT
VBC4_JUMP LAB4681 //while forever loop
LAB4734: //while exit
[1:729] ;
VBC1_RETURN
;runTest <void()>
VBC1_STACK_DN1//local vars 1
[1:731] ;walkInitialPoseFine();
VBC3_PUSH_CONST 2853  //func address walkInitialPoseFine
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:735] ;stepType = 0;
VBC2_PUSH_CONST 66 //stepType
VBC1_PUSH_0 
VBC1_POP
[1:736] ;stepLength = stepLengthOrder/ 3.0;
VBC2_PUSH_CONST 19 //stepLength
VBC3_PUSH_GLOBAL 9 //stepLengthOrder
VBC5_PUSH_CONST 1077936128 
VBC1_DIV_IF
VBC1_POP
[1:737] ;walkCycle(0);
VBC3_PUSH_CONST 4590  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:740] ;stepType = 2;
VBC2_PUSH_CONST 66 //stepType
VBC1_PUSH_2 
VBC1_POP
[1:741] ;stepLength = stepLengthOrder * 2.0 / 3.0;
VBC2_PUSH_CONST 19 //stepLength
VBC3_PUSH_GLOBAL 9 //stepLengthOrder
VBC5_PUSH_CONST 1073741824 
VBC1_MUL_IF
VBC5_PUSH_CONST 1077936128 
VBC1_DIV_FF
VBC1_POP
[1:742] ;walkCycle(0);
VBC3_PUSH_CONST 4590  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:745] ;stepLength = stepLengthOrder * 1.0;
VBC2_PUSH_CONST 19 //stepLength
VBC3_PUSH_GLOBAL 9 //stepLengthOrder
VBC5_PUSH_CONST 1065353216 
VBC1_MUL_IF
VBC1_POP
[1:746] ;
[1:747] ;for( i = 0; i < cycle_number; i++ ){
VBC2_PUSH_B_OFFSET -1 //i
VBC1_PUSH_0 
VBC1_POP
LAB4807: //for condition
VBC2_PUSH_LOCAL -1 //i
VBC3_PUSH_GLOBAL 7 //cycle_number
VBC1_LESS
VBC4_FALSE_JUMP LAB4853 //to for exit
;
[1:748] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 950  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:749] ;walkCycle(0);
VBC3_PUSH_CONST 4590  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:750] ;if(orderFromHead == 4) break;
VBC3_PUSH_GLOBAL 4 //orderFromHead
VBC2_PUSH_CONST 4 
VBC1_EQU
VBC4_FALSE_JUMP LAB4842 //if to false
;if(orderFromHead == 4) break;
VBC4_JUMP LAB4853 //to loop exit
LAB4842: //if else
[1:751] ;orderFromHead = 0;
VBC2_PUSH_CONST 4 //orderFromHead
VBC1_PUSH_0 
VBC1_POP
LAB4846: //for step
VBC2_PUSH_B_OFFSET -1 //i
VBC1_INC
VBC4_JUMP LAB4807 //to condition
LAB4853: //for exit
[1:754] ;stepType = 1;
VBC2_PUSH_CONST 66 //stepType
VBC1_PUSH_1 
VBC1_POP
[1:755] ;walkCycle(0);
VBC3_PUSH_CONST 4590  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:758] ;walkFinalPoseFine();
VBC3_PUSH_CONST 3019  //func address walkFinalPoseFine
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:759] ;stepLengthOrder *= -1;  
VBC2_PUSH_CONST 9 //stepLengthOrder
VBC1_PUSH_TOS
VBC1_LOAD
VBC2_PUSH_CONST -1 // -
VBC1_MUL
VBC1_POP
[1:760] ;ugol_torsa *= -1;
VBC2_PUSH_CONST 17 //ugol_torsa
VBC1_PUSH_TOS
VBC1_LOAD
VBC2_PUSH_CONST -1 // -
VBC1_MUL_FI
VBC1_POP
[1:761] ;walkInitialPoseFine();
VBC3_PUSH_CONST 2853  //func address walkInitialPoseFine
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:762] ;stepType = 0;
VBC2_PUSH_CONST 66 //stepType
VBC1_PUSH_0 
VBC1_POP
[1:763] ;stepLength = stepLengthOrder/ 3.0;
VBC2_PUSH_CONST 19 //stepLength
VBC3_PUSH_GLOBAL 9 //stepLengthOrder
VBC5_PUSH_CONST 1077936128 
VBC1_DIV_IF
VBC1_POP
[1:764] ;walkCycle(0);
VBC3_PUSH_CONST 4590  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:765] ;stepType = 2;
VBC2_PUSH_CONST 66 //stepType
VBC1_PUSH_2 
VBC1_POP
[1:766] ;stepLength = stepLengthOrder * 2.0 / 3.0;
VBC2_PUSH_CONST 19 //stepLength
VBC3_PUSH_GLOBAL 9 //stepLengthOrder
VBC5_PUSH_CONST 1073741824 
VBC1_MUL_IF
VBC5_PUSH_CONST 1077936128 
VBC1_DIV_FF
VBC1_POP
[1:767] ;walkCycle(0);
VBC3_PUSH_CONST 4590  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:768] ;stepLength = stepLengthOrder * 1.0;
VBC2_PUSH_CONST 19 //stepLength
VBC3_PUSH_GLOBAL 9 //stepLengthOrder
VBC5_PUSH_CONST 1065353216 
VBC1_MUL_IF
VBC1_POP
[1:769] ;for( i = 0; i < cycle_number; i++ ){
VBC2_PUSH_B_OFFSET -1 //i
VBC1_PUSH_0 
VBC1_POP
LAB4955: //for condition
VBC2_PUSH_LOCAL -1 //i
VBC3_PUSH_GLOBAL 7 //cycle_number
VBC1_LESS
VBC4_FALSE_JUMP LAB4983 //to for exit
;
[1:770] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 950  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:771] ;walkCycle(0);
VBC3_PUSH_CONST 4590  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB4976: //for step
VBC2_PUSH_B_OFFSET -1 //i
VBC1_INC
VBC4_JUMP LAB4955 //to condition
LAB4983: //for exit
[1:775] ;
VBC1_RETURN
;turn <void(,int)>
VBC1_STACK_DN1//local vars 1
[1:776] ;
[1:776] ;int frameCount = 4;
VBC2_PUSH_B_OFFSET -1 //frameCount
VBC2_PUSH_CONST 4 
VBC1_POP
[1:777] ;if (direction == 1){
VBC2_PUSH_LOCAL 2 //direction
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB5028 //if to false
;
[1:778] ;sfPoseGroup( 1024 , -2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 1024 
VBC3_PUSH_CONST -2000 // -
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:779] ;sfPoseGroup( 2048 , 2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 2048 
VBC3_PUSH_CONST 2000 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB5028: //if else
[1:781] ;if (direction == -1){
VBC2_PUSH_LOCAL 2 //direction
VBC2_PUSH_CONST -1 // -
VBC1_EQU
VBC4_FALSE_JUMP LAB5067 //if to false
;
[1:782] ;sfPoseGroup( 1024 , 2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 1024 
VBC3_PUSH_CONST 2000 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:783] ;sfPoseGroup( 2048 , -2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 2048 
VBC3_PUSH_CONST -2000 // -
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB5067: //if else
[1:785] ;sfPoseGroup( 1048576 , 2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_CONST 2000 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:786] ;sfPoseGroup( 2097152 , 2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_CONST 2000 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:787] ;sfWaitFrame( frameCount );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:788] ;sfPoseGroup( 1024 , 0, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 1024 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:789] ;sfPoseGroup( 2048 , 0, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 2048 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:790] ;sfPoseGroup( 1048576 , 0, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 1048576 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:791] ;sfPoseGroup( 2097152 , 0, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 2097152 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:792] ;sfWaitFrame( frameCount );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:793] ;sfWaitFrame( 6 );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_CONST 6 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:796] ;
VBC1_RETURN
;main <void()>
VBC1_STACK_DN1//local vars 1
[1:797] ;restart_flag = 0;
VBC1_PUSH_2 //restart_flag
VBC1_PUSH_0 
VBC1_POP
[1:798] ;pitStop = 0;
VBC2_PUSH_CONST 5 //pitStop
VBC1_PUSH_0 
VBC1_POP
[1:799] ;startStop = 0;
VBC2_PUSH_CONST 6 //startStop
VBC1_PUSH_0 
VBC1_POP
[1:800] ;slowWalk = 0;
VBC2_PUSH_CONST 18 //slowWalk
VBC1_PUSH_0 
VBC1_POP
[1:801] ;setup();
VBC2_PUSH_CONST 70  //func address setup
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:802] ;sideLength = 0;
VBC2_PUSH_CONST 20 //sideLength
VBC1_PUSH_0 
VBC1_POP_CF
[1:803] ;rotation = 0;
VBC2_PUSH_CONST 21 //rotation
VBC1_PUSH_0 
VBC1_POP_CF
[1:808] ;
[1:808] ;int frameCount = 80;
VBC2_PUSH_B_OFFSET -1 //frameCount
VBC2_PUSH_CONST 80 
VBC1_POP
[1:809] ;sfPoseGroup(1056964607 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 1056964607 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:810] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:813] ;sfQuaternionToEulerImu();
VBC5_PUSH_CONST 303 | 0x80000000 //import func index sfQuaternionToEulerImu
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:814] ;forwardDirection = svEulerYaw;
VBC2_PUSH_CONST 73 //forwardDirection
VBC3_PUSH_GLOBAL 1025 //svEulerYaw
VBC1_POP
[1:817] ;sfCreateTask( mixing, 20 );
VBC5_PUSH_CONST 2 | 0x80000000 //import func index sfCreateTask
VBC3_PUSH_CONST 4670  //func address mixing
VBC2_PUSH_CONST 20 
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
[1:818] ;while (pitStop == 0) sfWaitFrame(1); 
LAB5251: //while condition
VBC3_PUSH_GLOBAL 5 //pitStop
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB5269 //while to exit
;while (pitStop == 0) sfWaitFrame(1); 
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC1_PUSH_1 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
VBC4_JUMP LAB5251 //while forever loop
LAB5269: //while exit
[1:820] ;svButtonRight = -1 ;
VBC3_PUSH_CONST 1022 //svButtonRight
VBC2_PUSH_CONST -1 // -
VBC1_POP
[1:821] ;svButtonLeft = -1 ;
VBC3_PUSH_CONST 1021 //svButtonLeft
VBC2_PUSH_CONST -1 // -
VBC1_POP
[1:822] ;sfBip(1, 1);
VBC5_PUSH_CONST 43 | 0x80000000 //import func index sfBip
VBC1_PUSH_1 
VBC1_PUSH_1 
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
[1:823] ;while (svButtonPress != 2 ) sfWaitFrame(1); 
LAB5290: //while condition
VBC3_PUSH_GLOBAL 1023 //svButtonPress
VBC1_PUSH_2 
VBC1_NOT_EQU
VBC4_FALSE_JUMP LAB5308 //while to exit
;while (svButtonPress != 2 ) sfWaitFrame(1); 
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC1_PUSH_1 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
VBC4_JUMP LAB5290 //while forever loop
LAB5308: //while exit
[1:824] ;svButtonRight = 66 ;
VBC3_PUSH_CONST 1022 //svButtonRight
VBC2_PUSH_CONST 66 
VBC1_POP
[1:825] ;svButtonLeft = 69 ;
VBC3_PUSH_CONST 1021 //svButtonLeft
VBC2_PUSH_CONST 69 
VBC1_POP
[1:826] ;restart_flag = 1;
VBC1_PUSH_2 //restart_flag
VBC1_PUSH_1 
VBC1_POP
[1:828] ;runTest(); 
VBC3_PUSH_CONST 4735  //func address runTest
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:832] ;
VBC1_RETURN
//Init table
//Variables
svFrameCount : 1
svImuAccX : 1000
svImuAccY : 1001
svImuAccZ : 1002
svImuAccRawX : 1003
svImuAccRawY : 1004
svImuAccRawZ : 1005
svImuGyroX : 1006
svImuGyroY : 1007
svImuGyroZ : 1008
svImuGyroRawX : 1009
svImuGyroRawY : 1010
svImuGyroRawZ : 1011
svImuQuaterX : 1012
svImuQuaterY : 1013
svImuQuaterZ : 1014
svImuQuaterW : 1015
svImuQuaterAcc : 1016
svImuAccSlowX : 1017
svImuAccSlowY : 1018
svImuAccSlowZ : 1019
svAdc : 1020
svButtonLeft : 1021
svButtonRight : 1022
svButtonPress : 1023
svHeadControlMask : 1024
svEulerYaw F: 1025
svEulerPitch F: 1026
svEulerRoll F: 1027
svRemoteStatus : 1190
svRemoteButton : 1191
svRemoteLeftJoystick : 1192
svRemoteLeftJoystickX : 1193
svRemoteLeftJoystickY : 1194
svRemoteRightJoystick : 1195
svRemoteRightJoystickX : 1196
svRemoteRightJoystickY : 1197
svHumoModelDistPelvic : 1204
svHumoModelLengthPelvicHip : 1205
svHumoModelLengthHipHip : 1206
svHumoModelLengthHipKnee : 1207
svHumoModelLengthKneeFoot : 1208
svHumoModelLengthFootFoot : 1209
svHumoModelDistFootFloor : 1210
svHumoModelFootLength : 1211
svHumoModelFootWidth : 1212
svHumoModelFootCenterBack : 1213
svHumoModelFootCenterInner : 1214
svHumoModelAngPelvic : 1198
svHumoModelAngHipSide : 1200
svHumoModelAngHip : 1199
svHumoModelAngKnee : 1201
svHumoModelAngFoot : 1202
svHumoModelAngFootSide : 1203
svIkA5 F: 1215
svIkB5 F: 1216
svIkC5 F: 1217
svIkA6 F: 1218
svIkA7 F: 1219
svIkA8 F: 1220
svIkA9 F: 1221
svIkA10 F: 1222
svIkB10 F: 1223
svIkC10 F: 1224
svIkLimA5min F: 1225
svIkLimA5max F: 1226
svIkLimA6min F: 1227
svIkLimA6max F: 1228
svIkLimA7min F: 1229
svIkLimA7max F: 1230
svIkLimA8min F: 1231
svIkLimA8max F: 1232
svIkLimA9min F: 1233
svIkLimA9max F: 1234
svIkLimA10min F: 1235
svIkLimA10max F: 1236
svIkOutPresent : 1237
svIkEncA5 : 1238
svIkEncA6 : 1239
svIkEncA7 : 1240
svIkEncA8 : 1241
svIkEncA9 : 1242
svIkEncA10 : 1243
headRotateTarget : 1030
headRotateCurrent : 1031
headRotatePwm : 1032
headRotateAddonMix : 1033
torsoRotateTarget : 1034
torsoRotateCurrent : 1035
torsoRotatePwm : 1036
torsoRotateAddonMix : 1037
rightClavicleTarget : 1038
rightClavicleCurrent : 1039
rightClaviclePwm : 1040
rightClavicleAddonMix : 1041
leftClavicleTarget : 1042
leftClavicleCurrent : 1043
leftClaviclePwm : 1044
leftClavicleAddonMix : 1045
rightShoulderTarget : 1046
rightShoulderCurrent : 1047
rightShoulderPwm : 1048
rightShoulderAddonMix : 1049
leftShoulderTarget : 1050
leftShoulderCurrent : 1051
leftShoulderPwm : 1052
leftShoulderAddonMix : 1053
rightElbowSideTarget : 1054
rightElbowSideCurrent : 1055
rightElbowSidePwm : 1056
rightElbowSideAddonMix : 1057
leftElbowSideTarget : 1058
leftElbowSideCurrent : 1059
leftElbowSidePwm : 1060
leftElbowSideAddonMix : 1061
rightElbowTarget : 1062
rightElbowCurrent : 1063
rightElbowPwm : 1064
rightElbowAddonMix : 1065
leftElbowTarget : 1066
leftElbowCurrent : 1067
leftElbowPwm : 1068
leftElbowAddonMix : 1069
rightPelvicTarget : 1070
rightPelvicCurrent : 1071
rightPelvicPwm : 1072
rightPelvicAddonMix : 1073
leftPelvicTarget : 1074
leftPelvicCurrent : 1075
leftPelvicPwm : 1076
leftPelvicAddonMix : 1077
rightHipSideTarget : 1078
rightHipSideCurrent : 1079
rightHipSidePwm : 1080
rightHipSideAddonMix : 1081
leftHipSideTarget : 1082
leftHipSideCurrent : 1083
leftHipSidePwm : 1084
leftHipSideAddonMix : 1085
rightHipTarget : 1086
rightHipCurrent : 1087
rightHipPwm : 1088
rightHipAddonMix : 1089
leftHipTarget : 1090
leftHipCurrent : 1091
leftHipPwm : 1092
leftHipAddonMix : 1093
rightKneeTarget : 1094
rightKneeCurrent : 1095
rightKneePwm : 1096
rightKneeAddonMix : 1097
leftKneeTarget : 1098
leftKneeCurrent : 1099
leftKneePwm : 1100
leftKneeAddonMix : 1101
rightFootFrontTarget : 1102
rightFootFrontCurrent : 1103
rightFootFrontPwm : 1104
rightFootFrontAddonMix : 1105
leftFootFrontTarget : 1106
leftFootFrontCurrent : 1107
leftFootFrontPwm : 1108
leftFootFrontAddonMix : 1109
rightFootSideTarget : 1110
rightFootSideCurrent : 1111
rightFootSidePwm : 1112
rightFootSideAddonMix : 1113
leftFootSideTarget : 1114
leftFootSideCurrent : 1115
leftFootSidePwm : 1116
leftFootSideAddonMix : 1117
rightHandTarget : 1118
rightHandCurrent : 1119
rightHandPwm : 1120
rightHandAddonMix : 1121
leftHandTarget : 1122
leftHandCurrent : 1123
leftHandPwm : 1124
leftHandAddonMix : 1125
headTiltTarget : 1130
headTiltCurrent : 1131
headTiltPwm : 1132
headTiltAddonMix : 1133
rightKneeBotTarget : 1134
rightKneeBotCurrent : 1135
rightKneeBotPwm : 1136
rightKneeBotAddonMix : 1137
leftKneeBotTarget : 1138
leftKneeBotCurrent : 1139
leftKneeBotPwm : 1140
leftKneeBotAddonMix : 1141
rightClawTarget : 1142
rightClawCurrent : 1143
rightClawPwm : 1144
rightClawAddonMix : 1145
leftClawTarget : 1146
leftClawCurrent : 1147
leftClawPwm : 1148
leftClawAddonMix : 1149
restart_flag : 2
timeStep : 3
orderFromHead : 4
pitStop : 5
startStop : 6
cycle_number : 7
hipTilt : 8
stepLengthOrder : 9
fps : 10
fr1 : 11
fr2 : 12
gaitHeight : 13
stepHeight : 14
bodyTiltAtWalk F: 15
solyLandingSkew F: 16
ugol_torsa F: 17
slowWalk : 18
stepLength F: 19
sideLength F: 20
rotation F: 21
selfMotionShiftCorrectionX F: 22
selfMotionShiftCorrectionY F: 23
selfFirstStepYield F: 24
selfCycleStepYield F: 25
selfSideStepRightYield F: 26
selfSideStepLeftYield F: 27
selfFirstLegIsRightLeg : 28
motion_to_right : 29
side_motion F: 30
selfInitPoses : 31
selfExitFlag : 32
selfFallingFlag : 33
selfNeckPan : 34
rotationYieldRight F: 35
rotationYieldLeft F: 36
framestep : 37
xtr F: 38
ytr F: 39
ztr F: 40
xr F: 41
yr F: 42
zr F: 43
wr F: 44
xtl F: 45
ytl F: 46
ztl F: 47
xl F: 48
yl F: 49
zl F: 50
wl F: 51
e10 F: 52
d10 F: 53
amplitude F: 54
alpha01 F: 55
correctedStepLenght F: 56
correctedStepLenghtHalf F: 57
correctedSideLenght F: 58
correctedSideLenghtHalf F: 59
ztr0 F: 60
ztl0 F: 61
stepZtr F: 62
stepZtl F: 63
stepYtr F: 64
stepYtl F: 65
stepType : 66
flag : 67
flag_event : 68
dobavka_x_ot_torsa F: 69
tors_angle F: 70
reducer F: 71
torsoAdd : 72
forwardDirection F: 73
correctedRotation F: 74
j : 75
xtl0 F: 76
xtr0 F: 77
dx0Typical F: 78
dy0Typical F: 79
s F: 80
fase_offset F: 81
dx F: 82
dy F: 83
dx1 F: 84
dx2 F: 85
dx4 F: 86
stepRotation F: 87
xtl_plan F: 88
xtr_plan F: 89
dx0 F: 90
leftRightFactor : 91
frontBackFactor : 92
