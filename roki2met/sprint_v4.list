//====================================================================
//      SvCompiler V6.06
//By A.Sibilev
//====================================================================
//cblock

;sfVpuVersion <int()>
;sfCreateTask <int(,*<void()>,int)>
;sfLog <void(,cstring,int,int,int)>
;sfLogOpen <void(,cstring)>
;sfLogClose <void()>
;sfWaitFrameOut <void(,int)>
;sfIsFrameOut <int(,int)>
;sfWaitNextFrame <void()>
;sfSlotIndex <int(,cstring)>
;sfAbs <int(,int)>
;sfIMin <int(,int,int)>
;sfIMax <int(,int,int)>
;sfUMin <int(,int,int)>
;sfUMax <int(,int,int)>
;sfILimit <int(,int,int,int)>
;sfStop <void()>
;sfStartSlot <void(,int)>
;sfBip <void(,int,int)>
;sfFreeGroup <void(,int)>
;sfPoseGroup <void(,int,int,int)>
;sfPoseGroupDelay <void(,int,int,int,int)>
;sfPoseCorrect <void(,int,int)>
;sfQueueGroup <void(,int,int,int)>
;sfPoseIdx <void(,int,int,int)>
;sfPoseGroupLin <void(,int,int,int)>
;sfStrainGroup <void(,int)>
;sfPlaySamples <void(,int,*cblock,int)>
;sfAccumSetup1 <void(,*int)>
;sfAccumSetup2 <void(,*int,*int)>
;sfAccumSetup3 <void(,*int,*int,*int)>
;sfAccumSetup4 <void(,*int,*int,*int,*int)>
;sfAccumTrigger <void()>
;sfAccumReset <void()>
;sfMathAcos <int(,int,int)>
;sfMathSqrti <int(,int)>
;sfMathAngleOfTriangle <int(,int,int,int)>
;sfMathAngleOfKnee <int(,int,int,int)>
;sfMathCathetOfSquareTriangle <int(,int,int)>
;sfMathHypotenuseOfSquareTriangle <int(,int,int)>
;sfMathTableSin <int(,int,int)>
;sfHumoModelSetup <void()>
;sfHumoModelFootAtFloor <void(,int,int,int)>
;sfHumoModelFootPush <void(,int,int,int)>
;sfIndexOfMask <int(,int)>
;sfQueueIdxAppend <int(,int,int,int)>
;sfQueueIdxOffsets <int(,int,int,*cblock,int)>
;sfQueueIdxSinMove <int(,int,int,int,int)>
;sfQueueIdxLast <int(,int)>
;sfQueueIdxCount <int(,int)>
;sfQueueMax <int()>
;sfIkSetup <void()>
;sfIkAngle <void(,float,float,float,float,float,float,float)>
;sfMathCos <float(,float)>
;sfMathSin <float(,float)>
;sfQuaternionToEuler <void(,float,float,float,float)>
;sfQuaternionToEulerImu <void()>
;sfFMathACos <float(,float)>
;sfFMathASin <float(,float)>
;sfFMathATan <float(,float)>
;sfFMathATan2 <float(,float,float)>
;sfFMathCos <float(,float)>
;sfFMathSin <float(,float)>
;sfFMathTan <float(,float)>
;sfFMathCosh <float(,float)>
;sfFMathSinh <float(,float)>
;sfFMathTanh <float(,float)>
;sfFMathExp <float(,float)>
;sfFMathFrExp <float(,float,*int)>
;sfFMathLdExp <float(,float,int)>
;sfFMathLog <float(,float)>
;sfFMathLog10 <float(,float)>
;sfFMathModf <float(,float,*float)>
;sfFMathPow <float(,float,float)>
;sfFMathSqrt <float(,float)>
;sfFMathCeil <float(,float)>
;sfFMathFAbs <float(,float)>
;sfFMathFloor <float(,float)>
;sfFMathFMod <float(,float,float)>
;sfWaitFrame <void(,int)>
[3:348] ;sfWaitFrameOut( frame + svFrameCount );
VBC5_PUSH_CONST 17 | 0x80000000 //import func index sfWaitFrameOut
VBC2_PUSH_LOCAL 2 //frame
VBC3_PUSH_GLOBAL 1 //svFrameCount
VBC1_ADD
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[2:10] ;
VBC1_RETURN
;setup <void()>
[1:109] ;orderFromHead = 0;
VBC2_PUSH_CONST 4 //orderFromHead
VBC1_PUSH_0 
VBC1_POP
[1:110] ;rotationFromHead = 0;
VBC2_PUSH_CONST 5 //rotationFromHead
VBC1_PUSH_0 
VBC1_POP_CF
[1:111] ;flag_event = 0;
VBC2_PUSH_CONST 71 //flag_event
VBC1_PUSH_0 
VBC1_POP
[1:112] ;cycle_number = 30;
VBC2_PUSH_CONST 8 //cycle_number
VBC2_PUSH_CONST 30 
VBC1_POP
[1:113] ;rotationYieldRight = 0.23;
VBC2_PUSH_CONST 36 //rotationYieldRight
VBC5_PUSH_CONST 1047233823 
VBC1_POP
[1:114] ;rotationYieldLeft = 0.23;
VBC2_PUSH_CONST 37 //rotationYieldLeft
VBC5_PUSH_CONST 1047233823 
VBC1_POP
[1:116] ;svIkA5 = 40.2; 
VBC3_PUSH_CONST 1215 //svIkA5
VBC5_PUSH_CONST 1109445837 
VBC1_POP
[1:117] ;svIkB5 = 0;    
VBC3_PUSH_CONST 1216 //svIkB5
VBC1_PUSH_0 
VBC1_POP_CF
[1:118] ;svIkC5 = 0;    
VBC3_PUSH_CONST 1217 //svIkC5
VBC1_PUSH_0 
VBC1_POP_CF
[1:119] ;svIkA6 = 0;    
VBC3_PUSH_CONST 1218 //svIkA6
VBC1_PUSH_0 
VBC1_POP_CF
[1:120] ;svIkA7 = 99;   
VBC3_PUSH_CONST 1219 //svIkA7
VBC2_PUSH_CONST 99 
VBC1_POP_CF
[1:121] ;svIkA8 = 99;   
VBC3_PUSH_CONST 1220 //svIkA8
VBC2_PUSH_CONST 99 
VBC1_POP_CF
[1:122] ;svIkA9 = 0;    
VBC3_PUSH_CONST 1221 //svIkA9
VBC1_PUSH_0 
VBC1_POP_CF
[1:123] ;svIkA10 = 13.7;  
VBC3_PUSH_CONST 1222 //svIkA10
VBC5_PUSH_CONST 1096495923 
VBC1_POP
[1:124] ;svIkB10 = 23.8;  
VBC3_PUSH_CONST 1223 //svIkB10
VBC5_PUSH_CONST 1102997094 
VBC1_POP
[1:125] ;svIkC10 = 0;   
VBC3_PUSH_CONST 1224 //svIkC10
VBC1_PUSH_0 
VBC1_POP_CF
[1:127] ;e10 = 55;      
VBC2_PUSH_CONST 55 //e10
VBC2_PUSH_CONST 55 
VBC1_POP_CF
[1:128] ;d10 = 62;      
VBC2_PUSH_CONST 56 //d10
VBC2_PUSH_CONST 62 
VBC1_POP_CF
[1:131] ;svIkLimA5min = -90 * 0.017453293;
VBC3_PUSH_CONST 1225 //svIkLimA5min
VBC5_PUSH_CONST -1077342245 
VBC1_POP
[1:132] ;svIkLimA5max = 90 * 0.017453293;
VBC3_PUSH_CONST 1226 //svIkLimA5max
VBC5_PUSH_CONST 1070141403 
VBC1_POP
[1:135] ;svIkLimA6min = -108 * 0.017453293;
VBC3_PUSH_CONST 1227 //svIkLimA6min
VBC5_PUSH_CONST -1074706887 
VBC1_POP
[1:136] ;svIkLimA6max = 15 * 0.017453293;
VBC3_PUSH_CONST 1228 //svIkLimA6max
VBC5_PUSH_CONST 1048971922 
VBC1_POP
[1:138] ;svIkLimA7min = -130 * 0.017453293;
VBC3_PUSH_CONST 1229 //svIkLimA7min
VBC5_PUSH_CONST -1072613858 
VBC1_POP
[1:139] ;svIkLimA7max = 50 * 0.017453293;
VBC3_PUSH_CONST 1230 //svIkLimA7max
VBC5_PUSH_CONST 1063216883 
VBC1_POP
[1:142] ;svIkLimA8min = -180 * 0.017453293;
VBC3_PUSH_CONST 1231 //svIkLimA8min
VBC5_PUSH_CONST -1068953637 
VBC1_POP
[1:143] ;svIkLimA8max = 8 * 0.017453293;
VBC3_PUSH_CONST 1232 //svIkLimA8max
VBC5_PUSH_CONST 1041168949 
VBC1_POP
[1:146] ;svIkLimA9min = -45 * 0.017453293;
VBC3_PUSH_CONST 1233 //svIkLimA9min
VBC5_PUSH_CONST -1085730853 
VBC1_POP
[1:147] ;svIkLimA9max = 78 * 0.017453293;
VBC3_PUSH_CONST 1234 //svIkLimA9max
VBC5_PUSH_CONST 1068384497 
VBC1_POP
[1:150] ;svIkLimA10min = -24 * 0.017453293;
VBC3_PUSH_CONST 1235 //svIkLimA10min
VBC5_PUSH_CONST -1093241008 
VBC1_POP
[1:151] ;svIkLimA10max = 24 * 0.017453293;
VBC3_PUSH_CONST 1236 //svIkLimA10max
VBC5_PUSH_CONST 1054242640 
VBC1_POP
[1:152] ;sfIkSetup();
VBC5_PUSH_CONST 200 | 0x80000000 //import func index sfIkSetup
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:154] ;framestep = 2;
VBC2_PUSH_CONST 38 //framestep
VBC1_PUSH_2 
VBC1_POP
[1:158] ;selfMotionShiftCorrectionX = 0.0;
VBC2_PUSH_CONST 23 //selfMotionShiftCorrectionX
VBC1_PUSH_0 
VBC1_POP
[1:159] ;selfMotionShiftCorrectionY = 0.0;
VBC2_PUSH_CONST 24 //selfMotionShiftCorrectionY
VBC1_PUSH_0 
VBC1_POP
[1:163] ;ztr0 = -(svIkC5+svIkA6+svIkA7+svIkA8+svIkA9+svIkB10 - 1); 
VBC2_PUSH_CONST 63 //ztr0
VBC3_PUSH_GLOBAL 1217 //svIkC5
VBC3_PUSH_GLOBAL 1218 //svIkA6
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1219 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1220 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1221 //svIkA9
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1223 //svIkB10
VBC1_ADD_FF
VBC1_PUSH_1 
VBC1_SUB_FI
VBC1_NEG_F
VBC1_POP
[1:164] ;ztl0 = -(svIkC5+svIkA6+svIkA7+svIkA8+svIkA9+svIkB10 - 1); 
VBC2_PUSH_CONST 64 //ztl0
VBC3_PUSH_GLOBAL 1217 //svIkC5
VBC3_PUSH_GLOBAL 1218 //svIkA6
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1219 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1220 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1221 //svIkA9
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1223 //svIkB10
VBC1_ADD_FF
VBC1_PUSH_1 
VBC1_SUB_FI
VBC1_NEG_F
VBC1_POP
[1:166] ;zr = zl = -1;
VBC2_PUSH_CONST 44 //zr
VBC2_PUSH_CONST 52 //zl
VBC2_PUSH_CONST -1 // -
VBC1_STORE_CF
VBC1_POP
[1:169] ;selfInitPoses = 10;
VBC2_PUSH_CONST 32 //selfInitPoses
VBC2_PUSH_CONST 10 
VBC1_POP
[1:172] ;stepLength = 0.0;    
VBC2_PUSH_CONST 20 //stepLength
VBC1_PUSH_0 
VBC1_POP
[1:173] ;sideLength = 0.0;    
VBC2_PUSH_CONST 21 //sideLength
VBC1_PUSH_0 
VBC1_POP
[1:174] ;rotation = 0;        
VBC2_PUSH_CONST 22 //rotation
VBC1_PUSH_0 
VBC1_POP_CF
[1:175] ;selfFirstLegIsRightLeg = 1; 
VBC2_PUSH_CONST 29 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_POP
[1:176] ;motion_to_right = 1;
VBC2_PUSH_CONST 30 //motion_to_right
VBC1_PUSH_1 
VBC1_POP
[1:177] ;side_motion = 0.0;
VBC2_PUSH_CONST 31 //side_motion
VBC1_PUSH_0 
VBC1_POP
[1:178] ;selfInitPoses = 20; 
VBC2_PUSH_CONST 32 //selfInitPoses
VBC2_PUSH_CONST 20 
VBC1_POP
[1:180] ;stepZtr = (ztr0 + gaitHeight) / selfInitPoses;
VBC2_PUSH_CONST 65 //stepZtr
VBC3_PUSH_GLOBAL 63 //ztr0
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_ADD_FI
VBC3_PUSH_GLOBAL 32 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:181] ;stepZtl = (ztl0 + gaitHeight) / selfInitPoses;
VBC2_PUSH_CONST 66 //stepZtl
VBC3_PUSH_GLOBAL 64 //ztl0
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_ADD_FI
VBC3_PUSH_GLOBAL 32 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:183] ;solyLandingSkew = 0.00;
VBC2_PUSH_CONST 17 //solyLandingSkew
VBC1_PUSH_0 
VBC1_POP
[1:185] ;tors_angle = 0;     
VBC2_PUSH_CONST 73 //tors_angle
VBC1_PUSH_0 
VBC1_POP_CF
[1:187] ;stepYtr = amplitude / 2.0 / selfInitPoses;
VBC2_PUSH_CONST 67 //stepYtr
VBC3_PUSH_GLOBAL 57 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 32 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:188] ;stepYtl = amplitude / 2.0 / selfInitPoses;
VBC2_PUSH_CONST 68 //stepYtl
VBC3_PUSH_GLOBAL 57 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 32 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:193] ;alpha01 = 3.141592654;
VBC2_PUSH_CONST 58 //alpha01
VBC5_PUSH_CONST 1078530011 
VBC1_POP
[1:194] ;if( fr1 != 0 )
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_PUSH_0 
VBC1_NOT_EQU
VBC4_FALSE_JUMP LAB501 //if to false
;alpha01 = alpha01 * 2 / fr1;
VBC2_PUSH_CONST 58 //alpha01
VBC3_PUSH_GLOBAL 58 //alpha01
VBC1_PUSH_2 
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_DIV_FI
VBC1_POP
LAB501: //if else
[1:202] ;timeStep = 1;
VBC2_PUSH_CONST 3 //timeStep
VBC1_PUSH_1 
VBC1_POP
[1:204] ;reducer = 0.5;
VBC2_PUSH_CONST 74 //reducer
VBC5_PUSH_CONST 1056964608 
VBC1_POP
[1:206] ;stepLengthOrder = 60;
VBC2_PUSH_CONST 10 //stepLengthOrder
VBC2_PUSH_CONST 60 
VBC1_POP
[1:207] ;ugol_torsa = 0.7;  	
VBC2_PUSH_CONST 18 //ugol_torsa
VBC5_PUSH_CONST 1060320051 
VBC1_POP
[1:208] ;bodyTiltAtWalk = 0.055;
VBC2_PUSH_CONST 16 //bodyTiltAtWalk
VBC5_PUSH_CONST 1029785518 
VBC1_POP
[1:209] ;hipTilt = 0;
VBC2_PUSH_CONST 9 //hipTilt
VBC1_PUSH_0 
VBC1_POP
[1:210] ;gaitHeight = 180; 
VBC2_PUSH_CONST 14 //gaitHeight
VBC3_PUSH_CONST 180 
VBC1_POP
[1:211] ;stepHeight = 40; 
VBC2_PUSH_CONST 15 //stepHeight
VBC2_PUSH_CONST 40 
VBC1_POP
[1:212] ;fps = 4;
VBC2_PUSH_CONST 11 //fps
VBC2_PUSH_CONST 4 
VBC1_POP
[1:213] ;fr1 = 4;           
VBC2_PUSH_CONST 12 //fr1
VBC2_PUSH_CONST 4 
VBC1_POP
[1:214] ;fr2 = 6;          
VBC2_PUSH_CONST 13 //fr2
VBC2_PUSH_CONST 6 
VBC1_POP
[1:215] ;amplitude = 32;    
VBC2_PUSH_CONST 57 //amplitude
VBC2_PUSH_CONST 32 
VBC1_POP_CF
[1:217] ;if (timeStep == 1){
VBC3_PUSH_GLOBAL 3 //timeStep
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB635 //if to false
;
[1:218] ;stepLengthOrder = 30;
VBC2_PUSH_CONST 10 //stepLengthOrder
VBC2_PUSH_CONST 30 
VBC1_POP
[1:219] ;ugol_torsa = 0.3;
VBC2_PUSH_CONST 18 //ugol_torsa
VBC5_PUSH_CONST 1050253722 
VBC1_POP
[1:220] ;bodyTiltAtWalk = -0.02; 
VBC2_PUSH_CONST 16 //bodyTiltAtWalk
VBC5_PUSH_CONST -1130113270 // -
VBC1_POP
[1:221] ;hipTilt = 500;
VBC2_PUSH_CONST 9 //hipTilt
VBC3_PUSH_CONST 500 
VBC1_POP
[1:222] ;gaitHeight = 135;
VBC2_PUSH_CONST 14 //gaitHeight
VBC3_PUSH_CONST 135 
VBC1_POP
[1:223] ;stepHeight = 35;
VBC2_PUSH_CONST 15 //stepHeight
VBC2_PUSH_CONST 35 
VBC1_POP
[1:224] ;fps = 2;
VBC2_PUSH_CONST 11 //fps
VBC1_PUSH_2 
VBC1_POP
[1:225] ;fr1 = 4;           
VBC2_PUSH_CONST 12 //fr1
VBC2_PUSH_CONST 4 
VBC1_POP
[1:226] ;fr2 = 9;          
VBC2_PUSH_CONST 13 //fr2
VBC2_PUSH_CONST 9 
VBC1_POP
[1:227] ;amplitude = 40;    
VBC2_PUSH_CONST 57 //amplitude
VBC2_PUSH_CONST 40 
VBC1_POP_CF
LAB635: //if else
[1:237] ;
VBC1_RETURN
;sitToStart <void(,int)>
[1:242] ;frameCount = 80;
VBC2_PUSH_B_OFFSET 2 //frameCount
VBC2_PUSH_CONST 80 
VBC1_POP
[1:243] ;sfPoseGroup( 33554432 , 700, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 33554432 
VBC3_PUSH_CONST 700 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:244] ;sfPoseGroup( 4 , 1370, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 4 
VBC3_PUSH_CONST 1370 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:245] ;sfPoseGroup( 8 , 1370, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 8 
VBC3_PUSH_CONST 1370 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:246] ;sfPoseGroup( 64 , 700, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 64 
VBC3_PUSH_CONST 700 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:247] ;sfPoseGroup( 128 , 700, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 128 
VBC3_PUSH_CONST 700 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:248] ;sfPoseGroup( 256 , 4500, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 256 
VBC3_PUSH_CONST 4500 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:249] ;sfPoseGroup( 512 , 4500, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 512 
VBC3_PUSH_CONST 4500 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:250] ;sfPoseGroup( 4096 , 410, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 4096 
VBC3_PUSH_CONST 410 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:251] ;sfPoseGroup( 8192 , -174, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 8192 
VBC3_PUSH_CONST -174 // -
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:252] ;sfPoseGroup( 16384 , 4350, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 16384 
VBC3_PUSH_CONST 4350 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:253] ;sfPoseGroup( 32768 , 4240, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 32768 
VBC3_PUSH_CONST 4240 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:254] ;sfPoseGroup( 65536 , 4800, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 65536 
VBC3_PUSH_CONST 4800 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:255] ;sfPoseGroup( 131072 , 5400, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 131072 
VBC3_PUSH_CONST 5400 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:256] ;sfPoseGroup( 262144 , 2518, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 262144 
VBC3_PUSH_CONST 2518 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:257] ;sfPoseGroup( 524288 , 2550, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 524288 
VBC3_PUSH_CONST 2550 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:258] ;sfPoseGroup( 1048576 , 430, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_CONST 430 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:259] ;sfPoseGroup( 2097152 , -174, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_CONST -174 // -
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:260] ;sfPoseGroup( 67108864 , 2050, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 67108864 
VBC3_PUSH_CONST 2050 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:261] ;sfPoseGroup( 134217728 , 1380, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 134217728 
VBC3_PUSH_CONST 1380 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:262] ;sfWaitFrame( frameCount );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:263] ;sfFreeGroup( 65536 | 131072  );
VBC5_PUSH_CONST 50 | 0x80000000 //import func index sfFreeGroup
VBC4_PUSH_CONST 196608 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:266] ;
VBC1_RETURN
;stabilizeRotationByIMU <void()>
[1:268] ;sfQuaternionToEulerImu();
VBC5_PUSH_CONST 303 | 0x80000000 //import func index sfQuaternionToEulerImu
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:269] ;rotation = (forwardDirection - svEulerYaw) * 1.1;
VBC2_PUSH_CONST 22 //rotation
VBC3_PUSH_GLOBAL 76 //forwardDirection
VBC3_PUSH_GLOBAL 1025 //svEulerYaw
VBC1_SUB_FF
VBC5_PUSH_CONST 1066192077 
VBC1_MUL_FF
VBC1_POP
[1:270] ;if( rotation > 3.141592654 ) rotation -= 2 * 3.141592654;
VBC3_PUSH_GLOBAL 22 //rotation
VBC5_PUSH_CONST 1078530011 
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB1001 //if to false
;if( rotation > 3.141592654 ) rotation -= 2 * 3.141592654;
VBC2_PUSH_CONST 22 //rotation
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1086918619 
VBC1_SUB_FF
VBC1_POP
LAB1001: //if else
[1:271] ;if( rotation < -3.141592654 ) rotation += 2 * 3.141592654;
VBC3_PUSH_GLOBAL 22 //rotation
VBC5_PUSH_CONST -1068953637 // -
VBC1_LESS_FF
VBC4_FALSE_JUMP LAB1025 //if to false
;if( rotation < -3.141592654 ) rotation += 2 * 3.141592654;
VBC2_PUSH_CONST 22 //rotation
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1086918619 
VBC1_ADD_FF
VBC1_POP
LAB1025: //if else
[1:273] ;if (orderFromHead != 0) correctedRotation = rotationFromHead;
VBC3_PUSH_GLOBAL 4 //orderFromHead
VBC1_PUSH_0 
VBC1_NOT_EQU
VBC4_FALSE_JUMP LAB1044 //if to false
;if (orderFromHead != 0) correctedRotation = rotationFromHead;
VBC2_PUSH_CONST 77 //correctedRotation
VBC3_PUSH_GLOBAL 5 //rotationFromHead
VBC1_POP
VBC4_JUMP LAB1051 //if to exit
LAB1044: //if else
;else correctedRotation = - rotation;
VBC2_PUSH_CONST 77 //correctedRotation
VBC3_PUSH_GLOBAL 22 //rotation
VBC1_NEG_F
VBC1_POP
LAB1051: //if exit
[1:275] ;if (correctedRotation > 0.5) correctedRotation = 0.5;
VBC3_PUSH_GLOBAL 77 //correctedRotation
VBC5_PUSH_CONST 1056964608 
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB1072 //if to false
;if (correctedRotation > 0.5) correctedRotation = 0.5;
VBC2_PUSH_CONST 77 //correctedRotation
VBC5_PUSH_CONST 1056964608 
VBC1_POP
LAB1072: //if else
[1:276] ;if (correctedRotation < -0.5) correctedRotation = -0.5;
VBC3_PUSH_GLOBAL 77 //correctedRotation
VBC5_PUSH_CONST -1090519040 // -
VBC1_LESS_FF
VBC4_FALSE_JUMP LAB1093 //if to false
;if (correctedRotation < -0.5) correctedRotation = -0.5;
VBC2_PUSH_CONST 77 //correctedRotation
VBC5_PUSH_CONST -1090519040 // -
VBC1_POP
LAB1093: //if else
[1:281] ;
VBC1_RETURN
;computeAlphaForWalk <int()>
[1:285] ;flag = 0;
VBC2_PUSH_CONST 70 //flag
VBC1_PUSH_0 
VBC1_POP
[1:286] ;torsoAdd = tors_angle * 2607.594587 ;
VBC2_PUSH_CONST 75 //torsoAdd
VBC3_PUSH_GLOBAL 73 //tors_angle
VBC5_PUSH_CONST 1159920003 
VBC1_MUL_FF
VBC1_POP_CI
[1:300] ;sfIkAngle( xtr, ytr, ztr, xr, yr, zr, wr );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 39 //xtr
VBC3_PUSH_GLOBAL 40 //ytr
VBC3_PUSH_GLOBAL 41 //ztr
VBC3_PUSH_GLOBAL 42 //xr
VBC3_PUSH_GLOBAL 43 //yr
VBC3_PUSH_GLOBAL 44 //zr
VBC3_PUSH_GLOBAL 45 //wr
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
[1:301] ;if( svIkOutPresent ) {
VBC3_PUSH_GLOBAL 1237 //svIkOutPresent
VBC4_FALSE_JUMP LAB1513 //if to false
;
[1:302] ;flag = flag + 1;
VBC2_PUSH_CONST 70 //flag
VBC3_PUSH_GLOBAL 70 //flag
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
[1:304] ;if (selfFirstLegIsRightLeg == 1){
VBC3_PUSH_GLOBAL 29 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB1339 //if to false
;
[1:305] ;sfPoseGroupLin( 1024 , -(svIkEncA5 - torsoAdd), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC3_PUSH_GLOBAL 75 //torsoAdd
VBC1_SUB
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:306] ;sfPoseGroupLin( 4096 , -svIkEncA6, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:307] ;sfPoseGroupLin( 16384 , -svIkEncA7 + hipTilt, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 9 //hipTilt
VBC1_ADD
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:308] ;sfPoseGroupLin( 65536 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:309] ;sfPoseGroupLin( 67108864 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 67108864 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:310] ;sfPoseGroupLin( 262144 , svIkEncA9, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:311] ;sfPoseGroupLin( 1048576 , -svIkEncA10, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:312] ;sfPoseGroupLin( 2 , -torsoAdd, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 75 //torsoAdd
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:313] ;sfPoseGroupLin( 4 , (1400 - xtl * 30), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_CONST 4 
VBC3_PUSH_CONST 1400 
VBC3_PUSH_GLOBAL 47 //xtl
VBC2_PUSH_CONST 30 
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB1513 //if to exit
LAB1339: //if else
;
[1:316] ;sfPoseGroupLin( 2048 , (svIkEncA5 - tors_angle), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC3_PUSH_GLOBAL 73 //tors_angle
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:317] ;sfPoseGroupLin( 8192 , -svIkEncA6, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:318] ;sfPoseGroupLin( 32768 , -svIkEncA7 + hipTilt, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 9 //hipTilt
VBC1_ADD
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:319] ;sfPoseGroupLin( 131072 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:320] ;sfPoseGroupLin( 134217728 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 134217728 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:321] ;sfPoseGroupLin( 524288 , svIkEncA9, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:322] ;sfPoseGroupLin( 2097152 , -svIkEncA10, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:323] ;sfPoseGroupLin(2 , -torsoAdd, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 75 //torsoAdd
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:324] ;sfPoseGroupLin( 8 , (1400 - xtr * 30), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_CONST 8 
VBC3_PUSH_CONST 1400 
VBC3_PUSH_GLOBAL 39 //xtr
VBC2_PUSH_CONST 30 
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB1513: //if exit
LAB1513: //if else
[1:330] ;sfIkAngle( xtl, -ytl, ztl, xl, -yl, zl, wl );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 47 //xtl
VBC3_PUSH_GLOBAL 48 //ytl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 49 //ztl
VBC3_PUSH_GLOBAL 50 //xl
VBC3_PUSH_GLOBAL 51 //yl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 52 //zl
VBC3_PUSH_GLOBAL 53 //wl
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
[1:341] ;if( svIkOutPresent ) {
VBC3_PUSH_GLOBAL 1237 //svIkOutPresent
VBC4_FALSE_JUMP LAB1888 //if to false
;
[1:342] ;flag = flag + 1;
VBC2_PUSH_CONST 70 //flag
VBC3_PUSH_GLOBAL 70 //flag
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
[1:344] ;if (selfFirstLegIsRightLeg == 1){
VBC3_PUSH_GLOBAL 29 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB1730 //if to false
;
[1:345] ;sfPoseGroupLin( 2048 , -(svIkEncA5 + torsoAdd), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC3_PUSH_GLOBAL 75 //torsoAdd
VBC1_ADD
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:346] ;sfPoseGroupLin( 8192 , -svIkEncA6, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:347] ;sfPoseGroupLin( 32768 , -svIkEncA7 + hipTilt, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 9 //hipTilt
VBC1_ADD
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:348] ;sfPoseGroupLin( 131072 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:349] ;sfPoseGroupLin( 134217728 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 134217728 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:350] ;sfPoseGroupLin( 524288 , svIkEncA9, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:351] ;sfPoseGroupLin( 2097152 , -svIkEncA10, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:352] ;sfPoseGroupLin( 8 , (1400 - xtr * 30), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_CONST 8 
VBC3_PUSH_CONST 1400 
VBC3_PUSH_GLOBAL 39 //xtr
VBC2_PUSH_CONST 30 
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB1888 //if to exit
LAB1730: //if else
;
[1:355] ;sfPoseGroupLin( 1024 , (svIkEncA5 - tors_angle), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC3_PUSH_GLOBAL 73 //tors_angle
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:356] ;sfPoseGroupLin( 4096 , -svIkEncA6, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:357] ;sfPoseGroupLin( 16384 , -svIkEncA7 + hipTilt, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 9 //hipTilt
VBC1_ADD
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:358] ;sfPoseGroupLin( 65536 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:359] ;sfPoseGroupLin( 67108864 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 67108864 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:360] ;sfPoseGroupLin( 262144 , svIkEncA9, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:361] ;sfPoseGroupLin( 1048576 , -svIkEncA10, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:362] ;sfPoseGroupLin( 4 , (1400 - xtl * 30), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_CONST 4 
VBC3_PUSH_CONST 1400 
VBC3_PUSH_GLOBAL 47 //xtl
VBC2_PUSH_CONST 30 
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 11 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB1888: //if exit
LAB1888: //if else
[1:366] ;sfWaitFrame( timeStep );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 3 //timeStep
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:367] ;if (flag < 2) flag_event = flag_event + 1;
VBC3_PUSH_GLOBAL 70 //flag
VBC1_PUSH_2 
VBC1_LESS
VBC4_FALSE_JUMP LAB1912 //if to false
;if (flag < 2) flag_event = flag_event + 1;
VBC2_PUSH_CONST 71 //flag_event
VBC3_PUSH_GLOBAL 71 //flag_event
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
LAB1912: //if else
[1:368] ;return 1;
VBC1_PUSH_1 
VBC2_POP_RESULT 2
VBC1_RETURN
;computeAlphaForWalkFine <void(,int)>
[1:383] ;sfIkAngle( xtr, ytr, ztr, xr, yr, zr, wr );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 39 //xtr
VBC3_PUSH_GLOBAL 40 //ytr
VBC3_PUSH_GLOBAL 41 //ztr
VBC3_PUSH_GLOBAL 42 //xr
VBC3_PUSH_GLOBAL 43 //yr
VBC3_PUSH_GLOBAL 44 //zr
VBC3_PUSH_GLOBAL 45 //wr
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
[1:385] ;if( svIkOutPresent ) {
VBC3_PUSH_GLOBAL 1237 //svIkOutPresent
VBC4_FALSE_JUMP LAB2204 //if to false
;
[1:387] ;if (selfFirstLegIsRightLeg == 1){
VBC3_PUSH_GLOBAL 29 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB2084 //if to false
;
[1:388] ;sfPoseGroupLin( 1024 , -svIkEncA5, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:389] ;sfPoseGroupLin( 4096 , -svIkEncA6, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:390] ;sfPoseGroupLin( 16384 , -svIkEncA7, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:391] ;sfPoseGroupLin( 65536 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:392] ;sfPoseGroupLin( 67108864 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 67108864 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:393] ;sfPoseGroupLin( 262144 , svIkEncA9, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:394] ;sfPoseGroupLin( 1048576 , -svIkEncA10, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB2204 //if to exit
LAB2084: //if else
;
[1:397] ;sfPoseGroupLin( 2048 , svIkEncA5, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:398] ;sfPoseGroupLin( 8192 , -svIkEncA6, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:399] ;sfPoseGroupLin( 32768 , -svIkEncA7, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:400] ;sfPoseGroupLin( 131072 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:401] ;sfPoseGroupLin( 134217728 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 134217728 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:402] ;sfPoseGroupLin( 524288 , svIkEncA9, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:403] ;sfPoseGroupLin( 2097152 , -svIkEncA10, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB2204: //if exit
LAB2204: //if else
[1:409] ;sfIkAngle( xtl, -ytl, ztl, xl, -yl, zl, wl );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 47 //xtl
VBC3_PUSH_GLOBAL 48 //ytl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 49 //ztl
VBC3_PUSH_GLOBAL 50 //xl
VBC3_PUSH_GLOBAL 51 //yl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 52 //zl
VBC3_PUSH_GLOBAL 53 //wl
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
[1:410] ;if( svIkOutPresent ) {
VBC3_PUSH_GLOBAL 1237 //svIkOutPresent
VBC4_FALSE_JUMP LAB2494 //if to false
;
[1:412] ;if (selfFirstLegIsRightLeg == 1){
VBC3_PUSH_GLOBAL 29 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB2375 //if to false
;
[1:413] ;sfPoseGroupLin( 2048 , -svIkEncA5, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:414] ;sfPoseGroupLin( 8192 , -svIkEncA6, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:415] ;sfPoseGroupLin( 32768 , -svIkEncA7, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:416] ;sfPoseGroupLin( 131072 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:417] ;sfPoseGroupLin( 134217728 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 134217728 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:418] ;sfPoseGroupLin( 524288 , svIkEncA9, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:419] ;sfPoseGroupLin( 2097152 , -svIkEncA10, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB2494 //if to exit
LAB2375: //if else
;
[1:422] ;sfPoseGroupLin( 1024 , svIkEncA5, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:423] ;sfPoseGroupLin( 4096 , -svIkEncA6, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:424] ;sfPoseGroupLin( 16384 , -svIkEncA7, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:425] ;sfPoseGroupLin( 65536 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:426] ;sfPoseGroupLin( 67108864 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 67108864 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:427] ;sfPoseGroupLin( 262144 , svIkEncA9, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:428] ;sfPoseGroupLin( 1048576 , -svIkEncA10, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB2494: //if exit
LAB2494: //if else
[1:432] ;sfPoseGroupLin( 256  | 512 , 4540, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 768 
VBC3_PUSH_CONST 4540 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:433] ;sfPoseGroupLin( 4  | 8 , 1400, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_CONST 12 
VBC3_PUSH_CONST 1400 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:434] ;sfPoseGroupLin( 64  | 128 , 700, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 192 
VBC3_PUSH_CONST 700 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:435] ;sfWaitFrame( frameCount );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:442] ;
VBC1_RETURN
;testDrop <void()>
[1:443] ;if( sfAbs(svImuAccX) > 50000 || sfAbs(svImuAccZ) > 50000 ) {
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 1000 //svImuAccX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC4_PUSH_CONST 50000 
VBC1_GREAT
VBC4_TRUE_JUMP_KEEP LAB2584
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 1002 //svImuAccZ
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC4_PUSH_CONST 50000 
VBC1_GREAT
VBC4_TRUE_JUMP_KEEP LAB2584
VBC1_PUSH_0
LAB2584:
VBC4_FALSE_JUMP LAB2594 //if to false
;
[1:448] ;sfWaitFrame(100);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_CONST 100 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB2594: //if else
[1:454] ;
VBC1_RETURN
;walkInitialPose <void()>
[1:459] ;xtr = xtl = 0;
VBC2_PUSH_CONST 39 //xtr
VBC2_PUSH_CONST 47 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:460] ;for( j = 0; j < selfInitPoses; j++ ) {
VBC2_PUSH_CONST 78 //j
VBC1_PUSH_0 
VBC1_POP
LAB2606: //for condition
VBC3_PUSH_GLOBAL 78 //j
VBC3_PUSH_GLOBAL 32 //selfInitPoses
VBC1_LESS
VBC4_FALSE_JUMP LAB2691 //to for exit
;
[1:462] ;ztr = ztr0 - j * stepZtr;
VBC2_PUSH_CONST 41 //ztr
VBC3_PUSH_GLOBAL 63 //ztr0
VBC3_PUSH_GLOBAL 78 //j
VBC3_PUSH_GLOBAL 65 //stepZtr
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:463] ;ztl = ztl0 - j * stepZtl;
VBC2_PUSH_CONST 49 //ztl
VBC3_PUSH_GLOBAL 64 //ztl0
VBC3_PUSH_GLOBAL 78 //j
VBC3_PUSH_GLOBAL 66 //stepZtl
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:464] ;ytr = -d10 - j * stepYtr;
VBC2_PUSH_CONST 40 //ytr
VBC3_PUSH_GLOBAL 56 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 78 //j
VBC3_PUSH_GLOBAL 67 //stepYtr
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:465] ;ytl =  d10 - j * stepYtl;
VBC2_PUSH_CONST 48 //ytl
VBC3_PUSH_GLOBAL 56 //d10
VBC3_PUSH_GLOBAL 78 //j
VBC3_PUSH_GLOBAL 68 //stepYtl
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:467] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 1094  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB2684 //if to false
;return;
VBC1_RETURN
LAB2684: //if else
LAB2684: //for step
VBC2_PUSH_CONST 78 //j
VBC1_INC
VBC4_JUMP LAB2606 //to condition
LAB2691: //for exit
[1:477] ;
VBC1_RETURN
;walkInitialPoseFine <void()>
[1:478] ;xtr = xtl = 0;
VBC2_PUSH_CONST 39 //xtr
VBC2_PUSH_CONST 47 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:479] ;ztr = ztl = -gaitHeight;
VBC2_PUSH_CONST 41 //ztr
VBC2_PUSH_CONST 49 //ztl
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC1_STORE_CF
VBC1_POP
[1:480] ;ytr = -d10 - amplitude / 2.0;
VBC2_PUSH_CONST 40 //ytr
VBC3_PUSH_GLOBAL 56 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 57 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:481] ;ytl =  d10 - amplitude / 2.0;
VBC2_PUSH_CONST 48 //ytl
VBC3_PUSH_GLOBAL 56 //d10
VBC3_PUSH_GLOBAL 57 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:482] ;computeAlphaForWalkFine( 80 );
VBC3_PUSH_CONST 1916  //func address computeAlphaForWalkFine
VBC2_PUSH_CONST 80 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:486] ;
VBC1_RETURN
;walkFinalPose <void()>
[1:487] ;for( j = 0; j < selfInitPoses; j++ ) {
VBC2_PUSH_CONST 78 //j
VBC1_PUSH_0 
VBC1_POP
LAB2754: //for condition
VBC3_PUSH_GLOBAL 78 //j
VBC3_PUSH_GLOBAL 32 //selfInitPoses
VBC1_LESS
VBC4_FALSE_JUMP LAB2857 //to for exit
;
[1:489] ;ztr = -gaitHeight + (j+1) * stepZtr;
VBC2_PUSH_CONST 41 //ztr
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 78 //j
VBC1_PUSH_1 
VBC1_ADD
VBC3_PUSH_GLOBAL 65 //stepZtr
VBC1_MUL_IF
VBC1_ADD_IF
VBC1_POP
[1:490] ;ztl = -gaitHeight + (j+1) * stepZtr;
VBC2_PUSH_CONST 49 //ztl
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 78 //j
VBC1_PUSH_1 
VBC1_ADD
VBC3_PUSH_GLOBAL 65 //stepZtr
VBC1_MUL_IF
VBC1_ADD_IF
VBC1_POP
[1:491] ;ytr = -d10 + (selfInitPoses - (j+1)) * stepYtr;
VBC2_PUSH_CONST 40 //ytr
VBC3_PUSH_GLOBAL 56 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 32 //selfInitPoses
VBC3_PUSH_GLOBAL 78 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_SUB
VBC3_PUSH_GLOBAL 67 //stepYtr
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:492] ;ytl =  d10 + (selfInitPoses - (j+1)) * stepYtl;
VBC2_PUSH_CONST 48 //ytl
VBC3_PUSH_GLOBAL 56 //d10
VBC3_PUSH_GLOBAL 32 //selfInitPoses
VBC3_PUSH_GLOBAL 78 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_SUB
VBC3_PUSH_GLOBAL 68 //stepYtl
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:494] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 1094  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB2850 //if to false
;return;
VBC1_RETURN
LAB2850: //if else
LAB2850: //for step
VBC2_PUSH_CONST 78 //j
VBC1_INC
VBC4_JUMP LAB2754 //to condition
LAB2857: //for exit
[1:505] ;
VBC1_RETURN
;walkFinalPoseFine <void()>
[1:506] ;xtr = xtl = 0;
VBC2_PUSH_CONST 39 //xtr
VBC2_PUSH_CONST 47 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:507] ;ztr = ztl = -(svIkC5+svIkA6+svIkA7+svIkA8+svIkA9+svIkB10 - 1);
VBC2_PUSH_CONST 41 //ztr
VBC2_PUSH_CONST 49 //ztl
VBC3_PUSH_GLOBAL 1217 //svIkC5
VBC3_PUSH_GLOBAL 1218 //svIkA6
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1219 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1220 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1221 //svIkA9
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1223 //svIkB10
VBC1_ADD_FF
VBC1_PUSH_1 
VBC1_SUB_FI
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:508] ;ytr = -d10;
VBC2_PUSH_CONST 40 //ytr
VBC3_PUSH_GLOBAL 56 //d10
VBC1_NEG_F
VBC1_POP
[1:509] ;ytl =  d10;
VBC2_PUSH_CONST 48 //ytl
VBC3_PUSH_GLOBAL 56 //d10
VBC1_POP
[1:510] ;computeAlphaForWalkFine( 40 );
VBC3_PUSH_CONST 1916  //func address computeAlphaForWalkFine
VBC2_PUSH_CONST 40 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:513] ;
VBC1_RETURN
;walkInit <void()>
[1:527] ;correctedStepLenght = stepLength + selfMotionShiftCorrectionX;
VBC2_PUSH_CONST 59 //correctedStepLenght
VBC3_PUSH_GLOBAL 20 //stepLength
VBC3_PUSH_GLOBAL 23 //selfMotionShiftCorrectionX
VBC1_ADD_FF
VBC1_POP
[1:528] ;correctedStepLenghtHalf = correctedStepLenght / 2;
VBC2_PUSH_CONST 60 //correctedStepLenghtHalf
VBC3_PUSH_GLOBAL 59 //correctedStepLenght
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_POP
[1:529] ;correctedSideLenght = sideLength - selfMotionShiftCorrectionY;
VBC2_PUSH_CONST 61 //correctedSideLenght
VBC3_PUSH_GLOBAL 21 //sideLength
VBC3_PUSH_GLOBAL 24 //selfMotionShiftCorrectionY
VBC1_SUB_FF
VBC1_POP
[1:530] ;correctedSideLenghtHalf = correctedSideLenght / 2;
VBC2_PUSH_CONST 62 //correctedSideLenghtHalf
VBC3_PUSH_GLOBAL 61 //correctedSideLenght
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_POP
[1:536] ;stepRotation = correctedRotation / (fr2 - 2.0) * 2;
VBC2_PUSH_CONST 90 //stepRotation
VBC3_PUSH_GLOBAL 77 //correctedRotation
VBC3_PUSH_GLOBAL 13 //fr2
VBC5_PUSH_CONST 1073741824 
VBC1_SUB_IF
VBC1_DIV_FF
VBC1_PUSH_2 
VBC1_MUL_FI
VBC1_POP
[1:538] ;dx0Typical = correctedStepLenght / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 81 //dx0Typical
VBC3_PUSH_GLOBAL 59 //correctedStepLenght
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_POP
[1:539] ;dy0Typical = correctedSideLenght / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 82 //dy0Typical
VBC3_PUSH_GLOBAL 61 //correctedSideLenght
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_POP
[1:540] ;dobavka_x_ot_torsa = svIkA5 * 2.0 * sfMathSin(ugol_torsa) / fr2;
VBC2_PUSH_CONST 72 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC5_PUSH_CONST 1073741824 
VBC1_MUL_FF
VBC5_PUSH_CONST 301 | 0x80000000 //import func index sfMathSin
//alloc addon amount for result
VBC3_PUSH_GLOBAL 18 //ugol_torsa
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_DIV_FI
VBC1_POP
[1:542] ;xr = xl = bodyTiltAtWalk;
VBC2_PUSH_CONST 42 //xr
VBC2_PUSH_CONST 50 //xl
VBC3_PUSH_GLOBAL 16 //bodyTiltAtWalk
VBC1_STORE
VBC1_POP
[1:543] ;yl =  solyLandingSkew;
VBC2_PUSH_CONST 51 //yl
VBC3_PUSH_GLOBAL 17 //solyLandingSkew
VBC1_POP
[1:544] ;yr = -solyLandingSkew;
VBC2_PUSH_CONST 43 //yr
VBC3_PUSH_GLOBAL 17 //solyLandingSkew
VBC1_NEG_F
VBC1_POP
[1:545] ;fase_offset = 0.7; 
VBC2_PUSH_CONST 84 //fase_offset
VBC5_PUSH_CONST 1060320051 
VBC1_POP
[1:546] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 954  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:551] ;
VBC1_RETURN
;walkPhasa1 <void()>
[1:552] ;ztl = ztr = -gaitHeight;
VBC2_PUSH_CONST 49 //ztl
VBC2_PUSH_CONST 41 //ztr
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC1_STORE_CF
VBC1_POP
[1:553] ;xtl_plan = correctedStepLenght * (0.5 - fr1 / (2.0 * fr1 + fr2)) - dobavka_x_ot_torsa * fr1 * fr2 / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 91 //xtl_plan
VBC3_PUSH_GLOBAL 59 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 12 //fr1
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD_FI
VBC1_DIV_IF
VBC1_SUB_FF
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 72 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_MUL_FI
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:554] ;for( j = 0; j < fr1; j ++ ) {
VBC2_PUSH_CONST 78 //j
VBC1_PUSH_0 
VBC1_POP
LAB3145: //for condition
VBC3_PUSH_GLOBAL 78 //j
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_LESS
VBC4_FALSE_JUMP LAB3287 //to for exit
;
[1:556] ;s = (amplitude / 2 + correctedSideLenghtHalf) * sfMathCos(alpha01 * (j / 2 + fase_offset * framestep));
VBC2_PUSH_CONST 83 //s
VBC3_PUSH_GLOBAL 57 //amplitude
VBC1_PUSH_2 
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 62 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 58 //alpha01
VBC3_PUSH_GLOBAL 78 //j
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 84 //fase_offset
VBC3_PUSH_GLOBAL 38 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_MUL_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_MUL_FF
VBC1_POP
[1:557] ;ytr = s - d10 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 40 //ytr
VBC3_PUSH_GLOBAL 83 //s
VBC3_PUSH_GLOBAL 56 //d10
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 62 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
[1:558] ;ytl = s + d10 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 48 //ytl
VBC3_PUSH_GLOBAL 83 //s
VBC3_PUSH_GLOBAL 56 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 62 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
[1:559] ;if( stepType == 0 ) continue;
VBC3_PUSH_GLOBAL 69 //stepType
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB3234 //if to false
;if( stepType == 0 ) continue;
VBC4_JUMP LAB3280 //to loop condition
LAB3234: //if else
[1:560] ;dx1 = (xtl_plan - xtl) / (fr1 - j);
VBC2_PUSH_CONST 87 //dx1
VBC3_PUSH_GLOBAL 91 //xtl_plan
VBC3_PUSH_GLOBAL 47 //xtl
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 12 //fr1
VBC3_PUSH_GLOBAL 78 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:561] ;xtr += dx1;
VBC2_PUSH_CONST 39 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 87 //dx1
VBC1_ADD_FF
VBC1_POP
[1:562] ;xtl += dx1;
VBC2_PUSH_CONST 47 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 87 //dx1
VBC1_ADD_FF
VBC1_POP
[1:564] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 1094  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB3280 //if to false
;return;
VBC1_RETURN
LAB3280: //if else
LAB3280: //for step
VBC2_PUSH_CONST 78 //j
VBC1_INC
VBC4_JUMP LAB3145 //to condition
LAB3287: //for exit
[1:571] ;
VBC1_RETURN
;walkPhasa3 <void()>
[1:572] ;ztl = ztr = -gaitHeight;
VBC2_PUSH_CONST 49 //ztl
VBC2_PUSH_CONST 41 //ztr
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC1_STORE_CF
VBC1_POP
[1:573] ;xtr_plan = correctedStepLenght * (0.5 - fr1 / (2.0 * fr1 + fr2)) - dobavka_x_ot_torsa * fr1 * fr2 / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 92 //xtr_plan
VBC3_PUSH_GLOBAL 59 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 12 //fr1
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD_FI
VBC1_DIV_IF
VBC1_SUB_FF
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 72 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_MUL_FI
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:574] ;for( j = 0; j < fr1; j ++ ) {
VBC2_PUSH_CONST 78 //j
VBC1_PUSH_0 
VBC1_POP
LAB3358: //for condition
VBC3_PUSH_GLOBAL 78 //j
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_LESS
VBC4_FALSE_JUMP LAB3491 //to for exit
;
[1:576] ;s = (amplitude / 2 + correctedSideLenghtHalf) * sfMathCos(alpha01 * ((j -fr2) / 2 + fase_offset * framestep));
VBC2_PUSH_CONST 83 //s
VBC3_PUSH_GLOBAL 57 //amplitude
VBC1_PUSH_2 
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 62 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 58 //alpha01
VBC3_PUSH_GLOBAL 78 //j
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_SUB
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 84 //fase_offset
VBC3_PUSH_GLOBAL 38 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_MUL_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_MUL_FF
VBC1_POP
[1:577] ;ytr = s - d10 - correctedSideLenghtHalf; 
VBC2_PUSH_CONST 40 //ytr
VBC3_PUSH_GLOBAL 83 //s
VBC3_PUSH_GLOBAL 56 //d10
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 62 //correctedSideLenghtHalf
VBC1_SUB_FF
VBC1_POP
[1:578] ;ytl = s + d10 + correctedSideLenghtHalf; 
VBC2_PUSH_CONST 48 //ytl
VBC3_PUSH_GLOBAL 83 //s
VBC3_PUSH_GLOBAL 56 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 62 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
[1:579] ;dx1 = (xtr_plan - xtr) / (fr1 - j);
VBC2_PUSH_CONST 87 //dx1
VBC3_PUSH_GLOBAL 92 //xtr_plan
VBC3_PUSH_GLOBAL 39 //xtr
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 12 //fr1
VBC3_PUSH_GLOBAL 78 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:580] ;xtr += dx1;
VBC2_PUSH_CONST 39 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 87 //dx1
VBC1_ADD_FF
VBC1_POP
[1:581] ;xtl += dx1;
VBC2_PUSH_CONST 47 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 87 //dx1
VBC1_ADD_FF
VBC1_POP
[1:583] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 1094  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB3484 //if to false
;return;
VBC1_RETURN
LAB3484: //if else
LAB3484: //for step
VBC2_PUSH_CONST 78 //j
VBC1_INC
VBC4_JUMP LAB3358 //to condition
LAB3491: //for exit
[1:590] ;
VBC1_RETURN
;walkPhasa2 <void()>
[1:591] ;wr0 = wr;
VBC2_PUSH_CONST 46 //wr0
VBC3_PUSH_GLOBAL 45 //wr
VBC1_POP
[1:592] ;wl0 = wl;
VBC2_PUSH_CONST 54 //wl0
VBC3_PUSH_GLOBAL 53 //wl
VBC1_POP
[1:594] ;dy = correctedSideLenght / fr2;
VBC2_PUSH_CONST 86 //dy
VBC3_PUSH_GLOBAL 61 //correctedSideLenght
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_DIV_FI
VBC1_POP
[1:595] ;xtl_plan = correctedStepLenght * (0.5 - (fr1 + fr2) / (2.0 * fr1 + fr2)) + dobavka_x_ot_torsa * fr1 * fr2 / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 91 //xtl_plan
VBC3_PUSH_GLOBAL 59 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 12 //fr1
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD_FI
VBC1_DIV_IF
VBC1_SUB_FF
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 72 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_MUL_FI
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_ADD_FF
VBC1_POP
[1:596] ;xtr_plan = correctedStepLenght * 0.5 + dx0Typical + dobavka_x_ot_torsa;
VBC2_PUSH_CONST 92 //xtr_plan
VBC3_PUSH_GLOBAL 59 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 81 //dx0Typical
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 72 //dobavka_x_ot_torsa
VBC1_ADD_FF
VBC1_POP
[1:597] ;for( j = 0; j < fr2; j ++ ) {
VBC2_PUSH_CONST 78 //j
VBC1_PUSH_0 
VBC1_POP
LAB3598: //for condition
VBC3_PUSH_GLOBAL 78 //j
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_LESS
VBC4_FALSE_JUMP LAB4009 //to for exit
;
[1:598] ;ztr = -gaitHeight + stepHeight;
VBC2_PUSH_CONST 41 //ztr
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 15 //stepHeight
VBC1_ADD
VBC1_POP_CF
[1:599] ;dx2 = (xtl_plan - xtl) / (fr2 - j);
VBC2_PUSH_CONST 88 //dx2
VBC3_PUSH_GLOBAL 91 //xtl_plan
VBC3_PUSH_GLOBAL 47 //xtl
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 13 //fr2
VBC3_PUSH_GLOBAL 78 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:600] ;if (stepType == 0)
VBC3_PUSH_GLOBAL 69 //stepType
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB3676 //if to false
;tors_angle = sfFMathASin(dobavka_x_ot_torsa / svIkA5 * (j + 1) / 2);
VBC2_PUSH_CONST 73 //tors_angle
VBC5_PUSH_CONST 352 | 0x80000000 //import func index sfFMathASin
//alloc addon amount for result
VBC3_PUSH_GLOBAL 72 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 78 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_MUL_FI
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_POP
VBC4_JUMP LAB3711 //if to exit
LAB3676: //if else
;tors_angle = sfFMathASin(sfMathSin(-ugol_torsa) + dobavka_x_ot_torsa / svIkA5 * (j + 1));
VBC2_PUSH_CONST 73 //tors_angle
VBC5_PUSH_CONST 352 | 0x80000000 //import func index sfFMathASin
//alloc addon amount for result
VBC5_PUSH_CONST 301 | 0x80000000 //import func index sfMathSin
//alloc addon amount for result
VBC3_PUSH_GLOBAL 18 //ugol_torsa
VBC1_NEG_F
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC3_PUSH_GLOBAL 72 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 78 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_MUL_FI
VBC1_ADD_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_POP
LAB3711: //if exit
[1:604] ;if( j == 0 ) {
VBC3_PUSH_GLOBAL 78 //j
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB3751 //if to false
;
[1:605] ;xtr += dx2 - dobavka_x_ot_torsa;
VBC2_PUSH_CONST 39 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 88 //dx2
VBC3_PUSH_GLOBAL 72 //dobavka_x_ot_torsa
VBC1_SUB_FF
VBC1_ADD_FF
VBC1_POP
[1:606] ;ytr  = s - d10 + dy0Typical;
VBC2_PUSH_CONST 40 //ytr
VBC3_PUSH_GLOBAL 83 //s
VBC3_PUSH_GLOBAL 56 //d10
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 82 //dy0Typical
VBC1_ADD_FF
VBC1_POP
VBC4_JUMP LAB3887 //if to exit
LAB3751: //if else
;else if( j == (fr2 - 1) ) {
VBC3_PUSH_GLOBAL 78 //j
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_PUSH_1 
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB3801 //if to false
;
[1:609] ;xtr += dx2 - dobavka_x_ot_torsa;
VBC2_PUSH_CONST 39 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 88 //dx2
VBC3_PUSH_GLOBAL 72 //dobavka_x_ot_torsa
VBC1_SUB_FF
VBC1_ADD_FF
VBC1_POP
[1:610] ;ytr  = s - d10 + 2 * dy0Typical - correctedSideLenght;
VBC2_PUSH_CONST 40 //ytr
VBC3_PUSH_GLOBAL 83 //s
VBC3_PUSH_GLOBAL 56 //d10
VBC1_SUB_FF
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 82 //dy0Typical
VBC1_MUL_IF
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 61 //correctedSideLenght
VBC1_SUB_FF
VBC1_POP
VBC4_JUMP LAB3887 //if to exit
LAB3801: //if else
;
[1:613] ;if (j == 1)
VBC3_PUSH_GLOBAL 78 //j
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB3827 //if to false
;ztr = -gaitHeight + stepHeight / 2.0;
VBC2_PUSH_CONST 41 //ztr
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 15 //stepHeight
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_IF
VBC1_ADD_IF
VBC1_POP
LAB3827: //if else
[1:615] ;dx = (xtr_plan - xtr) / (fr2 - j);
VBC2_PUSH_CONST 85 //dx
VBC3_PUSH_GLOBAL 92 //xtr_plan
VBC3_PUSH_GLOBAL 39 //xtr
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 13 //fr2
VBC3_PUSH_GLOBAL 78 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:616] ;xtr += dx;
VBC2_PUSH_CONST 39 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 85 //dx
VBC1_ADD_FF
VBC1_POP
[1:617] ;ytr  = s - 64 + dy0Typical - dy * fr2 / (fr2 - 2) * (j / 2);
VBC2_PUSH_CONST 40 //ytr
VBC3_PUSH_GLOBAL 83 //s
VBC2_PUSH_CONST 64 
VBC1_SUB_FI
VBC3_PUSH_GLOBAL 82 //dy0Typical
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 86 //dy
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_PUSH_2 
VBC1_SUB
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 78 //j
VBC1_PUSH_2 
VBC1_DIV
VBC1_MUL_FI
VBC1_SUB_FF
VBC1_POP
LAB3887: //if exit
LAB3887: //if exit
[1:621] ;if (correctedRotation < 0){
VBC3_PUSH_GLOBAL 77 //correctedRotation
VBC1_PUSH_0 
VBC1_LESS_FI
VBC4_FALSE_JUMP LAB3938 //if to false
;
[1:622] ;wl = j * correctedRotation / (fr2 - 1);
VBC2_PUSH_CONST 53 //wl
VBC3_PUSH_GLOBAL 78 //j
VBC3_PUSH_GLOBAL 77 //correctedRotation
VBC1_MUL_IF
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_PUSH_1 
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:623] ;wr = wr0 - (correctedRotation - wr0) * j / fr2;
VBC2_PUSH_CONST 45 //wr
VBC3_PUSH_GLOBAL 46 //wr0
VBC3_PUSH_GLOBAL 77 //correctedRotation
VBC3_PUSH_GLOBAL 46 //wr0
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 78 //j
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
VBC4_JUMP LAB3974 //if to exit
LAB3938: //if else
;
[1:626] ;wr = wr0 - wr0 * j / fr2;
VBC2_PUSH_CONST 45 //wr
VBC3_PUSH_GLOBAL 46 //wr0
VBC3_PUSH_GLOBAL 46 //wr0
VBC3_PUSH_GLOBAL 78 //j
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
[1:627] ;wl = wl0 - wl0 * j / fr2;
VBC2_PUSH_CONST 53 //wl
VBC3_PUSH_GLOBAL 54 //wl0
VBC3_PUSH_GLOBAL 54 //wl0
VBC3_PUSH_GLOBAL 78 //j
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
LAB3974: //if exit
[1:629] ;xtl += dx2;
VBC2_PUSH_CONST 47 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 88 //dx2
VBC1_ADD_FF
VBC1_POP
[1:630] ;ytl += dy0Typical;
VBC2_PUSH_CONST 48 //ytl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 82 //dy0Typical
VBC1_ADD_FF
VBC1_POP
[1:633] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 1094  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB4002 //if to false
;return;
VBC1_RETURN
LAB4002: //if else
LAB4002: //for step
VBC2_PUSH_CONST 78 //j
VBC1_INC
VBC4_JUMP LAB3598 //to condition
LAB4009: //for exit
[1:639] ;
VBC1_RETURN
;walkPhasa4 <void()>
[1:643] ;wr0 = wr;
VBC2_PUSH_CONST 46 //wr0
VBC3_PUSH_GLOBAL 45 //wr
VBC1_POP
[1:644] ;wl0 = wl;
VBC2_PUSH_CONST 54 //wl0
VBC3_PUSH_GLOBAL 53 //wl
VBC1_POP
[1:646] ;dy = correctedSideLenght / (fr2 - 2.0);
VBC2_PUSH_CONST 86 //dy
VBC3_PUSH_GLOBAL 61 //correctedSideLenght
VBC3_PUSH_GLOBAL 13 //fr2
VBC5_PUSH_CONST 1073741824 
VBC1_SUB_IF
VBC1_DIV_FF
VBC1_POP
[1:647] ;if( stepType == 1 ) {
VBC3_PUSH_GLOBAL 69 //stepType
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB4059 //if to false
;
[1:648] ;xtr_plan = 0;
VBC2_PUSH_CONST 92 //xtr_plan
VBC1_PUSH_0 
VBC1_POP_CF
[1:649] ;xtl_plan = 0;
VBC2_PUSH_CONST 91 //xtl_plan
VBC1_PUSH_0 
VBC1_POP_CF
VBC4_JUMP LAB4139 //if to exit
LAB4059: //if else
;
[1:652] ;xtr_plan = correctedStepLenght * (0.5 - (fr1 + fr2) / (2.0 * fr1 + fr2)) + dobavka_x_ot_torsa * fr1 * fr2 / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 92 //xtr_plan
VBC3_PUSH_GLOBAL 59 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 12 //fr1
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD_FI
VBC1_DIV_IF
VBC1_SUB_FF
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 72 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_MUL_FI
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 12 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_ADD_FF
VBC1_POP
[1:653] ;xtl_plan = correctedStepLenght * 0.5 + dx0Typical + dobavka_x_ot_torsa;
VBC2_PUSH_CONST 91 //xtl_plan
VBC3_PUSH_GLOBAL 59 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 81 //dx0Typical
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 72 //dobavka_x_ot_torsa
VBC1_ADD_FF
VBC1_POP
LAB4139: //if exit
[1:655] ;for( j = 0; j < fr2; j ++ ) {
VBC2_PUSH_CONST 78 //j
VBC1_PUSH_0 
VBC1_POP
LAB4143: //for condition
VBC3_PUSH_GLOBAL 78 //j
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_LESS
VBC4_FALSE_JUMP LAB4595 //to for exit
;
[1:656] ;ztl = -gaitHeight + stepHeight;
VBC2_PUSH_CONST 49 //ztl
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 15 //stepHeight
VBC1_ADD
VBC1_POP_CF
[1:658] ;if( stepType == 1 && j == (fr2 - 1) ) {
VBC3_PUSH_GLOBAL 69 //stepType
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB4188
VBC3_PUSH_GLOBAL 78 //j
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_PUSH_1 
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB4188
VBC1_PUSH_1
LAB4188:
VBC4_FALSE_JUMP LAB4249 //if to false
;
[1:659] ;ztl = -gaitHeight;
VBC2_PUSH_CONST 49 //ztl
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC1_POP_CF
[1:660] ;ytl = s + d10;
VBC2_PUSH_CONST 48 //ytl
VBC3_PUSH_GLOBAL 83 //s
VBC3_PUSH_GLOBAL 56 //d10
VBC1_ADD_FF
VBC1_POP
[1:661] ;tors_angle = sfFMathASin(sfMathSin(ugol_torsa) - dobavka_x_ot_torsa / svIkA5 * (j + 1) / 2);
VBC2_PUSH_CONST 73 //tors_angle
VBC5_PUSH_CONST 352 | 0x80000000 //import func index sfFMathASin
//alloc addon amount for result
VBC5_PUSH_CONST 301 | 0x80000000 //import func index sfMathSin
//alloc addon amount for result
VBC3_PUSH_GLOBAL 18 //ugol_torsa
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC3_PUSH_GLOBAL 72 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 78 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_MUL_FI
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_POP
VBC4_JUMP LAB4283 //if to exit
LAB4249: //if else
;else tors_angle = sfFMathASin(sfMathSin(ugol_torsa) - dobavka_x_ot_torsa / svIkA5 * (j + 1));
VBC2_PUSH_CONST 73 //tors_angle
VBC5_PUSH_CONST 352 | 0x80000000 //import func index sfFMathASin
//alloc addon amount for result
VBC5_PUSH_CONST 301 | 0x80000000 //import func index sfMathSin
//alloc addon amount for result
VBC3_PUSH_GLOBAL 18 //ugol_torsa
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC3_PUSH_GLOBAL 72 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 78 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_MUL_FI
VBC1_SUB_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_POP
LAB4283: //if exit
[1:664] ;dx4 = (xtr_plan - xtr) / (fr2 - j);
VBC2_PUSH_CONST 89 //dx4
VBC3_PUSH_GLOBAL 92 //xtr_plan
VBC3_PUSH_GLOBAL 39 //xtr
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 13 //fr2
VBC3_PUSH_GLOBAL 78 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:665] ;if( j == 0 ) {
VBC3_PUSH_GLOBAL 78 //j
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB4358 //if to false
;
[1:666] ;xtl += dx4 - dobavka_x_ot_torsa;
VBC2_PUSH_CONST 47 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 89 //dx4
VBC3_PUSH_GLOBAL 72 //dobavka_x_ot_torsa
VBC1_SUB_FF
VBC1_ADD_FF
VBC1_POP
[1:667] ;ytl = s + d10 + dy0Typical;
VBC2_PUSH_CONST 48 //ytl
VBC3_PUSH_GLOBAL 83 //s
VBC3_PUSH_GLOBAL 56 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 82 //dy0Typical
VBC1_ADD_FF
VBC1_POP
[1:668] ;ztl = -gaitHeight + stepHeight / 2.0;
VBC2_PUSH_CONST 49 //ztl
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 15 //stepHeight
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_IF
VBC1_ADD_IF
VBC1_POP
VBC4_JUMP LAB4488 //if to exit
LAB4358: //if else
;else if( j == (fr2 - 1) ) {
VBC3_PUSH_GLOBAL 78 //j
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_PUSH_1 
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB4412 //if to false
;
[1:671] ;xtl += dx4 - dobavka_x_ot_torsa;
VBC2_PUSH_CONST 47 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 89 //dx4
VBC3_PUSH_GLOBAL 72 //dobavka_x_ot_torsa
VBC1_SUB_FF
VBC1_ADD_FF
VBC1_POP
[1:672] ;ytl  = s + d10 + dy0Typical * 2.0 - correctedSideLenght;
VBC2_PUSH_CONST 48 //ytl
VBC3_PUSH_GLOBAL 83 //s
VBC3_PUSH_GLOBAL 56 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 82 //dy0Typical
VBC5_PUSH_CONST 1073741824 
VBC1_MUL_FF
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 61 //correctedSideLenght
VBC1_SUB_FF
VBC1_POP
VBC4_JUMP LAB4488 //if to exit
LAB4412: //if else
;
[1:675] ;if (j == 1)
VBC3_PUSH_GLOBAL 78 //j
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB4438 //if to false
;ztl = -gaitHeight + stepHeight / 2.0;
VBC2_PUSH_CONST 49 //ztl
VBC3_PUSH_GLOBAL 14 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 15 //stepHeight
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_IF
VBC1_ADD_IF
VBC1_POP
LAB4438: //if else
[1:677] ;dx = (xtl_plan - xtl) / (fr2 - j);
VBC2_PUSH_CONST 85 //dx
VBC3_PUSH_GLOBAL 91 //xtl_plan
VBC3_PUSH_GLOBAL 47 //xtl
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 13 //fr2
VBC3_PUSH_GLOBAL 78 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:678] ;xtl += dx;
VBC2_PUSH_CONST 47 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 85 //dx
VBC1_ADD_FF
VBC1_POP
[1:679] ;ytl  = s + 64 + dy0Typical - dy * j / 2;
VBC2_PUSH_CONST 48 //ytl
VBC3_PUSH_GLOBAL 83 //s
VBC2_PUSH_CONST 64 
VBC1_ADD_FI
VBC3_PUSH_GLOBAL 82 //dy0Typical
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 86 //dy
VBC3_PUSH_GLOBAL 78 //j
VBC1_MUL_FI
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
LAB4488: //if exit
LAB4488: //if exit
[1:683] ;if (correctedRotation > 0){
VBC3_PUSH_GLOBAL 77 //correctedRotation
VBC1_PUSH_0 
VBC1_GREAT_FI
VBC4_FALSE_JUMP LAB4524 //if to false
;
[1:684] ;wr = -j * correctedRotation / (fr2 - 1);
VBC2_PUSH_CONST 45 //wr
VBC3_PUSH_GLOBAL 78 //j
VBC1_NEG
VBC3_PUSH_GLOBAL 77 //correctedRotation
VBC1_MUL_IF
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_PUSH_1 
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:685] ;wl = wr;
VBC2_PUSH_CONST 53 //wl
VBC3_PUSH_GLOBAL 45 //wr
VBC1_POP
VBC4_JUMP LAB4560 //if to exit
LAB4524: //if else
;
[1:688] ;wr = wr0 - wr0 * j / fr2;
VBC2_PUSH_CONST 45 //wr
VBC3_PUSH_GLOBAL 46 //wr0
VBC3_PUSH_GLOBAL 46 //wr0
VBC3_PUSH_GLOBAL 78 //j
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
[1:689] ;wl = wl0 - wl0 * j / fr2;
VBC2_PUSH_CONST 53 //wl
VBC3_PUSH_GLOBAL 54 //wl0
VBC3_PUSH_GLOBAL 54 //wl0
VBC3_PUSH_GLOBAL 78 //j
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 13 //fr2
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
LAB4560: //if exit
[1:691] ;xtr += dx4;
VBC2_PUSH_CONST 39 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 89 //dx4
VBC1_ADD_FF
VBC1_POP
[1:692] ;ytr += dy0Typical;
VBC2_PUSH_CONST 40 //ytr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 82 //dy0Typical
VBC1_ADD_FF
VBC1_POP
[1:695] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 1094  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB4588 //if to false
;return;
VBC1_RETURN
LAB4588: //if else
LAB4588: //for step
VBC2_PUSH_CONST 78 //j
VBC1_INC
VBC4_JUMP LAB4143 //to condition
LAB4595: //for exit
[1:708] ;
VBC1_RETURN
;walkCycle <void(,int)>
VBC2_STACK -4//local vars 4
[1:710] ;
[1:710] ;float xrOld = xr;
VBC2_PUSH_B_OFFSET -1 //xrOld
VBC3_PUSH_GLOBAL 42 //xr
VBC1_POP
[1:711] ;
[1:711] ;float yrOld = yr;
VBC2_PUSH_B_OFFSET -2 //yrOld
VBC3_PUSH_GLOBAL 43 //yr
VBC1_POP
[1:712] ;
[1:712] ;float xlOld = xl;
VBC2_PUSH_B_OFFSET -3 //xlOld
VBC3_PUSH_GLOBAL 50 //xl
VBC1_POP
[1:713] ;
[1:713] ;float ylOld = yl;
VBC2_PUSH_B_OFFSET -4 //ylOld
VBC3_PUSH_GLOBAL 51 //yl
VBC1_POP
[1:716] ;walkInit();
VBC3_PUSH_CONST 2918  //func address walkInit
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:717] ;walkPhasa1();
VBC3_PUSH_CONST 3075  //func address walkPhasa1
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:718] ;walkPhasa2();
VBC3_PUSH_CONST 3492  //func address walkPhasa2
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:719] ;if (half == 0){
VBC2_PUSH_LOCAL 2 //half
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB4655 //if to false
;
[1:720] ;walkPhasa3();
VBC3_PUSH_CONST 3288  //func address walkPhasa3
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:721] ;walkPhasa4();
VBC3_PUSH_CONST 4010  //func address walkPhasa4
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB4655: //if else
[1:725] ;xr = xrOld;
VBC2_PUSH_CONST 42 //xr
VBC2_PUSH_LOCAL -1 //xrOld
VBC1_POP
[1:726] ;yr = yrOld;
VBC2_PUSH_CONST 43 //yr
VBC2_PUSH_LOCAL -2 //yrOld
VBC1_POP
[1:727] ;xl = xlOld;
VBC2_PUSH_CONST 50 //xl
VBC2_PUSH_LOCAL -3 //xlOld
VBC1_POP
[1:728] ;yl = ylOld;
VBC2_PUSH_CONST 51 //yl
VBC2_PUSH_LOCAL -4 //ylOld
VBC1_POP
[1:732] ;
VBC1_RETURN
;mixing <void()>
[1:737] ;leftRightFactor = 100;
VBC2_PUSH_CONST 94 //leftRightFactor
VBC2_PUSH_CONST 100 
VBC1_POP
[1:738] ;frontBackFactor = 180;
VBC2_PUSH_CONST 95 //frontBackFactor
VBC3_PUSH_CONST 180 
VBC1_POP
[1:740] ;while(1) {
LAB4687: //while condition
;
[1:742] ;leftFootSideAddonMix = -svImuGyroZ * leftRightFactor >> 10;
VBC3_PUSH_CONST 1117 //leftFootSideAddonMix
VBC3_PUSH_GLOBAL 1008 //svImuGyroZ
VBC1_NEG
VBC3_PUSH_GLOBAL 94 //leftRightFactor
VBC1_MUL
VBC2_PUSH_CONST 10 
VBC1_RSHIFT
VBC1_POP
[1:743] ;rightFootSideAddonMix = svImuGyroZ * leftRightFactor >> 10;
VBC3_PUSH_CONST 1113 //rightFootSideAddonMix
VBC3_PUSH_GLOBAL 1008 //svImuGyroZ
VBC3_PUSH_GLOBAL 94 //leftRightFactor
VBC1_MUL
VBC2_PUSH_CONST 10 
VBC1_RSHIFT
VBC1_POP
[1:746] ;rightFootFrontAddonMix = leftFootFrontAddonMix = -svImuGyroX * frontBackFactor >> 10;
VBC3_PUSH_CONST 1105 //rightFootFrontAddonMix
VBC3_PUSH_CONST 1109 //leftFootFrontAddonMix
VBC3_PUSH_GLOBAL 1006 //svImuGyroX
VBC1_NEG
VBC3_PUSH_GLOBAL 95 //frontBackFactor
VBC1_MUL
VBC2_PUSH_CONST 10 
VBC1_RSHIFT
VBC1_STORE
VBC1_POP
[1:749] ;sfWaitNextFrame();
VBC1_WAIT
VBC4_JUMP LAB4687 //while forever loop
LAB4740: //while exit
[1:753] ;
VBC1_RETURN
;runTest <void()>
VBC1_STACK_DN1//local vars 1
[1:755] ;walkInitialPoseFine();
VBC3_PUSH_CONST 2692  //func address walkInitialPoseFine
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:759] ;stepType = 0;
VBC2_PUSH_CONST 69 //stepType
VBC1_PUSH_0 
VBC1_POP
[1:760] ;stepLength = stepLengthOrder/ 3.0;
VBC2_PUSH_CONST 20 //stepLength
VBC3_PUSH_GLOBAL 10 //stepLengthOrder
VBC5_PUSH_CONST 1077936128 
VBC1_DIV_IF
VBC1_POP
[1:761] ;walkCycle(0);
VBC3_PUSH_CONST 4596  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:764] ;stepType = 2;
VBC2_PUSH_CONST 69 //stepType
VBC1_PUSH_2 
VBC1_POP
[1:765] ;stepLength = stepLengthOrder * 2.0 / 3.0;
VBC2_PUSH_CONST 20 //stepLength
VBC3_PUSH_GLOBAL 10 //stepLengthOrder
VBC5_PUSH_CONST 1073741824 
VBC1_MUL_IF
VBC5_PUSH_CONST 1077936128 
VBC1_DIV_FF
VBC1_POP
[1:766] ;walkCycle(0);
VBC3_PUSH_CONST 4596  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:769] ;stepLength = stepLengthOrder * 1.0;
VBC2_PUSH_CONST 20 //stepLength
VBC3_PUSH_GLOBAL 10 //stepLengthOrder
VBC5_PUSH_CONST 1065353216 
VBC1_MUL_IF
VBC1_POP
[1:770] ;
[1:771] ;for( i = 0; i < cycle_number; i++ ){
VBC2_PUSH_B_OFFSET -1 //i
VBC1_PUSH_0 
VBC1_POP
LAB4813: //for condition
VBC2_PUSH_LOCAL -1 //i
VBC3_PUSH_GLOBAL 8 //cycle_number
VBC1_LESS
VBC4_FALSE_JUMP LAB4855 //to for exit
;
[1:772] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 954  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:773] ;walkCycle(0);
VBC3_PUSH_CONST 4596  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:774] ;if(orderFromHead == 4) break;
VBC3_PUSH_GLOBAL 4 //orderFromHead
VBC2_PUSH_CONST 4 
VBC1_EQU
VBC4_FALSE_JUMP LAB4848 //if to false
;if(orderFromHead == 4) break;
VBC4_JUMP LAB4855 //to loop exit
LAB4848: //if else
LAB4848: //for step
VBC2_PUSH_B_OFFSET -1 //i
VBC1_INC
VBC4_JUMP LAB4813 //to condition
LAB4855: //for exit
[1:778] ;stepType = 1;
VBC2_PUSH_CONST 69 //stepType
VBC1_PUSH_1 
VBC1_POP
[1:779] ;walkCycle(0);
VBC3_PUSH_CONST 4596  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:782] ;walkFinalPoseFine();
VBC3_PUSH_CONST 2858  //func address walkFinalPoseFine
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:783] ;stepLengthOrder *= -1;  
VBC2_PUSH_CONST 10 //stepLengthOrder
VBC1_PUSH_TOS
VBC1_LOAD
VBC2_PUSH_CONST -1 // -
VBC1_MUL
VBC1_POP
[1:784] ;ugol_torsa *= -1;
VBC2_PUSH_CONST 18 //ugol_torsa
VBC1_PUSH_TOS
VBC1_LOAD
VBC2_PUSH_CONST -1 // -
VBC1_MUL_FI
VBC1_POP
[1:785] ;walkInitialPoseFine();
VBC3_PUSH_CONST 2692  //func address walkInitialPoseFine
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:786] ;stepType = 0;
VBC2_PUSH_CONST 69 //stepType
VBC1_PUSH_0 
VBC1_POP
[1:787] ;stepLength = stepLengthOrder/ 3.0;
VBC2_PUSH_CONST 20 //stepLength
VBC3_PUSH_GLOBAL 10 //stepLengthOrder
VBC5_PUSH_CONST 1077936128 
VBC1_DIV_IF
VBC1_POP
[1:788] ;walkCycle(0);
VBC3_PUSH_CONST 4596  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:789] ;stepType = 2;
VBC2_PUSH_CONST 69 //stepType
VBC1_PUSH_2 
VBC1_POP
[1:790] ;stepLength = stepLengthOrder * 2.0 / 3.0;
VBC2_PUSH_CONST 20 //stepLength
VBC3_PUSH_GLOBAL 10 //stepLengthOrder
VBC5_PUSH_CONST 1073741824 
VBC1_MUL_IF
VBC5_PUSH_CONST 1077936128 
VBC1_DIV_FF
VBC1_POP
[1:791] ;walkCycle(0);
VBC3_PUSH_CONST 4596  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:792] ;stepLength = stepLengthOrder * 1.0;
VBC2_PUSH_CONST 20 //stepLength
VBC3_PUSH_GLOBAL 10 //stepLengthOrder
VBC5_PUSH_CONST 1065353216 
VBC1_MUL_IF
VBC1_POP
[1:793] ;for( i = 0; i < cycle_number; i++ ){
VBC2_PUSH_B_OFFSET -1 //i
VBC1_PUSH_0 
VBC1_POP
LAB4957: //for condition
VBC2_PUSH_LOCAL -1 //i
VBC3_PUSH_GLOBAL 8 //cycle_number
VBC1_LESS
VBC4_FALSE_JUMP LAB4985 //to for exit
;
[1:794] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 954  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:795] ;walkCycle(0);
VBC3_PUSH_CONST 4596  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB4978: //for step
VBC2_PUSH_B_OFFSET -1 //i
VBC1_INC
VBC4_JUMP LAB4957 //to condition
LAB4985: //for exit
[1:799] ;
VBC1_RETURN
;turn <void(,int)>
VBC1_STACK_DN1//local vars 1
[1:800] ;
[1:800] ;int frameCount = 4;
VBC2_PUSH_B_OFFSET -1 //frameCount
VBC2_PUSH_CONST 4 
VBC1_POP
[1:801] ;if (direction == 1){
VBC2_PUSH_LOCAL 2 //direction
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB5030 //if to false
;
[1:802] ;sfPoseGroup( 1024 , -2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 1024 
VBC3_PUSH_CONST -2000 // -
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:803] ;sfPoseGroup( 2048 , 2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 2048 
VBC3_PUSH_CONST 2000 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB5030: //if else
[1:805] ;if (direction == -1){
VBC2_PUSH_LOCAL 2 //direction
VBC2_PUSH_CONST -1 // -
VBC1_EQU
VBC4_FALSE_JUMP LAB5069 //if to false
;
[1:806] ;sfPoseGroup( 1024 , 2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 1024 
VBC3_PUSH_CONST 2000 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:807] ;sfPoseGroup( 2048 , -2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 2048 
VBC3_PUSH_CONST -2000 // -
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB5069: //if else
[1:809] ;sfPoseGroup( 1048576 , 2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_CONST 2000 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:810] ;sfPoseGroup( 2097152 , 2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_CONST 2000 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:811] ;sfWaitFrame( frameCount );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:812] ;sfPoseGroup( 1024 , 0, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 1024 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:813] ;sfPoseGroup( 2048 , 0, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 2048 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:814] ;sfPoseGroup( 1048576 , 0, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 1048576 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:815] ;sfPoseGroup( 2097152 , 0, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 2097152 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:816] ;sfWaitFrame( frameCount );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:817] ;sfWaitFrame( 6 );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_CONST 6 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:820] ;
VBC1_RETURN
;main <void()>
VBC1_STACK_DN1//local vars 1
[1:821] ;restart_flag = 0;
VBC1_PUSH_2 //restart_flag
VBC1_PUSH_0 
VBC1_POP
[1:822] ;pitStop = 0;
VBC2_PUSH_CONST 6 //pitStop
VBC1_PUSH_0 
VBC1_POP
[1:823] ;startStop = 0;
VBC2_PUSH_CONST 7 //startStop
VBC1_PUSH_0 
VBC1_POP
[1:824] ;slowWalk = 0;
VBC2_PUSH_CONST 19 //slowWalk
VBC1_PUSH_0 
VBC1_POP
[1:825] ;setup();
VBC2_PUSH_CONST 70  //func address setup
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:826] ;sideLength = 0;
VBC2_PUSH_CONST 21 //sideLength
VBC1_PUSH_0 
VBC1_POP_CF
[1:827] ;rotation = 0;
VBC2_PUSH_CONST 22 //rotation
VBC1_PUSH_0 
VBC1_POP_CF
[1:832] ;
[1:832] ;int frameCount = 80;
VBC2_PUSH_B_OFFSET -1 //frameCount
VBC2_PUSH_CONST 80 
VBC1_POP
[1:833] ;sfPoseGroup(1056964607 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 1056964607 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:834] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:837] ;sfQuaternionToEulerImu();
VBC5_PUSH_CONST 303 | 0x80000000 //import func index sfQuaternionToEulerImu
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:838] ;forwardDirection = svEulerYaw;
VBC2_PUSH_CONST 76 //forwardDirection
VBC3_PUSH_GLOBAL 1025 //svEulerYaw
VBC1_POP
[1:841] ;sfCreateTask( mixing, 20 );
VBC5_PUSH_CONST 2 | 0x80000000 //import func index sfCreateTask
VBC3_PUSH_CONST 4676  //func address mixing
VBC2_PUSH_CONST 20 
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
[1:842] ;while (pitStop == 0) sfWaitFrame(1); 
LAB5253: //while condition
VBC3_PUSH_GLOBAL 6 //pitStop
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB5271 //while to exit
;while (pitStop == 0) sfWaitFrame(1); 
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC1_PUSH_1 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
VBC4_JUMP LAB5253 //while forever loop
LAB5271: //while exit
[1:844] ;svButtonRight = -1 ;
VBC3_PUSH_CONST 1022 //svButtonRight
VBC2_PUSH_CONST -1 // -
VBC1_POP
[1:845] ;svButtonLeft = -1 ;
VBC3_PUSH_CONST 1021 //svButtonLeft
VBC2_PUSH_CONST -1 // -
VBC1_POP
[1:846] ;sfBip(1, 1);
VBC5_PUSH_CONST 43 | 0x80000000 //import func index sfBip
VBC1_PUSH_1 
VBC1_PUSH_1 
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
[1:847] ;while (svButtonPress != 2 ) sfWaitFrame(1); 
LAB5292: //while condition
VBC3_PUSH_GLOBAL 1023 //svButtonPress
VBC1_PUSH_2 
VBC1_NOT_EQU
VBC4_FALSE_JUMP LAB5310 //while to exit
;while (svButtonPress != 2 ) sfWaitFrame(1); 
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC1_PUSH_1 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
VBC4_JUMP LAB5292 //while forever loop
LAB5310: //while exit
[1:848] ;svButtonRight = 66 ;
VBC3_PUSH_CONST 1022 //svButtonRight
VBC2_PUSH_CONST 66 
VBC1_POP
[1:849] ;svButtonLeft = 69 ;
VBC3_PUSH_CONST 1021 //svButtonLeft
VBC2_PUSH_CONST 69 
VBC1_POP
[1:850] ;restart_flag = 1;
VBC1_PUSH_2 //restart_flag
VBC1_PUSH_1 
VBC1_POP
[1:852] ;runTest(); 
VBC3_PUSH_CONST 4741  //func address runTest
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:856] ;
VBC1_RETURN
//Init table
//Variables
svFrameCount : 1
svImuAccX : 1000
svImuAccY : 1001
svImuAccZ : 1002
svImuAccRawX : 1003
svImuAccRawY : 1004
svImuAccRawZ : 1005
svImuGyroX : 1006
svImuGyroY : 1007
svImuGyroZ : 1008
svImuGyroRawX : 1009
svImuGyroRawY : 1010
svImuGyroRawZ : 1011
svImuQuaterX : 1012
svImuQuaterY : 1013
svImuQuaterZ : 1014
svImuQuaterW : 1015
svImuQuaterAcc : 1016
svImuAccSlowX : 1017
svImuAccSlowY : 1018
svImuAccSlowZ : 1019
svAdc : 1020
svButtonLeft : 1021
svButtonRight : 1022
svButtonPress : 1023
svHeadControlMask : 1024
svEulerYaw F: 1025
svEulerPitch F: 1026
svEulerRoll F: 1027
svRemoteStatus : 1190
svRemoteButton : 1191
svRemoteLeftJoystick : 1192
svRemoteLeftJoystickX : 1193
svRemoteLeftJoystickY : 1194
svRemoteRightJoystick : 1195
svRemoteRightJoystickX : 1196
svRemoteRightJoystickY : 1197
svHumoModelDistPelvic : 1204
svHumoModelLengthPelvicHip : 1205
svHumoModelLengthHipHip : 1206
svHumoModelLengthHipKnee : 1207
svHumoModelLengthKneeFoot : 1208
svHumoModelLengthFootFoot : 1209
svHumoModelDistFootFloor : 1210
svHumoModelFootLength : 1211
svHumoModelFootWidth : 1212
svHumoModelFootCenterBack : 1213
svHumoModelFootCenterInner : 1214
svHumoModelAngPelvic : 1198
svHumoModelAngHipSide : 1200
svHumoModelAngHip : 1199
svHumoModelAngKnee : 1201
svHumoModelAngFoot : 1202
svHumoModelAngFootSide : 1203
svIkA5 F: 1215
svIkB5 F: 1216
svIkC5 F: 1217
svIkA6 F: 1218
svIkA7 F: 1219
svIkA8 F: 1220
svIkA9 F: 1221
svIkA10 F: 1222
svIkB10 F: 1223
svIkC10 F: 1224
svIkLimA5min F: 1225
svIkLimA5max F: 1226
svIkLimA6min F: 1227
svIkLimA6max F: 1228
svIkLimA7min F: 1229
svIkLimA7max F: 1230
svIkLimA8min F: 1231
svIkLimA8max F: 1232
svIkLimA9min F: 1233
svIkLimA9max F: 1234
svIkLimA10min F: 1235
svIkLimA10max F: 1236
svIkOutPresent : 1237
svIkEncA5 : 1238
svIkEncA6 : 1239
svIkEncA7 : 1240
svIkEncA8 : 1241
svIkEncA9 : 1242
svIkEncA10 : 1243
headRotateTarget : 1030
headRotateCurrent : 1031
headRotatePwm : 1032
headRotateAddonMix : 1033
torsoRotateTarget : 1034
torsoRotateCurrent : 1035
torsoRotatePwm : 1036
torsoRotateAddonMix : 1037
rightClavicleTarget : 1038
rightClavicleCurrent : 1039
rightClaviclePwm : 1040
rightClavicleAddonMix : 1041
leftClavicleTarget : 1042
leftClavicleCurrent : 1043
leftClaviclePwm : 1044
leftClavicleAddonMix : 1045
rightShoulderTarget : 1046
rightShoulderCurrent : 1047
rightShoulderPwm : 1048
rightShoulderAddonMix : 1049
leftShoulderTarget : 1050
leftShoulderCurrent : 1051
leftShoulderPwm : 1052
leftShoulderAddonMix : 1053
rightElbowSideTarget : 1054
rightElbowSideCurrent : 1055
rightElbowSidePwm : 1056
rightElbowSideAddonMix : 1057
leftElbowSideTarget : 1058
leftElbowSideCurrent : 1059
leftElbowSidePwm : 1060
leftElbowSideAddonMix : 1061
rightElbowTarget : 1062
rightElbowCurrent : 1063
rightElbowPwm : 1064
rightElbowAddonMix : 1065
leftElbowTarget : 1066
leftElbowCurrent : 1067
leftElbowPwm : 1068
leftElbowAddonMix : 1069
rightPelvicTarget : 1070
rightPelvicCurrent : 1071
rightPelvicPwm : 1072
rightPelvicAddonMix : 1073
leftPelvicTarget : 1074
leftPelvicCurrent : 1075
leftPelvicPwm : 1076
leftPelvicAddonMix : 1077
rightHipSideTarget : 1078
rightHipSideCurrent : 1079
rightHipSidePwm : 1080
rightHipSideAddonMix : 1081
leftHipSideTarget : 1082
leftHipSideCurrent : 1083
leftHipSidePwm : 1084
leftHipSideAddonMix : 1085
rightHipTarget : 1086
rightHipCurrent : 1087
rightHipPwm : 1088
rightHipAddonMix : 1089
leftHipTarget : 1090
leftHipCurrent : 1091
leftHipPwm : 1092
leftHipAddonMix : 1093
rightKneeTarget : 1094
rightKneeCurrent : 1095
rightKneePwm : 1096
rightKneeAddonMix : 1097
leftKneeTarget : 1098
leftKneeCurrent : 1099
leftKneePwm : 1100
leftKneeAddonMix : 1101
rightFootFrontTarget : 1102
rightFootFrontCurrent : 1103
rightFootFrontPwm : 1104
rightFootFrontAddonMix : 1105
leftFootFrontTarget : 1106
leftFootFrontCurrent : 1107
leftFootFrontPwm : 1108
leftFootFrontAddonMix : 1109
rightFootSideTarget : 1110
rightFootSideCurrent : 1111
rightFootSidePwm : 1112
rightFootSideAddonMix : 1113
leftFootSideTarget : 1114
leftFootSideCurrent : 1115
leftFootSidePwm : 1116
leftFootSideAddonMix : 1117
rightHandTarget : 1118
rightHandCurrent : 1119
rightHandPwm : 1120
rightHandAddonMix : 1121
leftHandTarget : 1122
leftHandCurrent : 1123
leftHandPwm : 1124
leftHandAddonMix : 1125
headTiltTarget : 1130
headTiltCurrent : 1131
headTiltPwm : 1132
headTiltAddonMix : 1133
rightKneeBotTarget : 1134
rightKneeBotCurrent : 1135
rightKneeBotPwm : 1136
rightKneeBotAddonMix : 1137
leftKneeBotTarget : 1138
leftKneeBotCurrent : 1139
leftKneeBotPwm : 1140
leftKneeBotAddonMix : 1141
rightClawTarget : 1142
rightClawCurrent : 1143
rightClawPwm : 1144
rightClawAddonMix : 1145
leftClawTarget : 1146
leftClawCurrent : 1147
leftClawPwm : 1148
leftClawAddonMix : 1149
restart_flag : 2
timeStep : 3
orderFromHead : 4
rotationFromHead F: 5
pitStop : 6
startStop : 7
cycle_number : 8
hipTilt : 9
stepLengthOrder : 10
fps : 11
fr1 : 12
fr2 : 13
gaitHeight : 14
stepHeight : 15
bodyTiltAtWalk F: 16
solyLandingSkew F: 17
ugol_torsa F: 18
slowWalk : 19
stepLength F: 20
sideLength F: 21
rotation F: 22
selfMotionShiftCorrectionX F: 23
selfMotionShiftCorrectionY F: 24
selfFirstStepYield F: 25
selfCycleStepYield F: 26
selfSideStepRightYield F: 27
selfSideStepLeftYield F: 28
selfFirstLegIsRightLeg : 29
motion_to_right : 30
side_motion F: 31
selfInitPoses : 32
selfExitFlag : 33
selfFallingFlag : 34
selfNeckPan : 35
rotationYieldRight F: 36
rotationYieldLeft F: 37
framestep : 38
xtr F: 39
ytr F: 40
ztr F: 41
xr F: 42
yr F: 43
zr F: 44
wr F: 45
wr0 F: 46
xtl F: 47
ytl F: 48
ztl F: 49
xl F: 50
yl F: 51
zl F: 52
wl F: 53
wl0 F: 54
e10 F: 55
d10 F: 56
amplitude F: 57
alpha01 F: 58
correctedStepLenght F: 59
correctedStepLenghtHalf F: 60
correctedSideLenght F: 61
correctedSideLenghtHalf F: 62
ztr0 F: 63
ztl0 F: 64
stepZtr F: 65
stepZtl F: 66
stepYtr F: 67
stepYtl F: 68
stepType : 69
flag : 70
flag_event : 71
dobavka_x_ot_torsa F: 72
tors_angle F: 73
reducer F: 74
torsoAdd : 75
forwardDirection F: 76
correctedRotation F: 77
j : 78
xtl0 F: 79
xtr0 F: 80
dx0Typical F: 81
dy0Typical F: 82
s F: 83
fase_offset F: 84
dx F: 85
dy F: 86
dx1 F: 87
dx2 F: 88
dx4 F: 89
stepRotation F: 90
xtl_plan F: 91
xtr_plan F: 92
dx0 F: 93
leftRightFactor : 94
frontBackFactor : 95
