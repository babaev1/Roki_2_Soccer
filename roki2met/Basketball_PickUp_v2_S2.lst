//*****************************************************************
// Script Compiler V9.06
// Author: Sibilev A.S.
// Web: www.rc.saliLab.com
//*****************************************************************

//==================
// types list
int int
*int *int
float float
*float *float
cstring cstring
*cstring *cstring
void void
*void *void
fail type undef
cblock cblock
*cblock *cblock
cwblock cwblock
*cwblock *cwblock
empty type <int()>
empty type <void()>
*empty type *<void()>
empty type <int(,*<void()>,int)>
empty type <void(,cstring,int,int,int)>
empty type <void(,cstring)>
empty type <void(,int)>
empty type <int(,int)>
empty type <int(,cstring)>
empty type <int(,int,int)>
empty type <int(,int,int,int)>
empty type <void(,int,int)>
empty type <void(,int,int,int)>
empty type <void(,int,int,int,int)>
empty type <void(,int,int,int,*cblock)>
empty type <void(,int,int,int,*cwblock)>
empty type <void(,*int)>
empty type <void(,*int,*int)>
empty type <void(,*int,*int,*int)>
empty type <void(,*int,*int,*int,*int)>
empty type <int(,int,int,*int)>
empty type <int(,int,int,*cblock,int)>
empty type <int(,int,int,int,int)>
empty type <void(,float,float,float,float,float,float,float)>
empty type <float(,float)>
empty type <void(,float,float,float,float)>
empty type <float(,float,float)>
empty type <float(,float,*int)>
empty type <float(,float,int)>
empty type <float(,float,*float)>
class SfVector3 {
members:
 float 0:x
 float 1:y
 float 2:z
class SfMatrix3x3 {
members:
 []float 0:m
float[9] []float
class SfMatrix4x4 {
members:
 []float 0:m
*SfMatrix3x3 *:SfMatrix3x3
empty type <void(,*:SfMatrix3x3,float,float,float,float)>
empty type <void(,*:SfMatrix3x3)>
*SfVector3 *:SfVector3
empty type <void(,*:SfVector3)>
empty type <void(,*:SfVector3,float,float,float)>
empty type <void(,*:SfVector3,*:SfVector3,*:SfVector3)>
empty type <float(,*:SfVector3,float,float,float)>
empty type <float(,*:SfVector3,*:SfVector3)>
empty type <void(,*:SfVector3,*:SfVector3,float)>
empty type <void(,*:SfMatrix3x3,float,float,float,float,float,float,float,float,float)>
empty type <void(,*:SfMatrix3x3,float)>
empty type <void(,*:SfMatrix3x3,*:SfMatrix3x3)>
empty type <void(,*:SfMatrix3x3,*:SfMatrix3x3,*:SfMatrix3x3)>
empty type <void(,*:SfMatrix3x3,*:SfMatrix3x3,float)>
empty type <void(,*:SfVector3,*:SfMatrix3x3,*:SfVector3)>
empty type <void(,*:SfVector3,*:SfVector3,*:SfMatrix3x3)>

//==================
// global variables
int 1:svFrameCount
int 2560:svImuAccX
int 2561:svImuAccY
int 2562:svImuAccZ
int 2563:svImuAccRawX
int 2564:svImuAccRawY
int 2565:svImuAccRawZ
int 2566:svImuGyroX
int 2567:svImuGyroY
int 2568:svImuGyroZ
int 2569:svImuGyroRawX
int 2570:svImuGyroRawY
int 2571:svImuGyroRawZ
int 2572:svImuQuaterX
int 2573:svImuQuaterY
int 2574:svImuQuaterZ
int 2575:svImuQuaterW
int 2576:svImuQuaterAcc
int 2577:svImuAccSlowX
int 2578:svImuAccSlowY
int 2579:svImuAccSlowZ
int 2580:svAdc
int 2581:svButtonLeft
int 2582:svButtonRight
int 2583:svButtonPress
int 2584:svHeadControlMask
int 2585:svDefFrameCount
float 2600:svEulerYaw
float 2601:svEulerPitch
float 2602:svEulerRoll
int 3250:svRemoteStatus
int 3251:svRemoteButton
int 3252:svRemoteLeftJoystick
int 3253:svRemoteLeftJoystickX
int 3254:svRemoteLeftJoystickY
int 3255:svRemoteRightJoystick
int 3256:svRemoteRightJoystickX
int 3257:svRemoteRightJoystickY
int 3264:svHumoModelDistPelvic
int 3265:svHumoModelLengthPelvicHip
int 3266:svHumoModelLengthHipHip
int 3267:svHumoModelLengthHipKnee
int 3268:svHumoModelLengthKneeFoot
int 3269:svHumoModelLengthFootFoot
int 3270:svHumoModelDistFootFloor
int 3271:svHumoModelFootLength
int 3272:svHumoModelFootWidth
int 3273:svHumoModelFootCenterBack
int 3274:svHumoModelFootCenterInner
int 3258:svHumoModelAngPelvic
int 3260:svHumoModelAngHipSide
int 3259:svHumoModelAngHip
int 3261:svHumoModelAngKnee
int 3262:svHumoModelAngFoot
int 3263:svHumoModelAngFootSide
float 3275:svIkA5
float 3276:svIkB5
float 3277:svIkC5
float 3278:svIkA6
float 3279:svIkA7
float 3280:svIkA8
float 3281:svIkA9
float 3282:svIkA10
float 3283:svIkB10
float 3284:svIkC10
float 3285:svIkLimA5min
float 3286:svIkLimA5max
float 3287:svIkLimA6min
float 3288:svIkLimA6max
float 3289:svIkLimA7min
float 3290:svIkLimA7max
float 3291:svIkLimA8min
float 3292:svIkLimA8max
float 3293:svIkLimA9min
float 3294:svIkLimA9max
float 3295:svIkLimA10min
float 3296:svIkLimA10max
int 3297:svIkOutPresent
int 3298:svIkEncA5
int 3299:svIkEncA6
int 3300:svIkEncA7
int 3301:svIkEncA8
int 3302:svIkEncA9
int 3303:svIkEncA10
int 2610:headRotateTarget
int 2611:headRotateCurrent
int 2612:headRotatePwm
int 2613:headRotateVelo
int 2615:headRotateFlags
int 2617:headRotateAddonMix
int 2626:torsoRotateTarget
int 2627:torsoRotateCurrent
int 2628:torsoRotatePwm
int 2629:torsoRotateVelo
int 2631:torsoRotateFlags
int 2633:torsoRotateAddonMix
int 2642:rightClavicleTarget
int 2643:rightClavicleCurrent
int 2644:rightClaviclePwm
int 2645:rightClavicleVelo
int 2647:rightClavicleFlags
int 2649:rightClavicleAddonMix
int 2658:leftClavicleTarget
int 2659:leftClavicleCurrent
int 2660:leftClaviclePwm
int 2661:leftClavicleVelo
int 2663:leftClavicleFlags
int 2665:leftClavicleAddonMix
int 2674:rightShoulderTarget
int 2675:rightShoulderCurrent
int 2676:rightShoulderPwm
int 2677:rightShoulderVelo
int 2679:rightShoulderFlags
int 2681:rightShoulderAddonMix
int 2690:leftShoulderTarget
int 2691:leftShoulderCurrent
int 2692:leftShoulderPwm
int 2693:leftShoulderVelo
int 2695:leftShoulderFlags
int 2697:leftShoulderAddonMix
int 2706:rightElbowSideTarget
int 2707:rightElbowSideCurrent
int 2708:rightElbowSidePwm
int 2709:rightElbowSideVelo
int 2711:rightElbowSideFlags
int 2713:rightElbowSideAddonMix
int 2722:leftElbowSideTarget
int 2723:leftElbowSideCurrent
int 2724:leftElbowSidePwm
int 2725:leftElbowSideVelo
int 2727:leftElbowSideFlags
int 2729:leftElbowSideAddonMix
int 2738:rightElbowTarget
int 2739:rightElbowCurrent
int 2740:rightElbowPwm
int 2741:rightElbowVelo
int 2743:rightElbowFlags
int 2745:rightElbowAddonMix
int 2754:leftElbowTarget
int 2755:leftElbowCurrent
int 2756:leftElbowPwm
int 2757:leftElbowVelo
int 2759:leftElbowFlags
int 2761:leftElbowAddonMix
int 2770:rightPelvicTarget
int 2771:rightPelvicCurrent
int 2772:rightPelvicPwm
int 2773:rightPelvicVelo
int 2775:rightPelvicFlags
int 2777:rightPelvicAddonMix
int 2786:leftPelvicTarget
int 2787:leftPelvicCurrent
int 2788:leftPelvicPwm
int 2789:leftPelvicVelo
int 2791:leftPelvicFlags
int 2793:leftPelvicAddonMix
int 2802:rightHipSideTarget
int 2803:rightHipSideCurrent
int 2804:rightHipSidePwm
int 2805:rightHipSideVelo
int 2807:rightHipSideFlags
int 2809:rightHipSideAddonMix
int 2818:leftHipSideTarget
int 2819:leftHipSideCurrent
int 2820:leftHipSidePwm
int 2821:leftHipSideVelo
int 2823:leftHipSideFlags
int 2825:leftHipSideAddonMix
int 2834:rightHipTarget
int 2835:rightHipCurrent
int 2836:rightHipPwm
int 2837:rightHipVelo
int 2839:rightHipFlags
int 2841:rightHipAddonMix
int 2850:leftHipTarget
int 2851:leftHipCurrent
int 2852:leftHipPwm
int 2853:leftHipVelo
int 2855:leftHipFlags
int 2857:leftHipAddonMix
int 2866:rightKneeTarget
int 2867:rightKneeCurrent
int 2868:rightKneePwm
int 2869:rightKneeVelo
int 2871:rightKneeFlags
int 2873:rightKneeAddonMix
int 2882:leftKneeTarget
int 2883:leftKneeCurrent
int 2884:leftKneePwm
int 2885:leftKneeVelo
int 2887:leftKneeFlags
int 2889:leftKneeAddonMix
int 2898:rightFootFrontTarget
int 2899:rightFootFrontCurrent
int 2900:rightFootFrontPwm
int 2901:rightFootFrontVelo
int 2903:rightFootFrontFlags
int 2905:rightFootFrontAddonMix
int 2914:leftFootFrontTarget
int 2915:leftFootFrontCurrent
int 2916:leftFootFrontPwm
int 2917:leftFootFrontVelo
int 2919:leftFootFrontFlags
int 2921:leftFootFrontAddonMix
int 2930:rightFootSideTarget
int 2931:rightFootSideCurrent
int 2932:rightFootSidePwm
int 2933:rightFootSideVelo
int 2935:rightFootSideFlags
int 2937:rightFootSideAddonMix
int 2946:leftFootSideTarget
int 2947:leftFootSideCurrent
int 2948:leftFootSidePwm
int 2949:leftFootSideVelo
int 2951:leftFootSideFlags
int 2953:leftFootSideAddonMix
int 2962:rightHandTarget
int 2963:rightHandCurrent
int 2964:rightHandPwm
int 2965:rightHandVelo
int 2967:rightHandFlags
int 2969:rightHandAddonMix
int 2978:leftHandTarget
int 2979:leftHandCurrent
int 2980:leftHandPwm
int 2981:leftHandVelo
int 2983:leftHandFlags
int 2985:leftHandAddonMix
int 3010:headTiltTarget
int 3011:headTiltCurrent
int 3012:headTiltPwm
int 3013:headTiltVelo
int 3015:headTiltFlags
int 3017:headTiltAddonMix
int 3026:rightKneeBotTarget
int 3027:rightKneeBotCurrent
int 3028:rightKneeBotPwm
int 3029:rightKneeBotVelo
int 3031:rightKneeBotFlags
int 3033:rightKneeBotAddonMix
int 3042:leftKneeBotTarget
int 3043:leftKneeBotCurrent
int 3044:leftKneeBotPwm
int 3045:leftKneeBotVelo
int 3047:leftKneeBotFlags
int 3049:leftKneeBotAddonMix
int 3058:rightClawTarget
int 3059:rightClawCurrent
int 3060:rightClawPwm
int 3061:rightClawVelo
int 3063:rightClawFlags
int 3065:rightClawAddonMix
int 3074:leftClawTarget
int 3075:leftClawCurrent
int 3076:leftClawPwm
int 3077:leftClawVelo
int 3079:leftClawFlags
int 3081:leftClawAddonMix
int 2:pitStop
int 3:clamping
int 4:steps
int 5:frameCount
int 6:rotation
float 7:direction

//==================
//  functions
function declare int sfVpuVersion(
) end function declare
function declare int sfCreateTask(
 *<void()> 3:fun
 int 2:stackSize
) end function declare
function declare void sfLog(
 cstring 5:title
 int 4:p1
 int 3:p2
 int 2:p3
) end function declare
function declare void sfLogOpen(
 cstring 2:fname
) end function declare
function declare void sfLogClose(
) end function declare
function declare void sfWaitFrameOut(
 int 2:frame
) end function declare
function declare int sfIsFrameOut(
 int 2:frame
) end function declare
function declare void sfWaitNextFrame(
) end function declare
function declare int sfSlotIndex(
 cstring 2:str
) end function declare
function declare int sfSoundIndex(
 cstring 2:str
) end function declare
function declare int sfAbs(
 int 2:val
) end function declare
function declare int sfIMin(
 int 3:v1
 int 2:v2
) end function declare
function declare int sfIMax(
 int 3:v1
 int 2:v2
) end function declare
function declare int sfUMin(
 int 3:v1
 int 2:v2
) end function declare
function declare int sfUMax(
 int 3:v1
 int 2:v2
) end function declare
function declare int sfILimit(
 int 4:val
 int 3:minVal
 int 2:maxVal
) end function declare
function declare void sfStop(
) end function declare
function declare void sfStartSlot(
 int 2:slotIndex
) end function declare
function declare void sfBip(
 int 3:bipCount
 int 2:seriesCount
) end function declare
function declare void sfWriteFlash(
) end function declare
function declare void sfSoundPlay(
 int 2:soundIndex
) end function declare
function declare int sfSoundIsPlay(
) end function declare
function declare void sfFreeGroup(
 int 2:unitMask
) end function declare
function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
function declare void sfPoseGroupDelay(
 int 5:unitMask
 int 4:angle
 int 3:frameCount
 int 2:frameDelay
) end function declare
function declare void sfPoseCorrect(
 int 3:unitMask
 int 2:angle
) end function declare
function declare void sfQueueGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
function declare void sfPoseIdx(
 int 4:idx
 int 3:angle
 int 2:frameCount
) end function declare
function declare void sfPoseGroupLin(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
function declare void sfStrainGroup(
 int 2:unitMask
) end function declare
function declare void sfPlaySamples(
 int 5:unitMask
 int 4:from
 int 3:frameCount
 *cblock 2:samples
) end function declare
function declare void sfPlayWSamples(
 int 5:unitMask
 int 4:from
 int 3:frameCount
 *cwblock 2:samples
) end function declare
function declare void sfAccumSetup1(
 *int 2:ch0
) end function declare
function declare void sfAccumSetup2(
 *int 3:ch0
 *int 2:ch1
) end function declare
function declare void sfAccumSetup3(
 *int 4:ch0
 *int 3:ch1
 *int 2:ch2
) end function declare
function declare void sfAccumSetup4(
 *int 5:ch0
 *int 4:ch1
 *int 3:ch2
 *int 2:ch3
) end function declare
function declare void sfAccumTrigger(
) end function declare
function declare void sfAccumReset(
) end function declare
function declare int sfUnitParamQueryRead(
 int 3:devId
 int 2:paramIndex
) end function declare
function declare int sfUnitParamQueryWrite(
 int 4:devId
 int 3:paramIndex
 int 2:paramValue
) end function declare
function declare int sfUnitParamStatusRead(
 int 4:devId
 int 3:paramIndex
 *int 2:paramValue
) end function declare
function declare int sfMathAcos(
 int 3:numerator
 int 2:denumerator
) end function declare
function declare int sfMathSqrti(
 int 2:v
) end function declare
function declare int sfMathAngleOfTriangle(
 int 4:sideA
 int 3:sideB
 int 2:sideC
) end function declare
function declare int sfMathAngleOfKnee(
 int 4:hip
 int 3:shin
 int 2:height
) end function declare
function declare int sfMathCathetOfSquareTriangle(
 int 3:cathet
 int 2:hypotenuse
) end function declare
function declare int sfMathHypotenuseOfSquareTriangle(
 int 3:cathet1
 int 2:cathet2
) end function declare
function declare int sfMathTableSin(
 int 3:index
 int 2:value
) end function declare
function declare void sfHumoModelSetup(
) end function declare
function declare void sfHumoModelFootAtFloor(
 int 4:front
 int 3:side
 int 2:height
) end function declare
function declare void sfHumoModelFootPush(
 int 4:back
 int 3:side
 int 2:height
) end function declare
function declare int sfIndexOfMask(
 int 2:unitMask
) end function declare
function declare int sfQueueIdxAppend(
 int 4:unitIndex
 int 3:val
 int 2:frameCount
) end function declare
function declare int sfQueueIdxOffsets(
 int 5:unitIndex
 int 4:from
 *cblock 3:offsets
 int 2:offsetCount
) end function declare
function declare int sfQueueIdxSinMove(
 int 5:unitIndex
 int 4:from
 int 3:to
 int 2:frameCount
) end function declare
function declare int sfQueueIdxLast(
 int 2:unitIndex
) end function declare
function declare int sfQueueIdxCount(
 int 2:unitIndex
) end function declare
function declare int sfQueueMax(
) end function declare
function declare void sfIkSetup(
) end function declare
function declare void sfIkAngle(
 float 8:xt
 float 7:yt
 float 6:zt
 float 5:x
 float 4:y
 float 3:z
 float 2:w
) end function declare
function declare float sfMathCos(
 float 2:r
) end function declare
function declare float sfMathSin(
 float 2:r
) end function declare
function declare void sfQuaternionToEuler(
 float 5:x
 float 4:y
 float 3:z
 float 2:w
) end function declare
function declare void sfQuaternionToEulerImu(
) end function declare
function declare float sfFMathACos(
 float 2:v
) end function declare
function declare float sfFMathASin(
 float 2:v
) end function declare
function declare float sfFMathATan(
 float 2:v
) end function declare
function declare float sfFMathATan2(
 float 3:y
 float 2:x
) end function declare
function declare float sfFMathCos(
 float 2:r
) end function declare
function declare float sfFMathSin(
 float 2:r
) end function declare
function declare float sfFMathTan(
 float 2:r
) end function declare
function declare float sfFMathCosh(
 float 2:v
) end function declare
function declare float sfFMathSinh(
 float 2:v
) end function declare
function declare float sfFMathTanh(
 float 2:v
) end function declare
function declare float sfFMathExp(
 float 2:v
) end function declare
function declare float sfFMathFrExp(
 float 3:v
 *int 2:num
) end function declare
function declare float sfFMathLdExp(
 float 3:num
 int 2:exp
) end function declare
function declare float sfFMathLog(
 float 2:v
) end function declare
function declare float sfFMathLog10(
 float 2:v
) end function declare
function declare float sfFMathModf(
 float 3:num
 *float 2:ptr
) end function declare
function declare float sfFMathPow(
 float 3:base
 float 2:exp
) end function declare
function declare float sfFMathSqrt(
 float 2:v
) end function declare
function declare float sfFMathCeil(
 float 2:v
) end function declare
function declare float sfFMathFAbs(
 float 2:v
) end function declare
function declare float sfFMathFloor(
 float 2:v
) end function declare
function declare float sfFMathFMod(
 float 3:x
 float 2:y
) end function declare
function declare void sfQuaternionToMatrix(
 *:SfMatrix3x3 6:mat
 float 5:qx
 float 4:qy
 float 3:qz
 float 2:qw
) end function declare
function declare void sfQuaternionToMatrixImu(
 *:SfMatrix3x3 2:mat
) end function declare
function declare void sfGravityVector(
 *:SfVector3 2:vec
) end function declare
function declare void sfVec3Set(
 *:SfVector3 5:vec
 float 4:x
 float 3:y
 float 2:z
) end function declare
function declare void sfVec3Sum(
 *:SfVector3 4:destVec
 *:SfVector3 3:srcVec1
 *:SfVector3 2:srcVec2
) end function declare
function declare void sfVec3Diff(
 *:SfVector3 4:destVec
 *:SfVector3 3:srcVec1
 *:SfVector3 2:srcVec2
) end function declare
function declare float sfVec3MulRowColCx(
 *:SfVector3 5:row
 float 4:c0
 float 3:c1
 float 2:c2
) end function declare
function declare float sfVec3MulRowCol(
 *:SfVector3 3:row
 *:SfVector3 2:col
) end function declare
function declare void sfVec3ScSum(
 *:SfVector3 4:destVec
 *:SfVector3 3:srcVec
 float 2:scalar
) end function declare
function declare void sfVec3ScDiff(
 *:SfVector3 4:destVec
 *:SfVector3 3:srcVec
 float 2:scalar
) end function declare
function declare void sfVec3ScMul(
 *:SfVector3 4:destVec
 *:SfVector3 3:srcVec
 float 2:scalar
) end function declare
function declare void sfVec3ScDiv(
 *:SfVector3 4:destVec
 *:SfVector3 3:srcVec
 float 2:scalar
) end function declare
function declare void sfMat3x3Set(
 *:SfMatrix3x3 11:destMat
 float 10:m00
 float 9:m01
 float 8:m02
 float 7:m10
 float 6:m11
 float 5:m12
 float 4:m20
 float 3:m21
 float 2:m22
) end function declare
function declare void sfMat3x3SetAll(
 *:SfMatrix3x3 3:destMat
 float 2:val
) end function declare
function declare void sfMat3x3SetDiag(
 *:SfMatrix3x3 3:destMat
 float 2:val
) end function declare
function declare void sfMat3x3Copy(
 *:SfMatrix3x3 3:destMat
 *:SfMatrix3x3 2:srcMat
) end function declare
function declare void sfMat3x3Transpose(
 *:SfMatrix3x3 3:destMat
 *:SfMatrix3x3 2:srcMat
) end function declare
function declare void sfMat3x3Mul(
 *:SfMatrix3x3 4:destMat
 *:SfMatrix3x3 3:srcMat1
 *:SfMatrix3x3 2:srcMat2
) end function declare
function declare void sfMat3x3ScMul(
 *:SfMatrix3x3 4:destMat
 *:SfMatrix3x3 3:srcMat
 float 2:scalar
) end function declare
function declare void sfMat3x3MulCol(
 *:SfVector3 4:destVec
 *:SfMatrix3x3 3:srcMat
 *:SfVector3 2:colVec
) end function declare
function declare void sfMat3x3RowMul(
 *:SfVector3 4:destVec
 *:SfVector3 3:rowVec
 *:SfMatrix3x3 2:srcMat
) end function declare
function declare void sfWaitFrame(
 int 2:frame
) end function declare
function declare int sfUnitParamRead(
 int 4:devId
 int 3:paramIndex
 *int 2:paramValue
) end function declare
function declare void page0(
) end function declare
function declare void page1(
) end function declare
function declare void page2(
) end function declare
function declare void page3(
) end function declare
function declare void page3_0(
) end function declare
function declare void page3_1(
) end function declare
function declare void page4(
) end function declare
function declare void page5(
) end function declare
function declare void page6(
) end function declare
function declare void page7(
) end function declare
function declare void page8(
) end function declare
function declare void page9(
) end function declare
function declare void page10(
) end function declare
function declare void page11(
) end function declare
function declare void page12(
) end function declare
function declare void page13(
) end function declare
function declare void shiftRight(
) end function declare
function declare void main(
) end function declare

//==================
//  functions bodies
function declare int sfVpuVersion(
) end function declare
{
}



function declare int sfCreateTask(
 *<void()> 3:fun
 int 2:stackSize
) end function declare
{
}



function declare void sfLog(
 cstring 5:title
 int 4:p1
 int 3:p2
 int 2:p3
) end function declare
{
}



function declare void sfLogOpen(
 cstring 2:fname
) end function declare
{
}



function declare void sfLogClose(
) end function declare
{
}



function declare void sfWaitFrameOut(
 int 2:frame
) end function declare
{
}



function declare int sfIsFrameOut(
 int 2:frame
) end function declare
{
}



function declare void sfWaitNextFrame(
) end function declare
{
}



function declare int sfSlotIndex(
 cstring 2:str
) end function declare
{
}



function declare int sfSoundIndex(
 cstring 2:str
) end function declare
{
}



function declare int sfAbs(
 int 2:val
) end function declare
{
}



function declare int sfIMin(
 int 3:v1
 int 2:v2
) end function declare
{
}



function declare int sfIMax(
 int 3:v1
 int 2:v2
) end function declare
{
}



function declare int sfUMin(
 int 3:v1
 int 2:v2
) end function declare
{
}



function declare int sfUMax(
 int 3:v1
 int 2:v2
) end function declare
{
}



function declare int sfILimit(
 int 4:val
 int 3:minVal
 int 2:maxVal
) end function declare
{
}



function declare void sfStop(
) end function declare
{
}



function declare void sfStartSlot(
 int 2:slotIndex
) end function declare
{
}



function declare void sfBip(
 int 3:bipCount
 int 2:seriesCount
) end function declare
{
}



function declare void sfWriteFlash(
) end function declare
{
}



function declare void sfSoundPlay(
 int 2:soundIndex
) end function declare
{
}



function declare int sfSoundIsPlay(
) end function declare
{
}



function declare void sfFreeGroup(
 int 2:unitMask
) end function declare
{
}



function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
{
}



function declare void sfPoseGroupDelay(
 int 5:unitMask
 int 4:angle
 int 3:frameCount
 int 2:frameDelay
) end function declare
{
}



function declare void sfPoseCorrect(
 int 3:unitMask
 int 2:angle
) end function declare
{
}



function declare void sfQueueGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
{
}



function declare void sfPoseIdx(
 int 4:idx
 int 3:angle
 int 2:frameCount
) end function declare
{
}



function declare void sfPoseGroupLin(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
{
}



function declare void sfStrainGroup(
 int 2:unitMask
) end function declare
{
}



function declare void sfPlaySamples(
 int 5:unitMask
 int 4:from
 int 3:frameCount
 *cblock 2:samples
) end function declare
{
}



function declare void sfPlayWSamples(
 int 5:unitMask
 int 4:from
 int 3:frameCount
 *cwblock 2:samples
) end function declare
{
}



function declare void sfAccumSetup1(
 *int 2:ch0
) end function declare
{
}



function declare void sfAccumSetup2(
 *int 3:ch0
 *int 2:ch1
) end function declare
{
}



function declare void sfAccumSetup3(
 *int 4:ch0
 *int 3:ch1
 *int 2:ch2
) end function declare
{
}



function declare void sfAccumSetup4(
 *int 5:ch0
 *int 4:ch1
 *int 3:ch2
 *int 2:ch3
) end function declare
{
}



function declare void sfAccumTrigger(
) end function declare
{
}



function declare void sfAccumReset(
) end function declare
{
}



function declare int sfUnitParamQueryRead(
 int 3:devId
 int 2:paramIndex
) end function declare
{
}



function declare int sfUnitParamQueryWrite(
 int 4:devId
 int 3:paramIndex
 int 2:paramValue
) end function declare
{
}



function declare int sfUnitParamStatusRead(
 int 4:devId
 int 3:paramIndex
 *int 2:paramValue
) end function declare
{
}



function declare int sfMathAcos(
 int 3:numerator
 int 2:denumerator
) end function declare
{
}



function declare int sfMathSqrti(
 int 2:v
) end function declare
{
}



function declare int sfMathAngleOfTriangle(
 int 4:sideA
 int 3:sideB
 int 2:sideC
) end function declare
{
}



function declare int sfMathAngleOfKnee(
 int 4:hip
 int 3:shin
 int 2:height
) end function declare
{
}



function declare int sfMathCathetOfSquareTriangle(
 int 3:cathet
 int 2:hypotenuse
) end function declare
{
}



function declare int sfMathHypotenuseOfSquareTriangle(
 int 3:cathet1
 int 2:cathet2
) end function declare
{
}



function declare int sfMathTableSin(
 int 3:index
 int 2:value
) end function declare
{
}



function declare void sfHumoModelSetup(
) end function declare
{
}



function declare void sfHumoModelFootAtFloor(
 int 4:front
 int 3:side
 int 2:height
) end function declare
{
}



function declare void sfHumoModelFootPush(
 int 4:back
 int 3:side
 int 2:height
) end function declare
{
}



function declare int sfIndexOfMask(
 int 2:unitMask
) end function declare
{
}



function declare int sfQueueIdxAppend(
 int 4:unitIndex
 int 3:val
 int 2:frameCount
) end function declare
{
}



function declare int sfQueueIdxOffsets(
 int 5:unitIndex
 int 4:from
 *cblock 3:offsets
 int 2:offsetCount
) end function declare
{
}



function declare int sfQueueIdxSinMove(
 int 5:unitIndex
 int 4:from
 int 3:to
 int 2:frameCount
) end function declare
{
}



function declare int sfQueueIdxLast(
 int 2:unitIndex
) end function declare
{
}



function declare int sfQueueIdxCount(
 int 2:unitIndex
) end function declare
{
}



function declare int sfQueueMax(
) end function declare
{
}



function declare void sfIkSetup(
) end function declare
{
}



function declare void sfIkAngle(
 float 8:xt
 float 7:yt
 float 6:zt
 float 5:x
 float 4:y
 float 3:z
 float 2:w
) end function declare
{
}



function declare float sfMathCos(
 float 2:r
) end function declare
{
}



function declare float sfMathSin(
 float 2:r
) end function declare
{
}



function declare void sfQuaternionToEuler(
 float 5:x
 float 4:y
 float 3:z
 float 2:w
) end function declare
{
}



function declare void sfQuaternionToEulerImu(
) end function declare
{
}



function declare float sfFMathACos(
 float 2:v
) end function declare
{
}



function declare float sfFMathASin(
 float 2:v
) end function declare
{
}



function declare float sfFMathATan(
 float 2:v
) end function declare
{
}



function declare float sfFMathATan2(
 float 3:y
 float 2:x
) end function declare
{
}



function declare float sfFMathCos(
 float 2:r
) end function declare
{
}



function declare float sfFMathSin(
 float 2:r
) end function declare
{
}



function declare float sfFMathTan(
 float 2:r
) end function declare
{
}



function declare float sfFMathCosh(
 float 2:v
) end function declare
{
}



function declare float sfFMathSinh(
 float 2:v
) end function declare
{
}



function declare float sfFMathTanh(
 float 2:v
) end function declare
{
}



function declare float sfFMathExp(
 float 2:v
) end function declare
{
}



function declare float sfFMathFrExp(
 float 3:v
 *int 2:num
) end function declare
{
}



function declare float sfFMathLdExp(
 float 3:num
 int 2:exp
) end function declare
{
}



function declare float sfFMathLog(
 float 2:v
) end function declare
{
}



function declare float sfFMathLog10(
 float 2:v
) end function declare
{
}



function declare float sfFMathModf(
 float 3:num
 *float 2:ptr
) end function declare
{
}



function declare float sfFMathPow(
 float 3:base
 float 2:exp
) end function declare
{
}



function declare float sfFMathSqrt(
 float 2:v
) end function declare
{
}



function declare float sfFMathCeil(
 float 2:v
) end function declare
{
}



function declare float sfFMathFAbs(
 float 2:v
) end function declare
{
}



function declare float sfFMathFloor(
 float 2:v
) end function declare
{
}



function declare float sfFMathFMod(
 float 3:x
 float 2:y
) end function declare
{
}



function declare void sfQuaternionToMatrix(
 *:SfMatrix3x3 6:mat
 float 5:qx
 float 4:qy
 float 3:qz
 float 2:qw
) end function declare
{
}



function declare void sfQuaternionToMatrixImu(
 *:SfMatrix3x3 2:mat
) end function declare
{
}



function declare void sfGravityVector(
 *:SfVector3 2:vec
) end function declare
{
}



function declare void sfVec3Set(
 *:SfVector3 5:vec
 float 4:x
 float 3:y
 float 2:z
) end function declare
{
}



function declare void sfVec3Sum(
 *:SfVector3 4:destVec
 *:SfVector3 3:srcVec1
 *:SfVector3 2:srcVec2
) end function declare
{
}



function declare void sfVec3Diff(
 *:SfVector3 4:destVec
 *:SfVector3 3:srcVec1
 *:SfVector3 2:srcVec2
) end function declare
{
}



function declare float sfVec3MulRowColCx(
 *:SfVector3 5:row
 float 4:c0
 float 3:c1
 float 2:c2
) end function declare
{
}



function declare float sfVec3MulRowCol(
 *:SfVector3 3:row
 *:SfVector3 2:col
) end function declare
{
}



function declare void sfVec3ScSum(
 *:SfVector3 4:destVec
 *:SfVector3 3:srcVec
 float 2:scalar
) end function declare
{
}



function declare void sfVec3ScDiff(
 *:SfVector3 4:destVec
 *:SfVector3 3:srcVec
 float 2:scalar
) end function declare
{
}



function declare void sfVec3ScMul(
 *:SfVector3 4:destVec
 *:SfVector3 3:srcVec
 float 2:scalar
) end function declare
{
}



function declare void sfVec3ScDiv(
 *:SfVector3 4:destVec
 *:SfVector3 3:srcVec
 float 2:scalar
) end function declare
{
}



function declare void sfMat3x3Set(
 *:SfMatrix3x3 11:destMat
 float 10:m00
 float 9:m01
 float 8:m02
 float 7:m10
 float 6:m11
 float 5:m12
 float 4:m20
 float 3:m21
 float 2:m22
) end function declare
{
}



function declare void sfMat3x3SetAll(
 *:SfMatrix3x3 3:destMat
 float 2:val
) end function declare
{
}



function declare void sfMat3x3SetDiag(
 *:SfMatrix3x3 3:destMat
 float 2:val
) end function declare
{
}



function declare void sfMat3x3Copy(
 *:SfMatrix3x3 3:destMat
 *:SfMatrix3x3 2:srcMat
) end function declare
{
}



function declare void sfMat3x3Transpose(
 *:SfMatrix3x3 3:destMat
 *:SfMatrix3x3 2:srcMat
) end function declare
{
}



function declare void sfMat3x3Mul(
 *:SfMatrix3x3 4:destMat
 *:SfMatrix3x3 3:srcMat1
 *:SfMatrix3x3 2:srcMat2
) end function declare
{
}



function declare void sfMat3x3ScMul(
 *:SfMatrix3x3 4:destMat
 *:SfMatrix3x3 3:srcMat
 float 2:scalar
) end function declare
{
}



function declare void sfMat3x3MulCol(
 *:SfVector3 4:destVec
 *:SfMatrix3x3 3:srcMat
 *:SfVector3 2:colVec
) end function declare
{
}



function declare void sfMat3x3RowMul(
 *:SfVector3 4:destVec
 *:SfVector3 3:rowVec
 *:SfMatrix3x3 2:srcMat
) end function declare
{
}



function declare void sfWaitFrame(
 int 2:frame
) end function declare
{
 {
 call  <function declare void sfWaitFrameOut(
 int 2:frame
) end function declare
> 
 return
 }
}



function declare int sfUnitParamRead(
 int 4:devId
 int 3:paramIndex
 *int 2:paramValue
) end function declare
{
 {
 if   svWait() 
  svWait() 
 return call  <function declare int sfUnitParamStatusRead(
 int 4:devId
 int 3:paramIndex
 *int 2:paramValue
) end function declare
> 
 }
}



function declare void page0(
) end function declare
{
 {
  ( <int 5:frameCount> ) = (20) 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfWaitFrame(
 int 2:frame
) end function declare
> 
 return
 }
}



function declare void page1(
) end function declare
{
 {
  ( <int 5:frameCount> ) = (200) 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfWaitFrame(
 int 2:frame
) end function declare
> 
 return
 }
}



function declare void page2(
) end function declare
{
 {
  ( <int 5:frameCount> ) = (400) 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfWaitFrame(
 int 2:frame
) end function declare
> 
 return
 }
}



function declare void page3(
) end function declare
{
 {
  ( <int 5:frameCount> ) = (300) 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfWaitFrame(
 int 2:frame
) end function declare
> 
 return
 }
}



function declare void page3_0(
) end function declare
{
 {
  ( <int 5:frameCount> ) = (100) 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfWaitFrame(
 int 2:frame
) end function declare
> 
 return
 }
}



function declare void page3_1(
) end function declare
{
 {
  ( <int 5:frameCount> ) = (100) 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfWaitFrame(
 int 2:frame
) end function declare
> 
 return
 }
}



function declare void page4(
) end function declare
{
 {
  ( <int 5:frameCount> ) = (100) 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfWaitFrame(
 int 2:frame
) end function declare
> 
 return
 }
}



function declare void page5(
) end function declare
{
 {
  ( <int 5:frameCount> ) = (100) 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfWaitFrame(
 int 2:frame
) end function declare
> 
 return
 }
}



function declare void page6(
) end function declare
{
 {
  ( <int 5:frameCount> ) = (300) 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfWaitFrame(
 int 2:frame
) end function declare
> 
 return
 }
}



function declare void page7(
) end function declare
{
 {
  ( <int 5:frameCount> ) = (300) 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfWaitFrame(
 int 2:frame
) end function declare
> 
 return
 }
}



function declare void page8(
) end function declare
{
 {
  ( <int 5:frameCount> ) = (300) 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfWaitFrame(
 int 2:frame
) end function declare
> 
 return
 }
}



function declare void page9(
) end function declare
{
 {
  ( <int 5:frameCount> ) = (100) 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfWaitFrame(
 int 2:frame
) end function declare
> 
 return
 }
}



function declare void page10(
) end function declare
{
 {
  ( <int 5:frameCount> ) = (200) 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfWaitFrame(
 int 2:frame
) end function declare
> 
 return
 }
}



function declare void page11(
) end function declare
{
 {
  ( <int 5:frameCount> ) = (100) 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfWaitFrame(
 int 2:frame
) end function declare
> 
 return
 }
}



function declare void page12(
) end function declare
{
 {
  ( <int 5:frameCount> ) = (200) 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfWaitFrame(
 int 2:frame
) end function declare
> 
 return
 }
}



function declare void page13(
) end function declare
{
 {
  ( <int 5:frameCount> ) = (200) 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfWaitFrame(
 int 2:frame
) end function declare
> 
 return
 }
}



function declare void shiftRight(
) end function declare
{
 {
 call  <function declare void sfQuaternionToEulerImu(
) end function declare
> 
  ( <int 6:rotation> ) = ( ( ( ( <float 7:direction> ) - ( <float 2600:svEulerYaw> ) ) * (2607.59) ) * (1.2) ) 
  ( <int 5:frameCount> ) = (3) 
 call  <function declare void sfWaitFrame(
 int 2:frame
) end function declare
> 
  ( <int 5:frameCount> ) = (3) 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfWaitFrame(
 int 2:frame
) end function declare
> 
  ( <int 5:frameCount> ) = (3) 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfWaitFrame(
 int 2:frame
) end function declare
> 
 return
 }
}



function declare void main(
) end function declare
{
 {
 int -1:i
  {
  }
  ( <int 5:frameCount> ) = (1) 
  ( <int 2:pitStop> ) = (0) 
  ( <int 3:clamping> ) = ( -(50) ) 
  ( <int 4:steps> ) = (17) 
 call  <function declare void sfQuaternionToEulerImu(
) end function declare
> 
  ( <float 7:direction> ) = ( <float 2600:svEulerYaw> ) 
 loop call  <function declare void page3_1(
) end function declare
> 
 call  <function declare void page4(
) end function declare
> 
 call  <function declare void page5(
) end function declare
> 
 call  <function declare void page6(
) end function declare
> 
 call  <function declare void page7(
) end function declare
> 
 call  <function declare void page8(
) end function declare
> 
 call  <function declare void page9(
) end function declare
> 
 call  <function declare void page10(
) end function declare
> 
 call  <function declare void page11(
) end function declare
> 
 call  <function declare void page12(
) end function declare
> 
 call  <function declare void page13(
) end function declare
> 
 return
 }
}




Compilation success
