//====================================================================
//      SvCompiler V9.06
//By A.Sibilev
//====================================================================
//cblock

;sfVpuVersion <int()>
;sfCreateTask <int(,*<void()>,int)>
;sfLog <void(,cstring,int,int,int)>
;sfLogOpen <void(,cstring)>
;sfLogClose <void()>
;sfWaitFrameOut <void(,int)>
;sfIsFrameOut <int(,int)>
;sfWaitNextFrame <void()>
;sfSlotIndex <int(,cstring)>
;sfAbs <int(,int)>
;sfIMin <int(,int,int)>
;sfIMax <int(,int,int)>
;sfUMin <int(,int,int)>
;sfUMax <int(,int,int)>
;sfILimit <int(,int,int,int)>
;sfStop <void()>
;sfStartSlot <void(,int)>
;sfBip <void(,int,int)>
;sfWriteFlash <void()>
;sfFreeGroup <void(,int)>
;sfPoseGroup <void(,int,int,int)>
;sfPoseGroupDelay <void(,int,int,int,int)>
;sfPoseCorrect <void(,int,int)>
;sfQueueGroup <void(,int,int,int)>
;sfPoseIdx <void(,int,int,int)>
;sfPoseGroupLin <void(,int,int,int)>
;sfStrainGroup <void(,int)>
;sfPlaySamples <void(,int,*cblock,int)>
;sfAccumSetup1 <void(,*int)>
;sfAccumSetup2 <void(,*int,*int)>
;sfAccumSetup3 <void(,*int,*int,*int)>
;sfAccumSetup4 <void(,*int,*int,*int,*int)>
;sfAccumTrigger <void()>
;sfAccumReset <void()>
;sfMathAcos <int(,int,int)>
;sfMathSqrti <int(,int)>
;sfMathAngleOfTriangle <int(,int,int,int)>
;sfMathAngleOfKnee <int(,int,int,int)>
;sfMathCathetOfSquareTriangle <int(,int,int)>
;sfMathHypotenuseOfSquareTriangle <int(,int,int)>
;sfMathTableSin <int(,int,int)>
;sfHumoModelSetup <void()>
;sfHumoModelFootAtFloor <void(,int,int,int)>
;sfHumoModelFootPush <void(,int,int,int)>
;sfIndexOfMask <int(,int)>
;sfQueueIdxAppend <int(,int,int,int)>
;sfQueueIdxOffsets <int(,int,int,*cblock,int)>
;sfQueueIdxSinMove <int(,int,int,int,int)>
;sfQueueIdxLast <int(,int)>
;sfQueueIdxCount <int(,int)>
;sfQueueMax <int()>
;sfIkSetup <void()>
;sfIkAngle <void(,float,float,float,float,float,float,float)>
;sfMathCos <float(,float)>
;sfMathSin <float(,float)>
;sfQuaternionToEuler <void(,float,float,float,float)>
;sfQuaternionToEulerImu <void()>
;sfFMathACos <float(,float)>
;sfFMathASin <float(,float)>
;sfFMathATan <float(,float)>
;sfFMathATan2 <float(,float,float)>
;sfFMathCos <float(,float)>
;sfFMathSin <float(,float)>
;sfFMathTan <float(,float)>
;sfFMathCosh <float(,float)>
;sfFMathSinh <float(,float)>
;sfFMathTanh <float(,float)>
;sfFMathExp <float(,float)>
;sfFMathFrExp <float(,float,*int)>
;sfFMathLdExp <float(,float,int)>
;sfFMathLog <float(,float)>
;sfFMathLog10 <float(,float)>
;sfFMathModf <float(,float,*float)>
;sfFMathPow <float(,float,float)>
;sfFMathSqrt <float(,float)>
;sfFMathCeil <float(,float)>
;sfFMathFAbs <float(,float)>
;sfFMathFloor <float(,float)>
;sfFMathFMod <float(,float,float)>
;sfQuaternionToMatrix <void(,*:SfMatrix3x3,float,float,float,float)>
;sfQuaternionToMatrixImu <void(,*:SfMatrix3x3)>
;sfGravityVector <void(,*:SfVector3)>
;sfVec3Set <void(,*:SfVector3,float,float,float)>
;sfVec3Sum <void(,*:SfVector3,*:SfVector3,*:SfVector3)>
;sfVec3Diff <void(,*:SfVector3,*:SfVector3,*:SfVector3)>
;sfVec3MulRowColCx <float(,*:SfVector3,float,float,float)>
;sfVec3MulRowCol <float(,*:SfVector3,*:SfVector3)>
;sfVec3ScSum <void(,*:SfVector3,*:SfVector3,float)>
;sfVec3ScDiff <void(,*:SfVector3,*:SfVector3,float)>
;sfVec3ScMul <void(,*:SfVector3,*:SfVector3,float)>
;sfVec3ScDiv <void(,*:SfVector3,*:SfVector3,float)>
;sfMat3x3Set <void(,*:SfMatrix3x3,float,float,float,float,float,float,float,float,float)>
;sfMat3x3SetAll <void(,*:SfMatrix3x3,float)>
;sfMat3x3SetDiag <void(,*:SfMatrix3x3,float)>
;sfMat3x3Copy <void(,*:SfMatrix3x3,*:SfMatrix3x3)>
;sfMat3x3Transpose <void(,*:SfMatrix3x3,*:SfMatrix3x3)>
;sfMat3x3Mul <void(,*:SfMatrix3x3,*:SfMatrix3x3,*:SfMatrix3x3)>
;sfMat3x3ScMul <void(,*:SfMatrix3x3,*:SfMatrix3x3,float)>
;sfMat3x3MulCol <void(,*:SfVector3,*:SfMatrix3x3,*:SfVector3)>
;sfMat3x3RowMul <void(,*:SfVector3,*:SfVector3,*:SfMatrix3x3)>
;sfWaitFrame <void(,int)>
[3:466] ;sfWaitFrameOut( frame + svFrameCount );
VBC5_PUSH_CONST 17 | 0x80000000 //import func index sfWaitFrameOut
VBC2_PUSH_LOCAL 2 //frame
VBC3_PUSH_GLOBAL 1 //svFrameCount
VBC1_ADD
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[2:10] ;
VBC1_RETURN
;jump_turn_CCW <void()>
[1:20] ;frameCount = 20;
VBC2_PUSH_CONST 3 //frameCount
VBC2_PUSH_CONST 20 
VBC1_POP
[1:21] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:22] ;frameCount = 6;
VBC2_PUSH_CONST 3 //frameCount
VBC2_PUSH_CONST 6 
VBC1_POP
[1:23] ;sfPoseGroup((2097152  | 1048576 ), 1000, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 3145728 
VBC3_PUSH_CONST 1000 
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:24] ;sfPoseGroup(1024 , 160 * factor, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 1024 
VBC3_PUSH_CONST 160 
VBC3_PUSH_GLOBAL 4 //factor
VBC1_MUL
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:25] ;sfPoseGroup(2048 , -160 * factor, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 2048 
VBC3_PUSH_CONST -160 // -
VBC3_PUSH_GLOBAL 4 //factor
VBC1_MUL
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:26] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:27] ;sfPoseGroup((2097152  | 1048576 ), 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 3145728 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:28] ;sfPoseGroup(1024 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 1024 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:29] ;sfPoseGroup(2048 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 2048 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:30] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:33] ;
VBC1_RETURN
;jump_turn_CW <void()>
[1:34] ;frameCount = 20;
VBC2_PUSH_CONST 3 //frameCount
VBC2_PUSH_CONST 20 
VBC1_POP
[1:35] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:36] ;frameCount = 6;
VBC2_PUSH_CONST 3 //frameCount
VBC2_PUSH_CONST 6 
VBC1_POP
[1:37] ;sfPoseGroup((2097152  | 1048576 ), 1000, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 3145728 
VBC3_PUSH_CONST 1000 
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:38] ;sfPoseGroup(1024 , -160 * factor, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 1024 
VBC3_PUSH_CONST -160 // -
VBC3_PUSH_GLOBAL 4 //factor
VBC1_MUL
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:39] ;sfPoseGroup(2048 , 160 * factor, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 2048 
VBC3_PUSH_CONST 160 
VBC3_PUSH_GLOBAL 4 //factor
VBC1_MUL
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:40] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:41] ;sfPoseGroup((2097152  | 1048576 ), 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 3145728 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:42] ;sfPoseGroup(1024 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 1024 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:43] ;sfPoseGroup(2048 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 2048 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:44] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:47] ;
VBC1_RETURN
;jump_forward <void()>
[1:48] ;frameCount = 30;
VBC2_PUSH_CONST 3 //frameCount
VBC2_PUSH_CONST 30 
VBC1_POP
[1:49] ;sfPoseGroup((524288  | 262144 ), 16 * factor, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 786432 
VBC2_PUSH_CONST 16 
VBC3_PUSH_GLOBAL 4 //factor
VBC1_MUL
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:50] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:51] ;frameCount = 9;
VBC2_PUSH_CONST 3 //frameCount
VBC2_PUSH_CONST 9 
VBC1_POP
[1:52] ;sfPoseGroup((2097152  | 1048576 ), 1000, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 3145728 
VBC3_PUSH_CONST 1000 
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:53] ;sfPoseGroup((524288  | 262144 ), -48 * factor, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 786432 
VBC2_PUSH_CONST -48 // -
VBC3_PUSH_GLOBAL 4 //factor
VBC1_MUL
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:54] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:55] ;sfPoseGroup((2097152  | 1048576 ), 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 3145728 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:56] ;sfPoseGroup((524288  | 262144 ), 16 * factor, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 786432 
VBC2_PUSH_CONST 16 
VBC3_PUSH_GLOBAL 4 //factor
VBC1_MUL
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:57] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:58] ;sfPoseGroup((524288  | 262144 ), 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 786432 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:59] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:62] ;
VBC1_RETURN
;jump_backward <void()>
[1:63] ;frameCount = 30;
VBC2_PUSH_CONST 3 //frameCount
VBC2_PUSH_CONST 30 
VBC1_POP
[1:64] ;sfPoseGroup((524288  | 262144 ), -16 * factor, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 786432 
VBC2_PUSH_CONST -16 // -
VBC3_PUSH_GLOBAL 4 //factor
VBC1_MUL
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:65] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:66] ;frameCount = 9;
VBC2_PUSH_CONST 3 //frameCount
VBC2_PUSH_CONST 9 
VBC1_POP
[1:67] ;sfPoseGroup((2097152  | 1048576 ), 1000, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 3145728 
VBC3_PUSH_CONST 1000 
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:68] ;sfPoseGroup((524288  | 262144 ), 48 * factor, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 786432 
VBC2_PUSH_CONST 48 
VBC3_PUSH_GLOBAL 4 //factor
VBC1_MUL
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:69] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:70] ;sfPoseGroup((2097152  | 1048576 ), 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 3145728 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:71] ;sfPoseGroup((524288  | 262144 ), -16 * factor, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 786432 
VBC2_PUSH_CONST -16 // -
VBC3_PUSH_GLOBAL 4 //factor
VBC1_MUL
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:72] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:73] ;sfPoseGroup((524288  | 262144 ), 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 786432 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:74] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:77] ;
VBC1_RETURN
;jump_left <void()>
[1:78] ;frameCount = 30;
VBC2_PUSH_CONST 3 //frameCount
VBC2_PUSH_CONST 30 
VBC1_POP
[1:79] ;sfPoseGroup(2097152 , -30 * factor, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 2097152 
VBC2_PUSH_CONST -30 // -
VBC3_PUSH_GLOBAL 4 //factor
VBC1_MUL
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:80] ;sfPoseGroup(1048576 , 30 * factor, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 1048576 
VBC2_PUSH_CONST 30 
VBC3_PUSH_GLOBAL 4 //factor
VBC1_MUL
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:81] ;sfPoseGroup(8192 , -30 * factor, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 8192 
VBC2_PUSH_CONST -30 // -
VBC3_PUSH_GLOBAL 4 //factor
VBC1_MUL
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:82] ;sfPoseGroup(4096 , 30 * factor, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 4096 
VBC2_PUSH_CONST 30 
VBC3_PUSH_GLOBAL 4 //factor
VBC1_MUL
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:83] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:84] ;frameCount = 9;
VBC2_PUSH_CONST 3 //frameCount
VBC2_PUSH_CONST 9 
VBC1_POP
[1:85] ;sfPoseGroup((2097152  | 1048576 ), 1000, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 3145728 
VBC3_PUSH_CONST 1000 
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:86] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:87] ;sfPoseGroup((2097152  | 1048576 ), 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 3145728 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:88] ;sfPoseGroup(8192 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 8192 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:89] ;sfPoseGroup(4096 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 4096 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:90] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:91] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:94] ;
VBC1_RETURN
;jump_right <void()>
[1:95] ;frameCount = 30;
VBC2_PUSH_CONST 3 //frameCount
VBC2_PUSH_CONST 30 
VBC1_POP
[1:96] ;sfPoseGroup(2097152 , 30 * factor, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 2097152 
VBC2_PUSH_CONST 30 
VBC3_PUSH_GLOBAL 4 //factor
VBC1_MUL
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:97] ;sfPoseGroup(1048576 , -30 * factor, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 1048576 
VBC2_PUSH_CONST -30 // -
VBC3_PUSH_GLOBAL 4 //factor
VBC1_MUL
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:98] ;sfPoseGroup(8192 , 30 * factor, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 8192 
VBC2_PUSH_CONST 30 
VBC3_PUSH_GLOBAL 4 //factor
VBC1_MUL
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:99] ;sfPoseGroup(4096 , -30 * factor, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 4096 
VBC2_PUSH_CONST -30 // -
VBC3_PUSH_GLOBAL 4 //factor
VBC1_MUL
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:100] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:101] ;frameCount = 9;
VBC2_PUSH_CONST 3 //frameCount
VBC2_PUSH_CONST 9 
VBC1_POP
[1:102] ;sfPoseGroup((2097152  | 1048576 ), 1000, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 3145728 
VBC3_PUSH_CONST 1000 
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:103] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:104] ;sfPoseGroup((2097152  | 1048576 ), 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 3145728 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:105] ;sfPoseGroup(8192 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 8192 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:106] ;sfPoseGroup(4096 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 4096 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:107] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:108] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 3 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:111] ;
VBC1_RETURN
;main <void()>
VBC2_STACK -3//local vars 3
[1:112] ;
[1:113] ;
[1:114] ;
[1:115] ;cycle_number = jump_mode/100;
VBC2_PUSH_B_OFFSET -2 //cycle_number
VBC3_PUSH_GLOBAL 1024 //jump_mode
VBC2_PUSH_CONST 100 
VBC1_DIV
VBC1_POP
[1:116] ;factor = (jump_mode % 100) / 10;
VBC2_PUSH_CONST 4 //factor
VBC3_PUSH_GLOBAL 1024 //jump_mode
VBC2_PUSH_CONST 100 
VBC1_MOD
VBC2_PUSH_CONST 10 
VBC1_DIV
VBC1_POP
[1:117] ;if (factor == 0) factor = 10;
VBC3_PUSH_GLOBAL 4 //factor
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB1017 //if to false
;if (factor == 0) factor = 10;
VBC2_PUSH_CONST 4 //factor
VBC2_PUSH_CONST 10 
VBC1_POP
LAB1017: //if else
[1:118] ;for (i=0; i < cycle_number; i++){
VBC2_PUSH_B_OFFSET -1 //i
VBC1_PUSH_0 
VBC1_POP
LAB1021: //for condition
VBC2_PUSH_LOCAL -1 //i
VBC2_PUSH_LOCAL -2 //cycle_number
VBC1_LESS
VBC4_FALSE_JUMP LAB1127 //to for exit
;
[1:119] ;mode = jump_mode % 10;
VBC2_PUSH_B_OFFSET -3 //mode
VBC3_PUSH_GLOBAL 1024 //jump_mode
VBC2_PUSH_CONST 10 
VBC1_MOD
VBC1_POP
[1:120] ;if (mode == 1) jump_forward();
VBC2_PUSH_LOCAL -3 //mode
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB1052 //if to false
;if (mode == 1) jump_forward();
VBC3_PUSH_CONST 334  //func address jump_forward
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB1052: //if else
[1:121] ;if (mode == 2) jump_backward();
VBC2_PUSH_LOCAL -3 //mode
VBC1_PUSH_2 
VBC1_EQU
VBC4_FALSE_JUMP LAB1065 //if to false
;if (mode == 2) jump_backward();
VBC3_PUSH_CONST 480  //func address jump_backward
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB1065: //if else
[1:122] ;if (mode == 3) jump_left();
VBC2_PUSH_LOCAL -3 //mode
VBC2_PUSH_CONST 3 
VBC1_EQU
VBC4_FALSE_JUMP LAB1079 //if to false
;if (mode == 3) jump_left();
VBC3_PUSH_CONST 626  //func address jump_left
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB1079: //if else
[1:123] ;if (mode == 4) jump_right();
VBC2_PUSH_LOCAL -3 //mode
VBC2_PUSH_CONST 4 
VBC1_EQU
VBC4_FALSE_JUMP LAB1093 //if to false
;if (mode == 4) jump_right();
VBC3_PUSH_CONST 803  //func address jump_right
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB1093: //if else
[1:124] ;if (mode == 5) jump_turn_CCW();
VBC2_PUSH_LOCAL -3 //mode
VBC2_PUSH_CONST 5 
VBC1_EQU
VBC4_FALSE_JUMP LAB1106 //if to false
;if (mode == 5) jump_turn_CCW();
VBC2_PUSH_CONST 70  //func address jump_turn_CCW
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB1106: //if else
[1:125] ;if (mode == 6) jump_turn_CW();
VBC2_PUSH_LOCAL -3 //mode
VBC2_PUSH_CONST 6 
VBC1_EQU
VBC4_FALSE_JUMP LAB1120 //if to false
;if (mode == 6) jump_turn_CW();
VBC3_PUSH_CONST 202  //func address jump_turn_CW
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB1120: //if else
LAB1120: //for step
VBC2_PUSH_B_OFFSET -1 //i
VBC1_INC
VBC4_JUMP LAB1021 //to condition
LAB1127: //for exit
[1:127] ;jump_mode = 0;
VBC3_PUSH_CONST 1024 //jump_mode
VBC1_PUSH_0 
VBC1_POP
[1:128] ;
VBC1_RETURN
//Init table
//Variables
svFrameCount : 1
svImuAccX : 1000
svImuAccY : 1001
svImuAccZ : 1002
svImuAccRawX : 1003
svImuAccRawY : 1004
svImuAccRawZ : 1005
svImuGyroX : 1006
svImuGyroY : 1007
svImuGyroZ : 1008
svImuGyroRawX : 1009
svImuGyroRawY : 1010
svImuGyroRawZ : 1011
svImuQuaterX : 1012
svImuQuaterY : 1013
svImuQuaterZ : 1014
svImuQuaterW : 1015
svImuQuaterAcc : 1016
svImuAccSlowX : 1017
svImuAccSlowY : 1018
svImuAccSlowZ : 1019
svAdc : 1020
svButtonLeft : 1021
svButtonRight : 1022
svButtonPress : 1023
svHeadControlMask : 1024
svEulerYaw F: 1025
svEulerPitch F: 1026
svEulerRoll F: 1027
svRemoteStatus : 1190
svRemoteButton : 1191
svRemoteLeftJoystick : 1192
svRemoteLeftJoystickX : 1193
svRemoteLeftJoystickY : 1194
svRemoteRightJoystick : 1195
svRemoteRightJoystickX : 1196
svRemoteRightJoystickY : 1197
svHumoModelDistPelvic : 1204
svHumoModelLengthPelvicHip : 1205
svHumoModelLengthHipHip : 1206
svHumoModelLengthHipKnee : 1207
svHumoModelLengthKneeFoot : 1208
svHumoModelLengthFootFoot : 1209
svHumoModelDistFootFloor : 1210
svHumoModelFootLength : 1211
svHumoModelFootWidth : 1212
svHumoModelFootCenterBack : 1213
svHumoModelFootCenterInner : 1214
svHumoModelAngPelvic : 1198
svHumoModelAngHipSide : 1200
svHumoModelAngHip : 1199
svHumoModelAngKnee : 1201
svHumoModelAngFoot : 1202
svHumoModelAngFootSide : 1203
svIkA5 F: 1215
svIkB5 F: 1216
svIkC5 F: 1217
svIkA6 F: 1218
svIkA7 F: 1219
svIkA8 F: 1220
svIkA9 F: 1221
svIkA10 F: 1222
svIkB10 F: 1223
svIkC10 F: 1224
svIkLimA5min F: 1225
svIkLimA5max F: 1226
svIkLimA6min F: 1227
svIkLimA6max F: 1228
svIkLimA7min F: 1229
svIkLimA7max F: 1230
svIkLimA8min F: 1231
svIkLimA8max F: 1232
svIkLimA9min F: 1233
svIkLimA9max F: 1234
svIkLimA10min F: 1235
svIkLimA10max F: 1236
svIkOutPresent : 1237
svIkEncA5 : 1238
svIkEncA6 : 1239
svIkEncA7 : 1240
svIkEncA8 : 1241
svIkEncA9 : 1242
svIkEncA10 : 1243
headRotateTarget : 1030
headRotateCurrent : 1031
headRotatePwm : 1032
headRotateAddonMix : 1033
torsoRotateTarget : 1034
torsoRotateCurrent : 1035
torsoRotatePwm : 1036
torsoRotateAddonMix : 1037
rightClavicleTarget : 1038
rightClavicleCurrent : 1039
rightClaviclePwm : 1040
rightClavicleAddonMix : 1041
leftClavicleTarget : 1042
leftClavicleCurrent : 1043
leftClaviclePwm : 1044
leftClavicleAddonMix : 1045
rightShoulderTarget : 1046
rightShoulderCurrent : 1047
rightShoulderPwm : 1048
rightShoulderAddonMix : 1049
leftShoulderTarget : 1050
leftShoulderCurrent : 1051
leftShoulderPwm : 1052
leftShoulderAddonMix : 1053
rightElbowSideTarget : 1054
rightElbowSideCurrent : 1055
rightElbowSidePwm : 1056
rightElbowSideAddonMix : 1057
leftElbowSideTarget : 1058
leftElbowSideCurrent : 1059
leftElbowSidePwm : 1060
leftElbowSideAddonMix : 1061
rightElbowTarget : 1062
rightElbowCurrent : 1063
rightElbowPwm : 1064
rightElbowAddonMix : 1065
leftElbowTarget : 1066
leftElbowCurrent : 1067
leftElbowPwm : 1068
leftElbowAddonMix : 1069
rightPelvicTarget : 1070
rightPelvicCurrent : 1071
rightPelvicPwm : 1072
rightPelvicAddonMix : 1073
leftPelvicTarget : 1074
leftPelvicCurrent : 1075
leftPelvicPwm : 1076
leftPelvicAddonMix : 1077
rightHipSideTarget : 1078
rightHipSideCurrent : 1079
rightHipSidePwm : 1080
rightHipSideAddonMix : 1081
leftHipSideTarget : 1082
leftHipSideCurrent : 1083
leftHipSidePwm : 1084
leftHipSideAddonMix : 1085
rightHipTarget : 1086
rightHipCurrent : 1087
rightHipPwm : 1088
rightHipAddonMix : 1089
leftHipTarget : 1090
leftHipCurrent : 1091
leftHipPwm : 1092
leftHipAddonMix : 1093
rightKneeTarget : 1094
rightKneeCurrent : 1095
rightKneePwm : 1096
rightKneeAddonMix : 1097
leftKneeTarget : 1098
leftKneeCurrent : 1099
leftKneePwm : 1100
leftKneeAddonMix : 1101
rightFootFrontTarget : 1102
rightFootFrontCurrent : 1103
rightFootFrontPwm : 1104
rightFootFrontAddonMix : 1105
leftFootFrontTarget : 1106
leftFootFrontCurrent : 1107
leftFootFrontPwm : 1108
leftFootFrontAddonMix : 1109
rightFootSideTarget : 1110
rightFootSideCurrent : 1111
rightFootSidePwm : 1112
rightFootSideAddonMix : 1113
leftFootSideTarget : 1114
leftFootSideCurrent : 1115
leftFootSidePwm : 1116
leftFootSideAddonMix : 1117
rightHandTarget : 1118
rightHandCurrent : 1119
rightHandPwm : 1120
rightHandAddonMix : 1121
leftHandTarget : 1122
leftHandCurrent : 1123
leftHandPwm : 1124
leftHandAddonMix : 1125
headTiltTarget : 1130
headTiltCurrent : 1131
headTiltPwm : 1132
headTiltAddonMix : 1133
rightKneeBotTarget : 1134
rightKneeBotCurrent : 1135
rightKneeBotPwm : 1136
rightKneeBotAddonMix : 1137
leftKneeBotTarget : 1138
leftKneeBotCurrent : 1139
leftKneeBotPwm : 1140
leftKneeBotAddonMix : 1141
rightClawTarget : 1142
rightClawCurrent : 1143
rightClawPwm : 1144
rightClawAddonMix : 1145
leftClawTarget : 1146
leftClawCurrent : 1147
leftClawPwm : 1148
leftClawAddonMix : 1149
jump_mode : 1024
restart_flag : 2
frameCount : 3
factor : 4
