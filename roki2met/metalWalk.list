//====================================================================
//      SvCompiler V6.06
//By A.Sibilev
//====================================================================
//cblock

;sfVpuVersion <int()>
;sfCreateTask <int(,*<void()>,int)>
;sfLog <void(,cstring,int,int,int)>
;sfLogOpen <void(,cstring)>
;sfLogClose <void()>
;sfWaitFrameOut <void(,int)>
;sfIsFrameOut <int(,int)>
;sfWaitNextFrame <void()>
;sfSlotIndex <int(,cstring)>
;sfAbs <int(,int)>
;sfIMin <int(,int,int)>
;sfIMax <int(,int,int)>
;sfUMin <int(,int,int)>
;sfUMax <int(,int,int)>
;sfILimit <int(,int,int,int)>
;sfStop <void()>
;sfStartSlot <void(,int)>
;sfBip <void(,int,int)>
;sfFreeGroup <void(,int)>
;sfPoseGroup <void(,int,int,int)>
;sfPoseGroupDelay <void(,int,int,int,int)>
;sfPoseCorrect <void(,int,int)>
;sfQueueGroup <void(,int,int,int)>
;sfPoseIdx <void(,int,int,int)>
;sfPoseGroupLin <void(,int,int,int)>
;sfStrainGroup <void(,int)>
;sfPlaySamples <void(,int,*cblock,int)>
;sfAccumSetup1 <void(,*int)>
;sfAccumSetup2 <void(,*int,*int)>
;sfAccumSetup3 <void(,*int,*int,*int)>
;sfAccumSetup4 <void(,*int,*int,*int,*int)>
;sfAccumTrigger <void()>
;sfAccumReset <void()>
;sfMathAcos <int(,int,int)>
;sfMathSqrti <int(,int)>
;sfMathAngleOfTriangle <int(,int,int,int)>
;sfMathAngleOfKnee <int(,int,int,int)>
;sfMathCathetOfSquareTriangle <int(,int,int)>
;sfMathHypotenuseOfSquareTriangle <int(,int,int)>
;sfMathTableSin <int(,int,int)>
;sfHumoModelSetup <void()>
;sfHumoModelFootAtFloor <void(,int,int,int)>
;sfHumoModelFootPush <void(,int,int,int)>
;sfIndexOfMask <int(,int)>
;sfQueueIdxAppend <int(,int,int,int)>
;sfQueueIdxOffsets <int(,int,int,*cblock,int)>
;sfQueueIdxSinMove <int(,int,int,int,int)>
;sfQueueIdxLast <int(,int)>
;sfQueueIdxCount <int(,int)>
;sfQueueMax <int()>
;sfIkSetup <void()>
;sfIkAngle <void(,float,float,float,float,float,float,float)>
;sfMathCos <float(,float)>
;sfMathSin <float(,float)>
;sfQuaternionToEuler <void(,float,float,float,float)>
;sfQuaternionToEulerImu <void()>
;sfFMathACos <float(,float)>
;sfFMathASin <float(,float)>
;sfFMathATan <float(,float)>
;sfFMathATan2 <float(,float,float)>
;sfFMathCos <float(,float)>
;sfFMathSin <float(,float)>
;sfFMathTan <float(,float)>
;sfFMathCosh <float(,float)>
;sfFMathSinh <float(,float)>
;sfFMathTanh <float(,float)>
;sfFMathExp <float(,float)>
;sfFMathFrExp <float(,float,*int)>
;sfFMathLdExp <float(,float,int)>
;sfFMathLog <float(,float)>
;sfFMathLog10 <float(,float)>
;sfFMathModf <float(,float,*float)>
;sfFMathPow <float(,float,float)>
;sfFMathSqrt <float(,float)>
;sfFMathCeil <float(,float)>
;sfFMathFAbs <float(,float)>
;sfFMathFloor <float(,float)>
;sfFMathFMod <float(,float,float)>
;sfWaitFrame <void(,int)>
[3:348] ;sfWaitFrameOut( frame + svFrameCount );
VBC5_PUSH_CONST 17 | 0x80000000 //import func index sfWaitFrameOut
VBC2_PUSH_LOCAL 2 //frame
VBC3_PUSH_GLOBAL 1 //svFrameCount
VBC1_ADD
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[2:10] ;
VBC1_RETURN
;humoConfig <void()>
[1:30] ;svHumoModelDistPelvic = 25;
VBC3_PUSH_CONST 1204 //svHumoModelDistPelvic
VBC2_PUSH_CONST 25 
VBC1_POP
[1:31] ;svHumoModelLengthPelvicHip = 21;
VBC3_PUSH_CONST 1205 //svHumoModelLengthPelvicHip
VBC2_PUSH_CONST 21 
VBC1_POP
[1:32] ;svHumoModelLengthHipHip = 48;
VBC3_PUSH_CONST 1206 //svHumoModelLengthHipHip
VBC2_PUSH_CONST 48 
VBC1_POP
[1:33] ;svHumoModelLengthHipKnee = 64;
VBC3_PUSH_CONST 1207 //svHumoModelLengthHipKnee
VBC2_PUSH_CONST 64 
VBC1_POP
[1:34] ;svHumoModelLengthKneeFoot = 68;
VBC3_PUSH_CONST 1208 //svHumoModelLengthKneeFoot
VBC2_PUSH_CONST 68 
VBC1_POP
[1:35] ;svHumoModelLengthFootFoot = 48;
VBC3_PUSH_CONST 1209 //svHumoModelLengthFootFoot
VBC2_PUSH_CONST 48 
VBC1_POP
[1:36] ;svHumoModelDistFootFloor = 25;
VBC3_PUSH_CONST 1210 //svHumoModelDistFootFloor
VBC2_PUSH_CONST 25 
VBC1_POP
[1:38] ;svHumoModelFootLength = 114;
VBC3_PUSH_CONST 1211 //svHumoModelFootLength
VBC2_PUSH_CONST 114 
VBC1_POP
[1:39] ;svHumoModelFootWidth = 75;
VBC3_PUSH_CONST 1212 //svHumoModelFootWidth
VBC2_PUSH_CONST 75 
VBC1_POP
[1:40] ;svHumoModelFootCenterBack = 57;
VBC3_PUSH_CONST 1213 //svHumoModelFootCenterBack
VBC2_PUSH_CONST 57 
VBC1_POP
[1:41] ;svHumoModelFootCenterInner = 23;
VBC3_PUSH_CONST 1214 //svHumoModelFootCenterInner
VBC2_PUSH_CONST 23 
VBC1_POP
[1:42] ;sfHumoModelSetup();
VBC5_PUSH_CONST 101 | 0x80000000 //import func index sfHumoModelSetup
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:44] ;walkBaseHeight = 243; 
VBC2_PUSH_CONST 4 //walkBaseHeight
VBC3_PUSH_CONST 243 
VBC1_POP
[1:45] ;walkLegUp = 18; 
VBC2_PUSH_CONST 5 //walkLegUp
VBC2_PUSH_CONST 18 
VBC1_POP
[1:46] ;walkPush = 2; 
VBC2_PUSH_CONST 6 //walkPush
VBC1_PUSH_2 
VBC1_POP
[1:47] ;imuXOffset = 135;
VBC2_PUSH_CONST 7 //imuXOffset
VBC3_PUSH_CONST 135 
VBC1_POP
[1:48] ;drawdown = 5; 
VBC2_PUSH_CONST 12 //drawdown
VBC2_PUSH_CONST 5 
VBC1_POP
[1:49] ;forwardFactor = 0;
VBC2_PUSH_CONST 13 //forwardFactor
VBC1_PUSH_0 
VBC1_POP
[1:50] ;tiltAddon = 200;
VBC2_PUSH_CONST 15 //tiltAddon
VBC3_PUSH_CONST 200 
VBC1_POP
[1:54] ;
VBC1_RETURN
;legFromModel <void(,int,int,int)>
[1:55] ;sfPoseGroupDelay( mask & (8192  | 4096 ), svHumoModelAngHipSide, frameCount, delay );
VBC5_PUSH_CONST 52 | 0x80000000 //import func index sfPoseGroupDelay
VBC2_PUSH_LOCAL 4 //mask
VBC3_PUSH_CONST 12288 
VBC1_AND
VBC3_PUSH_GLOBAL 1200 //svHumoModelAngHipSide
VBC2_PUSH_LOCAL 3 //frameCount
VBC2_PUSH_LOCAL 2 //delay
VBC1_CALL4
VBC1_STACK_UP5//remove result, call address and params
[1:56] ;sfPoseGroupDelay( mask & (32768  | 16384 ), svHumoModelAngHip + tiltForward, frameCount, delay );
VBC5_PUSH_CONST 52 | 0x80000000 //import func index sfPoseGroupDelay
VBC2_PUSH_LOCAL 4 //mask
VBC4_PUSH_CONST 49152 
VBC1_AND
VBC3_PUSH_GLOBAL 1199 //svHumoModelAngHip
VBC3_PUSH_GLOBAL 10 //tiltForward
VBC1_ADD
VBC2_PUSH_LOCAL 3 //frameCount
VBC2_PUSH_LOCAL 2 //delay
VBC1_CALL4
VBC1_STACK_UP5//remove result, call address and params
[1:57] ;sfPoseGroupDelay( mask & (131072  | 65536 ), svHumoModelAngKnee, frameCount, delay );
VBC5_PUSH_CONST 52 | 0x80000000 //import func index sfPoseGroupDelay
VBC2_PUSH_LOCAL 4 //mask
VBC4_PUSH_CONST 196608 
VBC1_AND
VBC3_PUSH_GLOBAL 1201 //svHumoModelAngKnee
VBC2_PUSH_LOCAL 3 //frameCount
VBC2_PUSH_LOCAL 2 //delay
VBC1_CALL4
VBC1_STACK_UP5//remove result, call address and params
[1:58] ;sfPoseGroupDelay( mask & (524288  | 262144 ), svHumoModelAngFoot, frameCount, delay );
VBC5_PUSH_CONST 52 | 0x80000000 //import func index sfPoseGroupDelay
VBC2_PUSH_LOCAL 4 //mask
VBC4_PUSH_CONST 786432 
VBC1_AND
VBC3_PUSH_GLOBAL 1202 //svHumoModelAngFoot
VBC2_PUSH_LOCAL 3 //frameCount
VBC2_PUSH_LOCAL 2 //delay
VBC1_CALL4
VBC1_STACK_UP5//remove result, call address and params
[1:59] ;sfPoseGroupDelay( mask & (2097152  | 1048576 ), svHumoModelAngFootSide, frameCount, delay );
VBC5_PUSH_CONST 52 | 0x80000000 //import func index sfPoseGroupDelay
VBC2_PUSH_LOCAL 4 //mask
VBC4_PUSH_CONST 3145728 
VBC1_AND
VBC3_PUSH_GLOBAL 1203 //svHumoModelAngFootSide
VBC2_PUSH_LOCAL 3 //frameCount
VBC2_PUSH_LOCAL 2 //delay
VBC1_CALL4
VBC1_STACK_UP5//remove result, call address and params
[1:62] ;
VBC1_RETURN
;legFromModelAndWait <void(,int,int)>
[1:63] ;legFromModel( mask, frameCount, 0 );
VBC3_PUSH_CONST 180  //func address legFromModel
VBC2_PUSH_LOCAL 3 //mask
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_PUSH_0 
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:64] ;sfWaitFrame( frameCount );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:67] ;
VBC1_RETURN
;legFromModelLinear <void(,int,int)>
[1:68] ;sfPoseGroupLin( mask & (8192  | 4096 ), svHumoModelAngHipSide, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_LOCAL 3 //mask
VBC3_PUSH_CONST 12288 
VBC1_AND
VBC3_PUSH_GLOBAL 1200 //svHumoModelAngHipSide
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:69] ;sfPoseGroupLin( mask & (32768  | 16384 ), svHumoModelAngHip + tiltForward, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_LOCAL 3 //mask
VBC4_PUSH_CONST 49152 
VBC1_AND
VBC3_PUSH_GLOBAL 1199 //svHumoModelAngHip
VBC3_PUSH_GLOBAL 10 //tiltForward
VBC1_ADD
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:70] ;sfPoseGroupLin( mask & (131072  | 65536 ), svHumoModelAngKnee, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_LOCAL 3 //mask
VBC4_PUSH_CONST 196608 
VBC1_AND
VBC3_PUSH_GLOBAL 1201 //svHumoModelAngKnee
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:71] ;sfPoseGroupLin( mask & (524288  | 262144 ), svHumoModelAngFoot, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_LOCAL 3 //mask
VBC4_PUSH_CONST 786432 
VBC1_AND
VBC3_PUSH_GLOBAL 1202 //svHumoModelAngFoot
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:72] ;sfPoseGroupLin( mask & (2097152  | 1048576 ), svHumoModelAngFootSide, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_LOCAL 3 //mask
VBC4_PUSH_CONST 3145728 
VBC1_AND
VBC3_PUSH_GLOBAL 1203 //svHumoModelAngFootSide
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:75] ;
VBC1_RETURN
;walking <void()>
[1:83] ;while(1) {
LAB405: //while condition
;
[1:85] ;while( veloForward == 0 )
LAB405: //while condition
VBC3_PUSH_GLOBAL 17 //veloForward
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB423 //while to exit
;sfWaitFrame( 1 );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC1_PUSH_1 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
VBC4_JUMP LAB405 //while forever loop
LAB423: //while exit
[1:89] ;veloForward = (veloForward >> 2) << 2;
VBC2_PUSH_CONST 17 //veloForward
VBC3_PUSH_GLOBAL 17 //veloForward
VBC1_PUSH_2 
VBC1_RSHIFT
VBC1_PUSH_2 
VBC1_LSHIFT
VBC1_POP
[1:92] ;walkLeft = 1;
VBC1_PUSH_2 //walkLeft
VBC1_PUSH_1 
VBC1_POP
[1:93] ;walkSign = -1;
VBC2_PUSH_CONST 3 //walkSign
VBC2_PUSH_CONST -1 // -
VBC1_POP
[1:94] ;walkBack = 0;
VBC2_PUSH_CONST 9 //walkBack
VBC1_PUSH_0 
VBC1_POP
[1:97] ;tiltForward = tiltAddon;
VBC2_PUSH_CONST 10 //tiltForward
VBC3_PUSH_GLOBAL 15 //tiltAddon
VBC1_POP
[1:98] ;sfHumoModelFootAtFloor( 0, 0, walkBaseHeight + walkPush );
VBC5_PUSH_CONST 100 | 0x80000000 //import func index sfHumoModelFootAtFloor
VBC1_PUSH_0 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 4 //walkBaseHeight
VBC3_PUSH_GLOBAL 6 //walkPush
VBC1_ADD
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:99] ;legFromModelAndWait( (1024  | 4096  | 16384  | 65536  | 1048576  | 262144 ), 10 );
VBC3_PUSH_CONST 289  //func address legFromModelAndWait
VBC4_PUSH_CONST 1397760 
VBC2_PUSH_CONST 10 
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
[1:102] ;if( flag == 0 ) {
VBC3_PUSH_GLOBAL 16 //flag
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB516 //if to false
;
[1:103] ;sfAccumSetup4( &leftHipTarget, &leftKneeTarget, &leftFootFrontTarget, &posFront );
VBC5_PUSH_CONST 63 | 0x80000000 //import func index sfAccumSetup4
VBC3_PUSH_CONST 1090 //address
VBC3_PUSH_CONST 1098 //address
VBC3_PUSH_CONST 1106 //address
VBC2_PUSH_CONST 23 //address
VBC1_CALL4
VBC1_STACK_UP5//remove result, call address and params
[1:104] ;sfAccumTrigger();
VBC5_PUSH_CONST 64 | 0x80000000 //import func index sfAccumTrigger
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:105] ;flag = 1;
VBC2_PUSH_CONST 16 //flag
VBC1_PUSH_1 
VBC1_POP
LAB516: //if else
[1:108] ;isWalk = 2;
VBC2_PUSH_CONST 18 //isWalk
VBC1_PUSH_2 
VBC1_POP
[1:109] ;walkFront = 0;
VBC2_PUSH_CONST 8 //walkFront
VBC1_PUSH_0 
VBC1_POP
[1:111] ;while( isWalk ) {
LAB524: //while condition
VBC3_PUSH_GLOBAL 18 //isWalk
VBC4_FALSE_JUMP LAB887 //while to exit
;
[1:113] ;while( (svImuAccX - imuXOffset) * walkSign < 0 )
LAB531: //while condition
VBC3_PUSH_GLOBAL 1000 //svImuAccX
VBC3_PUSH_GLOBAL 7 //imuXOffset
VBC1_SUB
VBC3_PUSH_GLOBAL 3 //walkSign
VBC1_MUL
VBC1_PUSH_0 
VBC1_LESS
VBC4_FALSE_JUMP LAB557 //while to exit
;sfWaitFrame( 1 );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC1_PUSH_1 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
VBC4_JUMP LAB531 //while forever loop
LAB557: //while exit
[1:117] ;if( walkLeft ) {
VBC3_PUSH_GLOBAL 2 //walkLeft
VBC4_FALSE_JUMP LAB585 //if to false
;
[1:118] ;walkLeft = 0;
VBC1_PUSH_2 //walkLeft
VBC1_PUSH_0 
VBC1_POP
[1:119] ;walkSign = 1;
VBC2_PUSH_CONST 3 //walkSign
VBC1_PUSH_1 
VBC1_POP
[1:121] ;if( leftKneePwm > 0 ) return;
VBC3_PUSH_GLOBAL 1100 //leftKneePwm
VBC1_PUSH_0 
VBC1_GREAT
VBC4_FALSE_JUMP LAB581 //if to false
;if( leftKneePwm > 0 ) return;
VBC1_RETURN
LAB581: //if else
VBC4_JUMP LAB603 //if to exit
LAB585: //if else
;
[1:124] ;walkLeft = 1;
VBC1_PUSH_2 //walkLeft
VBC1_PUSH_1 
VBC1_POP
[1:125] ;walkSign = -1;
VBC2_PUSH_CONST 3 //walkSign
VBC2_PUSH_CONST -1 // -
VBC1_POP
[1:127] ;if( rightKneePwm > 0 ) return;
VBC3_PUSH_GLOBAL 1096 //rightKneePwm
VBC1_PUSH_0 
VBC1_GREAT
VBC4_FALSE_JUMP LAB603 //if to false
;if( rightKneePwm > 0 ) return;
VBC1_RETURN
LAB603: //if else
LAB603: //if exit
[1:130] ;tiltForward = tiltAddon + walkFront * 4;
VBC2_PUSH_CONST 10 //tiltForward
VBC3_PUSH_GLOBAL 15 //tiltAddon
VBC3_PUSH_GLOBAL 8 //walkFront
VBC2_PUSH_CONST 4 
VBC1_MUL
VBC1_ADD
VBC1_POP
[1:133] ;sfHumoModelFootAtFloor( -walkFront, 0, walkBaseHeight );
VBC5_PUSH_CONST 100 | 0x80000000 //import func index sfHumoModelFootAtFloor
VBC3_PUSH_GLOBAL 8 //walkFront
VBC1_NEG
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 4 //walkBaseHeight
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:134] ;legFromModel( walkLeft == 0 ? (2048  | 8192  | 32768  | 131072  | 2097152  | 524288 ) : (1024  | 4096  | 16384  | 65536  | 1048576  | 262144 ), 30, 2 );
VBC3_PUSH_CONST 180  //func address legFromModel
VBC3_PUSH_GLOBAL 2 //walkLeft
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB651
VBC4_PUSH_CONST 2795520 
VBC4_JUMP LAB655
LAB651:
VBC4_PUSH_CONST 1397760 
LAB655:
VBC2_PUSH_CONST 30 
VBC1_PUSH_2 
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:159] ;sfHumoModelFootAtFloor( -walkBack, 0, walkBaseHeight - walkLegUp );
VBC5_PUSH_CONST 100 | 0x80000000 //import func index sfHumoModelFootAtFloor
VBC3_PUSH_GLOBAL 9 //walkBack
VBC1_NEG
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 4 //walkBaseHeight
VBC3_PUSH_GLOBAL 5 //walkLegUp
VBC1_SUB
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:160] ;legFromModel( walkLeft ? (2048  | 8192  | 131072  | 2097152  | 524288 ) : (1024  | 4096  | 65536  | 1048576  | 262144 ), 12, 0 );
VBC3_PUSH_CONST 180  //func address legFromModel
VBC3_PUSH_GLOBAL 2 //walkLeft
VBC4_FALSE_JUMP LAB697
VBC4_PUSH_CONST 2762752 
VBC4_JUMP LAB701
LAB697:
VBC4_PUSH_CONST 1381376 
LAB701:
VBC2_PUSH_CONST 12 
VBC1_PUSH_0 
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:164] ;sfHumoModelFootAtFloor( walkFront, 0, walkBaseHeight - walkLegUp );
VBC5_PUSH_CONST 100 | 0x80000000 //import func index sfHumoModelFootAtFloor
VBC3_PUSH_GLOBAL 8 //walkFront
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 4 //walkBaseHeight
VBC3_PUSH_GLOBAL 5 //walkLegUp
VBC1_SUB
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:165] ;legFromModel( walkLeft ? 32768  : 16384 , 24, 0 );
VBC3_PUSH_CONST 180  //func address legFromModel
VBC3_PUSH_GLOBAL 2 //walkLeft
VBC4_FALSE_JUMP LAB742
VBC4_PUSH_CONST 32768 
VBC4_JUMP LAB745
LAB742:
VBC3_PUSH_CONST 16384 
LAB745:
VBC2_PUSH_CONST 24 
VBC1_PUSH_0 
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:166] ;sfWaitFrame( 8 );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_CONST 8 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:168] ;legFromModel( walkLeft ? (2048  | 8192  | 131072  | 2097152  | 524288 ) : (1024  | 4096  | 65536  | 1048576  | 262144 ), 12, 0 );
VBC3_PUSH_CONST 180  //func address legFromModel
VBC3_PUSH_GLOBAL 2 //walkLeft
VBC4_FALSE_JUMP LAB774
VBC4_PUSH_CONST 2762752 
VBC4_JUMP LAB778
LAB774:
VBC4_PUSH_CONST 1381376 
LAB778:
VBC2_PUSH_CONST 12 
VBC1_PUSH_0 
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:169] ;sfWaitFrame( 12 );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_CONST 12 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:173] ;sfHumoModelFootAtFloor( walkFront, 0, walkBaseHeight );
VBC5_PUSH_CONST 100 | 0x80000000 //import func index sfHumoModelFootAtFloor
VBC3_PUSH_GLOBAL 8 //walkFront
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 4 //walkBaseHeight
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:174] ;legFromModelAndWait( walkLeft ? (2048  | 8192  | 32768  | 131072  | 2097152  | 524288 ) : (1024  | 4096  | 16384  | 65536  | 1048576  | 262144 ), 12 );
VBC3_PUSH_CONST 289  //func address legFromModelAndWait
VBC3_PUSH_GLOBAL 2 //walkLeft
VBC4_FALSE_JUMP LAB821
VBC4_PUSH_CONST 2795520 
VBC4_JUMP LAB825
LAB821:
VBC4_PUSH_CONST 1397760 
LAB825:
VBC2_PUSH_CONST 12 
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
[1:176] ;walkBack = walkFront;
VBC2_PUSH_CONST 9 //walkBack
VBC3_PUSH_GLOBAL 8 //walkFront
VBC1_POP
[1:177] ;if( walkFront == 0 ) isWalk--;
VBC3_PUSH_GLOBAL 8 //walkFront
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB847 //if to false
;if( walkFront == 0 ) isWalk--;
VBC2_PUSH_CONST 18 //isWalk
VBC1_DEC
LAB847: //if else
[1:180] ;if( walkFront < veloForward ) walkFront += 2;
VBC3_PUSH_GLOBAL 8 //walkFront
VBC3_PUSH_GLOBAL 17 //veloForward
VBC1_LESS
VBC4_FALSE_JUMP LAB865 //if to false
;if( walkFront < veloForward ) walkFront += 2;
VBC2_PUSH_CONST 8 //walkFront
VBC1_PUSH_TOS
VBC1_LOAD
VBC1_PUSH_2 
VBC1_ADD
VBC1_POP
LAB865: //if else
[1:181] ;if( walkFront > veloForward ) walkFront -= 2;
VBC3_PUSH_GLOBAL 8 //walkFront
VBC3_PUSH_GLOBAL 17 //veloForward
VBC1_GREAT
VBC4_FALSE_JUMP LAB883 //if to false
;if( walkFront > veloForward ) walkFront -= 2;
VBC2_PUSH_CONST 8 //walkFront
VBC1_PUSH_TOS
VBC1_LOAD
VBC1_PUSH_2 
VBC1_SUB
VBC1_POP
LAB883: //if else
VBC4_JUMP LAB524 //while forever loop
LAB887: //while exit
VBC4_JUMP LAB405 //while forever loop
LAB891: //while exit
[1:187] ;
VBC1_RETURN
;main <void()>
[1:189] ;sfPoseGroup( 8  | 4 , -1400, 100 );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 12 
VBC3_PUSH_CONST -1400 // -
VBC2_PUSH_CONST 100 
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:190] ;sfPoseGroup( 32  | 16 , 100, 100 );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 48 
VBC2_PUSH_CONST 100 
VBC2_PUSH_CONST 100 
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:191] ;sfPoseGroup( 512  | 256 , 5000, 100 );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 768 
VBC3_PUSH_CONST 5000 
VBC2_PUSH_CONST 100 
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:192] ;sfPoseGroup( 1  | 33554432 , 0, 100 );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 33554433 
VBC1_PUSH_0 
VBC2_PUSH_CONST 100 
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:193] ;sfWaitFrame( 100 );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_CONST 100 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:195] ;humoConfig();
VBC2_PUSH_CONST 70  //func address humoConfig
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:196] ;veloForward = 4;
VBC2_PUSH_CONST 17 //veloForward
VBC2_PUSH_CONST 4 
VBC1_POP
[1:198] ;while(1) {
LAB964: //while condition
;
[1:200] ;tiltForward = tiltAddon;
VBC2_PUSH_CONST 10 //tiltForward
VBC3_PUSH_GLOBAL 15 //tiltAddon
VBC1_POP
[1:201] ;sfHumoModelFootAtFloor( 0, 0, walkBaseHeight );
VBC5_PUSH_CONST 100 | 0x80000000 //import func index sfHumoModelFootAtFloor
VBC1_PUSH_0 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 4 //walkBaseHeight
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:202] ;legFromModelAndWait( (2048  | 8192  | 32768  | 131072  | 2097152  | 524288 ) | (1024  | 4096  | 16384  | 65536  | 1048576  | 262144 ), 50 );
VBC3_PUSH_CONST 289  //func address legFromModelAndWait
VBC4_PUSH_CONST 4193280 
VBC2_PUSH_CONST 50 
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
[1:205] ;while( leftKneePwm > 0 || rightKneePwm > 0 )
LAB993: //while condition
VBC3_PUSH_GLOBAL 1100 //leftKneePwm
VBC1_PUSH_0 
VBC1_GREAT
VBC4_TRUE_JUMP_KEEP LAB1012
VBC3_PUSH_GLOBAL 1096 //rightKneePwm
VBC1_PUSH_0 
VBC1_GREAT
VBC4_TRUE_JUMP_KEEP LAB1012
VBC1_PUSH_0
LAB1012:
VBC4_FALSE_JUMP LAB1025 //while to exit
;sfWaitFrame( 1 );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC1_PUSH_1 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
VBC4_JUMP LAB993 //while forever loop
LAB1025: //while exit
[1:209] ;sfHumoModelFootAtFloor( 0, 0, walkBaseHeight - drawdown );
VBC5_PUSH_CONST 100 | 0x80000000 //import func index sfHumoModelFootAtFloor
VBC1_PUSH_0 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 4 //walkBaseHeight
VBC3_PUSH_GLOBAL 12 //drawdown
VBC1_SUB
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:210] ;legFromModelAndWait( (2048  | 8192  | 32768  | 131072  | 2097152  | 524288 ) | (1024  | 4096  | 16384  | 65536  | 1048576  | 262144 ), 10 );
VBC3_PUSH_CONST 289  //func address legFromModelAndWait
VBC4_PUSH_CONST 4193280 
VBC2_PUSH_CONST 10 
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
[1:212] ;sfHumoModelFootAtFloor( 0, 0, walkBaseHeight );
VBC5_PUSH_CONST 100 | 0x80000000 //import func index sfHumoModelFootAtFloor
VBC1_PUSH_0 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 4 //walkBaseHeight
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:213] ;legFromModelAndWait( (2048  | 8192  | 32768  | 131072  | 2097152  | 524288 ) | (1024  | 4096  | 16384  | 65536  | 1048576  | 262144 ), 30 );
VBC3_PUSH_CONST 289  //func address legFromModelAndWait
VBC4_PUSH_CONST 4193280 
VBC2_PUSH_CONST 30 
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
[1:215] ;walking();
VBC3_PUSH_CONST 405  //func address walking
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
VBC4_JUMP LAB964 //while forever loop
LAB1084: //while exit
[1:217] ;
VBC1_RETURN
//Init table
//Variables
svFrameCount : 1
svImuAccX : 1000
svImuAccY : 1001
svImuAccZ : 1002
svImuAccRawX : 1003
svImuAccRawY : 1004
svImuAccRawZ : 1005
svImuGyroX : 1006
svImuGyroY : 1007
svImuGyroZ : 1008
svImuGyroRawX : 1009
svImuGyroRawY : 1010
svImuGyroRawZ : 1011
svImuQuaterX : 1012
svImuQuaterY : 1013
svImuQuaterZ : 1014
svImuQuaterW : 1015
svImuQuaterAcc : 1016
svImuAccSlowX : 1017
svImuAccSlowY : 1018
svImuAccSlowZ : 1019
svAdc : 1020
svButtonLeft : 1021
svButtonRight : 1022
svHeadControlMask : 1023
svEulerYaw F: 1024
svEulerPitch F: 1025
svEulerRoll F: 1026
svRemoteStatus : 1190
svRemoteButton : 1191
svRemoteLeftJoystick : 1192
svRemoteLeftJoystickX : 1193
svRemoteLeftJoystickY : 1194
svRemoteRightJoystick : 1195
svRemoteRightJoystickX : 1196
svRemoteRightJoystickY : 1197
svHumoModelDistPelvic : 1204
svHumoModelLengthPelvicHip : 1205
svHumoModelLengthHipHip : 1206
svHumoModelLengthHipKnee : 1207
svHumoModelLengthKneeFoot : 1208
svHumoModelLengthFootFoot : 1209
svHumoModelDistFootFloor : 1210
svHumoModelFootLength : 1211
svHumoModelFootWidth : 1212
svHumoModelFootCenterBack : 1213
svHumoModelFootCenterInner : 1214
svHumoModelAngPelvic : 1198
svHumoModelAngHipSide : 1200
svHumoModelAngHip : 1199
svHumoModelAngKnee : 1201
svHumoModelAngFoot : 1202
svHumoModelAngFootSide : 1203
svIkA5 F: 1215
svIkB5 F: 1216
svIkC5 F: 1217
svIkA6 F: 1218
svIkA7 F: 1219
svIkA8 F: 1220
svIkA9 F: 1221
svIkA10 F: 1222
svIkB10 F: 1223
svIkC10 F: 1224
svIkLimA5min F: 1225
svIkLimA5max F: 1226
svIkLimA6min F: 1227
svIkLimA6max F: 1228
svIkLimA7min F: 1229
svIkLimA7max F: 1230
svIkLimA8min F: 1231
svIkLimA8max F: 1232
svIkLimA9min F: 1233
svIkLimA9max F: 1234
svIkLimA10min F: 1235
svIkLimA10max F: 1236
svIkOutPresent : 1237
svIkEncA5 : 1238
svIkEncA6 : 1239
svIkEncA7 : 1240
svIkEncA8 : 1241
svIkEncA9 : 1242
svIkEncA10 : 1243
headRotateTarget : 1030
headRotateCurrent : 1031
headRotatePwm : 1032
headRotateAddonMix : 1033
torsoRotateTarget : 1034
torsoRotateCurrent : 1035
torsoRotatePwm : 1036
torsoRotateAddonMix : 1037
rightClavicleTarget : 1038
rightClavicleCurrent : 1039
rightClaviclePwm : 1040
rightClavicleAddonMix : 1041
leftClavicleTarget : 1042
leftClavicleCurrent : 1043
leftClaviclePwm : 1044
leftClavicleAddonMix : 1045
rightShoulderTarget : 1046
rightShoulderCurrent : 1047
rightShoulderPwm : 1048
rightShoulderAddonMix : 1049
leftShoulderTarget : 1050
leftShoulderCurrent : 1051
leftShoulderPwm : 1052
leftShoulderAddonMix : 1053
rightElbowSideTarget : 1054
rightElbowSideCurrent : 1055
rightElbowSidePwm : 1056
rightElbowSideAddonMix : 1057
leftElbowSideTarget : 1058
leftElbowSideCurrent : 1059
leftElbowSidePwm : 1060
leftElbowSideAddonMix : 1061
rightElbowTarget : 1062
rightElbowCurrent : 1063
rightElbowPwm : 1064
rightElbowAddonMix : 1065
leftElbowTarget : 1066
leftElbowCurrent : 1067
leftElbowPwm : 1068
leftElbowAddonMix : 1069
rightPelvicTarget : 1070
rightPelvicCurrent : 1071
rightPelvicPwm : 1072
rightPelvicAddonMix : 1073
leftPelvicTarget : 1074
leftPelvicCurrent : 1075
leftPelvicPwm : 1076
leftPelvicAddonMix : 1077
rightHipSideTarget : 1078
rightHipSideCurrent : 1079
rightHipSidePwm : 1080
rightHipSideAddonMix : 1081
leftHipSideTarget : 1082
leftHipSideCurrent : 1083
leftHipSidePwm : 1084
leftHipSideAddonMix : 1085
rightHipTarget : 1086
rightHipCurrent : 1087
rightHipPwm : 1088
rightHipAddonMix : 1089
leftHipTarget : 1090
leftHipCurrent : 1091
leftHipPwm : 1092
leftHipAddonMix : 1093
rightKneeTarget : 1094
rightKneeCurrent : 1095
rightKneePwm : 1096
rightKneeAddonMix : 1097
leftKneeTarget : 1098
leftKneeCurrent : 1099
leftKneePwm : 1100
leftKneeAddonMix : 1101
rightFootFrontTarget : 1102
rightFootFrontCurrent : 1103
rightFootFrontPwm : 1104
rightFootFrontAddonMix : 1105
leftFootFrontTarget : 1106
leftFootFrontCurrent : 1107
leftFootFrontPwm : 1108
leftFootFrontAddonMix : 1109
rightFootSideTarget : 1110
rightFootSideCurrent : 1111
rightFootSidePwm : 1112
rightFootSideAddonMix : 1113
leftFootSideTarget : 1114
leftFootSideCurrent : 1115
leftFootSidePwm : 1116
leftFootSideAddonMix : 1117
rightHandTarget : 1118
rightHandCurrent : 1119
rightHandPwm : 1120
rightHandAddonMix : 1121
leftHandTarget : 1122
leftHandCurrent : 1123
leftHandPwm : 1124
leftHandAddonMix : 1125
headTiltTarget : 1130
headTiltCurrent : 1131
headTiltPwm : 1132
headTiltAddonMix : 1133
rightKneeBotTarget : 1134
rightKneeBotCurrent : 1135
rightKneeBotPwm : 1136
rightKneeBotAddonMix : 1137
leftKneeBotTarget : 1138
leftKneeBotCurrent : 1139
leftKneeBotPwm : 1140
leftKneeBotAddonMix : 1141
rightClawTarget : 1142
rightClawCurrent : 1143
rightClawPwm : 1144
rightClawAddonMix : 1145
leftClawTarget : 1146
leftClawCurrent : 1147
leftClawPwm : 1148
leftClawAddonMix : 1149
walkLeft : 2
walkSign : 3
walkBaseHeight : 4
walkLegUp : 5
walkPush : 6
imuXOffset : 7
walkFront : 8
walkBack : 9
tiltForward : 10
walkType : 11
drawdown : 12
forwardFactor : 13
forwardPelvic : 14
tiltAddon : 15
flag : 16
veloForward : 17
isWalk : 18
deltaFront : 19
frontStep : 20
heightStep : 21
index : 22
posFront : 23
posHeight : 24
