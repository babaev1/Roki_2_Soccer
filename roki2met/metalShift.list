//====================================================================
//      SvCompiler V6.06
//By A.Sibilev
//====================================================================
//cblock

;sfVpuVersion <int()>
;sfCreateTask <int(,*<void()>,int)>
;sfLog <void(,cstring,int,int,int)>
;sfLogOpen <void(,cstring)>
;sfLogClose <void()>
;sfWaitFrameOut <void(,int)>
;sfIsFrameOut <int(,int)>
;sfWaitNextFrame <void()>
;sfSlotIndex <int(,cstring)>
;sfAbs <int(,int)>
;sfIMin <int(,int,int)>
;sfIMax <int(,int,int)>
;sfUMin <int(,int,int)>
;sfUMax <int(,int,int)>
;sfILimit <int(,int,int,int)>
;sfStop <void()>
;sfStartSlot <void(,int)>
;sfBip <void(,int,int)>
;sfFreeGroup <void(,int)>
;sfPoseGroup <void(,int,int,int)>
;sfPoseGroupDelay <void(,int,int,int,int)>
;sfPoseCorrect <void(,int,int)>
;sfQueueGroup <void(,int,int,int)>
;sfPoseIdx <void(,int,int,int)>
;sfPoseGroupLin <void(,int,int,int)>
;sfStrainGroup <void(,int)>
;sfPlaySamples <void(,int,*cblock,int)>
;sfAccumSetup1 <void(,*int)>
;sfAccumSetup2 <void(,*int,*int)>
;sfAccumSetup3 <void(,*int,*int,*int)>
;sfAccumSetup4 <void(,*int,*int,*int,*int)>
;sfAccumTrigger <void()>
;sfAccumReset <void()>
;sfMathAcos <int(,int,int)>
;sfMathSqrti <int(,int)>
;sfMathAngleOfTriangle <int(,int,int,int)>
;sfMathAngleOfKnee <int(,int,int,int)>
;sfMathCathetOfSquareTriangle <int(,int,int)>
;sfMathHypotenuseOfSquareTriangle <int(,int,int)>
;sfMathTableSin <int(,int,int)>
;sfHumoModelSetup <void()>
;sfHumoModelFootAtFloor <void(,int,int,int)>
;sfHumoModelFootPush <void(,int,int,int)>
;sfIndexOfMask <int(,int)>
;sfQueueIdxAppend <int(,int,int,int)>
;sfQueueIdxOffsets <int(,int,int,*cblock,int)>
;sfQueueIdxSinMove <int(,int,int,int,int)>
;sfQueueIdxLast <int(,int)>
;sfQueueIdxCount <int(,int)>
;sfQueueMax <int()>
;sfIkSetup <void()>
;sfIkAngle <void(,float,float,float,float,float,float,float)>
;sfMathCos <float(,float)>
;sfMathSin <float(,float)>
;sfQuaternionToEuler <void(,float,float,float,float)>
;sfQuaternionToEulerImu <void()>
;sfFMathACos <float(,float)>
;sfFMathASin <float(,float)>
;sfFMathATan <float(,float)>
;sfFMathATan2 <float(,float,float)>
;sfFMathCos <float(,float)>
;sfFMathSin <float(,float)>
;sfFMathTan <float(,float)>
;sfFMathCosh <float(,float)>
;sfFMathSinh <float(,float)>
;sfFMathTanh <float(,float)>
;sfFMathExp <float(,float)>
;sfFMathFrExp <float(,float,*int)>
;sfFMathLdExp <float(,float,int)>
;sfFMathLog <float(,float)>
;sfFMathLog10 <float(,float)>
;sfFMathModf <float(,float,*float)>
;sfFMathPow <float(,float,float)>
;sfFMathSqrt <float(,float)>
;sfFMathCeil <float(,float)>
;sfFMathFAbs <float(,float)>
;sfFMathFloor <float(,float)>
;sfFMathFMod <float(,float,float)>
;sfWaitFrame <void(,int)>
[3:348] ;sfWaitFrameOut( frame + svFrameCount );
VBC5_PUSH_CONST 17 | 0x80000000 //import func index sfWaitFrameOut
VBC2_PUSH_LOCAL 2 //frame
VBC3_PUSH_GLOBAL 1 //svFrameCount
VBC1_ADD
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[2:10] ;
VBC1_RETURN
;stand0 <void()>
[1:31] ;frame = 50;
VBC2_PUSH_CONST 14 //frame
VBC2_PUSH_CONST 50 
VBC1_POP
[1:32] ;sfPoseGroup( 1056964607  & ~((32768  | 16384 ) | (524288  | 262144 ) | (131072  | 65536  | 134217728  | 67108864 )), 0, frame );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 854605823 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 14 //frame
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:34] ;sfPoseGroup( (32768  | 16384 ) | (524288  | 262144 ), walkStandAngle, frame );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 835584 
VBC3_PUSH_GLOBAL 3 //walkStandAngle
VBC3_PUSH_GLOBAL 14 //frame
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:36] ;sfPoseGroup( (131072  | 65536  | 134217728  | 67108864 ), walkStandAngle, frame );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 201523200 
VBC3_PUSH_GLOBAL 3 //walkStandAngle
VBC3_PUSH_GLOBAL 14 //frame
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:37] ;sfWaitFrame( frame );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 14 //frame
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:40] ;
VBC1_RETURN
;pushAndUp <void()>
[1:51] ;sfPoseGroup( walkLeft ? (32768  | 131072  | 524288  | 134217728 ) : (16384  | 65536  | 262144  | 67108864 ), 0, pushFrame );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_GLOBAL 2 //walkLeft
VBC4_FALSE_JUMP LAB155
VBC5_PUSH_CONST 134905856 
VBC4_JUMP LAB160
LAB155:
VBC5_PUSH_CONST 67452928 
LAB160:
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 19 //pushFrame
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:59] ;sfWaitFrame( pushFrame );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 19 //pushFrame
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:62] ;maskSingleAngle = walkLeft ? (32768  | 524288  | 131072  | 134217728 ) : (16384  | 262144  | 65536  | 67108864 );
VBC2_PUSH_CONST 17 //maskSingleAngle
VBC3_PUSH_GLOBAL 2 //walkLeft
VBC4_FALSE_JUMP LAB191
VBC5_PUSH_CONST 134905856 
VBC4_JUMP LAB196
LAB191:
VBC5_PUSH_CONST 67452928 
LAB196:
VBC1_POP
[1:63] ;sfPoseGroup( maskSingleAngle, walkLegUpAngle, legUpFrame );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_GLOBAL 17 //maskSingleAngle
VBC3_PUSH_GLOBAL 6 //walkLegUpAngle
VBC3_PUSH_GLOBAL 21 //legUpFrame
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:65] ;sfWaitFrame( legUpFrame );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 21 //legUpFrame
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:69] ;
VBC1_RETURN
;legUp <void()>
[1:78] ;maskSingleAngle = walkLeft ? (32768  | 524288  | 131072  | 134217728 ) : (16384  | 262144  | 65536  | 67108864 );
VBC2_PUSH_CONST 17 //maskSingleAngle
VBC3_PUSH_GLOBAL 2 //walkLeft
VBC4_FALSE_JUMP LAB239
VBC5_PUSH_CONST 134905856 
VBC4_JUMP LAB244
LAB239:
VBC5_PUSH_CONST 67452928 
LAB244:
VBC1_POP
[1:79] ;sfPoseGroup( maskSingleAngle, walkLegUpAngle, legUpFrame );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_GLOBAL 17 //maskSingleAngle
VBC3_PUSH_GLOBAL 6 //walkLegUpAngle
VBC3_PUSH_GLOBAL 21 //legUpFrame
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:82] ;sfWaitFrame( legUpFrame );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 21 //legUpFrame
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:86] ;
VBC1_RETURN
;putDown <void()>
[1:87] ;maskSingleAngle = walkLeft ? (32768  | 524288  | 131072  | 134217728 ) : (16384  | 262144  | 65536  | 67108864 );
VBC2_PUSH_CONST 17 //maskSingleAngle
VBC3_PUSH_GLOBAL 2 //walkLeft
VBC4_FALSE_JUMP LAB287
VBC5_PUSH_CONST 134905856 
VBC4_JUMP LAB292
LAB287:
VBC5_PUSH_CONST 67452928 
LAB292:
VBC1_POP
[1:88] ;sfPoseGroup( maskSingleAngle, walkStandAngle, downFrame );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_GLOBAL 17 //maskSingleAngle
VBC3_PUSH_GLOBAL 3 //walkStandAngle
VBC3_PUSH_GLOBAL 22 //downFrame
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:91] ;sfWaitFrame( downFrame );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 22 //downFrame
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:94] ;
VBC1_RETURN
;init <void()>
[1:95] ;pushFrame = 20;
VBC2_PUSH_CONST 19 //pushFrame
VBC2_PUSH_CONST 20 
VBC1_POP
[1:96] ;slideFrame = 15;
VBC2_PUSH_CONST 20 //slideFrame
VBC2_PUSH_CONST 15 
VBC1_POP
[1:97] ;legUpFrame = 15;
VBC2_PUSH_CONST 21 //legUpFrame
VBC2_PUSH_CONST 15 
VBC1_POP
[1:98] ;downFrame = 15;
VBC2_PUSH_CONST 22 //downFrame
VBC2_PUSH_CONST 15 
VBC1_POP
[1:99] ;downSideFrame = 10;
VBC2_PUSH_CONST 23 //downSideFrame
VBC2_PUSH_CONST 10 
VBC1_POP
[1:100] ;walkStandAngle = 800;
VBC2_PUSH_CONST 3 //walkStandAngle
VBC3_PUSH_CONST 800 
VBC1_POP
[1:101] ;walkSidingAngle = 200;
VBC2_PUSH_CONST 4 //walkSidingAngle
VBC3_PUSH_CONST 200 
VBC1_POP
[1:102] ;walkLegUpAngle = 1400;
VBC2_PUSH_CONST 6 //walkLegUpAngle
VBC3_PUSH_CONST 1400 
VBC1_POP
[1:103] ;walkTorsoAngle = 800;
VBC2_PUSH_CONST 7 //walkTorsoAngle
VBC3_PUSH_CONST 800 
VBC1_POP
[1:104] ;walkLegForward = 0;
VBC2_PUSH_CONST 8 //walkLegForward
VBC1_PUSH_0 
VBC1_POP
[1:105] ;walkHipBackward = 0;
VBC2_PUSH_CONST 9 //walkHipBackward
VBC1_PUSH_0 
VBC1_POP
[1:106] ;walkLegDnAngle = 500;
VBC2_PUSH_CONST 10 //walkLegDnAngle
VBC3_PUSH_CONST 500 
VBC1_POP
[1:107] ;walkMoveRotate = -200;
VBC2_PUSH_CONST 12 //walkMoveRotate
VBC3_PUSH_CONST -200 // -
VBC1_POP
[1:108] ;walkMoveForward = 800;
VBC2_PUSH_CONST 13 //walkMoveForward
VBC3_PUSH_CONST 800 
VBC1_POP
[1:111] ;
VBC1_RETURN
;main <void()>
VBC1_STACK_DN1//local vars 1
[1:112] ;init();
VBC3_PUSH_CONST 317  //func address init
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:114] ;stand0();
VBC2_PUSH_CONST 70  //func address stand0
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:117] ;sfAccumSetup4( &leftKneeCurrent, &svImuAccX, &rightKneeCurrent, &leftKneeTarget );
VBC5_PUSH_CONST 63 | 0x80000000 //import func index sfAccumSetup4
VBC3_PUSH_CONST 1099 //address
VBC3_PUSH_CONST 1000 //address
VBC3_PUSH_CONST 1095 //address
VBC3_PUSH_CONST 1098 //address
VBC1_CALL4
VBC1_STACK_UP5//remove result, call address and params
[1:118] ;sfAccumTrigger();
VBC5_PUSH_CONST 64 | 0x80000000 //import func index sfAccumTrigger
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:120] ;pushAndUp();
VBC3_PUSH_CONST 134  //func address pushAndUp
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:122] ;while(1) {
LAB434: //while condition
;
[1:124] ;putDown();
VBC3_PUSH_CONST 269  //func address putDown
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:126] ;
[1:126] ;int sign = walkLeft ? -1 : 1;
VBC2_PUSH_B_OFFSET -1 //sign
VBC3_PUSH_GLOBAL 2 //walkLeft
VBC4_FALSE_JUMP LAB454
VBC2_PUSH_CONST -1 // -
VBC4_JUMP LAB455
LAB454:
VBC1_PUSH_1 
LAB455:
VBC1_POP
[1:127] ;while( svImuAccX * sign < 0 )
LAB456: //while condition
VBC3_PUSH_GLOBAL 1000 //svImuAccX
VBC2_PUSH_LOCAL -1 //sign
VBC1_MUL
VBC1_PUSH_0 
VBC1_LESS
VBC4_FALSE_JUMP LAB477 //while to exit
;sfWaitFrame( 1 );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC1_PUSH_1 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
VBC4_JUMP LAB456 //while forever loop
LAB477: //while exit
[1:130] ;if( walkLeft )
VBC3_PUSH_GLOBAL 2 //walkLeft
VBC4_FALSE_JUMP LAB491 //if to false
;walkLeft = 0;
VBC1_PUSH_2 //walkLeft
VBC1_PUSH_0 
VBC1_POP
VBC4_JUMP LAB494 //if to exit
LAB491: //if else
;walkLeft = 1;
VBC1_PUSH_2 //walkLeft
VBC1_PUSH_1 
VBC1_POP
LAB494: //if exit
[1:135] ;legUp();
VBC3_PUSH_CONST 221  //func address legUp
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
VBC4_JUMP LAB434 //while forever loop
LAB503: //while exit
[1:137] ;
VBC1_RETURN
//Init table
//Variables
svFrameCount : 1
svImuAccX : 1000
svImuAccY : 1001
svImuAccZ : 1002
svImuAccRawX : 1003
svImuAccRawY : 1004
svImuAccRawZ : 1005
svImuGyroX : 1006
svImuGyroY : 1007
svImuGyroZ : 1008
svImuGyroRawX : 1009
svImuGyroRawY : 1010
svImuGyroRawZ : 1011
svImuQuaterX : 1012
svImuQuaterY : 1013
svImuQuaterZ : 1014
svImuQuaterW : 1015
svImuQuaterAcc : 1016
svImuAccSlowX : 1017
svImuAccSlowY : 1018
svImuAccSlowZ : 1019
svAdc : 1020
svButtonLeft : 1021
svButtonRight : 1022
svHeadControlMask : 1023
svEulerYaw F: 1024
svEulerPitch F: 1025
svEulerRoll F: 1026
svRemoteStatus : 1190
svRemoteButton : 1191
svRemoteLeftJoystick : 1192
svRemoteLeftJoystickX : 1193
svRemoteLeftJoystickY : 1194
svRemoteRightJoystick : 1195
svRemoteRightJoystickX : 1196
svRemoteRightJoystickY : 1197
svHumoModelDistPelvic : 1204
svHumoModelLengthPelvicHip : 1205
svHumoModelLengthHipHip : 1206
svHumoModelLengthHipKnee : 1207
svHumoModelLengthKneeFoot : 1208
svHumoModelLengthFootFoot : 1209
svHumoModelDistFootFloor : 1210
svHumoModelFootLength : 1211
svHumoModelFootWidth : 1212
svHumoModelFootCenterBack : 1213
svHumoModelFootCenterInner : 1214
svHumoModelAngPelvic : 1198
svHumoModelAngHipSide : 1200
svHumoModelAngHip : 1199
svHumoModelAngKnee : 1201
svHumoModelAngFoot : 1202
svHumoModelAngFootSide : 1203
svIkA5 F: 1215
svIkB5 F: 1216
svIkC5 F: 1217
svIkA6 F: 1218
svIkA7 F: 1219
svIkA8 F: 1220
svIkA9 F: 1221
svIkA10 F: 1222
svIkB10 F: 1223
svIkC10 F: 1224
svIkLimA5min F: 1225
svIkLimA5max F: 1226
svIkLimA6min F: 1227
svIkLimA6max F: 1228
svIkLimA7min F: 1229
svIkLimA7max F: 1230
svIkLimA8min F: 1231
svIkLimA8max F: 1232
svIkLimA9min F: 1233
svIkLimA9max F: 1234
svIkLimA10min F: 1235
svIkLimA10max F: 1236
svIkOutPresent : 1237
svIkEncA5 : 1238
svIkEncA6 : 1239
svIkEncA7 : 1240
svIkEncA8 : 1241
svIkEncA9 : 1242
svIkEncA10 : 1243
headRotateTarget : 1030
headRotateCurrent : 1031
headRotatePwm : 1032
headRotateAddonMix : 1033
torsoRotateTarget : 1034
torsoRotateCurrent : 1035
torsoRotatePwm : 1036
torsoRotateAddonMix : 1037
rightClavicleTarget : 1038
rightClavicleCurrent : 1039
rightClaviclePwm : 1040
rightClavicleAddonMix : 1041
leftClavicleTarget : 1042
leftClavicleCurrent : 1043
leftClaviclePwm : 1044
leftClavicleAddonMix : 1045
rightShoulderTarget : 1046
rightShoulderCurrent : 1047
rightShoulderPwm : 1048
rightShoulderAddonMix : 1049
leftShoulderTarget : 1050
leftShoulderCurrent : 1051
leftShoulderPwm : 1052
leftShoulderAddonMix : 1053
rightElbowSideTarget : 1054
rightElbowSideCurrent : 1055
rightElbowSidePwm : 1056
rightElbowSideAddonMix : 1057
leftElbowSideTarget : 1058
leftElbowSideCurrent : 1059
leftElbowSidePwm : 1060
leftElbowSideAddonMix : 1061
rightElbowTarget : 1062
rightElbowCurrent : 1063
rightElbowPwm : 1064
rightElbowAddonMix : 1065
leftElbowTarget : 1066
leftElbowCurrent : 1067
leftElbowPwm : 1068
leftElbowAddonMix : 1069
rightPelvicTarget : 1070
rightPelvicCurrent : 1071
rightPelvicPwm : 1072
rightPelvicAddonMix : 1073
leftPelvicTarget : 1074
leftPelvicCurrent : 1075
leftPelvicPwm : 1076
leftPelvicAddonMix : 1077
rightHipSideTarget : 1078
rightHipSideCurrent : 1079
rightHipSidePwm : 1080
rightHipSideAddonMix : 1081
leftHipSideTarget : 1082
leftHipSideCurrent : 1083
leftHipSidePwm : 1084
leftHipSideAddonMix : 1085
rightHipTarget : 1086
rightHipCurrent : 1087
rightHipPwm : 1088
rightHipAddonMix : 1089
leftHipTarget : 1090
leftHipCurrent : 1091
leftHipPwm : 1092
leftHipAddonMix : 1093
rightKneeTarget : 1094
rightKneeCurrent : 1095
rightKneePwm : 1096
rightKneeAddonMix : 1097
leftKneeTarget : 1098
leftKneeCurrent : 1099
leftKneePwm : 1100
leftKneeAddonMix : 1101
rightFootFrontTarget : 1102
rightFootFrontCurrent : 1103
rightFootFrontPwm : 1104
rightFootFrontAddonMix : 1105
leftFootFrontTarget : 1106
leftFootFrontCurrent : 1107
leftFootFrontPwm : 1108
leftFootFrontAddonMix : 1109
rightFootSideTarget : 1110
rightFootSideCurrent : 1111
rightFootSidePwm : 1112
rightFootSideAddonMix : 1113
leftFootSideTarget : 1114
leftFootSideCurrent : 1115
leftFootSidePwm : 1116
leftFootSideAddonMix : 1117
rightHandTarget : 1118
rightHandCurrent : 1119
rightHandPwm : 1120
rightHandAddonMix : 1121
leftHandTarget : 1122
leftHandCurrent : 1123
leftHandPwm : 1124
leftHandAddonMix : 1125
headTiltTarget : 1130
headTiltCurrent : 1131
headTiltPwm : 1132
headTiltAddonMix : 1133
rightKneeBotTarget : 1134
rightKneeBotCurrent : 1135
rightKneeBotPwm : 1136
rightKneeBotAddonMix : 1137
leftKneeBotTarget : 1138
leftKneeBotCurrent : 1139
leftKneeBotPwm : 1140
leftKneeBotAddonMix : 1141
rightClawTarget : 1142
rightClawCurrent : 1143
rightClawPwm : 1144
rightClawAddonMix : 1145
leftClawTarget : 1146
leftClawCurrent : 1147
leftClawPwm : 1148
leftClawAddonMix : 1149
walkLeft : 2
walkStandAngle : 3
walkSidingAngle : 4
walkFootAddon : 5
walkLegUpAngle : 6
walkTorsoAngle : 7
walkLegForward : 8
walkHipBackward : 9
walkLegDnAngle : 10
walkMoveSide : 11
walkMoveRotate : 12
walkMoveForward : 13
frame : 14
angle : 15
angleFoot : 16
maskSingleAngle : 17
maskDoubleAngle : 18
pushFrame : 19
slideFrame : 20
legUpFrame : 21
downFrame : 22
downSideFrame : 23
