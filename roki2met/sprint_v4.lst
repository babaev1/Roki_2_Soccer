//*****************************************************************
// Script Compiler V6.06
// Author: Sibilev A.S.
// Web: www.rc.saliLab.com
//*****************************************************************

//==================
// types list
int int
*int *int
float float
*float *float
cstring cstring
*cstring *cstring
void void
*void *void
fail type undef
cblock cblock
*cblock *cblock
empty type <int()>
empty type <void()>
*empty type *<void()>
empty type <int(,*<void()>,int)>
empty type <void(,cstring,int,int,int)>
empty type <void(,cstring)>
empty type <void(,int)>
empty type <int(,int)>
empty type <int(,cstring)>
empty type <int(,int,int)>
empty type <int(,int,int,int)>
empty type <void(,int,int)>
empty type <void(,int,int,int)>
empty type <void(,int,int,int,int)>
empty type <void(,int,*cblock,int)>
empty type <void(,*int)>
empty type <void(,*int,*int)>
empty type <void(,*int,*int,*int)>
empty type <void(,*int,*int,*int,*int)>
empty type <int(,int,int,*cblock,int)>
empty type <int(,int,int,int,int)>
empty type <void(,float,float,float,float,float,float,float)>
empty type <float(,float)>
empty type <void(,float,float,float,float)>
empty type <float(,float,float)>
empty type <float(,float,*int)>
empty type <float(,float,int)>
empty type <float(,float,*float)>

//==================
// global variables
int 1:svFrameCount
int 1000:svImuAccX
int 1001:svImuAccY
int 1002:svImuAccZ
int 1003:svImuAccRawX
int 1004:svImuAccRawY
int 1005:svImuAccRawZ
int 1006:svImuGyroX
int 1007:svImuGyroY
int 1008:svImuGyroZ
int 1009:svImuGyroRawX
int 1010:svImuGyroRawY
int 1011:svImuGyroRawZ
int 1012:svImuQuaterX
int 1013:svImuQuaterY
int 1014:svImuQuaterZ
int 1015:svImuQuaterW
int 1016:svImuQuaterAcc
int 1017:svImuAccSlowX
int 1018:svImuAccSlowY
int 1019:svImuAccSlowZ
int 1020:svAdc
int 1021:svButtonLeft
int 1022:svButtonRight
int 1023:svButtonPress
int 1024:svHeadControlMask
float 1025:svEulerYaw
float 1026:svEulerPitch
float 1027:svEulerRoll
int 1190:svRemoteStatus
int 1191:svRemoteButton
int 1192:svRemoteLeftJoystick
int 1193:svRemoteLeftJoystickX
int 1194:svRemoteLeftJoystickY
int 1195:svRemoteRightJoystick
int 1196:svRemoteRightJoystickX
int 1197:svRemoteRightJoystickY
int 1204:svHumoModelDistPelvic
int 1205:svHumoModelLengthPelvicHip
int 1206:svHumoModelLengthHipHip
int 1207:svHumoModelLengthHipKnee
int 1208:svHumoModelLengthKneeFoot
int 1209:svHumoModelLengthFootFoot
int 1210:svHumoModelDistFootFloor
int 1211:svHumoModelFootLength
int 1212:svHumoModelFootWidth
int 1213:svHumoModelFootCenterBack
int 1214:svHumoModelFootCenterInner
int 1198:svHumoModelAngPelvic
int 1200:svHumoModelAngHipSide
int 1199:svHumoModelAngHip
int 1201:svHumoModelAngKnee
int 1202:svHumoModelAngFoot
int 1203:svHumoModelAngFootSide
float 1215:svIkA5
float 1216:svIkB5
float 1217:svIkC5
float 1218:svIkA6
float 1219:svIkA7
float 1220:svIkA8
float 1221:svIkA9
float 1222:svIkA10
float 1223:svIkB10
float 1224:svIkC10
float 1225:svIkLimA5min
float 1226:svIkLimA5max
float 1227:svIkLimA6min
float 1228:svIkLimA6max
float 1229:svIkLimA7min
float 1230:svIkLimA7max
float 1231:svIkLimA8min
float 1232:svIkLimA8max
float 1233:svIkLimA9min
float 1234:svIkLimA9max
float 1235:svIkLimA10min
float 1236:svIkLimA10max
int 1237:svIkOutPresent
int 1238:svIkEncA5
int 1239:svIkEncA6
int 1240:svIkEncA7
int 1241:svIkEncA8
int 1242:svIkEncA9
int 1243:svIkEncA10
int 1030:headRotateTarget
int 1031:headRotateCurrent
int 1032:headRotatePwm
int 1033:headRotateAddonMix
int 1034:torsoRotateTarget
int 1035:torsoRotateCurrent
int 1036:torsoRotatePwm
int 1037:torsoRotateAddonMix
int 1038:rightClavicleTarget
int 1039:rightClavicleCurrent
int 1040:rightClaviclePwm
int 1041:rightClavicleAddonMix
int 1042:leftClavicleTarget
int 1043:leftClavicleCurrent
int 1044:leftClaviclePwm
int 1045:leftClavicleAddonMix
int 1046:rightShoulderTarget
int 1047:rightShoulderCurrent
int 1048:rightShoulderPwm
int 1049:rightShoulderAddonMix
int 1050:leftShoulderTarget
int 1051:leftShoulderCurrent
int 1052:leftShoulderPwm
int 1053:leftShoulderAddonMix
int 1054:rightElbowSideTarget
int 1055:rightElbowSideCurrent
int 1056:rightElbowSidePwm
int 1057:rightElbowSideAddonMix
int 1058:leftElbowSideTarget
int 1059:leftElbowSideCurrent
int 1060:leftElbowSidePwm
int 1061:leftElbowSideAddonMix
int 1062:rightElbowTarget
int 1063:rightElbowCurrent
int 1064:rightElbowPwm
int 1065:rightElbowAddonMix
int 1066:leftElbowTarget
int 1067:leftElbowCurrent
int 1068:leftElbowPwm
int 1069:leftElbowAddonMix
int 1070:rightPelvicTarget
int 1071:rightPelvicCurrent
int 1072:rightPelvicPwm
int 1073:rightPelvicAddonMix
int 1074:leftPelvicTarget
int 1075:leftPelvicCurrent
int 1076:leftPelvicPwm
int 1077:leftPelvicAddonMix
int 1078:rightHipSideTarget
int 1079:rightHipSideCurrent
int 1080:rightHipSidePwm
int 1081:rightHipSideAddonMix
int 1082:leftHipSideTarget
int 1083:leftHipSideCurrent
int 1084:leftHipSidePwm
int 1085:leftHipSideAddonMix
int 1086:rightHipTarget
int 1087:rightHipCurrent
int 1088:rightHipPwm
int 1089:rightHipAddonMix
int 1090:leftHipTarget
int 1091:leftHipCurrent
int 1092:leftHipPwm
int 1093:leftHipAddonMix
int 1094:rightKneeTarget
int 1095:rightKneeCurrent
int 1096:rightKneePwm
int 1097:rightKneeAddonMix
int 1098:leftKneeTarget
int 1099:leftKneeCurrent
int 1100:leftKneePwm
int 1101:leftKneeAddonMix
int 1102:rightFootFrontTarget
int 1103:rightFootFrontCurrent
int 1104:rightFootFrontPwm
int 1105:rightFootFrontAddonMix
int 1106:leftFootFrontTarget
int 1107:leftFootFrontCurrent
int 1108:leftFootFrontPwm
int 1109:leftFootFrontAddonMix
int 1110:rightFootSideTarget
int 1111:rightFootSideCurrent
int 1112:rightFootSidePwm
int 1113:rightFootSideAddonMix
int 1114:leftFootSideTarget
int 1115:leftFootSideCurrent
int 1116:leftFootSidePwm
int 1117:leftFootSideAddonMix
int 1118:rightHandTarget
int 1119:rightHandCurrent
int 1120:rightHandPwm
int 1121:rightHandAddonMix
int 1122:leftHandTarget
int 1123:leftHandCurrent
int 1124:leftHandPwm
int 1125:leftHandAddonMix
int 1130:headTiltTarget
int 1131:headTiltCurrent
int 1132:headTiltPwm
int 1133:headTiltAddonMix
int 1134:rightKneeBotTarget
int 1135:rightKneeBotCurrent
int 1136:rightKneeBotPwm
int 1137:rightKneeBotAddonMix
int 1138:leftKneeBotTarget
int 1139:leftKneeBotCurrent
int 1140:leftKneeBotPwm
int 1141:leftKneeBotAddonMix
int 1142:rightClawTarget
int 1143:rightClawCurrent
int 1144:rightClawPwm
int 1145:rightClawAddonMix
int 1146:leftClawTarget
int 1147:leftClawCurrent
int 1148:leftClawPwm
int 1149:leftClawAddonMix
int 2:restart_flag
int 3:timeStep
int 4:orderFromHead
int 5:pitStop
int 6:startStop
int 7:cycle_number
int 8:hipTilt
int 9:stepLengthOrder
int 10:fps
int 11:fr1
int 12:fr2
int 13:gaitHeight
int 14:stepHeight
float 15:bodyTiltAtWalk
float 16:solyLandingSkew
float 17:ugol_torsa
int 18:slowWalk
float 19:stepLength
float 20:sideLength
float 21:rotation
float 22:selfMotionShiftCorrectionX
float 23:selfMotionShiftCorrectionY
float 24:selfFirstStepYield
float 25:selfCycleStepYield
float 26:selfSideStepRightYield
float 27:selfSideStepLeftYield
int 28:selfFirstLegIsRightLeg
int 29:motion_to_right
float 30:side_motion
int 31:selfInitPoses
int 32:selfExitFlag
int 33:selfFallingFlag
int 34:selfNeckPan
float 35:rotationYieldRight
float 36:rotationYieldLeft
int 37:framestep
float 38:xtr
float 39:ytr
float 40:ztr
float 41:xr
float 42:yr
float 43:zr
float 44:wr
float 45:xtl
float 46:ytl
float 47:ztl
float 48:xl
float 49:yl
float 50:zl
float 51:wl
float 52:e10
float 53:d10
float 54:amplitude
float 55:alpha01
float 56:correctedStepLenght
float 57:correctedStepLenghtHalf
float 58:correctedSideLenght
float 59:correctedSideLenghtHalf
float 60:ztr0
float 61:ztl0
float 62:stepZtr
float 63:stepZtl
float 64:stepYtr
float 65:stepYtl
int 66:stepType
int 67:flag
int 68:flag_event
float 69:dobavka_x_ot_torsa
float 70:tors_angle
float 71:reducer
int 72:torsoAdd
float 73:forwardDirection
float 74:correctedRotation
int 75:j
float 76:xtl0
float 77:xtr0
float 78:dx0Typical
float 79:dy0Typical
float 80:s
float 81:fase_offset
float 82:dx
float 83:dy
float 84:dx1
float 85:dx2
float 86:dx4
float 87:stepRotation
float 88:xtl_plan
float 89:xtr_plan
float 90:dx0
int 91:leftRightFactor
int 92:frontBackFactor

//==================
//  functions
function declare int sfVpuVersion(
) end function declare
function declare int sfCreateTask(
 *<void()> 3:fun
 int 2:stackSize
) end function declare
function declare void sfLog(
 cstring 5:title
 int 4:p1
 int 3:p2
 int 2:p3
) end function declare
function declare void sfLogOpen(
 cstring 2:fname
) end function declare
function declare void sfLogClose(
) end function declare
function declare void sfWaitFrameOut(
 int 2:frame
) end function declare
function declare int sfIsFrameOut(
 int 2:frame
) end function declare
function declare void sfWaitNextFrame(
) end function declare
function declare int sfSlotIndex(
 cstring 2:str
) end function declare
function declare int sfAbs(
 int 2:val
) end function declare
function declare int sfIMin(
 int 3:v1
 int 2:v2
) end function declare
function declare int sfIMax(
 int 3:v1
 int 2:v2
) end function declare
function declare int sfUMin(
 int 3:v1
 int 2:v2
) end function declare
function declare int sfUMax(
 int 3:v1
 int 2:v2
) end function declare
function declare int sfILimit(
 int 4:val
 int 3:minVal
 int 2:maxVal
) end function declare
function declare void sfStop(
) end function declare
function declare void sfStartSlot(
 int 2:slotIndex
) end function declare
function declare void sfBip(
 int 3:bipCount
 int 2:seriesCount
) end function declare
function declare void sfFreeGroup(
 int 2:unitMask
) end function declare
function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
function declare void sfPoseGroupDelay(
 int 5:unitMask
 int 4:angle
 int 3:frameCount
 int 2:frameDelay
) end function declare
function declare void sfPoseCorrect(
 int 3:unitMask
 int 2:angle
) end function declare
function declare void sfQueueGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
function declare void sfPoseIdx(
 int 4:idx
 int 3:angle
 int 2:frameCount
) end function declare
function declare void sfPoseGroupLin(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
function declare void sfStrainGroup(
 int 2:unitMask
) end function declare
function declare void sfPlaySamples(
 int 4:unitMask
 *cblock 3:samples
 int 2:frameCount
) end function declare
function declare void sfAccumSetup1(
 *int 2:ch0
) end function declare
function declare void sfAccumSetup2(
 *int 3:ch0
 *int 2:ch1
) end function declare
function declare void sfAccumSetup3(
 *int 4:ch0
 *int 3:ch1
 *int 2:ch2
) end function declare
function declare void sfAccumSetup4(
 *int 5:ch0
 *int 4:ch1
 *int 3:ch2
 *int 2:ch3
) end function declare
function declare void sfAccumTrigger(
) end function declare
function declare void sfAccumReset(
) end function declare
function declare int sfMathAcos(
 int 3:numerator
 int 2:denumerator
) end function declare
function declare int sfMathSqrti(
 int 2:v
) end function declare
function declare int sfMathAngleOfTriangle(
 int 4:sideA
 int 3:sideB
 int 2:sideC
) end function declare
function declare int sfMathAngleOfKnee(
 int 4:hip
 int 3:shin
 int 2:height
) end function declare
function declare int sfMathCathetOfSquareTriangle(
 int 3:cathet
 int 2:hypotenuse
) end function declare
function declare int sfMathHypotenuseOfSquareTriangle(
 int 3:cathet1
 int 2:cathet2
) end function declare
function declare int sfMathTableSin(
 int 3:index
 int 2:value
) end function declare
function declare void sfHumoModelSetup(
) end function declare
function declare void sfHumoModelFootAtFloor(
 int 4:front
 int 3:side
 int 2:height
) end function declare
function declare void sfHumoModelFootPush(
 int 4:back
 int 3:side
 int 2:height
) end function declare
function declare int sfIndexOfMask(
 int 2:unitMask
) end function declare
function declare int sfQueueIdxAppend(
 int 4:unitIndex
 int 3:val
 int 2:frameCount
) end function declare
function declare int sfQueueIdxOffsets(
 int 5:unitIndex
 int 4:from
 *cblock 3:offsets
 int 2:offsetCount
) end function declare
function declare int sfQueueIdxSinMove(
 int 5:unitIndex
 int 4:from
 int 3:to
 int 2:frameCount
) end function declare
function declare int sfQueueIdxLast(
 int 2:unitIndex
) end function declare
function declare int sfQueueIdxCount(
 int 2:unitIndex
) end function declare
function declare int sfQueueMax(
) end function declare
function declare void sfIkSetup(
) end function declare
function declare void sfIkAngle(
 float 8:xt
 float 7:yt
 float 6:zt
 float 5:x
 float 4:y
 float 3:z
 float 2:w
) end function declare
function declare float sfMathCos(
 float 2:r
) end function declare
function declare float sfMathSin(
 float 2:r
) end function declare
function declare void sfQuaternionToEuler(
 float 5:x
 float 4:y
 float 3:z
 float 2:w
) end function declare
function declare void sfQuaternionToEulerImu(
) end function declare
function declare float sfFMathACos(
 float 2:v
) end function declare
function declare float sfFMathASin(
 float 2:v
) end function declare
function declare float sfFMathATan(
 float 2:v
) end function declare
function declare float sfFMathATan2(
 float 3:y
 float 2:x
) end function declare
function declare float sfFMathCos(
 float 2:r
) end function declare
function declare float sfFMathSin(
 float 2:r
) end function declare
function declare float sfFMathTan(
 float 2:r
) end function declare
function declare float sfFMathCosh(
 float 2:v
) end function declare
function declare float sfFMathSinh(
 float 2:v
) end function declare
function declare float sfFMathTanh(
 float 2:v
) end function declare
function declare float sfFMathExp(
 float 2:v
) end function declare
function declare float sfFMathFrExp(
 float 3:v
 *int 2:num
) end function declare
function declare float sfFMathLdExp(
 float 3:num
 int 2:exp
) end function declare
function declare float sfFMathLog(
 float 2:v
) end function declare
function declare float sfFMathLog10(
 float 2:v
) end function declare
function declare float sfFMathModf(
 float 3:num
 *float 2:ptr
) end function declare
function declare float sfFMathPow(
 float 3:base
 float 2:exp
) end function declare
function declare float sfFMathSqrt(
 float 2:v
) end function declare
function declare float sfFMathCeil(
 float 2:v
) end function declare
function declare float sfFMathFAbs(
 float 2:v
) end function declare
function declare float sfFMathFloor(
 float 2:v
) end function declare
function declare float sfFMathFMod(
 float 3:x
 float 2:y
) end function declare
function declare void sfWaitFrame(
 int 2:frame
) end function declare
function declare void setup(
) end function declare
function declare void sitToStart(
 int 2:frameCount
) end function declare
function declare void stabilizeRotationByIMU(
) end function declare
function declare int computeAlphaForWalk(
) end function declare
function declare void computeAlphaForWalkFine(
 int 2:frameCount
) end function declare
function declare void testDrop(
) end function declare
function declare void walkInitialPose(
) end function declare
function declare void walkInitialPoseFine(
) end function declare
function declare void walkFinalPose(
) end function declare
function declare void walkFinalPoseFine(
) end function declare
function declare void walkInit(
) end function declare
function declare void walkPhasa1(
) end function declare
function declare void walkPhasa3(
) end function declare
function declare void walkPhasa2(
) end function declare
function declare void walkPhasa4(
) end function declare
function declare void walkCycle(
 int 2:half
) end function declare
function declare void mixing(
) end function declare
function declare void runTest(
) end function declare
function declare void turn(
 int 2:direction
) end function declare
function declare void main(
) end function declare

//==================
//  functions bodies
function declare int sfVpuVersion(
) end function declare
{
}



function declare int sfCreateTask(
 *<void()> 3:fun
 int 2:stackSize
) end function declare
{
}



function declare void sfLog(
 cstring 5:title
 int 4:p1
 int 3:p2
 int 2:p3
) end function declare
{
}



function declare void sfLogOpen(
 cstring 2:fname
) end function declare
{
}



function declare void sfLogClose(
) end function declare
{
}



function declare void sfWaitFrameOut(
 int 2:frame
) end function declare
{
}



function declare int sfIsFrameOut(
 int 2:frame
) end function declare
{
}



function declare void sfWaitNextFrame(
) end function declare
{
}



function declare int sfSlotIndex(
 cstring 2:str
) end function declare
{
}



function declare int sfAbs(
 int 2:val
) end function declare
{
}



function declare int sfIMin(
 int 3:v1
 int 2:v2
) end function declare
{
}



function declare int sfIMax(
 int 3:v1
 int 2:v2
) end function declare
{
}



function declare int sfUMin(
 int 3:v1
 int 2:v2
) end function declare
{
}



function declare int sfUMax(
 int 3:v1
 int 2:v2
) end function declare
{
}



function declare int sfILimit(
 int 4:val
 int 3:minVal
 int 2:maxVal
) end function declare
{
}



function declare void sfStop(
) end function declare
{
}



function declare void sfStartSlot(
 int 2:slotIndex
) end function declare
{
}



function declare void sfBip(
 int 3:bipCount
 int 2:seriesCount
) end function declare
{
}



function declare void sfFreeGroup(
 int 2:unitMask
) end function declare
{
}



function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
{
}



function declare void sfPoseGroupDelay(
 int 5:unitMask
 int 4:angle
 int 3:frameCount
 int 2:frameDelay
) end function declare
{
}



function declare void sfPoseCorrect(
 int 3:unitMask
 int 2:angle
) end function declare
{
}



function declare void sfQueueGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
{
}



function declare void sfPoseIdx(
 int 4:idx
 int 3:angle
 int 2:frameCount
) end function declare
{
}



function declare void sfPoseGroupLin(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
{
}



function declare void sfStrainGroup(
 int 2:unitMask
) end function declare
{
}



function declare void sfPlaySamples(
 int 4:unitMask
 *cblock 3:samples
 int 2:frameCount
) end function declare
{
}



function declare void sfAccumSetup1(
 *int 2:ch0
) end function declare
{
}



function declare void sfAccumSetup2(
 *int 3:ch0
 *int 2:ch1
) end function declare
{
}



function declare void sfAccumSetup3(
 *int 4:ch0
 *int 3:ch1
 *int 2:ch2
) end function declare
{
}



function declare void sfAccumSetup4(
 *int 5:ch0
 *int 4:ch1
 *int 3:ch2
 *int 2:ch3
) end function declare
{
}



function declare void sfAccumTrigger(
) end function declare
{
}



function declare void sfAccumReset(
) end function declare
{
}



function declare int sfMathAcos(
 int 3:numerator
 int 2:denumerator
) end function declare
{
}



function declare int sfMathSqrti(
 int 2:v
) end function declare
{
}



function declare int sfMathAngleOfTriangle(
 int 4:sideA
 int 3:sideB
 int 2:sideC
) end function declare
{
}



function declare int sfMathAngleOfKnee(
 int 4:hip
 int 3:shin
 int 2:height
) end function declare
{
}



function declare int sfMathCathetOfSquareTriangle(
 int 3:cathet
 int 2:hypotenuse
) end function declare
{
}



function declare int sfMathHypotenuseOfSquareTriangle(
 int 3:cathet1
 int 2:cathet2
) end function declare
{
}



function declare int sfMathTableSin(
 int 3:index
 int 2:value
) end function declare
{
}



function declare void sfHumoModelSetup(
) end function declare
{
}



function declare void sfHumoModelFootAtFloor(
 int 4:front
 int 3:side
 int 2:height
) end function declare
{
}



function declare void sfHumoModelFootPush(
 int 4:back
 int 3:side
 int 2:height
) end function declare
{
}



function declare int sfIndexOfMask(
 int 2:unitMask
) end function declare
{
}



function declare int sfQueueIdxAppend(
 int 4:unitIndex
 int 3:val
 int 2:frameCount
) end function declare
{
}



function declare int sfQueueIdxOffsets(
 int 5:unitIndex
 int 4:from
 *cblock 3:offsets
 int 2:offsetCount
) end function declare
{
}



function declare int sfQueueIdxSinMove(
 int 5:unitIndex
 int 4:from
 int 3:to
 int 2:frameCount
) end function declare
{
}



function declare int sfQueueIdxLast(
 int 2:unitIndex
) end function declare
{
}



function declare int sfQueueIdxCount(
 int 2:unitIndex
) end function declare
{
}



function declare int sfQueueMax(
) end function declare
{
}



function declare void sfIkSetup(
) end function declare
{
}



function declare void sfIkAngle(
 float 8:xt
 float 7:yt
 float 6:zt
 float 5:x
 float 4:y
 float 3:z
 float 2:w
) end function declare
{
}



function declare float sfMathCos(
 float 2:r
) end function declare
{
}



function declare float sfMathSin(
 float 2:r
) end function declare
{
}



function declare void sfQuaternionToEuler(
 float 5:x
 float 4:y
 float 3:z
 float 2:w
) end function declare
{
}



function declare void sfQuaternionToEulerImu(
) end function declare
{
}



function declare float sfFMathACos(
 float 2:v
) end function declare
{
}



function declare float sfFMathASin(
 float 2:v
) end function declare
{
}



function declare float sfFMathATan(
 float 2:v
) end function declare
{
}



function declare float sfFMathATan2(
 float 3:y
 float 2:x
) end function declare
{
}



function declare float sfFMathCos(
 float 2:r
) end function declare
{
}



function declare float sfFMathSin(
 float 2:r
) end function declare
{
}



function declare float sfFMathTan(
 float 2:r
) end function declare
{
}



function declare float sfFMathCosh(
 float 2:v
) end function declare
{
}



function declare float sfFMathSinh(
 float 2:v
) end function declare
{
}



function declare float sfFMathTanh(
 float 2:v
) end function declare
{
}



function declare float sfFMathExp(
 float 2:v
) end function declare
{
}



function declare float sfFMathFrExp(
 float 3:v
 *int 2:num
) end function declare
{
}



function declare float sfFMathLdExp(
 float 3:num
 int 2:exp
) end function declare
{
}



function declare float sfFMathLog(
 float 2:v
) end function declare
{
}



function declare float sfFMathLog10(
 float 2:v
) end function declare
{
}



function declare float sfFMathModf(
 float 3:num
 *float 2:ptr
) end function declare
{
}



function declare float sfFMathPow(
 float 3:base
 float 2:exp
) end function declare
{
}



function declare float sfFMathSqrt(
 float 2:v
) end function declare
{
}



function declare float sfFMathCeil(
 float 2:v
) end function declare
{
}



function declare float sfFMathFAbs(
 float 2:v
) end function declare
{
}



function declare float sfFMathFloor(
 float 2:v
) end function declare
{
}



function declare float sfFMathFMod(
 float 3:x
 float 2:y
) end function declare
{
}



function declare void sfWaitFrame(
 int 2:frame
) end function declare
{
 {
 call  <function declare void sfWaitFrameOut(
 int 2:frame
) end function declare
> 
 return
 }
}



function declare void setup(
) end function declare
{
 {
  ( <int 4:orderFromHead> ) = (0) 
  ( <int 68:flag_event> ) = (0) 
  ( <int 7:cycle_number> ) = (30) 
  ( <float 35:rotationYieldRight> ) = (0.23) 
  ( <float 36:rotationYieldLeft> ) = (0.23) 
  ( <float 1215:svIkA5> ) = (40.2) 
  ( <float 1216:svIkB5> ) = (0) 
  ( <float 1217:svIkC5> ) = (0) 
  ( <float 1218:svIkA6> ) = (0) 
  ( <float 1219:svIkA7> ) = (99) 
  ( <float 1220:svIkA8> ) = (99) 
  ( <float 1221:svIkA9> ) = (0) 
  ( <float 1222:svIkA10> ) = (13.7) 
  ( <float 1223:svIkB10> ) = (23.8) 
  ( <float 1224:svIkC10> ) = (0) 
  ( <float 52:e10> ) = (55) 
  ( <float 53:d10> ) = (62) 
  ( <float 1225:svIkLimA5min> ) = ( ( -(90) ) * (0.0174533) ) 
  ( <float 1226:svIkLimA5max> ) = ( (90) * (0.0174533) ) 
  ( <float 1227:svIkLimA6min> ) = ( ( -(108) ) * (0.0174533) ) 
  ( <float 1228:svIkLimA6max> ) = ( (15) * (0.0174533) ) 
  ( <float 1229:svIkLimA7min> ) = ( ( -(130) ) * (0.0174533) ) 
  ( <float 1230:svIkLimA7max> ) = ( (50) * (0.0174533) ) 
  ( <float 1231:svIkLimA8min> ) = ( ( -(180) ) * (0.0174533) ) 
  ( <float 1232:svIkLimA8max> ) = ( (8) * (0.0174533) ) 
  ( <float 1233:svIkLimA9min> ) = ( ( -(45) ) * (0.0174533) ) 
  ( <float 1234:svIkLimA9max> ) = ( (78) * (0.0174533) ) 
  ( <float 1235:svIkLimA10min> ) = ( ( -(24) ) * (0.0174533) ) 
  ( <float 1236:svIkLimA10max> ) = ( (24) * (0.0174533) ) 
 call  <function declare void sfIkSetup(
) end function declare
> 
  ( <int 37:framestep> ) = (2) 
  ( <float 22:selfMotionShiftCorrectionX> ) = (0) 
  ( <float 23:selfMotionShiftCorrectionY> ) = (0) 
  ( <float 60:ztr0> ) = ( -( ( ( ( ( ( ( <float 1217:svIkC5> ) + ( <float 1218:svIkA6> ) ) + ( <float 1219:svIkA7> ) ) + ( <float 1220:svIkA8> ) ) + ( <float 1221:svIkA9> ) ) + ( <float 1223:svIkB10> ) ) - (1) ) ) 
  ( <float 61:ztl0> ) = ( -( ( ( ( ( ( ( <float 1217:svIkC5> ) + ( <float 1218:svIkA6> ) ) + ( <float 1219:svIkA7> ) ) + ( <float 1220:svIkA8> ) ) + ( <float 1221:svIkA9> ) ) + ( <float 1223:svIkB10> ) ) - (1) ) ) 
  ( <float 43:zr> ) = ( ( <float 50:zl> ) = ( -(1) ) ) 
  ( <int 31:selfInitPoses> ) = (10) 
  ( <float 19:stepLength> ) = (0) 
  ( <float 20:sideLength> ) = (0) 
  ( <float 21:rotation> ) = (0) 
  ( <int 28:selfFirstLegIsRightLeg> ) = (1) 
  ( <int 29:motion_to_right> ) = (1) 
  ( <float 30:side_motion> ) = (0) 
  ( <int 31:selfInitPoses> ) = (20) 
  ( <float 62:stepZtr> ) = ( ( ( <float 60:ztr0> ) + ( <int 13:gaitHeight> ) ) / ( <int 31:selfInitPoses> ) ) 
  ( <float 63:stepZtl> ) = ( ( ( <float 61:ztl0> ) + ( <int 13:gaitHeight> ) ) / ( <int 31:selfInitPoses> ) ) 
  ( <float 16:solyLandingSkew> ) = (0) 
  ( <float 70:tors_angle> ) = (0) 
  ( <float 64:stepYtr> ) = ( ( ( <float 54:amplitude> ) / (2) ) / ( <int 31:selfInitPoses> ) ) 
  ( <float 65:stepYtl> ) = ( ( ( <float 54:amplitude> ) / (2) ) / ( <int 31:selfInitPoses> ) ) 
  ( <float 55:alpha01> ) = (3.14159) 
 if   ( <int 3:timeStep> ) = (1) 
  ( <float 71:reducer> ) = (0.5) 
  ( <int 9:stepLengthOrder> ) = (60) 
  ( <float 17:ugol_torsa> ) = (0.7) 
  ( <float 15:bodyTiltAtWalk> ) = (0.055) 
  ( <int 8:hipTilt> ) = (0) 
  ( <int 13:gaitHeight> ) = (180) 
  ( <int 14:stepHeight> ) = (40) 
  ( <int 10:fps> ) = (4) 
  ( <int 11:fr1> ) = (4) 
  ( <int 12:fr2> ) = (6) 
  ( <float 54:amplitude> ) = (32) 
 if  return
 }
}



function declare void sitToStart(
 int 2:frameCount
) end function declare
{
 {
  ( <int 2:frameCount> ) = (80) 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfWaitFrame(
 int 2:frame
) end function declare
> 
 call  <function declare void sfFreeGroup(
 int 2:unitMask
) end function declare
> 
 return
 }
}



function declare void stabilizeRotationByIMU(
) end function declare
{
 {
 call  <function declare void sfQuaternionToEulerImu(
) end function declare
> 
  ( <float 21:rotation> ) = ( ( ( <float 73:forwardDirection> ) - ( <float 1025:svEulerYaw> ) ) * (1.1) ) 
 if  if  if  if  if  return
 }
}



function declare int computeAlphaForWalk(
) end function declare
{
 {
  ( <int 67:flag> ) = (0) 
  ( <int 72:torsoAdd> ) = ( ( <float 70:tors_angle> ) * (2607.59) ) 
 if  if  call  <function declare void sfIkAngle(
 float 8:xt
 float 7:yt
 float 6:zt
 float 5:x
 float 4:y
 float 3:z
 float 2:w
) end function declare
> 
 if  call  <function declare void sfIkAngle(
 float 8:xt
 float 7:yt
 float 6:zt
 float 5:x
 float 4:y
 float 3:z
 float 2:w
) end function declare
> 
 if  if  if  call  <function declare void sfWaitFrame(
 int 2:frame
) end function declare
> 
 if  return 1
 }
}



function declare void computeAlphaForWalkFine(
 int 2:frameCount
) end function declare
{
 {
 call  <function declare void sfIkAngle(
 float 8:xt
 float 7:yt
 float 6:zt
 float 5:x
 float 4:y
 float 3:z
 float 2:w
) end function declare
> 
 if  call  <function declare void sfIkAngle(
 float 8:xt
 float 7:yt
 float 6:zt
 float 5:x
 float 4:y
 float 3:z
 float 2:w
) end function declare
> 
 if  call  <function declare void sfPoseGroupLin(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroupLin(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroupLin(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfWaitFrame(
 int 2:frame
) end function declare
> 
 return
 }
}



function declare void testDrop(
) end function declare
{
 {
 if  return
 }
}



function declare void walkInitialPose(
) end function declare
{
 {
  ( <float 38:xtr> ) = ( ( <float 45:xtl> ) = (0) ) 
 loop return
 }
}



function declare void walkInitialPoseFine(
) end function declare
{
 {
  ( <float 38:xtr> ) = ( ( <float 45:xtl> ) = (0) ) 
  ( <float 40:ztr> ) = ( ( <float 47:ztl> ) = ( -( <int 13:gaitHeight> ) ) ) 
  ( <float 39:ytr> ) = ( ( -( <float 53:d10> ) ) - ( ( <float 54:amplitude> ) / (2) ) ) 
  ( <float 46:ytl> ) = ( ( <float 53:d10> ) - ( ( <float 54:amplitude> ) / (2) ) ) 
 call  <function declare void computeAlphaForWalkFine(
 int 2:frameCount
) end function declare
> 
 return
 }
}



function declare void walkFinalPose(
) end function declare
{
 {
 loop return
 }
}



function declare void walkFinalPoseFine(
) end function declare
{
 {
  ( <float 38:xtr> ) = ( ( <float 45:xtl> ) = (0) ) 
  ( <float 40:ztr> ) = ( ( <float 47:ztl> ) = ( -( ( ( ( ( ( ( <float 1217:svIkC5> ) + ( <float 1218:svIkA6> ) ) + ( <float 1219:svIkA7> ) ) + ( <float 1220:svIkA8> ) ) + ( <float 1221:svIkA9> ) ) + ( <float 1223:svIkB10> ) ) - (1) ) ) ) 
  ( <float 39:ytr> ) = ( -( <float 53:d10> ) ) 
  ( <float 46:ytl> ) = ( <float 53:d10> ) 
 call  <function declare void computeAlphaForWalkFine(
 int 2:frameCount
) end function declare
> 
 return
 }
}



function declare void walkInit(
) end function declare
{
 {
  ( <float 56:correctedStepLenght> ) = ( ( <float 19:stepLength> ) + ( <float 22:selfMotionShiftCorrectionX> ) ) 
  ( <float 57:correctedStepLenghtHalf> ) = ( ( <float 56:correctedStepLenght> ) / (2) ) 
  ( <float 58:correctedSideLenght> ) = ( ( <float 20:sideLength> ) - ( <float 23:selfMotionShiftCorrectionY> ) ) 
  ( <float 59:correctedSideLenghtHalf> ) = ( ( <float 58:correctedSideLenght> ) / (2) ) 
  ( <float 87:stepRotation> ) = ( ( ( <float 74:correctedRotation> ) / ( ( <int 12:fr2> ) - (2) ) ) * (2) ) 
  ( <float 78:dx0Typical> ) = ( ( <float 56:correctedStepLenght> ) / ( ( (2) * ( <int 11:fr1> ) ) + ( <int 12:fr2> ) ) ) 
  ( <float 79:dy0Typical> ) = ( ( <float 58:correctedSideLenght> ) / ( ( (2) * ( <int 11:fr1> ) ) + ( <int 12:fr2> ) ) ) 
  ( <float 69:dobavka_x_ot_torsa> ) = ( ( ( ( <float 1215:svIkA5> ) * (2) ) * (call  <function declare float sfMathSin(
 float 2:r
) end function declare
> ) ) / ( <int 12:fr2> ) ) 
  ( <float 41:xr> ) = ( ( <float 48:xl> ) = ( <float 15:bodyTiltAtWalk> ) ) 
  ( <float 49:yl> ) = ( <float 16:solyLandingSkew> ) 
  ( <float 42:yr> ) = ( -( <float 16:solyLandingSkew> ) ) 
  ( <float 81:fase_offset> ) = (0.7) 
 call  <function declare void stabilizeRotationByIMU(
) end function declare
> 
 return
 }
}



function declare void walkPhasa1(
) end function declare
{
 {
  ( <float 47:ztl> ) = ( ( <float 40:ztr> ) = ( -( <int 13:gaitHeight> ) ) ) 
  ( <float 88:xtl_plan> ) = ( ( ( <float 56:correctedStepLenght> ) * ( (0.5) - ( ( <int 11:fr1> ) / ( ( (2) * ( <int 11:fr1> ) ) + ( <int 12:fr2> ) ) ) ) ) - ( ( ( ( <float 69:dobavka_x_ot_torsa> ) * ( <int 11:fr1> ) ) * ( <int 12:fr2> ) ) / ( ( (2) * ( <int 11:fr1> ) ) + ( <int 12:fr2> ) ) ) ) 
 loop return
 }
}



function declare void walkPhasa3(
) end function declare
{
 {
  ( <float 47:ztl> ) = ( ( <float 40:ztr> ) = ( -( <int 13:gaitHeight> ) ) ) 
  ( <float 89:xtr_plan> ) = ( ( ( <float 56:correctedStepLenght> ) * ( (0.5) - ( ( <int 11:fr1> ) / ( ( (2) * ( <int 11:fr1> ) ) + ( <int 12:fr2> ) ) ) ) ) - ( ( ( ( <float 69:dobavka_x_ot_torsa> ) * ( <int 11:fr1> ) ) * ( <int 12:fr2> ) ) / ( ( (2) * ( <int 11:fr1> ) ) + ( <int 12:fr2> ) ) ) ) 
 loop return
 }
}



function declare void walkPhasa2(
) end function declare
{
 {
  ( <float 44:wr> ) = (0) 
  ( <float 51:wl> ) = (0) 
  ( <float 83:dy> ) = ( ( <float 58:correctedSideLenght> ) / ( <int 12:fr2> ) ) 
  ( <float 88:xtl_plan> ) = ( ( ( <float 56:correctedStepLenght> ) * ( (0.5) - ( ( ( <int 11:fr1> ) + ( <int 12:fr2> ) ) / ( ( (2) * ( <int 11:fr1> ) ) + ( <int 12:fr2> ) ) ) ) ) + ( ( ( ( <float 69:dobavka_x_ot_torsa> ) * ( <int 11:fr1> ) ) * ( <int 12:fr2> ) ) / ( ( (2) * ( <int 11:fr1> ) ) + ( <int 12:fr2> ) ) ) ) 
  ( <float 89:xtr_plan> ) = ( ( ( ( <float 56:correctedStepLenght> ) * (0.5) ) + ( <float 78:dx0Typical> ) ) + ( <float 69:dobavka_x_ot_torsa> ) ) 
 loop return
 }
}



function declare void walkPhasa4(
) end function declare
{
 {
  ( <float 44:wr> ) = (0) 
  ( <float 51:wl> ) = (0) 
  ( <float 83:dy> ) = ( ( <float 58:correctedSideLenght> ) / ( ( <int 12:fr2> ) - (2) ) ) 
 if  loop return
 }
}



function declare void walkCycle(
 int 2:half
) end function declare
{
 {
 float -1:xrOld
 float -2:yrOld
 float -3:xlOld
 float -4:ylOld
  {
   ( <float -1:xrOld> ) = ( <float 41:xr> ) 
  }
  {
   ( <float -2:yrOld> ) = ( <float 42:yr> ) 
  }
  {
   ( <float -3:xlOld> ) = ( <float 48:xl> ) 
  }
  {
   ( <float -4:ylOld> ) = ( <float 49:yl> ) 
  }
 call  <function declare void walkInit(
) end function declare
> 
 call  <function declare void walkPhasa1(
) end function declare
> 
 call  <function declare void walkPhasa2(
) end function declare
> 
 if   ( <float 41:xr> ) = ( <float -1:xrOld> ) 
  ( <float 42:yr> ) = ( <float -2:yrOld> ) 
  ( <float 48:xl> ) = ( <float -3:xlOld> ) 
  ( <float 49:yl> ) = ( <float -4:ylOld> ) 
 return
 }
}



function declare void mixing(
) end function declare
{
 {
  ( <int 91:leftRightFactor> ) = (100) 
  ( <int 92:frontBackFactor> ) = (180) 
 loop return
 }
}



function declare void runTest(
) end function declare
{
 {
 int -1:i
 call  <function declare void walkInitialPoseFine(
) end function declare
> 
  ( <int 66:stepType> ) = (0) 
  ( <float 19:stepLength> ) = ( ( <int 9:stepLengthOrder> ) / (3) ) 
 call  <function declare void walkCycle(
 int 2:half
) end function declare
> 
  ( <int 66:stepType> ) = (2) 
  ( <float 19:stepLength> ) = ( ( ( <int 9:stepLengthOrder> ) * (2) ) / (3) ) 
 call  <function declare void walkCycle(
 int 2:half
) end function declare
> 
  ( <float 19:stepLength> ) = ( ( <int 9:stepLengthOrder> ) * (1) ) 
  {
  }
 loop  ( <int 66:stepType> ) = (1) 
 call  <function declare void walkCycle(
 int 2:half
) end function declare
> 
 call  <function declare void walkFinalPoseFine(
) end function declare
> 
  ( <int 9:stepLengthOrder> ) *= ( -(1) ) 
  ( <float 17:ugol_torsa> ) *= ( -(1) ) 
 call  <function declare void walkInitialPoseFine(
) end function declare
> 
  ( <int 66:stepType> ) = (0) 
  ( <float 19:stepLength> ) = ( ( <int 9:stepLengthOrder> ) / (3) ) 
 call  <function declare void walkCycle(
 int 2:half
) end function declare
> 
  ( <int 66:stepType> ) = (2) 
  ( <float 19:stepLength> ) = ( ( ( <int 9:stepLengthOrder> ) * (2) ) / (3) ) 
 call  <function declare void walkCycle(
 int 2:half
) end function declare
> 
  ( <float 19:stepLength> ) = ( ( <int 9:stepLengthOrder> ) * (1) ) 
 loop return
 }
}



function declare void turn(
 int 2:direction
) end function declare
{
 {
 int -1:frameCount
  {
   ( <int -1:frameCount> ) = (4) 
  }
 if  if  call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfWaitFrame(
 int 2:frame
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfWaitFrame(
 int 2:frame
) end function declare
> 
 call  <function declare void sfWaitFrame(
 int 2:frame
) end function declare
> 
 return
 }
}



function declare void main(
) end function declare
{
 {
 int -1:frameCount
  ( <int 2:restart_flag> ) = (0) 
  ( <int 5:pitStop> ) = (0) 
  ( <int 6:startStop> ) = (0) 
  ( <int 18:slowWalk> ) = (0) 
 call  <function declare void setup(
) end function declare
> 
  ( <float 20:sideLength> ) = (0) 
  ( <float 21:rotation> ) = (0) 
  {
   ( <int -1:frameCount> ) = (80) 
  }
 call  <function declare void sfPoseGroup(
 int 4:unitMask
 int 3:angle
 int 2:frameCount
) end function declare
> 
 call  <function declare void sfWaitFrame(
 int 2:frame
) end function declare
> 
 call  <function declare void sfQuaternionToEulerImu(
) end function declare
> 
  ( <float 73:forwardDirection> ) = ( <float 1025:svEulerYaw> ) 
 call  <function declare int sfCreateTask(
 *<void()> 3:fun
 int 2:stackSize
) end function declare
> 
 loop  ( <int 1022:svButtonRight> ) = ( -(1) ) 
  ( <int 1021:svButtonLeft> ) = ( -(1) ) 
 call  <function declare void sfBip(
 int 3:bipCount
 int 2:seriesCount
) end function declare
> 
 loop  ( <int 1022:svButtonRight> ) = (66) 
  ( <int 1021:svButtonLeft> ) = (69) 
  ( <int 2:restart_flag> ) = (1) 
 call  <function declare void runTest(
) end function declare
> 
 return
 }
}




Compilation success
