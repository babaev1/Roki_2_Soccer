//====================================================================
//      SvCompiler V9.06
//By A.Sibilev
//====================================================================
//cblock

;sfVpuVersion <int()>
;sfCreateTask <int(,*<void()>,int)>
;sfLog <void(,cstring,int,int,int)>
;sfLogOpen <void(,cstring)>
;sfLogClose <void()>
;sfWaitFrameOut <void(,int)>
;sfIsFrameOut <int(,int)>
;sfWaitNextFrame <void()>
;sfSlotIndex <int(,cstring)>
;sfSoundIndex <int(,cstring)>
;sfAbs <int(,int)>
;sfIMin <int(,int,int)>
;sfIMax <int(,int,int)>
;sfUMin <int(,int,int)>
;sfUMax <int(,int,int)>
;sfILimit <int(,int,int,int)>
;sfStop <void()>
;sfStartSlot <void(,int)>
;sfBip <void(,int,int)>
;sfWriteFlash <void()>
;sfSoundPlay <void(,int)>
;sfSoundIsPlay <int()>
;sfFreeGroup <void(,int)>
;sfPoseGroup <void(,int,int,int)>
;sfPoseGroupDelay <void(,int,int,int,int)>
;sfPoseCorrect <void(,int,int)>
;sfQueueGroup <void(,int,int,int)>
;sfPoseIdx <void(,int,int,int)>
;sfPoseGroupLin <void(,int,int,int)>
;sfStrainGroup <void(,int)>
;sfPlaySamples <void(,int,int,int,*cblock)>
;sfPlayWSamples <void(,int,int,int,*cwblock)>
;sfAccumSetup1 <void(,*int)>
;sfAccumSetup2 <void(,*int,*int)>
;sfAccumSetup3 <void(,*int,*int,*int)>
;sfAccumSetup4 <void(,*int,*int,*int,*int)>
;sfAccumTrigger <void()>
;sfAccumReset <void()>
;sfUnitParamQueryRead <int(,int,int)>
;sfUnitParamQueryWrite <int(,int,int,int)>
;sfUnitParamStatusRead <int(,int,int,*int)>
;sfMathAcos <int(,int,int)>
;sfMathSqrti <int(,int)>
;sfMathAngleOfTriangle <int(,int,int,int)>
;sfMathAngleOfKnee <int(,int,int,int)>
;sfMathCathetOfSquareTriangle <int(,int,int)>
;sfMathHypotenuseOfSquareTriangle <int(,int,int)>
;sfMathTableSin <int(,int,int)>
;sfHumoModelSetup <void()>
;sfHumoModelFootAtFloor <void(,int,int,int)>
;sfHumoModelFootPush <void(,int,int,int)>
;sfIndexOfMask <int(,int)>
;sfQueueIdxAppend <int(,int,int,int)>
;sfQueueIdxOffsets <int(,int,int,*cblock,int)>
;sfQueueIdxSinMove <int(,int,int,int,int)>
;sfQueueIdxLast <int(,int)>
;sfQueueIdxCount <int(,int)>
;sfQueueMax <int()>
;sfIkSetup <void()>
;sfIkAngle <void(,float,float,float,float,float,float,float)>
;sfMathCos <float(,float)>
;sfMathSin <float(,float)>
;sfQuaternionToEuler <void(,float,float,float,float)>
;sfQuaternionToEulerImu <void()>
;sfFMathACos <float(,float)>
;sfFMathASin <float(,float)>
;sfFMathATan <float(,float)>
;sfFMathATan2 <float(,float,float)>
;sfFMathCos <float(,float)>
;sfFMathSin <float(,float)>
;sfFMathTan <float(,float)>
;sfFMathCosh <float(,float)>
;sfFMathSinh <float(,float)>
;sfFMathTanh <float(,float)>
;sfFMathExp <float(,float)>
;sfFMathFrExp <float(,float,*int)>
;sfFMathLdExp <float(,float,int)>
;sfFMathLog <float(,float)>
;sfFMathLog10 <float(,float)>
;sfFMathModf <float(,float,*float)>
;sfFMathPow <float(,float,float)>
;sfFMathSqrt <float(,float)>
;sfFMathCeil <float(,float)>
;sfFMathFAbs <float(,float)>
;sfFMathFloor <float(,float)>
;sfFMathFMod <float(,float,float)>
;sfQuaternionToMatrix <void(,*:SfMatrix3x3,float,float,float,float)>
;sfQuaternionToMatrixImu <void(,*:SfMatrix3x3)>
;sfGravityVector <void(,*:SfVector3)>
;sfVec3Set <void(,*:SfVector3,float,float,float)>
;sfVec3Sum <void(,*:SfVector3,*:SfVector3,*:SfVector3)>
;sfVec3Diff <void(,*:SfVector3,*:SfVector3,*:SfVector3)>
;sfVec3MulRowColCx <float(,*:SfVector3,float,float,float)>
;sfVec3MulRowCol <float(,*:SfVector3,*:SfVector3)>
;sfVec3ScSum <void(,*:SfVector3,*:SfVector3,float)>
;sfVec3ScDiff <void(,*:SfVector3,*:SfVector3,float)>
;sfVec3ScMul <void(,*:SfVector3,*:SfVector3,float)>
;sfVec3ScDiv <void(,*:SfVector3,*:SfVector3,float)>
;sfMat3x3Set <void(,*:SfMatrix3x3,float,float,float,float,float,float,float,float,float)>
;sfMat3x3SetAll <void(,*:SfMatrix3x3,float)>
;sfMat3x3SetDiag <void(,*:SfMatrix3x3,float)>
;sfMat3x3Copy <void(,*:SfMatrix3x3,*:SfMatrix3x3)>
;sfMat3x3Transpose <void(,*:SfMatrix3x3,*:SfMatrix3x3)>
;sfMat3x3Mul <void(,*:SfMatrix3x3,*:SfMatrix3x3,*:SfMatrix3x3)>
;sfMat3x3ScMul <void(,*:SfMatrix3x3,*:SfMatrix3x3,float)>
;sfMat3x3MulCol <void(,*:SfVector3,*:SfMatrix3x3,*:SfVector3)>
;sfMat3x3RowMul <void(,*:SfVector3,*:SfVector3,*:SfMatrix3x3)>
;sfWaitFrame <void(,int)>
[3:491] ;sfWaitFrameOut( frame + svFrameCount );
VBC5_PUSH_CONST 17 | 0x80000000 //import func index sfWaitFrameOut
VBC2_PUSH_LOCAL 2 //frame
VBC3_PUSH_GLOBAL 1 //svFrameCount
VBC1_ADD
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[3:497] ;
VBC1_RETURN
;sfUnitParamRead <int(,int,int,*int)>
[3:499] ;if( !sfUnitParamQueryRead( devId, paramIndex ) )
VBC5_PUSH_CONST 66 | 0x80000000 //import func index sfUnitParamQueryRead
VBC2_PUSH_LOCAL 4 //devId
VBC2_PUSH_LOCAL 3 //paramIndex
VBC1_CALL2
VBC1_STACK_UP2//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB90 //if to false
;return 0;
VBC1_PUSH_0 
VBC2_POP_RESULT 5
VBC1_RETURN
LAB90: //if else
[3:503] ;sfWaitNextFrame();
VBC1_WAIT
[3:504] ;sfWaitNextFrame();
VBC1_WAIT
[3:505] ;return sfUnitParamStatusRead( devId, paramIndex, paramValue );
VBC5_PUSH_CONST 68 | 0x80000000 //import func index sfUnitParamStatusRead
VBC2_PUSH_LOCAL 4 //devId
VBC2_PUSH_LOCAL 3 //paramIndex
VBC2_PUSH_LOCAL 2 //paramValue
VBC1_CALL3
VBC1_STACK_UP3//remove call address and params
VBC2_POP_RESULT 5
VBC1_RETURN
;quaternion_to_euler_angle <void()>
VBC2_STACK -9//local vars 9
[1:106] ;
[1:106] ;float w = svImuQuaterW / 16384.0;
VBC2_PUSH_B_OFFSET -1 //w
VBC3_PUSH_GLOBAL 2575 //svImuQuaterW
VBC5_PUSH_CONST 1182793728 
VBC1_DIV_IF
VBC1_POP
[1:107] ;
[1:107] ;float x = svImuQuaterX / 16384.0;
VBC2_PUSH_B_OFFSET -2 //x
VBC3_PUSH_GLOBAL 2572 //svImuQuaterX
VBC5_PUSH_CONST 1182793728 
VBC1_DIV_IF
VBC1_POP
[1:108] ;
[1:108] ;float y = svImuQuaterY / 16384.0;
VBC2_PUSH_B_OFFSET -3 //y
VBC3_PUSH_GLOBAL 2573 //svImuQuaterY
VBC5_PUSH_CONST 1182793728 
VBC1_DIV_IF
VBC1_POP
[1:109] ;
[1:109] ;float z = svImuQuaterZ / 16384.0;
VBC2_PUSH_B_OFFSET -4 //z
VBC3_PUSH_GLOBAL 2574 //svImuQuaterZ
VBC5_PUSH_CONST 1182793728 
VBC1_DIV_IF
VBC1_POP
[1:110] ;
[1:110] ;float t0 = +2.0 * (w * x + y * z);
VBC2_PUSH_B_OFFSET -5 //t0
VBC5_PUSH_CONST 1073741824 
VBC2_PUSH_LOCAL -1 //w
VBC2_PUSH_LOCAL -2 //x
VBC1_MUL_FF
VBC2_PUSH_LOCAL -3 //y
VBC2_PUSH_LOCAL -4 //z
VBC1_MUL_FF
VBC1_ADD_FF
VBC1_MUL_FF
VBC1_POP
[1:111] ;
[1:111] ;float t1 = +1.0 - 2.0 * (x * x + y * y);
VBC2_PUSH_B_OFFSET -6 //t1
VBC5_PUSH_CONST 1065353216 
VBC5_PUSH_CONST 1073741824 
VBC2_PUSH_LOCAL -2 //x
VBC2_PUSH_LOCAL -2 //x
VBC1_MUL_FF
VBC2_PUSH_LOCAL -3 //y
VBC2_PUSH_LOCAL -3 //y
VBC1_MUL_FF
VBC1_ADD_FF
VBC1_MUL_FF
VBC1_SUB_FF
VBC1_POP
[1:112] ;
[1:112] ;float t2 = +2.0 * (w * y - z * x);
VBC2_PUSH_B_OFFSET -7 //t2
VBC5_PUSH_CONST 1073741824 
VBC2_PUSH_LOCAL -1 //w
VBC2_PUSH_LOCAL -3 //y
VBC1_MUL_FF
VBC2_PUSH_LOCAL -4 //z
VBC2_PUSH_LOCAL -2 //x
VBC1_MUL_FF
VBC1_SUB_FF
VBC1_MUL_FF
VBC1_POP
[1:113] ;t2 = (t2 > +1.0 ? 1.0 : t2);
VBC2_PUSH_B_OFFSET -7 //t2
VBC2_PUSH_LOCAL -7 //t2
VBC5_PUSH_CONST 1065353216 
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB247
VBC5_PUSH_CONST 1065353216 
VBC4_JUMP LAB249
LAB247:
VBC2_PUSH_LOCAL -7 //t2
LAB249:
VBC1_POP
[1:114] ;t2 = (t2 < -1.0 ? -1.0 : t2);
VBC2_PUSH_B_OFFSET -7 //t2
VBC2_PUSH_LOCAL -7 //t2
VBC5_PUSH_CONST -1082130432 // -
VBC1_LESS_FF
VBC4_FALSE_JUMP LAB273
VBC5_PUSH_CONST -1082130432 // -
VBC4_JUMP LAB275
LAB273:
VBC2_PUSH_LOCAL -7 //t2
LAB275:
VBC1_POP
[1:115] ;
[1:115] ;float t3 = +2.0 * (w * z + x * y);
VBC2_PUSH_B_OFFSET -8 //t3
VBC5_PUSH_CONST 1073741824 
VBC2_PUSH_LOCAL -1 //w
VBC2_PUSH_LOCAL -4 //z
VBC1_MUL_FF
VBC2_PUSH_LOCAL -2 //x
VBC2_PUSH_LOCAL -3 //y
VBC1_MUL_FF
VBC1_ADD_FF
VBC1_MUL_FF
VBC1_POP
[1:116] ;
[1:116] ;float t4 = +1.0 - 2.0 * (y * y + z * z);
VBC2_PUSH_B_OFFSET -9 //t4
VBC5_PUSH_CONST 1065353216 
VBC5_PUSH_CONST 1073741824 
VBC2_PUSH_LOCAL -3 //y
VBC2_PUSH_LOCAL -3 //y
VBC1_MUL_FF
VBC2_PUSH_LOCAL -4 //z
VBC2_PUSH_LOCAL -4 //z
VBC1_MUL_FF
VBC1_ADD_FF
VBC1_MUL_FF
VBC1_SUB_FF
VBC1_POP
[1:117] ;pitch = sfFMathATan2(t0, t1);
VBC2_PUSH_CONST 62 //pitch
VBC5_PUSH_CONST 354 | 0x80000000 //import func index sfFMathATan2
//alloc addon amount for result
VBC2_PUSH_LOCAL -5 //t0
VBC2_PUSH_LOCAL -6 //t1
VBC1_CALL2
VBC1_STACK_UP2//remove call address and params
VBC1_POP
[1:118] ;roll = sfFMathASin(t2);
VBC2_PUSH_CONST 63 //roll
VBC5_PUSH_CONST 352 | 0x80000000 //import func index sfFMathASin
//alloc addon amount for result
VBC2_PUSH_LOCAL -7 //t2
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_POP
[1:119] ;yaw = sfFMathATan2(t3, t4);
VBC2_PUSH_CONST 61 //yaw
VBC5_PUSH_CONST 354 | 0x80000000 //import func index sfFMathATan2
//alloc addon amount for result
VBC2_PUSH_LOCAL -8 //t3
VBC2_PUSH_LOCAL -9 //t4
VBC1_CALL2
VBC1_STACK_UP2//remove call address and params
VBC1_POP
[1:122] ;
VBC1_RETURN
;get_yaw <float()>
[1:123] ;quaternion_to_euler_angle();
VBC2_PUSH_CONST 108  //func address quaternion_to_euler_angle
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:124] ;return yaw;
VBC3_PUSH_GLOBAL 61 //yaw
VBC2_POP_RESULT 2
VBC1_RETURN
;setup <void()>
[1:128] ;rotationYieldRight = 0.23;
VBC2_PUSH_CONST 20 //rotationYieldRight
VBC5_PUSH_CONST 1047233823 
VBC1_POP
[1:129] ;rotationYieldLeft = 0.23;
VBC2_PUSH_CONST 21 //rotationYieldLeft
VBC5_PUSH_CONST 1047233823 
VBC1_POP
[1:131] ;svIkA5 = 40.2; 
VBC3_PUSH_CONST 3275 //svIkA5
VBC5_PUSH_CONST 1109445837 
VBC1_POP
[1:132] ;svIkB5 = 0; 
VBC3_PUSH_CONST 3276 //svIkB5
VBC1_PUSH_0 
VBC1_POP_CF
[1:133] ;svIkC5 = 0;    
VBC3_PUSH_CONST 3277 //svIkC5
VBC1_PUSH_0 
VBC1_POP_CF
[1:134] ;svIkA6 = 0;   
VBC3_PUSH_CONST 3278 //svIkA6
VBC1_PUSH_0 
VBC1_POP_CF
[1:135] ;svIkA7 = 99;   
VBC3_PUSH_CONST 3279 //svIkA7
VBC2_PUSH_CONST 99 
VBC1_POP_CF
[1:136] ;svIkA8 = 99;   
VBC3_PUSH_CONST 3280 //svIkA8
VBC2_PUSH_CONST 99 
VBC1_POP_CF
[1:137] ;svIkA9 = 0;   
VBC3_PUSH_CONST 3281 //svIkA9
VBC1_PUSH_0 
VBC1_POP_CF
[1:138] ;svIkA10 = 13.7;  
VBC3_PUSH_CONST 3282 //svIkA10
VBC5_PUSH_CONST 1096495923 
VBC1_POP
[1:139] ;svIkB10 = 23.8;  
VBC3_PUSH_CONST 3283 //svIkB10
VBC5_PUSH_CONST 1102997094 
VBC1_POP
[1:140] ;svIkC10 = 0;   
VBC3_PUSH_CONST 3284 //svIkC10
VBC1_PUSH_0 
VBC1_POP_CF
[1:142] ;e10 = 55;      
VBC2_PUSH_CONST 37 //e10
VBC2_PUSH_CONST 55 
VBC1_POP_CF
[1:143] ;d10 = 62;      
VBC2_PUSH_CONST 38 //d10
VBC2_PUSH_CONST 62 
VBC1_POP_CF
[1:146] ;svIkLimA5min = -150 * 0.017453293;
VBC3_PUSH_CONST 3285 //svIkLimA5min
VBC5_PUSH_CONST -1071149770 
VBC1_POP
[1:147] ;svIkLimA5max = 150 * 0.017453293;
VBC3_PUSH_CONST 3286 //svIkLimA5max
VBC5_PUSH_CONST 1076333878 
VBC1_POP
[1:150] ;svIkLimA6min = -108 * 0.017453293;
VBC3_PUSH_CONST 3287 //svIkLimA6min
VBC5_PUSH_CONST -1074706887 
VBC1_POP
[1:151] ;svIkLimA6max = 15 * 0.017453293;
VBC3_PUSH_CONST 3288 //svIkLimA6max
VBC5_PUSH_CONST 1048971922 
VBC1_POP
[1:153] ;svIkLimA7min = -130 * 0.017453293;
VBC3_PUSH_CONST 3289 //svIkLimA7min
VBC5_PUSH_CONST -1072613858 
VBC1_POP
[1:154] ;svIkLimA7max = 50 * 0.017453293;
VBC3_PUSH_CONST 3290 //svIkLimA7max
VBC5_PUSH_CONST 1063216883 
VBC1_POP
[1:157] ;svIkLimA8min = -180 * 0.017453293;
VBC3_PUSH_CONST 3291 //svIkLimA8min
VBC5_PUSH_CONST -1068953637 
VBC1_POP
[1:158] ;svIkLimA8max = 8 * 0.017453293;
VBC3_PUSH_CONST 3292 //svIkLimA8max
VBC5_PUSH_CONST 1041168949 
VBC1_POP
[1:161] ;svIkLimA9min = -45 * 0.017453293;
VBC3_PUSH_CONST 3293 //svIkLimA9min
VBC5_PUSH_CONST -1085730853 
VBC1_POP
[1:162] ;svIkLimA9max = 78 * 0.017453293;
VBC3_PUSH_CONST 3294 //svIkLimA9max
VBC5_PUSH_CONST 1068384497 
VBC1_POP
[1:165] ;svIkLimA10min = -24 * 0.017453293;
VBC3_PUSH_CONST 3295 //svIkLimA10min
VBC5_PUSH_CONST -1093241008 
VBC1_POP
[1:166] ;svIkLimA10max = 24 * 0.017453293;
VBC3_PUSH_CONST 3296 //svIkLimA10max
VBC5_PUSH_CONST 1054242640 
VBC1_POP
[1:167] ;sfIkSetup();
VBC5_PUSH_CONST 200 | 0x80000000 //import func index sfIkSetup
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:169] ;framestep = 2;
VBC2_PUSH_CONST 22 //framestep
VBC1_PUSH_2 
VBC1_POP
[1:171] ;gaitHeight = 180;  
VBC2_PUSH_CONST 43 //gaitHeight
VBC3_PUSH_CONST 180 
VBC1_POP_CF
[1:172] ;stepHeight = 32.0; 
VBC2_PUSH_CONST 44 //stepHeight
VBC5_PUSH_CONST 1107296256 
VBC1_POP
[1:174] ;selfMotionShiftCorrectionX = 0.0 / 21.0;
VBC2_PUSH_CONST 7 //selfMotionShiftCorrectionX
VBC1_PUSH_0 
VBC1_POP
[1:175] ;selfMotionShiftCorrectionY = 0.0 / 21.0;
VBC2_PUSH_CONST 8 //selfMotionShiftCorrectionY
VBC1_PUSH_0 
VBC1_POP
[1:179] ;ztr0 = -(svIkC5+svIkA6+svIkA7+svIkA8+svIkA9+svIkB10 - 1); 
VBC2_PUSH_CONST 49 //ztr0
VBC3_PUSH_GLOBAL 3277 //svIkC5
VBC3_PUSH_GLOBAL 3278 //svIkA6
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3279 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3280 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3281 //svIkA9
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3283 //svIkB10
VBC1_ADD_FF
VBC1_PUSH_1 
VBC1_SUB_FI
VBC1_NEG_F
VBC1_POP
[1:180] ;ztl0 = -(svIkC5+svIkA6+svIkA7+svIkA8+svIkA9+svIkB10 - 1); 
VBC2_PUSH_CONST 50 //ztl0
VBC3_PUSH_GLOBAL 3277 //svIkC5
VBC3_PUSH_GLOBAL 3278 //svIkA6
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3279 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3280 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3281 //svIkA9
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3283 //svIkB10
VBC1_ADD_FF
VBC1_PUSH_1 
VBC1_SUB_FI
VBC1_NEG_F
VBC1_POP
[1:182] ;zr = zl = -1;
VBC2_PUSH_CONST 28 //zr
VBC2_PUSH_CONST 35 //zl
VBC2_PUSH_CONST -1 // -
VBC1_STORE_CF
VBC1_POP
[1:185] ;selfInitPoses = 10;
VBC2_PUSH_CONST 16 //selfInitPoses
VBC2_PUSH_CONST 10 
VBC1_POP
[1:187] ;stepLength = 0.0;    
VBC2_PUSH_CONST 4 //stepLength
VBC1_PUSH_0 
VBC1_POP
[1:188] ;sideLength = 0.0;    
VBC2_PUSH_CONST 5 //sideLength
VBC1_PUSH_0 
VBC1_POP
[1:189] ;rotation = 0;        
VBC2_PUSH_CONST 6 //rotation
VBC1_PUSH_0 
VBC1_POP_CF
[1:190] ;selfFirstLegIsRightLeg = 1; 
VBC2_PUSH_CONST 13 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_POP
[1:191] ;motion_to_right = 1;
VBC2_PUSH_CONST 14 //motion_to_right
VBC1_PUSH_1 
VBC1_POP
[1:192] ;side_motion = 0.0;
VBC2_PUSH_CONST 15 //side_motion
VBC1_PUSH_0 
VBC1_POP
[1:193] ;selfInitPoses = 20; 
VBC2_PUSH_CONST 16 //selfInitPoses
VBC2_PUSH_CONST 20 
VBC1_POP
[1:195] ;stepZtr = (ztr0 + gaitHeight) / selfInitPoses;
VBC2_PUSH_CONST 51 //stepZtr
VBC3_PUSH_GLOBAL 49 //ztr0
VBC3_PUSH_GLOBAL 43 //gaitHeight
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 16 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:196] ;stepZtl = (ztl0 + gaitHeight) / selfInitPoses;
VBC2_PUSH_CONST 52 //stepZtl
VBC3_PUSH_GLOBAL 50 //ztl0
VBC3_PUSH_GLOBAL 43 //gaitHeight
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 16 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:198] ;bodyTiltAtWalk = 0.01;
VBC2_PUSH_CONST 58 //bodyTiltAtWalk
VBC5_PUSH_CONST 1008981770 
VBC1_POP
[1:199] ;solyLandingSkew = 0.01;
VBC2_PUSH_CONST 59 //solyLandingSkew
VBC5_PUSH_CONST 1008981770 
VBC1_POP
[1:201] ;if( slowWalk ) {
VBC3_PUSH_GLOBAL 3 //slowWalk
VBC4_FALSE_JUMP LAB774 //if to false
;
[1:202] ;fr1 = 50; 
VBC2_PUSH_CONST 41 //fr1
VBC2_PUSH_CONST 50 
VBC1_POP
[1:203] ;fr2 = 20; 
VBC2_PUSH_CONST 42 //fr2
VBC2_PUSH_CONST 20 
VBC1_POP
[1:204] ;amplitude = 110;    
VBC2_PUSH_CONST 39 //amplitude
VBC2_PUSH_CONST 110 
VBC1_POP_CF
VBC4_JUMP LAB789 //if to exit
LAB774: //if else
;
[1:207] ;fr1 = 8; 
VBC2_PUSH_CONST 41 //fr1
VBC2_PUSH_CONST 8 
VBC1_POP
[1:208] ;fr2 = 12; 
VBC2_PUSH_CONST 42 //fr2
VBC2_PUSH_CONST 12 
VBC1_POP
[1:209] ;amplitude = 20;    
VBC2_PUSH_CONST 39 //amplitude
VBC2_PUSH_CONST 20 
VBC1_POP_CF
LAB789: //if exit
[1:211] ;stepYtr = amplitude / 2.0 / selfInitPoses;
VBC2_PUSH_CONST 53 //stepYtr
VBC3_PUSH_GLOBAL 39 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 16 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:212] ;stepYtl = amplitude / 2.0 / selfInitPoses;
VBC2_PUSH_CONST 54 //stepYtl
VBC3_PUSH_GLOBAL 39 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 16 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:217] ;alpha01 = 3.141592654;
VBC2_PUSH_CONST 40 //alpha01
VBC5_PUSH_CONST 1078530011 
VBC1_POP
[1:218] ;if( fr1 != 0 )
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_PUSH_0 
VBC1_NOT_EQU
VBC4_FALSE_JUMP LAB850 //if to false
;alpha01 = alpha01 * 2 / fr1;
VBC2_PUSH_CONST 40 //alpha01
VBC3_PUSH_GLOBAL 40 //alpha01
VBC1_PUSH_2 
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_DIV_FI
VBC1_POP
LAB850: //if else
[1:225] ;fps = 5;
VBC2_PUSH_CONST 56 //fps
VBC2_PUSH_CONST 5 
VBC1_POP
[1:226] ;walking_frame = 2;
VBC2_PUSH_CONST 57 //walking_frame
VBC1_PUSH_2 
VBC1_POP
[1:235] ;
VBC1_RETURN
;computeAlphaForWalk <int()>
[1:237] ;if (selfFirstLegIsRightLeg == 1) sfIkAngle( xtr, ytr, ztr, xr, yr, zr, wr );
VBC3_PUSH_GLOBAL 13 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB901 //if to false
;if (selfFirstLegIsRightLeg == 1) sfIkAngle( xtr, ytr, ztr, xr, yr, zr, wr );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 23 //xtr
VBC3_PUSH_GLOBAL 24 //ytr
VBC3_PUSH_GLOBAL 25 //ztr
VBC3_PUSH_GLOBAL 26 //xr
VBC3_PUSH_GLOBAL 27 //yr
VBC3_PUSH_GLOBAL 28 //zr
VBC3_PUSH_GLOBAL 29 //wr
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
VBC4_JUMP LAB932 //if to exit
LAB901: //if else
;else sfIkAngle(xtl, -ytl, ztl, xl, -yl, zl, -wl);
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 30 //xtl
VBC3_PUSH_GLOBAL 31 //ytl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 32 //ztl
VBC3_PUSH_GLOBAL 33 //xl
VBC3_PUSH_GLOBAL 34 //yl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 35 //zl
VBC3_PUSH_GLOBAL 36 //wl
VBC1_NEG_F
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
LAB932: //if exit
[1:239] ;if (svIkOutPresent) {
VBC3_PUSH_GLOBAL 3297 //svIkOutPresent
VBC4_FALSE_JUMP LAB1086 //if to false
;
[1:241] ;sfPoseGroupLin(1024 , -svIkEncA5, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 3298 //svIkEncA5
VBC1_NEG
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:242] ;sfPoseGroupLin(4096 , -svIkEncA6, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 3299 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:243] ;sfPoseGroupLin(16384 , -svIkEncA7, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 3300 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:244] ;sfPoseGroupLin(65536 , -svIkEncA8 / 2, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:245] ;sfPoseGroupLin(67108864 , -svIkEncA8 / 2, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 67108864 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:246] ;sfPoseGroupLin(262144 , svIkEncA9, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 3302 //svIkEncA9
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:247] ;sfPoseGroupLin(1048576 , -svIkEncA10, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 3303 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:248] ;sfPoseGroupLin(256 , 5145, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 256 
VBC3_PUSH_CONST 5145 
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB1088 //if to exit
LAB1086: //if else
;else IKerr++;
VBC1_PUSH_2 //IKerr
VBC1_INC
LAB1088: //if exit
[1:252] ;if (selfFirstLegIsRightLeg == 1) sfIkAngle( xtl, -ytl, ztl, xl, -yl, zl, wl );
VBC3_PUSH_GLOBAL 13 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB1131 //if to false
;if (selfFirstLegIsRightLeg == 1) sfIkAngle( xtl, -ytl, ztl, xl, -yl, zl, wl );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 30 //xtl
VBC3_PUSH_GLOBAL 31 //ytl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 32 //ztl
VBC3_PUSH_GLOBAL 33 //xl
VBC3_PUSH_GLOBAL 34 //yl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 35 //zl
VBC3_PUSH_GLOBAL 36 //wl
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
VBC4_JUMP LAB1160 //if to exit
LAB1131: //if else
;else sfIkAngle(xtr, ytr, ztr, xr, yr, zr, -wr);
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 23 //xtr
VBC3_PUSH_GLOBAL 24 //ytr
VBC3_PUSH_GLOBAL 25 //ztr
VBC3_PUSH_GLOBAL 26 //xr
VBC3_PUSH_GLOBAL 27 //yr
VBC3_PUSH_GLOBAL 28 //zr
VBC3_PUSH_GLOBAL 29 //wr
VBC1_NEG_F
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
LAB1160: //if exit
[1:254] ;if (svIkOutPresent) {
VBC3_PUSH_GLOBAL 3297 //svIkOutPresent
VBC4_FALSE_JUMP LAB1315 //if to false
;
[1:256] ;sfPoseGroupLin(2048 , -svIkEncA5, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 3298 //svIkEncA5
VBC1_NEG
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:257] ;sfPoseGroupLin(8192 , -svIkEncA6, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 3299 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:258] ;sfPoseGroupLin(32768 , -svIkEncA7, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 3300 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:259] ;sfPoseGroupLin(131072 , -svIkEncA8 / 2, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:260] ;sfPoseGroupLin(134217728 , -svIkEncA8 / 2, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 134217728 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:261] ;sfPoseGroupLin(524288 , svIkEncA9, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 3302 //svIkEncA9
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:262] ;sfPoseGroupLin(2097152 , -svIkEncA10, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 3303 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:263] ;sfPoseGroupLin(512 , 5145, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 512 
VBC3_PUSH_CONST 5145 
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB1317 //if to exit
LAB1315: //if else
;else IKerr++;
VBC1_PUSH_2 //IKerr
VBC1_INC
LAB1317: //if exit
[1:267] ;sfWaitFrame(walking_frame);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 57 //walking_frame
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:268] ;return 1;
VBC1_PUSH_1 
VBC2_POP_RESULT 2
VBC1_RETURN
;computeAlphaForWalkFine <void(,int)>
[1:278] ;if (selfFirstLegIsRightLeg == 1) sfIkAngle( xtr, ytr, ztr, xr, yr, zr, wr );
VBC3_PUSH_GLOBAL 13 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB1369 //if to false
;if (selfFirstLegIsRightLeg == 1) sfIkAngle( xtr, ytr, ztr, xr, yr, zr, wr );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 23 //xtr
VBC3_PUSH_GLOBAL 24 //ytr
VBC3_PUSH_GLOBAL 25 //ztr
VBC3_PUSH_GLOBAL 26 //xr
VBC3_PUSH_GLOBAL 27 //yr
VBC3_PUSH_GLOBAL 28 //zr
VBC3_PUSH_GLOBAL 29 //wr
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
VBC4_JUMP LAB1400 //if to exit
LAB1369: //if else
;else sfIkAngle(xtl, -ytl, ztl, xl, -yl, zl, -wl);
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 30 //xtl
VBC3_PUSH_GLOBAL 31 //ytl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 32 //ztl
VBC3_PUSH_GLOBAL 33 //xl
VBC3_PUSH_GLOBAL 34 //yl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 35 //zl
VBC3_PUSH_GLOBAL 36 //wl
VBC1_NEG_F
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
LAB1400: //if exit
[1:281] ;if (svIkOutPresent) {
VBC3_PUSH_GLOBAL 3297 //svIkOutPresent
VBC4_FALSE_JUMP LAB1546 //if to false
;
[1:283] ;sfPoseGroupLin(1024 , -svIkEncA5, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 3298 //svIkEncA5
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:284] ;sfPoseGroupLin(4096 , -svIkEncA6, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 3299 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:285] ;sfPoseGroupLin(16384 , -svIkEncA7, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 3300 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:286] ;sfPoseGroupLin(65536 , -svIkEncA8 / 2, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:287] ;sfPoseGroupLin(67108864 , -svIkEncA8 / 2, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 67108864 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:288] ;sfPoseGroupLin(262144 , svIkEncA9, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 3302 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:289] ;sfPoseGroupLin(1048576 , -svIkEncA10, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 3303 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:290] ;sfPoseGroupLin( 256 , 5145, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 256 
VBC3_PUSH_CONST 5145 
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB1548 //if to exit
LAB1546: //if else
;else IKerr++;
VBC1_PUSH_2 //IKerr
VBC1_INC
LAB1548: //if exit
[1:294] ;if (selfFirstLegIsRightLeg == 1) sfIkAngle( xtl, -ytl, ztl, xl, -yl, zl, wl );
VBC3_PUSH_GLOBAL 13 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB1591 //if to false
;if (selfFirstLegIsRightLeg == 1) sfIkAngle( xtl, -ytl, ztl, xl, -yl, zl, wl );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 30 //xtl
VBC3_PUSH_GLOBAL 31 //ytl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 32 //ztl
VBC3_PUSH_GLOBAL 33 //xl
VBC3_PUSH_GLOBAL 34 //yl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 35 //zl
VBC3_PUSH_GLOBAL 36 //wl
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
VBC4_JUMP LAB1620 //if to exit
LAB1591: //if else
;else sfIkAngle(xtr, ytr, ztr, xr, yr, zr, -wr);
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 23 //xtr
VBC3_PUSH_GLOBAL 24 //ytr
VBC3_PUSH_GLOBAL 25 //ztr
VBC3_PUSH_GLOBAL 26 //xr
VBC3_PUSH_GLOBAL 27 //yr
VBC3_PUSH_GLOBAL 28 //zr
VBC3_PUSH_GLOBAL 29 //wr
VBC1_NEG_F
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
LAB1620: //if exit
[1:296] ;if (svIkOutPresent) {
VBC3_PUSH_GLOBAL 3297 //svIkOutPresent
VBC4_FALSE_JUMP LAB1767 //if to false
;
[1:298] ;sfPoseGroupLin(2048 , -svIkEncA5, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 3298 //svIkEncA5
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:299] ;sfPoseGroupLin(8192 , -svIkEncA6, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 3299 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:300] ;sfPoseGroupLin(32768 , -svIkEncA7, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 3300 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:301] ;sfPoseGroupLin(131072 , -svIkEncA8 / 2, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:302] ;sfPoseGroupLin(134217728 , -svIkEncA8 / 2, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 134217728 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:303] ;sfPoseGroupLin(524288 , svIkEncA9, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 3302 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:304] ;sfPoseGroupLin(2097152 , -svIkEncA10, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 3303 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:305] ;sfPoseGroupLin(512 , 5145, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 512 
VBC3_PUSH_CONST 5145 
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB1769 //if to exit
LAB1767: //if else
;else IKerr++;
VBC1_PUSH_2 //IKerr
VBC1_INC
LAB1769: //if exit
[1:309] ;sfWaitFrame(frames);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:316] ;
VBC1_RETURN
;testDrop <void()>
[1:317] ;if( sfAbs(svImuAccX) > 50000 || sfAbs(svImuAccZ) > 50000 ) {
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 2560 //svImuAccX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC4_PUSH_CONST 50000 
VBC1_GREAT
VBC4_TRUE_JUMP_KEEP LAB1815
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 2562 //svImuAccZ
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC4_PUSH_CONST 50000 
VBC1_GREAT
VBC4_TRUE_JUMP_KEEP LAB1815
VBC1_PUSH_0
LAB1815:
VBC4_FALSE_JUMP LAB1825 //if to false
;
[1:322] ;sfWaitFrame(100);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_CONST 100 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB1825: //if else
[1:328] ;
VBC1_RETURN
;walkInitialPose <void()>
[1:333] ;xtr = xtl = 0;
VBC2_PUSH_CONST 23 //xtr
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:334] ;for( j = 0; j < selfInitPoses; j++ ) {
VBC2_PUSH_CONST 64 //j
VBC1_PUSH_0 
VBC1_POP
LAB1837: //for condition
VBC3_PUSH_GLOBAL 64 //j
VBC3_PUSH_GLOBAL 16 //selfInitPoses
VBC1_LESS
VBC4_FALSE_JUMP LAB1917 //to for exit
;
[1:336] ;ztr = ztr0 - j * stepZtr;
VBC2_PUSH_CONST 25 //ztr
VBC3_PUSH_GLOBAL 49 //ztr0
VBC3_PUSH_GLOBAL 64 //j
VBC3_PUSH_GLOBAL 51 //stepZtr
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:337] ;ztl = ztl0 - j * stepZtl;
VBC2_PUSH_CONST 32 //ztl
VBC3_PUSH_GLOBAL 50 //ztl0
VBC3_PUSH_GLOBAL 64 //j
VBC3_PUSH_GLOBAL 52 //stepZtl
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:338] ;ytr = -d10 - j * stepYtr;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 38 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 64 //j
VBC3_PUSH_GLOBAL 53 //stepYtr
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:339] ;ytl =  d10 - j * stepYtl;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 38 //d10
VBC3_PUSH_GLOBAL 64 //j
VBC3_PUSH_GLOBAL 54 //stepYtl
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:341] ;computeAlphaForWalk();
VBC3_PUSH_CONST 860  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB1910: //for step
VBC2_PUSH_CONST 64 //j
VBC1_INC
VBC4_JUMP LAB1837 //to condition
LAB1917: //for exit
[1:350] ;
VBC1_RETURN
;walkInitialPoseFine <void()>
[1:351] ;xtr = xtl = 0;
VBC2_PUSH_CONST 23 //xtr
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:352] ;ztr = ztl = -gaitHeight;
VBC2_PUSH_CONST 25 //ztr
VBC2_PUSH_CONST 32 //ztl
VBC3_PUSH_GLOBAL 43 //gaitHeight
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:353] ;ytr = -d10 - amplitude / 2.0;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 38 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 39 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:354] ;ytl =  d10 - amplitude / 2.0;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 38 //d10
VBC3_PUSH_GLOBAL 39 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:355] ;computeAlphaForWalkFine( 40 );
VBC3_PUSH_CONST 1328  //func address computeAlphaForWalkFine
VBC2_PUSH_CONST 40 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:359] ;
VBC1_RETURN
;walkFinalPose <void()>
[1:360] ;for( j = 0; j < selfInitPoses; j++ ) {
VBC2_PUSH_CONST 64 //j
VBC1_PUSH_0 
VBC1_POP
LAB1980: //for condition
VBC3_PUSH_GLOBAL 64 //j
VBC3_PUSH_GLOBAL 16 //selfInitPoses
VBC1_LESS
VBC4_FALSE_JUMP LAB2083 //to for exit
;
[1:362] ;ztr = -gaitHeight + (j+1) * stepZtr;
VBC2_PUSH_CONST 25 //ztr
VBC3_PUSH_GLOBAL 43 //gaitHeight
VBC1_NEG_F
VBC3_PUSH_GLOBAL 64 //j
VBC1_PUSH_1 
VBC1_ADD
VBC3_PUSH_GLOBAL 51 //stepZtr
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:363] ;ztl = -gaitHeight + (j+1) * stepZtr;
VBC2_PUSH_CONST 32 //ztl
VBC3_PUSH_GLOBAL 43 //gaitHeight
VBC1_NEG_F
VBC3_PUSH_GLOBAL 64 //j
VBC1_PUSH_1 
VBC1_ADD
VBC3_PUSH_GLOBAL 51 //stepZtr
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:364] ;ytr = -d10 + (selfInitPoses - (j+1)) * stepYtr;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 38 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 16 //selfInitPoses
VBC3_PUSH_GLOBAL 64 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_SUB
VBC3_PUSH_GLOBAL 53 //stepYtr
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:365] ;ytl =  d10 + (selfInitPoses - (j+1)) * stepYtl;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 38 //d10
VBC3_PUSH_GLOBAL 16 //selfInitPoses
VBC3_PUSH_GLOBAL 64 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_SUB
VBC3_PUSH_GLOBAL 54 //stepYtl
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:367] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 860  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB2076 //if to false
;return;
VBC1_RETURN
LAB2076: //if else
LAB2076: //for step
VBC2_PUSH_CONST 64 //j
VBC1_INC
VBC4_JUMP LAB1980 //to condition
LAB2083: //for exit
[1:378] ;
VBC1_RETURN
;walkFinalPoseFine <void()>
[1:379] ;xtr = xtl = 0;
VBC2_PUSH_CONST 23 //xtr
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:380] ;ztr = ztl = -(svIkC5+svIkA6+svIkA7+svIkA8+svIkA9+svIkB10 - 1);
VBC2_PUSH_CONST 25 //ztr
VBC2_PUSH_CONST 32 //ztl
VBC3_PUSH_GLOBAL 3277 //svIkC5
VBC3_PUSH_GLOBAL 3278 //svIkA6
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3279 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3280 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3281 //svIkA9
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3283 //svIkB10
VBC1_ADD_FF
VBC1_PUSH_1 
VBC1_SUB_FI
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:381] ;ytr = -d10;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 38 //d10
VBC1_NEG_F
VBC1_POP
[1:382] ;ytl =  d10;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 38 //d10
VBC1_POP
[1:383] ;computeAlphaForWalkFine( 40 );
VBC3_PUSH_CONST 1328  //func address computeAlphaForWalkFine
VBC2_PUSH_CONST 40 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:386] ;
VBC1_RETURN
;walkInit <void()>
[1:397] ;correctedStepLenght = stepLength + selfMotionShiftCorrectionX;
VBC2_PUSH_CONST 45 //correctedStepLenght
VBC3_PUSH_GLOBAL 4 //stepLength
VBC3_PUSH_GLOBAL 7 //selfMotionShiftCorrectionX
VBC1_ADD_FF
VBC1_POP
[1:398] ;correctedStepLenghtHalf = correctedStepLenght / 2;
VBC2_PUSH_CONST 46 //correctedStepLenghtHalf
VBC3_PUSH_GLOBAL 45 //correctedStepLenght
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_POP
[1:399] ;correctedSideLenght = sideLength - selfMotionShiftCorrectionY;
VBC2_PUSH_CONST 47 //correctedSideLenght
VBC3_PUSH_GLOBAL 5 //sideLength
VBC3_PUSH_GLOBAL 8 //selfMotionShiftCorrectionY
VBC1_SUB_FF
VBC1_POP
[1:400] ;correctedSideLenghtHalf = correctedSideLenght / 2;
VBC2_PUSH_CONST 48 //correctedSideLenghtHalf
VBC3_PUSH_GLOBAL 47 //correctedSideLenght
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_POP
[1:403] ;correctedRotation = -rotation *0.25 * 0.23 / ( rotation <= 0 ? rotationYieldRight : rotationYieldLeft);
VBC2_PUSH_CONST 69 //correctedRotation
VBC3_PUSH_GLOBAL 6 //rotation
VBC1_NEG_F
VBC5_PUSH_CONST 1048576000 
VBC1_MUL_FF
VBC5_PUSH_CONST 1047233823 
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 6 //rotation
VBC1_PUSH_0 
VBC1_LESS_EQU_FI
VBC4_FALSE_JUMP LAB2214
VBC3_PUSH_GLOBAL 20 //rotationYieldRight
VBC4_JUMP LAB2217
LAB2214:
VBC3_PUSH_GLOBAL 21 //rotationYieldLeft
LAB2217:
VBC1_DIV_FF
VBC1_POP
[1:405] ;xtl0 = correctedStepLenght * (1 - (fr1 + fr2 + 2.0 * framestep) / (2 * fr1 + fr2 + 2.0 * framestep)) * 1.5;
VBC2_PUSH_CONST 65 //xtl0
VBC3_PUSH_GLOBAL 45 //correctedStepLenght
VBC1_PUSH_1 
VBC3_PUSH_GLOBAL 41 //fr1
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_DIV_FF
VBC1_SUB_IF
VBC1_MUL_FF
VBC5_PUSH_CONST 1069547520 
VBC1_MUL_FF
VBC1_POP
[1:406] ;xtr0 = correctedStepLenght * (0.5 - (fr1 + fr2 + 2.0 * framestep) / (2 * fr1 + fr2 + 2.0 * framestep));
VBC2_PUSH_CONST 66 //xtr0
VBC3_PUSH_GLOBAL 45 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 41 //fr1
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_MUL_FF
VBC1_POP
[1:407] ;dx0Typical = correctedStepLenght / (2 * fr1 + fr2 + 2.0 * framestep) * framestep;
VBC2_PUSH_CONST 67 //dx0Typical
VBC3_PUSH_GLOBAL 45 //correctedStepLenght
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC1_POP
[1:408] ;dy0Typical = correctedSideLenght / (2.0 * fr2) * framestep;
VBC2_PUSH_CONST 68 //dy0Typical
VBC3_PUSH_GLOBAL 47 //correctedSideLenght
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_MUL_FI
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC1_POP
[1:411] ;xr = xl = bodyTiltAtWalk;
VBC2_PUSH_CONST 26 //xr
VBC2_PUSH_CONST 33 //xl
VBC3_PUSH_GLOBAL 58 //bodyTiltAtWalk
VBC1_STORE
VBC1_POP
[1:412] ;yl =  solyLandingSkew;
VBC2_PUSH_CONST 34 //yl
VBC3_PUSH_GLOBAL 59 //solyLandingSkew
VBC1_POP
[1:413] ;yr = -solyLandingSkew;
VBC2_PUSH_CONST 27 //yr
VBC3_PUSH_GLOBAL 59 //solyLandingSkew
VBC1_NEG_F
VBC1_POP
[1:414] ;fase_offset = 0.7;
VBC2_PUSH_CONST 71 //fase_offset
VBC5_PUSH_CONST 1060320051 
VBC1_POP
[1:419] ;
VBC1_RETURN
;walkPhasa1 <void()>
[1:420] ;ztl = ztr = -gaitHeight;
VBC2_PUSH_CONST 32 //ztl
VBC2_PUSH_CONST 25 //ztr
VBC3_PUSH_GLOBAL 43 //gaitHeight
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:421] ;for( j = 0; j < fr1; j += framestep ) {
VBC2_PUSH_CONST 64 //j
VBC1_PUSH_0 
VBC1_POP
LAB2416: //for condition
VBC3_PUSH_GLOBAL 64 //j
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_LESS
VBC4_FALSE_JUMP LAB2560 //to for exit
;
[1:425] ;s = amplitude * (0.5 - (j * 1.0 + framestep) / fr1);
VBC2_PUSH_CONST 70 //s
VBC3_PUSH_GLOBAL 39 //amplitude
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 64 //j
VBC5_PUSH_CONST 1065353216 
VBC1_MUL_IF
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_ADD_FI
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_MUL_FF
VBC1_POP
[1:426] ;ytr = s - d10 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 70 //s
VBC3_PUSH_GLOBAL 38 //d10
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 48 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
[1:427] ;ytl = s + d10 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 70 //s
VBC3_PUSH_GLOBAL 38 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 48 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
[1:428] ;if( stepType == 0 ) continue;
VBC3_PUSH_GLOBAL 55 //stepType
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB2498 //if to false
;if( stepType == 0 ) continue;
VBC4_JUMP LAB2547 //to loop condition
LAB2498: //if else
[1:429] ;xtl = xtl0 - dx0Typical - dx0Typical * j / framestep;
VBC2_PUSH_CONST 30 //xtl
VBC3_PUSH_GLOBAL 65 //xtl0
VBC3_PUSH_GLOBAL 67 //dx0Typical
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 67 //dx0Typical
VBC3_PUSH_GLOBAL 64 //j
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
[1:430] ;xtr = xtr0 - dx0Typical - dx0Typical * j / framestep;
VBC2_PUSH_CONST 23 //xtr
VBC3_PUSH_GLOBAL 66 //xtr0
VBC3_PUSH_GLOBAL 67 //dx0Typical
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 67 //dx0Typical
VBC3_PUSH_GLOBAL 64 //j
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
[1:432] ;computeAlphaForWalk();
VBC3_PUSH_CONST 860  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB2547: //for step
VBC2_PUSH_CONST 64 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB2416 //to condition
LAB2560: //for exit
[1:438] ;
VBC1_RETURN
;walkPhasa3 <void()>
[1:439] ;ztl = ztr = -gaitHeight;
VBC2_PUSH_CONST 32 //ztl
VBC2_PUSH_CONST 25 //ztr
VBC3_PUSH_GLOBAL 43 //gaitHeight
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:440] ;for( j = 0; j < fr1; j += framestep ) {
VBC2_PUSH_CONST 64 //j
VBC1_PUSH_0 
VBC1_POP
LAB2575: //for condition
VBC3_PUSH_GLOBAL 64 //j
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_LESS
VBC4_FALSE_JUMP LAB2681 //to for exit
;
[1:444] ;s = -amplitude * (0.5 - (j * 1.0 + framestep) / fr1);
VBC2_PUSH_CONST 70 //s
VBC3_PUSH_GLOBAL 39 //amplitude
VBC1_NEG_F
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 64 //j
VBC5_PUSH_CONST 1065353216 
VBC1_MUL_IF
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_ADD_FI
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_MUL_FF
VBC1_POP
[1:445] ;ytr = s - d10 - correctedSideLenghtHalf;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 70 //s
VBC3_PUSH_GLOBAL 38 //d10
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 48 //correctedSideLenghtHalf
VBC1_SUB_FF
VBC1_POP
[1:446] ;ytl = s + d10 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 70 //s
VBC3_PUSH_GLOBAL 38 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 48 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
[1:447] ;xtl -= dx0Typical;
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 67 //dx0Typical
VBC1_SUB_FF
VBC1_POP
[1:448] ;xtr -= dx0Typical;
VBC2_PUSH_CONST 23 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 67 //dx0Typical
VBC1_SUB_FF
VBC1_POP
[1:450] ;computeAlphaForWalk();
VBC3_PUSH_CONST 860  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB2668: //for step
VBC2_PUSH_CONST 64 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB2575 //to condition
LAB2681: //for exit
[1:455] ;
VBC1_RETURN
;walkPhasa2 <void()>
[1:460] ;ztr = -gaitHeight + stepHeight;
VBC2_PUSH_CONST 25 //ztr
VBC3_PUSH_GLOBAL 43 //gaitHeight
VBC1_NEG_F
VBC3_PUSH_GLOBAL 44 //stepHeight
VBC1_ADD_FF
VBC1_POP
[1:473] ;dy = correctedSideLenght * framestep / (fr2 - 2.0 * framestep);
VBC2_PUSH_CONST 73 //dy
VBC3_PUSH_GLOBAL 47 //correctedSideLenght
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 42 //fr2
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_DIV_FF
VBC1_POP
[1:477] ;stepRotation = correctedRotation / (fr2 - 2.0 * framestep) * 2;
VBC2_PUSH_CONST 74 //stepRotation
VBC3_PUSH_GLOBAL 69 //correctedRotation
VBC3_PUSH_GLOBAL 42 //fr2
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_DIV_FF
VBC1_PUSH_2 
VBC1_MUL_FI
VBC1_POP
[1:479] ;if( stepType == 0 )
VBC3_PUSH_GLOBAL 55 //stepType
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB2778 //if to false
;dx = correctedStepLenght / (fr2 - 2.0 * framestep) * framestep / 2;
VBC2_PUSH_CONST 72 //dx
VBC3_PUSH_GLOBAL 45 //correctedStepLenght
VBC3_PUSH_GLOBAL 42 //fr2
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_POP
VBC4_JUMP LAB2802 //if to exit
LAB2778: //if else
;dx = correctedStepLenght / (fr2 - 2.0 * framestep) * framestep;
VBC2_PUSH_CONST 72 //dx
VBC3_PUSH_GLOBAL 45 //correctedStepLenght
VBC3_PUSH_GLOBAL 42 //fr2
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC1_POP
LAB2802: //if exit
[1:484] ;for( j = 0; j < fr2; j += framestep ) {
VBC2_PUSH_CONST 64 //j
VBC1_PUSH_0 
VBC1_POP
LAB2806: //for condition
VBC3_PUSH_GLOBAL 64 //j
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_LESS
VBC4_FALSE_JUMP LAB2989 //to for exit
;
[1:485] ;if( j == 0 ) {
VBC3_PUSH_GLOBAL 64 //j
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB2853 //if to false
;
[1:486] ;xtr -= dx0Typical;
VBC2_PUSH_CONST 23 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 67 //dx0Typical
VBC1_SUB_FF
VBC1_POP
[1:487] ;ytr  = s - d10 + dy0Typical;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 70 //s
VBC3_PUSH_GLOBAL 38 //d10
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 68 //dy0Typical
VBC1_ADD_FF
VBC1_POP
VBC4_JUMP LAB2953 //if to exit
LAB2853: //if else
;else if( j == (fr2 - framestep) ) {
VBC3_PUSH_GLOBAL 64 //j
VBC3_PUSH_GLOBAL 42 //fr2
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB2901 //if to false
;
[1:490] ;xtr -= dx0Typical;
VBC2_PUSH_CONST 23 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 67 //dx0Typical
VBC1_SUB_FF
VBC1_POP
[1:491] ;ytr  = s - d10 + 2 * dy0Typical - correctedSideLenght;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 70 //s
VBC3_PUSH_GLOBAL 38 //d10
VBC1_SUB_FF
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 68 //dy0Typical
VBC1_MUL_IF
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 47 //correctedSideLenght
VBC1_SUB_FF
VBC1_POP
VBC4_JUMP LAB2953 //if to exit
LAB2901: //if else
;
[1:494] ;xtr += dx;
VBC2_PUSH_CONST 23 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 72 //dx
VBC1_ADD_FF
VBC1_POP
[1:495] ;ytr  = s - 64 + dy0Typical - dy * (j / 2);
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 70 //s
VBC2_PUSH_CONST 64 
VBC1_SUB_FI
VBC3_PUSH_GLOBAL 68 //dy0Typical
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 73 //dy
VBC3_PUSH_GLOBAL 64 //j
VBC1_PUSH_2 
VBC1_DIV
VBC1_MUL_FI
VBC1_SUB_FF
VBC1_POP
[1:496] ;wr = correctedRotation - j * stepRotation;
VBC2_PUSH_CONST 29 //wr
VBC3_PUSH_GLOBAL 69 //correctedRotation
VBC3_PUSH_GLOBAL 64 //j
VBC3_PUSH_GLOBAL 74 //stepRotation
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:497] ;wl = wr;
VBC2_PUSH_CONST 36 //wl
VBC3_PUSH_GLOBAL 29 //wr
VBC1_POP
LAB2953: //if exit
LAB2953: //if exit
[1:499] ;xtl -= dx0Typical;
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 67 //dx0Typical
VBC1_SUB_FF
VBC1_POP
[1:500] ;ytl += dy0Typical;
VBC2_PUSH_CONST 31 //ytl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 68 //dy0Typical
VBC1_ADD_FF
VBC1_POP
[1:503] ;computeAlphaForWalk();
VBC3_PUSH_CONST 860  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB2976: //for step
VBC2_PUSH_CONST 64 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB2806 //to condition
LAB2989: //for exit
[1:508] ;
VBC1_RETURN
;walkPhasa4 <void()>
[1:512] ;stepRotation = correctedRotation / (fr2 - 2.0 * framestep) * 2;
VBC2_PUSH_CONST 74 //stepRotation
VBC3_PUSH_GLOBAL 69 //correctedRotation
VBC3_PUSH_GLOBAL 42 //fr2
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_DIV_FF
VBC1_PUSH_2 
VBC1_MUL_FI
VBC1_POP
[1:513] ;ztl = -gaitHeight + stepHeight;
VBC2_PUSH_CONST 32 //ztl
VBC3_PUSH_GLOBAL 43 //gaitHeight
VBC1_NEG_F
VBC3_PUSH_GLOBAL 44 //stepHeight
VBC1_ADD_FF
VBC1_POP
[1:514] ;if( stepType == 1 ) {
VBC3_PUSH_GLOBAL 55 //stepType
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB3104 //if to false
;
[1:515] ;dx0 = dx0Typical * 4 / fr2;
VBC2_PUSH_CONST 75 //dx0
VBC3_PUSH_GLOBAL 67 //dx0Typical
VBC2_PUSH_CONST 4 
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_DIV_FI
VBC1_POP
[1:516] ;dx = (correctedStepLenght * (fr1 + fr2) / (4 * fr1) + 2.0 * dx0) / (fr2 - 2.0 * framestep) * framestep / 1.23076941;
VBC2_PUSH_CONST 72 //dx
VBC3_PUSH_GLOBAL 45 //correctedStepLenght
VBC3_PUSH_GLOBAL 41 //fr1
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC1_MUL_FI
VBC2_PUSH_CONST 4 
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL
VBC1_DIV_FI
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 75 //dx0
VBC1_MUL_FF
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 42 //fr2
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC5_PUSH_CONST 1067289050 
VBC1_DIV_FF
VBC1_POP
VBC4_JUMP LAB3134 //if to exit
LAB3104: //if else
;
[1:519] ;dx = correctedStepLenght / (fr2 - 2.0 * framestep) * framestep;
VBC2_PUSH_CONST 72 //dx
VBC3_PUSH_GLOBAL 45 //correctedStepLenght
VBC3_PUSH_GLOBAL 42 //fr2
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC1_POP
[1:520] ;dx0 = dx0Typical;
VBC2_PUSH_CONST 75 //dx0
VBC3_PUSH_GLOBAL 67 //dx0Typical
VBC1_POP
LAB3134: //if exit
[1:522] ;for( j = 0; j < fr2; j += framestep ) {
VBC2_PUSH_CONST 64 //j
VBC1_PUSH_0 
VBC1_POP
LAB3138: //for condition
VBC3_PUSH_GLOBAL 64 //j
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_LESS
VBC4_FALSE_JUMP LAB3355 //to for exit
;
[1:523] ;if( stepType == 1 && j == (fr2 - framestep) ) {
VBC3_PUSH_GLOBAL 55 //stepType
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB3174
VBC3_PUSH_GLOBAL 64 //j
VBC3_PUSH_GLOBAL 42 //fr2
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB3174
VBC1_PUSH_1
LAB3174:
VBC4_FALSE_JUMP LAB3195 //if to false
;
[1:524] ;ztl = -gaitHeight;
VBC2_PUSH_CONST 32 //ztl
VBC3_PUSH_GLOBAL 43 //gaitHeight
VBC1_NEG_F
VBC1_POP
[1:525] ;ytl = s + d10;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 70 //s
VBC3_PUSH_GLOBAL 38 //d10
VBC1_ADD_FF
VBC1_POP
LAB3195: //if else
[1:527] ;if( j == 0 ) {
VBC3_PUSH_GLOBAL 64 //j
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB3230 //if to false
;
[1:528] ;xtl -= dx0;
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 75 //dx0
VBC1_SUB_FF
VBC1_POP
[1:529] ;ytl  = s + 64 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 70 //s
VBC2_PUSH_CONST 64 
VBC1_ADD_FI
VBC3_PUSH_GLOBAL 48 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
VBC4_JUMP LAB3314 //if to exit
LAB3230: //if else
;else if( j == (fr2 - framestep) ) {
VBC3_PUSH_GLOBAL 64 //j
VBC3_PUSH_GLOBAL 42 //fr2
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB3272 //if to false
;
[1:532] ;xtl -= dx0;
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 75 //dx0
VBC1_SUB_FF
VBC1_POP
[1:533] ;ytl  = s + d10 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 70 //s
VBC3_PUSH_GLOBAL 38 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 48 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
VBC4_JUMP LAB3314 //if to exit
LAB3272: //if else
;
[1:536] ;xtl += dx;
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 72 //dx
VBC1_ADD_FF
VBC1_POP
[1:537] ;ytl  = s + 64 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 70 //s
VBC2_PUSH_CONST 64 
VBC1_ADD_FI
VBC3_PUSH_GLOBAL 48 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
[1:538] ;wr = j * stepRotation - correctedRotation;
VBC2_PUSH_CONST 29 //wr
VBC3_PUSH_GLOBAL 64 //j
VBC3_PUSH_GLOBAL 74 //stepRotation
VBC1_MUL_IF
VBC3_PUSH_GLOBAL 69 //correctedRotation
VBC1_SUB_FF
VBC1_POP
[1:539] ;wl = wr;
VBC2_PUSH_CONST 36 //wl
VBC3_PUSH_GLOBAL 29 //wr
VBC1_POP
LAB3314: //if exit
LAB3314: //if exit
[1:541] ;xtr -= dx0;
VBC2_PUSH_CONST 23 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 75 //dx0
VBC1_SUB_FF
VBC1_POP
[1:542] ;ytr += dy0Typical;
VBC2_PUSH_CONST 24 //ytr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 68 //dy0Typical
VBC1_ADD_FF
VBC1_POP
[1:545] ;computeAlphaForWalk();
VBC3_PUSH_CONST 860  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:546] ;testDrop();
VBC3_PUSH_CONST 1776  //func address testDrop
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB3342: //for step
VBC2_PUSH_CONST 64 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB3138 //to condition
LAB3355: //for exit
[1:550] ;
VBC1_RETURN
;walkCycle <void(,int)>
VBC2_STACK -4//local vars 4
[1:557] ;
[1:557] ;float xrOld = xr;
VBC2_PUSH_B_OFFSET -1 //xrOld
VBC3_PUSH_GLOBAL 26 //xr
VBC1_POP
[1:558] ;
[1:558] ;float yrOld = yr;
VBC2_PUSH_B_OFFSET -2 //yrOld
VBC3_PUSH_GLOBAL 27 //yr
VBC1_POP
[1:559] ;
[1:559] ;float xlOld = xl;
VBC2_PUSH_B_OFFSET -3 //xlOld
VBC3_PUSH_GLOBAL 33 //xl
VBC1_POP
[1:560] ;
[1:560] ;float ylOld = yl;
VBC2_PUSH_B_OFFSET -4 //ylOld
VBC3_PUSH_GLOBAL 34 //yl
VBC1_POP
[1:562] ;if( slowWalk ) {
VBC3_PUSH_GLOBAL 3 //slowWalk
VBC4_FALSE_JUMP LAB3413 //if to false
;
[1:567] ;j = j;
VBC2_PUSH_CONST 64 //j
VBC3_PUSH_GLOBAL 64 //j
VBC1_POP
[1:568] ;if (half == 0){
VBC2_PUSH_LOCAL 2 //half
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB3409 //if to false
;
[1:571] ;j = j;
VBC2_PUSH_CONST 64 //j
VBC3_PUSH_GLOBAL 64 //j
VBC1_POP
LAB3409: //if else
VBC4_JUMP LAB3446 //if to exit
LAB3413: //if else
;
[1:576] ;walkInit();
VBC3_PUSH_CONST 2144  //func address walkInit
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:577] ;walkPhasa1();
VBC3_PUSH_CONST 2402  //func address walkPhasa1
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:578] ;walkPhasa2();
VBC3_PUSH_CONST 2682  //func address walkPhasa2
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:579] ;if (half == 0){
VBC2_PUSH_LOCAL 2 //half
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB3446 //if to false
;
[1:580] ;walkPhasa3();
VBC3_PUSH_CONST 2561  //func address walkPhasa3
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:581] ;walkPhasa4();
VBC3_PUSH_CONST 2990  //func address walkPhasa4
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB3446: //if else
LAB3446: //if exit
[1:586] ;xr = xrOld;
VBC2_PUSH_CONST 26 //xr
VBC2_PUSH_LOCAL -1 //xrOld
VBC1_POP
[1:587] ;yr = yrOld;
VBC2_PUSH_CONST 27 //yr
VBC2_PUSH_LOCAL -2 //yrOld
VBC1_POP
[1:588] ;xl = xlOld;
VBC2_PUSH_CONST 33 //xl
VBC2_PUSH_LOCAL -3 //xlOld
VBC1_POP
[1:589] ;yl = ylOld;
VBC2_PUSH_CONST 34 //yl
VBC2_PUSH_LOCAL -4 //ylOld
VBC1_POP
[1:592] ;
VBC1_RETURN
;stabilizeRotationByIMU <void()>
[1:594] ;sfQuaternionToEulerImu();
VBC5_PUSH_CONST 303 | 0x80000000 //import func index sfQuaternionToEulerImu
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:596] ;rotation = forwardDirection - get_yaw();
VBC2_PUSH_CONST 6 //rotation
VBC3_PUSH_GLOBAL 76 //forwardDirection
VBC3_PUSH_CONST 363  //func address get_yaw
//alloc addon amount for result
VBC1_CALL0
//remove call address and params
VBC1_SUB_FF
VBC1_POP
[1:597] ;if( rotation > 3.141592654 ) rotation -= 2 * 3.141592654;
VBC3_PUSH_GLOBAL 6 //rotation
VBC5_PUSH_CONST 1078530011 
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB3509 //if to false
;if( rotation > 3.141592654 ) rotation -= 2 * 3.141592654;
VBC2_PUSH_CONST 6 //rotation
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1086918619 
VBC1_SUB_FF
VBC1_POP
LAB3509: //if else
[1:598] ;if( rotation < -3.141592654 ) rotation += 2 * 3.141592654;
VBC3_PUSH_GLOBAL 6 //rotation
VBC5_PUSH_CONST -1068953637 // -
VBC1_LESS_FF
VBC4_FALSE_JUMP LAB3533 //if to false
;if( rotation < -3.141592654 ) rotation += 2 * 3.141592654;
VBC2_PUSH_CONST 6 //rotation
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1086918619 
VBC1_ADD_FF
VBC1_POP
LAB3533: //if else
[1:599] ;if( rotation > 0.7 ) rotation = 0.7;
VBC3_PUSH_GLOBAL 6 //rotation
VBC5_PUSH_CONST 1060320051 
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB3554 //if to false
;if( rotation > 0.7 ) rotation = 0.7;
VBC2_PUSH_CONST 6 //rotation
VBC5_PUSH_CONST 1060320051 
VBC1_POP
LAB3554: //if else
[1:600] ;if( rotation < -0.7 ) rotation = -0.7;
VBC3_PUSH_GLOBAL 6 //rotation
VBC5_PUSH_CONST -1087163597 // -
VBC1_LESS_FF
VBC4_FALSE_JUMP LAB3575 //if to false
;if( rotation < -0.7 ) rotation = -0.7;
VBC2_PUSH_CONST 6 //rotation
VBC5_PUSH_CONST -1087163597 // -
VBC1_POP
LAB3575: //if else
[1:608] ;
VBC1_RETURN
;mixing <void()>
[1:613] ;leftRightFactor = 100;
VBC2_PUSH_CONST 77 //leftRightFactor
VBC2_PUSH_CONST 100 
VBC1_POP
[1:614] ;frontBackFactor = 100;
VBC2_PUSH_CONST 78 //frontBackFactor
VBC2_PUSH_CONST 100 
VBC1_POP
[1:616] ;while(1) {
LAB3586: //while condition
;
[1:618] ;leftFootSideAddonMix = -svImuGyroZ * leftRightFactor >> 10;
VBC3_PUSH_CONST 2953 //leftFootSideAddonMix
VBC3_PUSH_GLOBAL 2568 //svImuGyroZ
VBC1_NEG
VBC3_PUSH_GLOBAL 77 //leftRightFactor
VBC1_MUL
VBC2_PUSH_CONST 10 
VBC1_RSHIFT
VBC1_POP
[1:619] ;rightFootSideAddonMix = svImuGyroZ * leftRightFactor >> 10;
VBC3_PUSH_CONST 2937 //rightFootSideAddonMix
VBC3_PUSH_GLOBAL 2568 //svImuGyroZ
VBC3_PUSH_GLOBAL 77 //leftRightFactor
VBC1_MUL
VBC2_PUSH_CONST 10 
VBC1_RSHIFT
VBC1_POP
[1:622] ;rightFootFrontAddonMix = leftFootFrontAddonMix = -svImuGyroX * frontBackFactor >> 10;
VBC3_PUSH_CONST 2905 //rightFootFrontAddonMix
VBC3_PUSH_CONST 2921 //leftFootFrontAddonMix
VBC3_PUSH_GLOBAL 2566 //svImuGyroX
VBC1_NEG
VBC3_PUSH_GLOBAL 78 //frontBackFactor
VBC1_MUL
VBC2_PUSH_CONST 10 
VBC1_RSHIFT
VBC1_STORE
VBC1_POP
[1:625] ;sfWaitNextFrame();
VBC1_WAIT
VBC4_JUMP LAB3586 //while forever loop
LAB3639: //while exit
[1:635] ;
VBC1_RETURN
;runTest <void()>
VBC1_STACK_DN1//local vars 1
[1:637] ;walkInitialPose();
VBC3_PUSH_CONST 1826  //func address walkInitialPose
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:639] ;stepType = 0;
VBC2_PUSH_CONST 55 //stepType
VBC1_PUSH_0 
VBC1_POP
[1:640] ;stepLength = 50 / 3.0;
VBC2_PUSH_CONST 4 //stepLength
VBC5_PUSH_CONST 1099257173 
VBC1_POP
[1:641] ;walkCycle(0);
VBC3_PUSH_CONST 3356  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:644] ;stepType = 2;
VBC2_PUSH_CONST 55 //stepType
VBC1_PUSH_2 
VBC1_POP
[1:645] ;stepLength = 50 * 2.0 / 3.0;
VBC2_PUSH_CONST 4 //stepLength
VBC5_PUSH_CONST 1107645781 
VBC1_POP
[1:646] ;walkCycle(0);
VBC3_PUSH_CONST 3356  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:649] ;stepLength = 50;
VBC2_PUSH_CONST 4 //stepLength
VBC2_PUSH_CONST 50 
VBC1_POP_CF
[1:650] ;
[1:651] ;for( i = 0; i < 20 ; i++ ){
VBC2_PUSH_B_OFFSET -1 //i
VBC1_PUSH_0 
VBC1_POP
LAB3691: //for condition
VBC2_PUSH_LOCAL -1 //i
VBC2_PUSH_CONST 20 
VBC1_LESS
VBC4_FALSE_JUMP LAB3718 //to for exit
;
[1:652] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 3467  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:653] ;walkCycle(0);
VBC3_PUSH_CONST 3356  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB3711: //for step
VBC2_PUSH_B_OFFSET -1 //i
VBC1_INC
VBC4_JUMP LAB3691 //to condition
LAB3718: //for exit
[1:656] ;stepType = 1;
VBC2_PUSH_CONST 55 //stepType
VBC1_PUSH_1 
VBC1_POP
[1:657] ;walkCycle(0);
VBC3_PUSH_CONST 3356  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:660] ;walkFinalPoseFine();
VBC3_PUSH_CONST 2084  //func address walkFinalPoseFine
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:667] ;
VBC1_RETURN
;joystickToStepLength <int()>
[1:669] ;return -svRemoteRightJoystickY * 50 / 100;
VBC3_PUSH_GLOBAL 3257 //svRemoteRightJoystickY
VBC1_NEG
VBC2_PUSH_CONST 50 
VBC1_MUL
VBC2_PUSH_CONST 100 
VBC1_DIV
VBC2_POP_RESULT 2
VBC1_RETURN
;joystickToSideLength <int()>
[1:675] ;side_motion = - svRemoteRightJoystickX * 40.0 / 100.0;
VBC2_PUSH_CONST 15 //side_motion
VBC3_PUSH_GLOBAL 3256 //svRemoteRightJoystickX
VBC1_NEG
VBC5_PUSH_CONST 1109393408 
VBC1_MUL_IF
VBC5_PUSH_CONST 1120403456 
VBC1_DIV_FF
VBC1_POP
[1:676] ;motion_to_right = (side_motion <= 0 ? 1:0);
VBC2_PUSH_CONST 14 //motion_to_right
VBC3_PUSH_GLOBAL 15 //side_motion
VBC1_PUSH_0 
VBC1_LESS_EQU_FI
VBC4_FALSE_JUMP LAB3782
VBC1_PUSH_1 
VBC4_JUMP LAB3783
LAB3782:
VBC1_PUSH_0 
LAB3783:
VBC1_POP
[1:677] ;return sfAbs (side_motion);
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 15 //side_motion
VBC1_F_TO_I
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_POP_RESULT 2
VBC1_RETURN
;joystickToRotation <int()>
[1:683] ;return (sfAbs(svRemoteLeftJoystickX) > 10? -svRemoteLeftJoystickX * 260 / 100 : 0) ;
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 3253 //svRemoteLeftJoystickX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_GREAT
VBC4_FALSE_JUMP LAB3830
VBC3_PUSH_GLOBAL 3253 //svRemoteLeftJoystickX
VBC1_NEG
VBC3_PUSH_CONST 260 
VBC1_MUL
VBC2_PUSH_CONST 100 
VBC1_DIV
VBC4_JUMP LAB3831
LAB3830:
VBC1_PUSH_0 
LAB3831:
VBC2_POP_RESULT 2
VBC1_RETURN
;walkLoop <void()>
VBC1_STACK_DN1//local vars 1
[1:688] ;
[1:690] ;stepType = 0;
VBC2_PUSH_CONST 55 //stepType
VBC1_PUSH_0 
VBC1_POP
[1:691] ;stepLength = joystickToStepLength() / 3.0;
VBC2_PUSH_CONST 4 //stepLength
VBC3_PUSH_CONST 3734  //func address joystickToStepLength
VBC1_CALL0
//remove call address and params
VBC5_PUSH_CONST 1077936128 
VBC1_DIV_IF
VBC1_POP
[1:692] ;sideLength = joystickToSideLength();
VBC2_PUSH_CONST 5 //sideLength
VBC3_PUSH_CONST 3747  //func address joystickToSideLength
VBC1_CALL0
//remove call address and params
VBC1_POP_CF
[1:693] ;selfFirstLegIsRightLeg = motion_to_right;
VBC2_PUSH_CONST 13 //selfFirstLegIsRightLeg
VBC3_PUSH_GLOBAL 14 //motion_to_right
VBC1_POP
[1:694] ;forwardDirection += joystickToRotation() / 1000.0;
VBC2_PUSH_CONST 76 //forwardDirection
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_CONST 3798  //func address joystickToRotation
VBC1_CALL0
//remove call address and params
VBC5_PUSH_CONST 1148846080 
VBC1_DIV_IF
VBC1_ADD_FF
VBC1_POP
[1:695] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 3467  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:696] ;walkCycle(0);
VBC3_PUSH_CONST 3356  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:697] ;stepNumber -= 1;
VBC2_PUSH_CONST 60 //stepNumber
VBC1_PUSH_TOS
VBC1_LOAD
VBC1_PUSH_1 
VBC1_SUB
VBC1_POP
[1:700] ;if( sfAbs( svRemoteRightJoystickX ) < 10 
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 3256 //svRemoteRightJoystickX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB3990
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 3257 //svRemoteRightJoystickY
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB3990
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 3253 //svRemoteLeftJoystickX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB3990
VBC3_PUSH_GLOBAL 3254 //svRemoteLeftJoystickY
VBC1_PUSH_0 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB3975
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC3_PUSH_CONST 2048 
VBC1_DIV
VBC1_PUSH_2 
VBC1_MOD
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB3975
VBC1_PUSH_1
LAB3975:
VBC1_LNOT
VBC4_FALSE_JUMP_KEEP LAB3990
VBC3_PUSH_GLOBAL 60 //stepNumber
VBC1_PUSH_1 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB3990
VBC1_PUSH_1
LAB3990:
VBC4_FALSE_JUMP LAB3995 //if to false
;return;
VBC1_RETURN
LAB3995: //if else
[1:710] ;stepType = 2;
VBC2_PUSH_CONST 55 //stepType
VBC1_PUSH_2 
VBC1_POP
[1:711] ;stepLength = joystickToStepLength() * 2.0 / 3.0;
VBC2_PUSH_CONST 4 //stepLength
VBC3_PUSH_CONST 3734  //func address joystickToStepLength
VBC1_CALL0
//remove call address and params
VBC5_PUSH_CONST 1073741824 
VBC1_MUL_IF
VBC5_PUSH_CONST 1077936128 
VBC1_DIV_FF
VBC1_POP
[1:712] ;sideLength = joystickToSideLength();
VBC2_PUSH_CONST 5 //sideLength
VBC3_PUSH_CONST 3747  //func address joystickToSideLength
VBC1_CALL0
//remove call address and params
VBC1_POP_CF
[1:713] ;selfFirstLegIsRightLeg = motion_to_right;
VBC2_PUSH_CONST 13 //selfFirstLegIsRightLeg
VBC3_PUSH_GLOBAL 14 //motion_to_right
VBC1_POP
[1:714] ;forwardDirection += joystickToRotation() / 1000.0;
VBC2_PUSH_CONST 76 //forwardDirection
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_CONST 3798  //func address joystickToRotation
VBC1_CALL0
//remove call address and params
VBC5_PUSH_CONST 1148846080 
VBC1_DIV_IF
VBC1_ADD_FF
VBC1_POP
[1:715] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 3467  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:716] ;walkCycle(0);
VBC3_PUSH_CONST 3356  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:717] ;stepNumber -= 1;
VBC2_PUSH_CONST 60 //stepNumber
VBC1_PUSH_TOS
VBC1_LOAD
VBC1_PUSH_1 
VBC1_SUB
VBC1_POP
[1:720] ;if( sfAbs( svRemoteRightJoystickX ) < 10 
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 3256 //svRemoteRightJoystickX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB4156
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 3257 //svRemoteRightJoystickY
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB4156
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 3253 //svRemoteLeftJoystickX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB4156
VBC3_PUSH_GLOBAL 3254 //svRemoteLeftJoystickY
VBC1_PUSH_0 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB4141
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC3_PUSH_CONST 2048 
VBC1_DIV
VBC1_PUSH_2 
VBC1_MOD
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB4141
VBC1_PUSH_1
LAB4141:
VBC1_LNOT
VBC4_FALSE_JUMP_KEEP LAB4156
VBC3_PUSH_GLOBAL 60 //stepNumber
VBC1_PUSH_1 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB4156
VBC1_PUSH_1
LAB4156:
VBC4_FALSE_JUMP LAB4161 //if to false
;return;
VBC1_RETURN
LAB4161: //if else
[1:729] ;while( sfAbs( svRemoteRightJoystickX ) >= 10 || sfAbs( svRemoteRightJoystickY ) >= 10 || sfAbs( svRemoteLeftJoystickX ) >= 10) {
LAB4161: //while condition
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 3256 //svRemoteRightJoystickX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_GREAT_EQU
VBC4_TRUE_JUMP_KEEP LAB4213
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 3257 //svRemoteRightJoystickY
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_GREAT_EQU
VBC4_TRUE_JUMP_KEEP LAB4213
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 3253 //svRemoteLeftJoystickX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_GREAT_EQU
VBC4_TRUE_JUMP_KEEP LAB4213
VBC1_PUSH_0
LAB4213:
VBC4_FALSE_JUMP LAB4403 //while to exit
;
[1:731] ;stepLength = joystickToStepLength();
VBC2_PUSH_CONST 4 //stepLength
VBC3_PUSH_CONST 3734  //func address joystickToStepLength
VBC1_CALL0
//remove call address and params
VBC1_POP_CF
[1:732] ;sideLength = joystickToSideLength();
VBC2_PUSH_CONST 5 //sideLength
VBC3_PUSH_CONST 3747  //func address joystickToSideLength
VBC1_CALL0
//remove call address and params
VBC1_POP_CF
[1:733] ;forwardDirection += joystickToRotation() / 1000.0;
VBC2_PUSH_CONST 76 //forwardDirection
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_CONST 3798  //func address joystickToRotation
VBC1_CALL0
//remove call address and params
VBC5_PUSH_CONST 1148846080 
VBC1_DIV_IF
VBC1_ADD_FF
VBC1_POP
[1:734] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 3467  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:735] ;if (selfFirstLegIsRightLeg != motion_to_right) walkCycle(1); 
VBC3_PUSH_GLOBAL 13 //selfFirstLegIsRightLeg
VBC3_PUSH_GLOBAL 14 //motion_to_right
VBC1_NOT_EQU
VBC4_FALSE_JUMP LAB4269 //if to false
;if (selfFirstLegIsRightLeg != motion_to_right) walkCycle(1); 
VBC3_PUSH_CONST 3356  //func address walkCycle
VBC1_PUSH_1 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB4269: //if else
[1:736] ;selfFirstLegIsRightLeg = motion_to_right;
VBC2_PUSH_CONST 13 //selfFirstLegIsRightLeg
VBC3_PUSH_GLOBAL 14 //motion_to_right
VBC1_POP
[1:737] ;walkCycle(0);
VBC3_PUSH_CONST 3356  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:738] ;stepNumber -= 1;
VBC2_PUSH_CONST 60 //stepNumber
VBC1_PUSH_TOS
VBC1_LOAD
VBC1_PUSH_1 
VBC1_SUB
VBC1_POP
[1:739] ;if ((svRemoteLeftJoystickY < 0 && ((svRemoteButton / 2048) % 2 == 1)) || stepNumber > 0){
VBC3_PUSH_GLOBAL 3254 //svRemoteLeftJoystickY
VBC1_PUSH_0 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB4313
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC3_PUSH_CONST 2048 
VBC1_DIV
VBC1_PUSH_2 
VBC1_MOD
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB4313
VBC1_PUSH_1
LAB4313:
VBC4_TRUE_JUMP_KEEP LAB4327
VBC3_PUSH_GLOBAL 60 //stepNumber
VBC1_PUSH_0 
VBC1_GREAT
VBC4_TRUE_JUMP_KEEP LAB4327
VBC1_PUSH_0
LAB4327:
VBC4_FALSE_JUMP LAB4399 //if to false
;
[1:740] ;if (svRemoteLeftJoystickY < 0 && ((svRemoteButton / 2048) % 2 == 1)) stepNumber = -svRemoteLeftJoystickY;
VBC3_PUSH_GLOBAL 3254 //svRemoteLeftJoystickY
VBC1_PUSH_0 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB4356
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC3_PUSH_CONST 2048 
VBC1_DIV
VBC1_PUSH_2 
VBC1_MOD
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB4356
VBC1_PUSH_1
LAB4356:
VBC4_FALSE_JUMP LAB4367 //if to false
;if (svRemoteLeftJoystickY < 0 && ((svRemoteButton / 2048) % 2 == 1)) stepNumber = -svRemoteLeftJoystickY;
VBC2_PUSH_CONST 60 //stepNumber
VBC3_PUSH_GLOBAL 3254 //svRemoteLeftJoystickY
VBC1_NEG
VBC1_POP
LAB4367: //if else
[1:741] ;for( i = 0; i < stepNumber ; i++ ){
VBC2_PUSH_B_OFFSET -1 //i
VBC1_PUSH_0 
VBC1_POP
LAB4371: //for condition
VBC2_PUSH_LOCAL -1 //i
VBC3_PUSH_GLOBAL 60 //stepNumber
VBC1_LESS
VBC4_FALSE_JUMP LAB4399 //to for exit
;
[1:742] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 3467  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:743] ;walkCycle(0);
VBC3_PUSH_CONST 3356  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB4392: //for step
VBC2_PUSH_B_OFFSET -1 //i
VBC1_INC
VBC4_JUMP LAB4371 //to condition
LAB4399: //for exit
LAB4399: //if else
VBC4_JUMP LAB4161 //while forever loop
LAB4403: //while exit
[1:749] ;
VBC1_RETURN
;kick <void(,int,int,int)>
VBC2_STACK -11//local vars 11
[1:750] ;
[1:750] ;float gaitHeightKick = 200;
VBC2_PUSH_B_OFFSET -1 //gaitHeightKick
VBC3_PUSH_CONST 200 
VBC1_POP_CF
[1:751] ;
[1:751] ;float stepHeightKick = 40;
VBC2_PUSH_B_OFFSET -2 //stepHeightKick
VBC2_PUSH_CONST 40 
VBC1_POP_CF
[1:752] ;
[1:752] ;float stepLengthKick = 50 * invert;
VBC2_PUSH_B_OFFSET -3 //stepLengthKick
VBC2_PUSH_CONST 50 
VBC2_PUSH_LOCAL 2 //invert
VBC1_MUL
VBC1_POP_CF
[1:753] ;
[1:753] ;float kick_size = 100 * invert;
VBC2_PUSH_B_OFFSET -4 //kick_size
VBC2_PUSH_CONST 100 
VBC2_PUSH_LOCAL 2 //invert
VBC1_MUL
VBC1_POP_CF
[1:754] ;
[1:754] ;float bodyTiltAtKick = 0.04;
VBC2_PUSH_B_OFFSET -5 //bodyTiltAtKick
VBC5_PUSH_CONST 1025758986 
VBC1_POP
[1:755] ;
[1:755] ;int pose_taking_cycles = 20;
VBC2_PUSH_B_OFFSET -6 //pose_taking_cycles
VBC2_PUSH_CONST 20 
VBC1_POP
[1:757] ;
[1:757] ;float xrOld = xr;
VBC2_PUSH_B_OFFSET -7 //xrOld
VBC3_PUSH_GLOBAL 26 //xr
VBC1_POP
[1:758] ;
[1:758] ;float yrOld = yr;
VBC2_PUSH_B_OFFSET -8 //yrOld
VBC3_PUSH_GLOBAL 27 //yr
VBC1_POP
[1:759] ;
[1:759] ;float xlOld = xl;
VBC2_PUSH_B_OFFSET -9 //xlOld
VBC3_PUSH_GLOBAL 33 //xl
VBC1_POP
[1:760] ;
[1:760] ;float ylOld = yl;
VBC2_PUSH_B_OFFSET -10 //ylOld
VBC3_PUSH_GLOBAL 34 //yl
VBC1_POP
[1:761] ;if (small == 1) kick_size = -10;
VBC2_PUSH_LOCAL 3 //small
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB4483 //if to false
;if (small == 1) kick_size = -10;
VBC2_PUSH_B_OFFSET -4 //kick_size
VBC2_PUSH_CONST -10 // -
VBC1_POP_CF
LAB4483: //if else
[1:762] ;selfFirstLegIsRightLeg = kickByRight;
VBC2_PUSH_CONST 13 //selfFirstLegIsRightLeg
VBC2_PUSH_LOCAL 4 //kickByRight
VBC1_POP
[1:763] ;dx0Typical = stepLengthKick / (2 * fr1 + fr2 + 2.0 * framestep) * framestep;
VBC2_PUSH_CONST 67 //dx0Typical
VBC2_PUSH_LOCAL -3 //stepLengthKick
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC1_POP
[1:764] ;xr = xl = bodyTiltAtKick;
VBC2_PUSH_CONST 26 //xr
VBC2_PUSH_CONST 33 //xl
VBC2_PUSH_LOCAL -5 //bodyTiltAtKick
VBC1_STORE
VBC1_POP
[1:765] ;yl =  solyLandingSkew;
VBC2_PUSH_CONST 34 //yl
VBC3_PUSH_GLOBAL 59 //solyLandingSkew
VBC1_POP
[1:766] ;yr = -solyLandingSkew;
VBC2_PUSH_CONST 27 //yr
VBC3_PUSH_GLOBAL 59 //solyLandingSkew
VBC1_NEG_F
VBC1_POP
[1:767] ;s = (amplitude / 2 ) * sfMathCos(alpha01 * (fr1 / 2 + 0.5 * framestep));
VBC2_PUSH_CONST 70 //s
VBC3_PUSH_GLOBAL 39 //amplitude
VBC1_PUSH_2 
VBC1_DIV_FI
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 40 //alpha01
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_PUSH_2 
VBC1_DIV
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_MUL_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_MUL_FF
VBC1_POP
[1:768] ;xtr = xtl = 0;
VBC2_PUSH_CONST 23 //xtr
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:771] ;ztr = ztl = -gaitHeightKick;
VBC2_PUSH_CONST 25 //ztr
VBC2_PUSH_CONST 32 //ztl
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:775] ;for( j = 0; j < pose_taking_cycles; j += 1 ){
VBC2_PUSH_CONST 64 //j
VBC1_PUSH_0 
VBC1_POP
LAB4593: //for condition
VBC3_PUSH_GLOBAL 64 //j
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_LESS
VBC4_FALSE_JUMP LAB4679 //to for exit
;
[1:776] ;ztr = ztr0 + j * (-ztr0 - gaitHeightKick) / pose_taking_cycles;
VBC2_PUSH_CONST 25 //ztr
VBC3_PUSH_GLOBAL 49 //ztr0
VBC3_PUSH_GLOBAL 64 //j
VBC3_PUSH_GLOBAL 49 //ztr0
VBC1_NEG_F
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_SUB_FF
VBC1_MUL_IF
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_DIV_FI
VBC1_ADD_FF
VBC1_POP
[1:777] ;ztl = ztr;
VBC2_PUSH_CONST 32 //ztl
VBC3_PUSH_GLOBAL 25 //ztr
VBC1_POP
[1:778] ;ytr = -d10 - j * amplitude * 3 /pose_taking_cycles;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 38 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 64 //j
VBC3_PUSH_GLOBAL 39 //amplitude
VBC1_MUL_IF
VBC2_PUSH_CONST 3 
VBC1_MUL_FI
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
[1:779] ;ytl =  ytr + 2 * d10;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 24 //ytr
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 38 //d10
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:780] ;computeAlphaForWalk();
VBC3_PUSH_CONST 860  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB4668: //for step
VBC2_PUSH_CONST 64 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB4593 //to condition
LAB4679: //for exit
[1:783] ;ztr = ztl = -gaitHeightKick;
VBC2_PUSH_CONST 25 //ztr
VBC2_PUSH_CONST 32 //ztl
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:784] ;ytr = s - d10;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 70 //s
VBC3_PUSH_GLOBAL 38 //d10
VBC1_SUB_FF
VBC1_POP
[1:785] ;ytl = s + d10;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 70 //s
VBC3_PUSH_GLOBAL 38 //d10
VBC1_ADD_FF
VBC1_POP
[1:787] ;for( j = fr1; j < fr1 + fr2; j += framestep ){
VBC2_PUSH_CONST 64 //j
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_POP
LAB4714: //for condition
VBC3_PUSH_GLOBAL 64 //j
VBC3_PUSH_GLOBAL 41 //fr1
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC1_LESS
VBC4_FALSE_JUMP LAB4942 //to for exit
;
[1:788] ;ztr = -gaitHeightKick + stepHeightKick;
VBC2_PUSH_CONST 25 //ztr
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC2_PUSH_LOCAL -2 //stepHeightKick
VBC1_ADD_FF
VBC1_POP
[1:789] ;dx = stepLengthKick / fr2;
VBC2_PUSH_CONST 72 //dx
VBC2_PUSH_LOCAL -3 //stepLengthKick
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_DIV_FI
VBC1_POP
[1:790] ;dx0 = stepLengthKick/( 2 * fr1 + fr2 + 4 ) * framestep;
VBC2_PUSH_CONST 75 //dx0
VBC2_PUSH_LOCAL -3 //stepLengthKick
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC2_PUSH_CONST 4 
VBC1_ADD
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC1_POP
[1:791] ;if (j == fr1 || j == fr1 + fr2 - 2){
VBC3_PUSH_GLOBAL 64 //j
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB4798
VBC3_PUSH_GLOBAL 64 //j
VBC3_PUSH_GLOBAL 41 //fr1
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC1_PUSH_2 
VBC1_SUB
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB4798
VBC1_PUSH_0
LAB4798:
VBC4_FALSE_JUMP LAB4824 //if to false
;
[1:792] ;xtr -= dx0;
VBC2_PUSH_CONST 23 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 75 //dx0
VBC1_SUB_FF
VBC1_POP
[1:793] ;ytr = s - 64;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 70 //s
VBC2_PUSH_CONST 64 
VBC1_SUB_FI
VBC1_POP
VBC4_JUMP LAB4847 //if to exit
LAB4824: //if else
;xtr += dx * fr2 / (fr2 - 2 * framestep);
VBC2_PUSH_CONST 23 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 72 //dx
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL
VBC1_SUB
VBC1_DIV_FI
VBC1_ADD_FF
VBC1_POP
LAB4847: //if exit
[1:797] ;if (j == fr1 + fr2 - 10)
VBC3_PUSH_GLOBAL 64 //j
VBC3_PUSH_GLOBAL 41 //fr1
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC2_PUSH_CONST 10 
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB4873 //if to false
;xtr += kick_size;
VBC2_PUSH_CONST 23 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC2_PUSH_LOCAL -4 //kick_size
VBC1_ADD_FF
VBC1_POP
LAB4873: //if else
[1:799] ;xtl -= kick_size;
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC2_PUSH_LOCAL -4 //kick_size
VBC1_SUB_FF
VBC1_POP
[1:800] ;if (j == fr1 + fr2 - 4)
VBC3_PUSH_GLOBAL 64 //j
VBC3_PUSH_GLOBAL 41 //fr1
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC2_PUSH_CONST 4 
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB4907 //if to false
;xtr -= kick_size;
VBC2_PUSH_CONST 23 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC2_PUSH_LOCAL -4 //kick_size
VBC1_SUB_FF
VBC1_POP
LAB4907: //if else
[1:802] ;xtl += kick_size;
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC2_PUSH_LOCAL -4 //kick_size
VBC1_ADD_FF
VBC1_POP
[1:803] ;xtl -= dx0;
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 75 //dx0
VBC1_SUB_FF
VBC1_POP
[1:804] ;computeAlphaForWalk();
VBC3_PUSH_CONST 860  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB4929: //for step
VBC2_PUSH_CONST 64 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB4714 //to condition
LAB4942: //for exit
[1:806] ;for( j = fr1 + fr2; j < 2 * fr1 + fr2; j += framestep ){
VBC2_PUSH_CONST 64 //j
VBC3_PUSH_GLOBAL 41 //fr1
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC1_POP
LAB4952: //for condition
VBC3_PUSH_GLOBAL 64 //j
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC1_LESS
VBC4_FALSE_JUMP LAB5076 //to for exit
;
[1:807] ;s = (amplitude / 2 ) * sfMathCos(alpha01 * (j - fr2 + framestep) / 2);
VBC2_PUSH_CONST 70 //s
VBC3_PUSH_GLOBAL 39 //amplitude
VBC1_PUSH_2 
VBC1_DIV_FI
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 40 //alpha01
VBC3_PUSH_GLOBAL 64 //j
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_SUB
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_ADD
VBC1_MUL_FI
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_MUL_FF
VBC1_POP
[1:808] ;ytr = s - d10;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 70 //s
VBC3_PUSH_GLOBAL 38 //d10
VBC1_SUB_FF
VBC1_POP
[1:809] ;ytl = s + d10;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 70 //s
VBC3_PUSH_GLOBAL 38 //d10
VBC1_ADD_FF
VBC1_POP
[1:810] ;ztl = -gaitHeightKick;
VBC2_PUSH_CONST 32 //ztl
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC1_POP
[1:811] ;ztr = -gaitHeightKick;
VBC2_PUSH_CONST 25 //ztr
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC1_POP
[1:812] ;dx0 = dx0Typical;
VBC2_PUSH_CONST 75 //dx0
VBC3_PUSH_GLOBAL 67 //dx0Typical
VBC1_POP
[1:813] ;xtl -= dx0;
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 75 //dx0
VBC1_SUB_FF
VBC1_POP
[1:814] ;xtr -= dx0;
VBC2_PUSH_CONST 23 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 75 //dx0
VBC1_SUB_FF
VBC1_POP
[1:815] ;computeAlphaForWalk();
VBC3_PUSH_CONST 860  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB5063: //for step
VBC2_PUSH_CONST 64 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB4952 //to condition
LAB5076: //for exit
[1:817] ;for( j = 2 * fr1 + fr2; j < 2 * (fr1 + fr2); j += framestep ){
VBC2_PUSH_CONST 64 //j
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC1_POP
LAB5088: //for condition
VBC3_PUSH_GLOBAL 64 //j
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 41 //fr1
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC1_MUL
VBC1_LESS
VBC4_FALSE_JUMP LAB5307 //to for exit
;
[1:818] ;ztl = -gaitHeightKick + stepHeightKick;
VBC2_PUSH_CONST 32 //ztl
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC2_PUSH_LOCAL -2 //stepHeightKick
VBC1_ADD_FF
VBC1_POP
[1:819] ;dx0 = dx0Typical * 4 / fr2;
VBC2_PUSH_CONST 75 //dx0
VBC3_PUSH_GLOBAL 67 //dx0Typical
VBC2_PUSH_CONST 4 
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_DIV_FI
VBC1_POP
[1:820] ;dx = (stepLengthKick * (fr1 + fr2) / (4 * fr1) + 2 * dx0) / (fr2 - 2 * framestep) * framestep;
VBC2_PUSH_CONST 72 //dx
VBC2_PUSH_LOCAL -3 //stepLengthKick
VBC3_PUSH_GLOBAL 41 //fr1
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC1_MUL_FI
VBC2_PUSH_CONST 4 
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL
VBC1_DIV_FI
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 75 //dx0
VBC1_MUL_IF
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL
VBC1_SUB
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC1_POP
[1:821] ;if (j == (2 * fr1 + 2 * fr2 - framestep)){
VBC3_PUSH_GLOBAL 64 //j
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_MUL
VBC1_ADD
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB5206 //if to false
;
[1:822] ;ztl = -gaitHeightKick;
VBC2_PUSH_CONST 32 //ztl
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC1_POP
[1:823] ;ytl = s + d10;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 70 //s
VBC3_PUSH_GLOBAL 38 //d10
VBC1_ADD_FF
VBC1_POP
LAB5206: //if else
[1:825] ;if (j == (2 * fr1 + fr2 ) || j == (2 * (fr1 + fr2) - framestep)){
VBC3_PUSH_GLOBAL 64 //j
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB5245
VBC3_PUSH_GLOBAL 64 //j
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 41 //fr1
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC1_MUL
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_SUB
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB5245
VBC1_PUSH_0
LAB5245:
VBC4_FALSE_JUMP LAB5271 //if to false
;
[1:826] ;xtl -= dx0;
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 75 //dx0
VBC1_SUB_FF
VBC1_POP
[1:827] ;ytl = s + 64;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 70 //s
VBC2_PUSH_CONST 64 
VBC1_ADD_FI
VBC1_POP
VBC4_JUMP LAB5280 //if to exit
LAB5271: //if else
;xtl += dx;
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 72 //dx
VBC1_ADD_FF
VBC1_POP
LAB5280: //if exit
[1:831] ;xtr -= dx0;
VBC2_PUSH_CONST 23 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 75 //dx0
VBC1_SUB_FF
VBC1_POP
[1:832] ;computeAlphaForWalk();
VBC3_PUSH_CONST 860  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB5294: //for step
VBC2_PUSH_CONST 64 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB5088 //to condition
LAB5307: //for exit
[1:836] ;pose_taking_cycles = 5;
VBC2_PUSH_B_OFFSET -6 //pose_taking_cycles
VBC2_PUSH_CONST 5 
VBC1_POP
[1:837] ;
[1:837] ;int pose_hight_after_kick = -130; 
VBC2_PUSH_B_OFFSET -11 //pose_hight_after_kick
VBC3_PUSH_CONST -130 // -
VBC1_POP
[1:838] ;for( j = 0; j < pose_taking_cycles; j += 1 ){
VBC2_PUSH_CONST 64 //j
VBC1_PUSH_0 
VBC1_POP
LAB5322: //for condition
VBC3_PUSH_GLOBAL 64 //j
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_LESS
VBC4_FALSE_JUMP LAB5424 //to for exit
;
[1:839] ;ztr = -gaitHeightKick + (j + 1 )*(pose_hight_after_kick + gaitHeightKick) / pose_taking_cycles;
VBC2_PUSH_CONST 25 //ztr
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC3_PUSH_GLOBAL 64 //j
VBC1_PUSH_1 
VBC1_ADD
VBC2_PUSH_LOCAL -11 //pose_hight_after_kick
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_ADD_IF
VBC1_MUL_IF
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_DIV_FI
VBC1_ADD_FF
VBC1_POP
[1:840] ;ztl = ztr;
VBC2_PUSH_CONST 32 //ztl
VBC3_PUSH_GLOBAL 25 //ztr
VBC1_POP
[1:841] ;ytr = -d10 - (pose_taking_cycles - (j + 1)) * amplitude / 2 / pose_taking_cycles;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 38 //d10
VBC1_NEG_F
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC3_PUSH_GLOBAL 64 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_SUB
VBC3_PUSH_GLOBAL 39 //amplitude
VBC1_MUL_IF
VBC1_PUSH_2 
VBC1_DIV_FI
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
[1:842] ;ytl = d10 - (pose_taking_cycles - (j + 1)) * amplitude / 2 / pose_taking_cycles;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 38 //d10
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC3_PUSH_GLOBAL 64 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_SUB
VBC3_PUSH_GLOBAL 39 //amplitude
VBC1_MUL_IF
VBC1_PUSH_2 
VBC1_DIV_FI
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
[1:843] ;computeAlphaForWalk();
VBC3_PUSH_CONST 860  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB5413: //for step
VBC2_PUSH_CONST 64 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB5322 //to condition
LAB5424: //for exit
[1:845] ;pose_taking_cycles = 50;
VBC2_PUSH_B_OFFSET -6 //pose_taking_cycles
VBC2_PUSH_CONST 50 
VBC1_POP
[1:846] ;for (j = 0; j < pose_taking_cycles; j += 1) {
VBC2_PUSH_CONST 64 //j
VBC1_PUSH_0 
VBC1_POP
LAB5433: //for condition
VBC3_PUSH_GLOBAL 64 //j
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_LESS
VBC4_FALSE_JUMP LAB5486 //to for exit
;
[1:847] ;ztr = pose_hight_after_kick + (j + 1) * (ztr0 - pose_hight_after_kick) / pose_taking_cycles;
VBC2_PUSH_CONST 25 //ztr
VBC2_PUSH_LOCAL -11 //pose_hight_after_kick
VBC3_PUSH_GLOBAL 64 //j
VBC1_PUSH_1 
VBC1_ADD
VBC3_PUSH_GLOBAL 49 //ztr0
VBC2_PUSH_LOCAL -11 //pose_hight_after_kick
VBC1_SUB_FI
VBC1_MUL_IF
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_DIV_FI
VBC1_ADD_IF
VBC1_POP
[1:848] ;ztl = ztr;
VBC2_PUSH_CONST 32 //ztl
VBC3_PUSH_GLOBAL 25 //ztr
VBC1_POP
[1:849] ;computeAlphaForWalk();
VBC3_PUSH_CONST 860  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB5475: //for step
VBC2_PUSH_CONST 64 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB5433 //to condition
LAB5486: //for exit
[1:852] ;xr = xrOld;
VBC2_PUSH_CONST 26 //xr
VBC2_PUSH_LOCAL -7 //xrOld
VBC1_POP
[1:853] ;yr = yrOld;
VBC2_PUSH_CONST 27 //yr
VBC2_PUSH_LOCAL -8 //yrOld
VBC1_POP
[1:854] ;xl = xlOld;
VBC2_PUSH_CONST 33 //xl
VBC2_PUSH_LOCAL -9 //xlOld
VBC1_POP
[1:855] ;yl = ylOld;
VBC2_PUSH_CONST 34 //yl
VBC2_PUSH_LOCAL -10 //ylOld
VBC1_POP
[1:858] ;
VBC1_RETURN
;turn <void(,int,int)>
VBC1_STACK_DN1//local vars 1
[1:859] ;
[1:859] ;int frames = 2;
VBC2_PUSH_B_OFFSET -1 //frames
VBC1_PUSH_2 
VBC1_POP
[1:860] ;if (direction == 1){
VBC2_PUSH_LOCAL 3 //direction
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB5556 //if to false
;
[1:861] ;sfPoseGroup( 1024 , -200 * factor, frames );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 1024 
VBC3_PUSH_CONST -200 // -
VBC2_PUSH_LOCAL 2 //factor
VBC1_MUL
VBC2_PUSH_LOCAL -1 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:862] ;sfPoseGroup( 2048 , 200 * factor, frames );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 2048 
VBC3_PUSH_CONST 200 
VBC2_PUSH_LOCAL 2 //factor
VBC1_MUL
VBC2_PUSH_LOCAL -1 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB5556: //if else
[1:864] ;if (direction == -1){
VBC2_PUSH_LOCAL 3 //direction
VBC2_PUSH_CONST -1 // -
VBC1_EQU
VBC4_FALSE_JUMP LAB5601 //if to false
;
[1:865] ;sfPoseGroup( 1024 , 200 * factor, frames );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 1024 
VBC3_PUSH_CONST 200 
VBC2_PUSH_LOCAL 2 //factor
VBC1_MUL
VBC2_PUSH_LOCAL -1 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:866] ;sfPoseGroup( 2048 , -200 * factor, frames );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 2048 
VBC3_PUSH_CONST -200 // -
VBC2_PUSH_LOCAL 2 //factor
VBC1_MUL
VBC2_PUSH_LOCAL -1 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB5601: //if else
[1:868] ;sfPoseGroup( (2097152  | 1048576 ), 200 * factor, frames );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 3145728 
VBC3_PUSH_CONST 200 
VBC2_PUSH_LOCAL 2 //factor
VBC1_MUL
VBC2_PUSH_LOCAL -1 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:869] ;sfWaitFrame( frames );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL -1 //frames
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:870] ;sfPoseGroup( 1024 , 0, frames );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 1024 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:871] ;sfPoseGroup( 2048 , 0, frames );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 2048 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:872] ;sfPoseGroup( 1048576 , 0, frames );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 1048576 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:873] ;sfPoseGroup( 2097152 , 0, frames );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 2097152 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:874] ;sfWaitFrame( frames );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL -1 //frames
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:875] ;sfWaitFrame( 2 );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC1_PUSH_2 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:877] ;forwardDirection = get_yaw();
VBC2_PUSH_CONST 76 //forwardDirection
VBC3_PUSH_CONST 363  //func address get_yaw
//alloc addon amount for result
VBC1_CALL0
//remove call address and params
VBC1_POP
[1:880] ;
VBC1_RETURN
;jump_forward <void(,int)>
VBC1_STACK_DN1//local vars 1
[1:883] ;
[1:883] ;int current_foot_front = (rightFootFrontTarget + leftFootFrontTarget) / 2;
VBC2_PUSH_B_OFFSET -1 //current_foot_front
VBC3_PUSH_GLOBAL 2898 //rightFootFrontTarget
VBC3_PUSH_GLOBAL 2914 //leftFootFrontTarget
VBC1_ADD
VBC1_PUSH_2 
VBC1_DIV
VBC1_POP
[1:884] ;frameCount = 30;
VBC2_PUSH_CONST 79 //frameCount
VBC2_PUSH_CONST 30 
VBC1_POP
[1:885] ;sfPoseGroup((524288  | 262144 ), 16 * factor + current_foot_front, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 786432 
VBC2_PUSH_CONST 16 
VBC2_PUSH_LOCAL 2 //factor
VBC1_MUL
VBC2_PUSH_LOCAL -1 //current_foot_front
VBC1_ADD
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:886] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:887] ;frameCount = 9;
VBC2_PUSH_CONST 79 //frameCount
VBC2_PUSH_CONST 9 
VBC1_POP
[1:888] ;sfPoseGroup((2097152  | 1048576 ), 1000, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 3145728 
VBC3_PUSH_CONST 1000 
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:889] ;sfPoseGroup((524288  | 262144 ), -48 * factor + current_foot_front, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 786432 
VBC2_PUSH_CONST -48 // -
VBC2_PUSH_LOCAL 2 //factor
VBC1_MUL
VBC2_PUSH_LOCAL -1 //current_foot_front
VBC1_ADD
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:890] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:891] ;sfPoseGroup((2097152  | 1048576 ), 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 3145728 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:892] ;sfPoseGroup((524288  | 262144 ), 16 * factor + current_foot_front, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 786432 
VBC2_PUSH_CONST 16 
VBC2_PUSH_LOCAL 2 //factor
VBC1_MUL
VBC2_PUSH_LOCAL -1 //current_foot_front
VBC1_ADD
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:893] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:894] ;sfPoseGroup((524288  | 262144 ), 0 + current_foot_front, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 786432 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //current_foot_front
VBC1_ADD
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:895] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:898] ;
VBC1_RETURN
;jump_backward <void(,int)>
VBC1_STACK_DN1//local vars 1
[1:899] ;
[1:899] ;int current_foot_front = (rightFootFrontTarget + leftFootFrontTarget) / 2;
VBC2_PUSH_B_OFFSET -1 //current_foot_front
VBC3_PUSH_GLOBAL 2898 //rightFootFrontTarget
VBC3_PUSH_GLOBAL 2914 //leftFootFrontTarget
VBC1_ADD
VBC1_PUSH_2 
VBC1_DIV
VBC1_POP
[1:900] ;frameCount = 30;
VBC2_PUSH_CONST 79 //frameCount
VBC2_PUSH_CONST 30 
VBC1_POP
[1:901] ;sfPoseGroup((524288  | 262144 ), -16 * factor + current_foot_front, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 786432 
VBC2_PUSH_CONST -16 // -
VBC2_PUSH_LOCAL 2 //factor
VBC1_MUL
VBC2_PUSH_LOCAL -1 //current_foot_front
VBC1_ADD
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:902] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:903] ;frameCount = 9;
VBC2_PUSH_CONST 79 //frameCount
VBC2_PUSH_CONST 9 
VBC1_POP
[1:904] ;sfPoseGroup((2097152  | 1048576 ), 1000, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 3145728 
VBC3_PUSH_CONST 1000 
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:905] ;sfPoseGroup((524288  | 262144 ), 48 * factor + current_foot_front, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 786432 
VBC2_PUSH_CONST 48 
VBC2_PUSH_LOCAL 2 //factor
VBC1_MUL
VBC2_PUSH_LOCAL -1 //current_foot_front
VBC1_ADD
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:906] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:907] ;sfPoseGroup((2097152  | 1048576 ), 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 3145728 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:908] ;sfPoseGroup((524288  | 262144 ), -16 * factor + current_foot_front, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 786432 
VBC2_PUSH_CONST -16 // -
VBC2_PUSH_LOCAL 2 //factor
VBC1_MUL
VBC2_PUSH_LOCAL -1 //current_foot_front
VBC1_ADD
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:909] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:910] ;sfPoseGroup((524288  | 262144 ), 0 + current_foot_front, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 786432 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //current_foot_front
VBC1_ADD
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:911] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:914] ;
VBC1_RETURN
;jump_left <void(,int)>
[1:915] ;frameCount = 30;
VBC2_PUSH_CONST 79 //frameCount
VBC2_PUSH_CONST 30 
VBC1_POP
[1:916] ;sfPoseGroup(2097152 , -40 * factor, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 2097152 
VBC2_PUSH_CONST -40 // -
VBC2_PUSH_LOCAL 2 //factor
VBC1_MUL
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:917] ;sfPoseGroup(1048576 , 40 * factor, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 1048576 
VBC2_PUSH_CONST 40 
VBC2_PUSH_LOCAL 2 //factor
VBC1_MUL
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:918] ;sfPoseGroup(8192 , -40 * factor, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 8192 
VBC2_PUSH_CONST -40 // -
VBC2_PUSH_LOCAL 2 //factor
VBC1_MUL
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:919] ;sfPoseGroup(4096 , 40 * factor, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 4096 
VBC2_PUSH_CONST 40 
VBC2_PUSH_LOCAL 2 //factor
VBC1_MUL
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:920] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:921] ;frameCount = 9;
VBC2_PUSH_CONST 79 //frameCount
VBC2_PUSH_CONST 9 
VBC1_POP
[1:922] ;sfPoseGroup((2097152  | 1048576 ), 200 * factor, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 3145728 
VBC3_PUSH_CONST 200 
VBC2_PUSH_LOCAL 2 //factor
VBC1_MUL
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:923] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:924] ;sfPoseGroup((2097152  | 1048576 ), 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 3145728 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:925] ;sfPoseGroup(8192 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 8192 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:926] ;sfPoseGroup(4096 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 4096 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:927] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:928] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:931] ;
VBC1_RETURN
;jump_right <void(,int)>
[1:932] ;frameCount = 30;
VBC2_PUSH_CONST 79 //frameCount
VBC2_PUSH_CONST 30 
VBC1_POP
[1:933] ;sfPoseGroup(2097152 , 40 * factor, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 2097152 
VBC2_PUSH_CONST 40 
VBC2_PUSH_LOCAL 2 //factor
VBC1_MUL
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:934] ;sfPoseGroup(1048576 , -40 * factor, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 1048576 
VBC2_PUSH_CONST -40 // -
VBC2_PUSH_LOCAL 2 //factor
VBC1_MUL
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:935] ;sfPoseGroup(8192 , 40 * factor, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 8192 
VBC2_PUSH_CONST 40 
VBC2_PUSH_LOCAL 2 //factor
VBC1_MUL
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:936] ;sfPoseGroup(4096 , -40 * factor, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 4096 
VBC2_PUSH_CONST -40 // -
VBC2_PUSH_LOCAL 2 //factor
VBC1_MUL
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:937] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:938] ;frameCount = 9;
VBC2_PUSH_CONST 79 //frameCount
VBC2_PUSH_CONST 9 
VBC1_POP
[1:939] ;sfPoseGroup((2097152  | 1048576 ), 200 * factor, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 3145728 
VBC3_PUSH_CONST 200 
VBC2_PUSH_LOCAL 2 //factor
VBC1_MUL
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:940] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:941] ;sfPoseGroup((2097152  | 1048576 ), 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 3145728 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:942] ;sfPoseGroup(8192 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 8192 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:943] ;sfPoseGroup(4096 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 4096 
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:944] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:945] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 79 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:948] ;
VBC1_RETURN
;movingRemoteControl <void()>
[1:950] ;while(1) {
LAB6387: //while condition
;
[1:952] ;while (sfAbs(svRemoteRightJoystickX) < 10
LAB6387: //while condition
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 3256 //svRemoteRightJoystickX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB6469
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 3257 //svRemoteRightJoystickY
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB6469
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 3253 //svRemoteLeftJoystickX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB6469
VBC3_PUSH_GLOBAL 3254 //svRemoteLeftJoystickY
VBC1_PUSH_0 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB6463
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC3_PUSH_CONST 2048 
VBC1_DIV
VBC1_PUSH_2 
VBC1_MOD
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB6463
VBC1_PUSH_1
LAB6463:
VBC1_LNOT
VBC4_FALSE_JUMP_KEEP LAB6469
VBC1_PUSH_1
LAB6469:
VBC4_FALSE_JUMP LAB7059 //while to exit
;
[1:956] ;if (svRemoteButton == 1048576) {
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC4_PUSH_CONST 1048576 
VBC1_EQU
VBC4_FALSE_JUMP LAB6494 //if to false
;
[1:957] ;sfStartSlot(sfSlotIndex("standUpRemote.cpp"));
VBC5_PUSH_CONST 42 | 0x80000000 //import func index sfStartSlot
VBC2_PUSH_CONST 15 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB6494: //if else
[1:961] ;if (svRemoteButton == 262144 || svRemoteButton == 128) kick(1, 0, 1); 
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC4_PUSH_CONST 262144 
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB6518
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC3_PUSH_CONST 128 
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB6518
VBC1_PUSH_0
LAB6518:
VBC4_FALSE_JUMP LAB6530 //if to false
;if (svRemoteButton == 262144 || svRemoteButton == 128) kick(1, 0, 1); 
VBC3_PUSH_CONST 4404  //func address kick
VBC1_PUSH_1 
VBC1_PUSH_0 
VBC1_PUSH_1 
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB6530: //if else
[1:962] ;if (svRemoteButton == 524288 || svRemoteButton == 64) kick(0, 0, 1); 
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC4_PUSH_CONST 524288 
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB6553
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC2_PUSH_CONST 64 
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB6553
VBC1_PUSH_0
LAB6553:
VBC4_FALSE_JUMP LAB6565 //if to false
;if (svRemoteButton == 524288 || svRemoteButton == 64) kick(0, 0, 1); 
VBC3_PUSH_CONST 4404  //func address kick
VBC1_PUSH_0 
VBC1_PUSH_0 
VBC1_PUSH_1 
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB6565: //if else
[1:963] ;if ((svRemoteButton == 16777232 + 128) || (svRemoteButton == 16777232 + 262144)) kick(1, 0, -1); 
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC5_PUSH_CONST 16777360 
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB6592
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC5_PUSH_CONST 17039376 
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB6592
VBC1_PUSH_0
LAB6592:
VBC4_FALSE_JUMP LAB6605 //if to false
;if ((svRemoteButton == 16777232 + 128) || (svRemoteButton == 16777232 + 262144)) kick(1, 0, -1); 
VBC3_PUSH_CONST 4404  //func address kick
VBC1_PUSH_1 
VBC1_PUSH_0 
VBC2_PUSH_CONST -1 // -
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB6605: //if else
[1:964] ;if ((svRemoteButton == 33554464 + 64) || (svRemoteButton == 33554464 + 524288)) kick(0, 0, -1); 
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC5_PUSH_CONST 33554528 
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB6632
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC5_PUSH_CONST 34078752 
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB6632
VBC1_PUSH_0
LAB6632:
VBC4_FALSE_JUMP LAB6645 //if to false
;if ((svRemoteButton == 33554464 + 64) || (svRemoteButton == 33554464 + 524288)) kick(0, 0, -1); 
VBC3_PUSH_CONST 4404  //func address kick
VBC1_PUSH_0 
VBC1_PUSH_0 
VBC2_PUSH_CONST -1 // -
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB6645: //if else
[1:965] ;jump_mode = 0;
VBC3_PUSH_CONST 1024 //jump_mode
VBC1_PUSH_0 
VBC1_POP
[1:966] ;if (svRemoteButton == 16777232 + 4) jump_forward(10); 
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC5_PUSH_CONST 16777236 
VBC1_EQU
VBC4_FALSE_JUMP LAB6670 //if to false
;if (svRemoteButton == 16777232 + 4) jump_forward(10); 
VBC3_PUSH_CONST 5699  //func address jump_forward
VBC2_PUSH_CONST 10 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB6670: //if else
[1:967] ;if (svRemoteButton == 16777232 + 2) jump_mode = 102;             
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC5_PUSH_CONST 16777234 
VBC1_EQU
VBC4_FALSE_JUMP LAB6689 //if to false
;if (svRemoteButton == 16777232 + 2) jump_mode = 102;             
VBC3_PUSH_CONST 1024 //jump_mode
VBC2_PUSH_CONST 102 
VBC1_POP
LAB6689: //if else
[1:968] ;if (svRemoteButton == 16777232 + 1) jump_mode = 103;             
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC5_PUSH_CONST 16777233 
VBC1_EQU
VBC4_FALSE_JUMP LAB6708 //if to false
;if (svRemoteButton == 16777232 + 1) jump_mode = 103;             
VBC3_PUSH_CONST 1024 //jump_mode
VBC2_PUSH_CONST 103 
VBC1_POP
LAB6708: //if else
[1:969] ;if (svRemoteButton == 16777232 + 8) jump_mode = 104;             
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC5_PUSH_CONST 16777240 
VBC1_EQU
VBC4_FALSE_JUMP LAB6727 //if to false
;if (svRemoteButton == 16777232 + 8) jump_mode = 104;             
VBC3_PUSH_CONST 1024 //jump_mode
VBC2_PUSH_CONST 104 
VBC1_POP
LAB6727: //if else
[1:970] ;if (svRemoteButton == 33554464 + 4) jump_mode = 51;              
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC5_PUSH_CONST 33554468 
VBC1_EQU
VBC4_FALSE_JUMP LAB6746 //if to false
;if (svRemoteButton == 33554464 + 4) jump_mode = 51;              
VBC3_PUSH_CONST 1024 //jump_mode
VBC2_PUSH_CONST 51 
VBC1_POP
LAB6746: //if else
[1:971] ;if (svRemoteButton == 33554464 + 2) jump_mode = 52;              
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC5_PUSH_CONST 33554466 
VBC1_EQU
VBC4_FALSE_JUMP LAB6765 //if to false
;if (svRemoteButton == 33554464 + 2) jump_mode = 52;              
VBC3_PUSH_CONST 1024 //jump_mode
VBC2_PUSH_CONST 52 
VBC1_POP
LAB6765: //if else
[1:972] ;if (svRemoteButton == 33554464 + 1) jump_mode = 53;              
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC5_PUSH_CONST 33554465 
VBC1_EQU
VBC4_FALSE_JUMP LAB6784 //if to false
;if (svRemoteButton == 33554464 + 1) jump_mode = 53;              
VBC3_PUSH_CONST 1024 //jump_mode
VBC2_PUSH_CONST 53 
VBC1_POP
LAB6784: //if else
[1:973] ;if (svRemoteButton == 33554464 + 8) jump_mode = 54;              
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC5_PUSH_CONST 33554472 
VBC1_EQU
VBC4_FALSE_JUMP LAB6803 //if to false
;if (svRemoteButton == 33554464 + 8) jump_mode = 54;              
VBC3_PUSH_CONST 1024 //jump_mode
VBC2_PUSH_CONST 54 
VBC1_POP
LAB6803: //if else
[1:974] ;if (jump_mode > 0) sfStartSlot(sfSlotIndex("roki2microJump.cpp"));
VBC3_PUSH_GLOBAL 1024 //jump_mode
VBC1_PUSH_0 
VBC1_GREAT
VBC4_FALSE_JUMP LAB6821 //if to false
;if (jump_mode > 0) sfStartSlot(sfSlotIndex("roki2microJump.cpp"));
VBC5_PUSH_CONST 42 | 0x80000000 //import func index sfStartSlot
VBC2_PUSH_CONST 4 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB6821: //if else
[1:975] ;if (svRemoteButton == 1) turn(1, 10); 
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB6838 //if to false
;if (svRemoteButton == 1) turn(1, 10); 
VBC3_PUSH_CONST 5507  //func address turn
VBC1_PUSH_1 
VBC2_PUSH_CONST 10 
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
LAB6838: //if else
[1:976] ;if (svRemoteButton == 8) turn(-1, 10); 
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC2_PUSH_CONST 8 
VBC1_EQU
VBC4_FALSE_JUMP LAB6857 //if to false
;if (svRemoteButton == 8) turn(-1, 10); 
VBC3_PUSH_CONST 5507  //func address turn
VBC2_PUSH_CONST -1 // -
VBC2_PUSH_CONST 10 
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
LAB6857: //if else
[1:977] ;if (svRemoteButton == 4) turn(1, 5); 
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC2_PUSH_CONST 4 
VBC1_EQU
VBC4_FALSE_JUMP LAB6875 //if to false
;if (svRemoteButton == 4) turn(1, 5); 
VBC3_PUSH_CONST 5507  //func address turn
VBC1_PUSH_1 
VBC2_PUSH_CONST 5 
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
LAB6875: //if else
[1:978] ;if (svRemoteButton == 2) turn(-1, 5); 
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC1_PUSH_2 
VBC1_EQU
VBC4_FALSE_JUMP LAB6893 //if to false
;if (svRemoteButton == 2) turn(-1, 5); 
VBC3_PUSH_CONST 5507  //func address turn
VBC2_PUSH_CONST -1 // -
VBC2_PUSH_CONST 5 
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
LAB6893: //if else
[1:979] ;splits_Mode = 0;
VBC3_PUSH_CONST 1026 //splits_Mode
VBC1_PUSH_0 
VBC1_POP
[1:980] ;if (svRemoteButton == 2097152) splits_Mode = 1;
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC4_PUSH_CONST 2097152 
VBC1_EQU
VBC4_FALSE_JUMP LAB6915 //if to false
;if (svRemoteButton == 2097152) splits_Mode = 1;
VBC3_PUSH_CONST 1026 //splits_Mode
VBC1_PUSH_1 
VBC1_POP
LAB6915: //if else
[1:981] ;if (svRemoteButton == 2097152 + 33554464) splits_Mode = 2;
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC5_PUSH_CONST 35651616 
VBC1_EQU
VBC4_FALSE_JUMP LAB6933 //if to false
;if (svRemoteButton == 2097152 + 33554464) splits_Mode = 2;
VBC3_PUSH_CONST 1026 //splits_Mode
VBC1_PUSH_2 
VBC1_POP
LAB6933: //if else
[1:982] ;if (svRemoteButton == 1048576 + 16777232) splits_Mode = 3;
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC5_PUSH_CONST 17825808 
VBC1_EQU
VBC4_FALSE_JUMP LAB6952 //if to false
;if (svRemoteButton == 1048576 + 16777232) splits_Mode = 3;
VBC3_PUSH_CONST 1026 //splits_Mode
VBC2_PUSH_CONST 3 
VBC1_POP
LAB6952: //if else
[1:983] ;if (svRemoteButton == 2097152 + 16777232) splits_Mode = 4;
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC5_PUSH_CONST 18874384 
VBC1_EQU
VBC4_FALSE_JUMP LAB6971 //if to false
;if (svRemoteButton == 2097152 + 16777232) splits_Mode = 4;
VBC3_PUSH_CONST 1026 //splits_Mode
VBC2_PUSH_CONST 4 
VBC1_POP
LAB6971: //if else
[1:984] ;if (splits_Mode > 0) sfStartSlot(sfSlotIndex("roki2Splits.cpp"));
VBC3_PUSH_GLOBAL 1026 //splits_Mode
VBC1_PUSH_0 
VBC1_GREAT
VBC4_FALSE_JUMP LAB6989 //if to false
;if (splits_Mode > 0) sfStartSlot(sfSlotIndex("roki2Splits.cpp"));
VBC5_PUSH_CONST 42 | 0x80000000 //import func index sfStartSlot
VBC2_PUSH_CONST 5 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB6989: //if else
[1:985] ;if (svRemoteButton == 8388608) sfBip(1,1);
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC5_PUSH_CONST 8388608 
VBC1_EQU
VBC4_FALSE_JUMP LAB7011 //if to false
;if (svRemoteButton == 8388608) sfBip(1,1);
VBC5_PUSH_CONST 43 | 0x80000000 //import func index sfBip
VBC1_PUSH_1 
VBC1_PUSH_1 
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
LAB7011: //if else
[1:986] ;if (svRemoteButton == 65536) {
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC4_PUSH_CONST 65536 
VBC1_EQU
VBC4_FALSE_JUMP LAB7032 //if to false
;
[1:987] ;fps = 6;
VBC2_PUSH_CONST 56 //fps
VBC2_PUSH_CONST 6 
VBC1_POP
[1:988] ;walking_frame = 1;
VBC2_PUSH_CONST 57 //walking_frame
VBC1_PUSH_1 
VBC1_POP
LAB7032: //if else
[1:990] ;if (svRemoteButton == 131072) {
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC4_PUSH_CONST 131072 
VBC1_EQU
VBC4_FALSE_JUMP LAB7054 //if to false
;
[1:991] ;fps = 4;
VBC2_PUSH_CONST 56 //fps
VBC2_PUSH_CONST 4 
VBC1_POP
[1:992] ;walking_frame = 3;
VBC2_PUSH_CONST 57 //walking_frame
VBC2_PUSH_CONST 3 
VBC1_POP
LAB7054: //if else
[1:995] ;sfWaitNextFrame();
VBC1_WAIT
VBC4_JUMP LAB6387 //while forever loop
LAB7059: //while exit
[1:999] ;sideLength = joystickToSideLength();
VBC2_PUSH_CONST 5 //sideLength
VBC3_PUSH_CONST 3747  //func address joystickToSideLength
VBC1_CALL0
//remove call address and params
VBC1_POP_CF
[1:1000] ;selfFirstLegIsRightLeg = motion_to_right;
VBC2_PUSH_CONST 13 //selfFirstLegIsRightLeg
VBC3_PUSH_GLOBAL 14 //motion_to_right
VBC1_POP
[1:1001] ;if (svRemoteLeftJoystickY < 0 && ((svRemoteButton / 2048) % 2 == 1)) stepNumber = -svRemoteLeftJoystickY;
VBC3_PUSH_GLOBAL 3254 //svRemoteLeftJoystickY
VBC1_PUSH_0 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB7097
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC3_PUSH_CONST 2048 
VBC1_DIV
VBC1_PUSH_2 
VBC1_MOD
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB7097
VBC1_PUSH_1
LAB7097:
VBC4_FALSE_JUMP LAB7108 //if to false
;if (svRemoteLeftJoystickY < 0 && ((svRemoteButton / 2048) % 2 == 1)) stepNumber = -svRemoteLeftJoystickY;
VBC2_PUSH_CONST 60 //stepNumber
VBC3_PUSH_GLOBAL 3254 //svRemoteLeftJoystickY
VBC1_NEG
VBC1_POP
LAB7108: //if else
[1:1003] ;walkInitialPose();
VBC3_PUSH_CONST 1826  //func address walkInitialPose
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:1004] ;walkLoop();
VBC3_PUSH_CONST 3834  //func address walkLoop
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:1007] ;stepType = 1;
VBC2_PUSH_CONST 55 //stepType
VBC1_PUSH_1 
VBC1_POP
[1:1008] ;walkCycle(0);
VBC3_PUSH_CONST 3356  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:1010] ;walkFinalPoseFine();
VBC3_PUSH_CONST 2084  //func address walkFinalPoseFine
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
VBC4_JUMP LAB6387 //while forever loop
LAB7137: //while exit
[1:1014] ;walkFinalPoseFine();
VBC3_PUSH_CONST 2084  //func address walkFinalPoseFine
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:1017] ;
VBC1_RETURN
;main <void()>
[1:1018] ;slowWalk = 0;
VBC2_PUSH_CONST 3 //slowWalk
VBC1_PUSH_0 
VBC1_POP
[1:1019] ;setup();
VBC3_PUSH_CONST 373  //func address setup
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:1020] ;sideLength = 0;
VBC2_PUSH_CONST 5 //sideLength
VBC1_PUSH_0 
VBC1_POP_CF
[1:1021] ;rotation = 0;
VBC2_PUSH_CONST 6 //rotation
VBC1_PUSH_0 
VBC1_POP_CF
[1:1022] ;IKerr = 0;
VBC1_PUSH_2 //IKerr
VBC1_PUSH_0 
VBC1_POP
[1:1028] ;sfQuaternionToEulerImu();
VBC5_PUSH_CONST 303 | 0x80000000 //import func index sfQuaternionToEulerImu
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:1030] ;forwardDirection = get_yaw();
VBC2_PUSH_CONST 76 //forwardDirection
VBC3_PUSH_CONST 363  //func address get_yaw
//alloc addon amount for result
VBC1_CALL0
//remove call address and params
VBC1_POP
[1:1033] ;sfCreateTask( mixing, 20 );
VBC5_PUSH_CONST 2 | 0x80000000 //import func index sfCreateTask
VBC3_PUSH_CONST 3576  //func address mixing
VBC2_PUSH_CONST 20 
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
[1:1035] ;movingRemoteControl(); 
VBC3_PUSH_CONST 6387  //func address movingRemoteControl
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:1040] ;sfStartSlot( sfSlotIndex("roki2TenseUp.cpp") );
VBC5_PUSH_CONST 42 | 0x80000000 //import func index sfStartSlot
VBC1_PUSH_1 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:1041] ;
VBC1_RETURN
//Init table
//Variables
svFrameCount : 1
svImuAccX : 2560
svImuAccY : 2561
svImuAccZ : 2562
svImuAccRawX : 2563
svImuAccRawY : 2564
svImuAccRawZ : 2565
svImuGyroX : 2566
svImuGyroY : 2567
svImuGyroZ : 2568
svImuGyroRawX : 2569
svImuGyroRawY : 2570
svImuGyroRawZ : 2571
svImuQuaterX : 2572
svImuQuaterY : 2573
svImuQuaterZ : 2574
svImuQuaterW : 2575
svImuQuaterAcc : 2576
svImuAccSlowX : 2577
svImuAccSlowY : 2578
svImuAccSlowZ : 2579
svAdc : 2580
svButtonLeft : 2581
svButtonRight : 2582
svButtonPress : 2583
svHeadControlMask : 2584
svDefFrameCount : 2585
svEulerYaw F: 2600
svEulerPitch F: 2601
svEulerRoll F: 2602
svRemoteStatus : 3250
svRemoteButton : 3251
svRemoteLeftJoystick : 3252
svRemoteLeftJoystickX : 3253
svRemoteLeftJoystickY : 3254
svRemoteRightJoystick : 3255
svRemoteRightJoystickX : 3256
svRemoteRightJoystickY : 3257
svDebug0 : 2603
svDebug1 : 2604
svDebug2 : 2605
svDebug3 : 2606
svHumoModelDistPelvic : 3264
svHumoModelLengthPelvicHip : 3265
svHumoModelLengthHipHip : 3266
svHumoModelLengthHipKnee : 3267
svHumoModelLengthKneeFoot : 3268
svHumoModelLengthFootFoot : 3269
svHumoModelDistFootFloor : 3270
svHumoModelFootLength : 3271
svHumoModelFootWidth : 3272
svHumoModelFootCenterBack : 3273
svHumoModelFootCenterInner : 3274
svHumoModelAngPelvic : 3258
svHumoModelAngHipSide : 3260
svHumoModelAngHip : 3259
svHumoModelAngKnee : 3261
svHumoModelAngFoot : 3262
svHumoModelAngFootSide : 3263
svIkA5 F: 3275
svIkB5 F: 3276
svIkC5 F: 3277
svIkA6 F: 3278
svIkA7 F: 3279
svIkA8 F: 3280
svIkA9 F: 3281
svIkA10 F: 3282
svIkB10 F: 3283
svIkC10 F: 3284
svIkLimA5min F: 3285
svIkLimA5max F: 3286
svIkLimA6min F: 3287
svIkLimA6max F: 3288
svIkLimA7min F: 3289
svIkLimA7max F: 3290
svIkLimA8min F: 3291
svIkLimA8max F: 3292
svIkLimA9min F: 3293
svIkLimA9max F: 3294
svIkLimA10min F: 3295
svIkLimA10max F: 3296
svIkOutPresent : 3297
svIkEncA5 : 3298
svIkEncA6 : 3299
svIkEncA7 : 3300
svIkEncA8 : 3301
svIkEncA9 : 3302
svIkEncA10 : 3303
headRotateTarget : 2610
headRotateCurrent : 2611
headRotatePwm : 2612
headRotateVelo : 2613
headRotateFlags : 2615
headRotateAddonMix : 2617
torsoRotateTarget : 2626
torsoRotateCurrent : 2627
torsoRotatePwm : 2628
torsoRotateVelo : 2629
torsoRotateFlags : 2631
torsoRotateAddonMix : 2633
rightClavicleTarget : 2642
rightClavicleCurrent : 2643
rightClaviclePwm : 2644
rightClavicleVelo : 2645
rightClavicleFlags : 2647
rightClavicleAddonMix : 2649
leftClavicleTarget : 2658
leftClavicleCurrent : 2659
leftClaviclePwm : 2660
leftClavicleVelo : 2661
leftClavicleFlags : 2663
leftClavicleAddonMix : 2665
rightShoulderTarget : 2674
rightShoulderCurrent : 2675
rightShoulderPwm : 2676
rightShoulderVelo : 2677
rightShoulderFlags : 2679
rightShoulderAddonMix : 2681
leftShoulderTarget : 2690
leftShoulderCurrent : 2691
leftShoulderPwm : 2692
leftShoulderVelo : 2693
leftShoulderFlags : 2695
leftShoulderAddonMix : 2697
rightElbowSideTarget : 2706
rightElbowSideCurrent : 2707
rightElbowSidePwm : 2708
rightElbowSideVelo : 2709
rightElbowSideFlags : 2711
rightElbowSideAddonMix : 2713
leftElbowSideTarget : 2722
leftElbowSideCurrent : 2723
leftElbowSidePwm : 2724
leftElbowSideVelo : 2725
leftElbowSideFlags : 2727
leftElbowSideAddonMix : 2729
rightElbowTarget : 2738
rightElbowCurrent : 2739
rightElbowPwm : 2740
rightElbowVelo : 2741
rightElbowFlags : 2743
rightElbowAddonMix : 2745
leftElbowTarget : 2754
leftElbowCurrent : 2755
leftElbowPwm : 2756
leftElbowVelo : 2757
leftElbowFlags : 2759
leftElbowAddonMix : 2761
rightPelvicTarget : 2770
rightPelvicCurrent : 2771
rightPelvicPwm : 2772
rightPelvicVelo : 2773
rightPelvicFlags : 2775
rightPelvicAddonMix : 2777
leftPelvicTarget : 2786
leftPelvicCurrent : 2787
leftPelvicPwm : 2788
leftPelvicVelo : 2789
leftPelvicFlags : 2791
leftPelvicAddonMix : 2793
rightHipSideTarget : 2802
rightHipSideCurrent : 2803
rightHipSidePwm : 2804
rightHipSideVelo : 2805
rightHipSideFlags : 2807
rightHipSideAddonMix : 2809
leftHipSideTarget : 2818
leftHipSideCurrent : 2819
leftHipSidePwm : 2820
leftHipSideVelo : 2821
leftHipSideFlags : 2823
leftHipSideAddonMix : 2825
rightHipTarget : 2834
rightHipCurrent : 2835
rightHipPwm : 2836
rightHipVelo : 2837
rightHipFlags : 2839
rightHipAddonMix : 2841
leftHipTarget : 2850
leftHipCurrent : 2851
leftHipPwm : 2852
leftHipVelo : 2853
leftHipFlags : 2855
leftHipAddonMix : 2857
rightKneeTarget : 2866
rightKneeCurrent : 2867
rightKneePwm : 2868
rightKneeVelo : 2869
rightKneeFlags : 2871
rightKneeAddonMix : 2873
leftKneeTarget : 2882
leftKneeCurrent : 2883
leftKneePwm : 2884
leftKneeVelo : 2885
leftKneeFlags : 2887
leftKneeAddonMix : 2889
rightFootFrontTarget : 2898
rightFootFrontCurrent : 2899
rightFootFrontPwm : 2900
rightFootFrontVelo : 2901
rightFootFrontFlags : 2903
rightFootFrontAddonMix : 2905
leftFootFrontTarget : 2914
leftFootFrontCurrent : 2915
leftFootFrontPwm : 2916
leftFootFrontVelo : 2917
leftFootFrontFlags : 2919
leftFootFrontAddonMix : 2921
rightFootSideTarget : 2930
rightFootSideCurrent : 2931
rightFootSidePwm : 2932
rightFootSideVelo : 2933
rightFootSideFlags : 2935
rightFootSideAddonMix : 2937
leftFootSideTarget : 2946
leftFootSideCurrent : 2947
leftFootSidePwm : 2948
leftFootSideVelo : 2949
leftFootSideFlags : 2951
leftFootSideAddonMix : 2953
rightHandTarget : 2962
rightHandCurrent : 2963
rightHandPwm : 2964
rightHandVelo : 2965
rightHandFlags : 2967
rightHandAddonMix : 2969
leftHandTarget : 2978
leftHandCurrent : 2979
leftHandPwm : 2980
leftHandVelo : 2981
leftHandFlags : 2983
leftHandAddonMix : 2985
headTiltTarget : 3010
headTiltCurrent : 3011
headTiltPwm : 3012
headTiltVelo : 3013
headTiltFlags : 3015
headTiltAddonMix : 3017
rightKneeBotTarget : 3026
rightKneeBotCurrent : 3027
rightKneeBotPwm : 3028
rightKneeBotVelo : 3029
rightKneeBotFlags : 3031
rightKneeBotAddonMix : 3033
leftKneeBotTarget : 3042
leftKneeBotCurrent : 3043
leftKneeBotPwm : 3044
leftKneeBotVelo : 3045
leftKneeBotFlags : 3047
leftKneeBotAddonMix : 3049
rightClawTarget : 3058
rightClawCurrent : 3059
rightClawPwm : 3060
rightClawVelo : 3061
rightClawFlags : 3063
rightClawAddonMix : 3065
leftClawTarget : 3074
leftClawCurrent : 3075
leftClawPwm : 3076
leftClawVelo : 3077
leftClawFlags : 3079
leftClawAddonMix : 3081
jump_mode : 1024
robot_Serial_Number : 1025
splits_Mode : 1026
lowest_ntc : 1027
IKerr : 2
slowWalk : 3
stepLength F: 4
sideLength F: 5
rotation F: 6
selfMotionShiftCorrectionX F: 7
selfMotionShiftCorrectionY F: 8
selfFirstStepYield F: 9
selfCycleStepYield F: 10
selfSideStepRightYield F: 11
selfSideStepLeftYield F: 12
selfFirstLegIsRightLeg : 13
motion_to_right : 14
side_motion F: 15
selfInitPoses : 16
selfExitFlag : 17
selfFallingFlag : 18
selfNeckPan : 19
rotationYieldRight F: 20
rotationYieldLeft F: 21
framestep : 22
xtr F: 23
ytr F: 24
ztr F: 25
xr F: 26
yr F: 27
zr F: 28
wr F: 29
xtl F: 30
ytl F: 31
ztl F: 32
xl F: 33
yl F: 34
zl F: 35
wl F: 36
e10 F: 37
d10 F: 38
amplitude F: 39
alpha01 F: 40
fr1 : 41
fr2 : 42
gaitHeight F: 43
stepHeight F: 44
correctedStepLenght F: 45
correctedStepLenghtHalf F: 46
correctedSideLenght F: 47
correctedSideLenghtHalf F: 48
ztr0 F: 49
ztl0 F: 50
stepZtr F: 51
stepZtl F: 52
stepYtr F: 53
stepYtl F: 54
stepType : 55
fps : 56
walking_frame : 57
bodyTiltAtWalk F: 58
solyLandingSkew F: 59
stepNumber : 60
yaw F: 61
pitch F: 62
roll F: 63
j : 64
xtl0 F: 65
xtr0 F: 66
dx0Typical F: 67
dy0Typical F: 68
correctedRotation F: 69
s F: 70
fase_offset F: 71
dx F: 72
dy F: 73
stepRotation F: 74
dx0 F: 75
forwardDirection F: 76
leftRightFactor : 77
frontBackFactor : 78
frameCount : 79
