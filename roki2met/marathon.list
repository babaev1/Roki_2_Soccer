//====================================================================
//      SvCompiler V6.06
//By A.Sibilev
//====================================================================
//cblock

;sfVpuVersion <int()>
;sfCreateTask <int(,*<void()>,int)>
;sfLog <void(,cstring,int,int,int)>
;sfLogOpen <void(,cstring)>
;sfLogClose <void()>
;sfWaitFrameOut <void(,int)>
;sfIsFrameOut <int(,int)>
;sfWaitNextFrame <void()>
;sfSlotIndex <int(,cstring)>
;sfAbs <int(,int)>
;sfIMin <int(,int,int)>
;sfIMax <int(,int,int)>
;sfUMin <int(,int,int)>
;sfUMax <int(,int,int)>
;sfILimit <int(,int,int,int)>
;sfStop <void()>
;sfStartSlot <void(,int)>
;sfBip <void(,int,int)>
;sfFreeGroup <void(,int)>
;sfPoseGroup <void(,int,int,int)>
;sfPoseGroupDelay <void(,int,int,int,int)>
;sfPoseCorrect <void(,int,int)>
;sfQueueGroup <void(,int,int,int)>
;sfPoseIdx <void(,int,int,int)>
;sfPoseGroupLin <void(,int,int,int)>
;sfStrainGroup <void(,int)>
;sfPlaySamples <void(,int,*cblock,int)>
;sfAccumSetup1 <void(,*int)>
;sfAccumSetup2 <void(,*int,*int)>
;sfAccumSetup3 <void(,*int,*int,*int)>
;sfAccumSetup4 <void(,*int,*int,*int,*int)>
;sfAccumTrigger <void()>
;sfAccumReset <void()>
;sfMathAcos <int(,int,int)>
;sfMathSqrti <int(,int)>
;sfMathAngleOfTriangle <int(,int,int,int)>
;sfMathAngleOfKnee <int(,int,int,int)>
;sfMathCathetOfSquareTriangle <int(,int,int)>
;sfMathHypotenuseOfSquareTriangle <int(,int,int)>
;sfMathTableSin <int(,int,int)>
;sfHumoModelSetup <void()>
;sfHumoModelFootAtFloor <void(,int,int,int)>
;sfHumoModelFootPush <void(,int,int,int)>
;sfIndexOfMask <int(,int)>
;sfQueueIdxAppend <int(,int,int,int)>
;sfQueueIdxOffsets <int(,int,int,*cblock,int)>
;sfQueueIdxSinMove <int(,int,int,int,int)>
;sfQueueIdxLast <int(,int)>
;sfQueueIdxCount <int(,int)>
;sfQueueMax <int()>
;sfIkSetup <void()>
;sfIkAngle <void(,float,float,float,float,float,float,float)>
;sfMathCos <float(,float)>
;sfMathSin <float(,float)>
;sfQuaternionToEuler <void(,float,float,float,float)>
;sfQuaternionToEulerImu <void()>
;sfFMathACos <float(,float)>
;sfFMathASin <float(,float)>
;sfFMathATan <float(,float)>
;sfFMathATan2 <float(,float,float)>
;sfFMathCos <float(,float)>
;sfFMathSin <float(,float)>
;sfFMathTan <float(,float)>
;sfFMathCosh <float(,float)>
;sfFMathSinh <float(,float)>
;sfFMathTanh <float(,float)>
;sfFMathExp <float(,float)>
;sfFMathFrExp <float(,float,*int)>
;sfFMathLdExp <float(,float,int)>
;sfFMathLog <float(,float)>
;sfFMathLog10 <float(,float)>
;sfFMathModf <float(,float,*float)>
;sfFMathPow <float(,float,float)>
;sfFMathSqrt <float(,float)>
;sfFMathCeil <float(,float)>
;sfFMathFAbs <float(,float)>
;sfFMathFloor <float(,float)>
;sfFMathFMod <float(,float,float)>
;sfWaitFrame <void(,int)>
[3:348] ;sfWaitFrameOut( frame + svFrameCount );
VBC5_PUSH_CONST 17 | 0x80000000 //import func index sfWaitFrameOut
VBC2_PUSH_LOCAL 2 //frame
VBC3_PUSH_GLOBAL 1 //svFrameCount
VBC1_ADD
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[2:10] ;
VBC1_RETURN
;setup <void()>
[1:97] ;orderFromHead = 0;
VBC2_PUSH_CONST 4 //orderFromHead
VBC1_PUSH_0 
VBC1_POP
[1:98] ;flag_event = 0;
VBC2_PUSH_CONST 62 //flag_event
VBC1_PUSH_0 
VBC1_POP
[1:99] ;cycle_number = 10;
VBC2_PUSH_CONST 7 //cycle_number
VBC2_PUSH_CONST 10 
VBC1_POP
[1:100] ;rotationYieldRight = 0.23;
VBC2_PUSH_CONST 29 //rotationYieldRight
VBC5_PUSH_CONST 1047233823 
VBC1_POP
[1:101] ;rotationYieldLeft = 0.23;
VBC2_PUSH_CONST 30 //rotationYieldLeft
VBC5_PUSH_CONST 1047233823 
VBC1_POP
[1:103] ;svIkA5 = 40.2; 
VBC3_PUSH_CONST 1215 //svIkA5
VBC5_PUSH_CONST 1109445837 
VBC1_POP
[1:104] ;svIkB5 = 0;    
VBC3_PUSH_CONST 1216 //svIkB5
VBC1_PUSH_0 
VBC1_POP_CF
[1:105] ;svIkC5 = 0;    
VBC3_PUSH_CONST 1217 //svIkC5
VBC1_PUSH_0 
VBC1_POP_CF
[1:106] ;svIkA6 = 0;    
VBC3_PUSH_CONST 1218 //svIkA6
VBC1_PUSH_0 
VBC1_POP_CF
[1:107] ;svIkA7 = 99;   
VBC3_PUSH_CONST 1219 //svIkA7
VBC2_PUSH_CONST 99 
VBC1_POP_CF
[1:108] ;svIkA8 = 99;   
VBC3_PUSH_CONST 1220 //svIkA8
VBC2_PUSH_CONST 99 
VBC1_POP_CF
[1:109] ;svIkA9 = 0;    
VBC3_PUSH_CONST 1221 //svIkA9
VBC1_PUSH_0 
VBC1_POP_CF
[1:110] ;svIkA10 = 13.7;  
VBC3_PUSH_CONST 1222 //svIkA10
VBC5_PUSH_CONST 1096495923 
VBC1_POP
[1:111] ;svIkB10 = 23.8;  
VBC3_PUSH_CONST 1223 //svIkB10
VBC5_PUSH_CONST 1102997094 
VBC1_POP
[1:112] ;svIkC10 = 0;   
VBC3_PUSH_CONST 1224 //svIkC10
VBC1_PUSH_0 
VBC1_POP_CF
[1:114] ;e10 = 55;      
VBC2_PUSH_CONST 46 //e10
VBC2_PUSH_CONST 55 
VBC1_POP_CF
[1:115] ;d10 = 62;      
VBC2_PUSH_CONST 47 //d10
VBC2_PUSH_CONST 62 
VBC1_POP_CF
[1:118] ;svIkLimA5min = -90 * 0.017453293;
VBC3_PUSH_CONST 1225 //svIkLimA5min
VBC5_PUSH_CONST -1077342245 
VBC1_POP
[1:119] ;svIkLimA5max = 90 * 0.017453293;
VBC3_PUSH_CONST 1226 //svIkLimA5max
VBC5_PUSH_CONST 1070141403 
VBC1_POP
[1:122] ;svIkLimA6min = -108 * 0.017453293;
VBC3_PUSH_CONST 1227 //svIkLimA6min
VBC5_PUSH_CONST -1074706887 
VBC1_POP
[1:123] ;svIkLimA6max = 15 * 0.017453293;
VBC3_PUSH_CONST 1228 //svIkLimA6max
VBC5_PUSH_CONST 1048971922 
VBC1_POP
[1:125] ;svIkLimA7min = -130 * 0.017453293;
VBC3_PUSH_CONST 1229 //svIkLimA7min
VBC5_PUSH_CONST -1072613858 
VBC1_POP
[1:126] ;svIkLimA7max = 50 * 0.017453293;
VBC3_PUSH_CONST 1230 //svIkLimA7max
VBC5_PUSH_CONST 1063216883 
VBC1_POP
[1:129] ;svIkLimA8min = -180 * 0.017453293;
VBC3_PUSH_CONST 1231 //svIkLimA8min
VBC5_PUSH_CONST -1068953637 
VBC1_POP
[1:130] ;svIkLimA8max = 8 * 0.017453293;
VBC3_PUSH_CONST 1232 //svIkLimA8max
VBC5_PUSH_CONST 1041168949 
VBC1_POP
[1:133] ;svIkLimA9min = -45 * 0.017453293;
VBC3_PUSH_CONST 1233 //svIkLimA9min
VBC5_PUSH_CONST -1085730853 
VBC1_POP
[1:134] ;svIkLimA9max = 78 * 0.017453293;
VBC3_PUSH_CONST 1234 //svIkLimA9max
VBC5_PUSH_CONST 1068384497 
VBC1_POP
[1:137] ;svIkLimA10min = -24 * 0.017453293;
VBC3_PUSH_CONST 1235 //svIkLimA10min
VBC5_PUSH_CONST -1093241008 
VBC1_POP
[1:138] ;svIkLimA10max = 24 * 0.017453293;
VBC3_PUSH_CONST 1236 //svIkLimA10max
VBC5_PUSH_CONST 1054242640 
VBC1_POP
[1:139] ;sfIkSetup();
VBC5_PUSH_CONST 200 | 0x80000000 //import func index sfIkSetup
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:141] ;framestep = 2;
VBC2_PUSH_CONST 31 //framestep
VBC1_PUSH_2 
VBC1_POP
[1:147] ;ztr0 = -(svIkC5+svIkA6+svIkA7+svIkA8+svIkA9+svIkB10 - 1); 
VBC2_PUSH_CONST 54 //ztr0
VBC3_PUSH_GLOBAL 1217 //svIkC5
VBC3_PUSH_GLOBAL 1218 //svIkA6
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1219 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1220 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1221 //svIkA9
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1223 //svIkB10
VBC1_ADD_FF
VBC1_PUSH_1 
VBC1_SUB_FI
VBC1_NEG_F
VBC1_POP
[1:148] ;ztl0 = -(svIkC5+svIkA6+svIkA7+svIkA8+svIkA9+svIkB10 - 1); 
VBC2_PUSH_CONST 55 //ztl0
VBC3_PUSH_GLOBAL 1217 //svIkC5
VBC3_PUSH_GLOBAL 1218 //svIkA6
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1219 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1220 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1221 //svIkA9
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1223 //svIkB10
VBC1_ADD_FF
VBC1_PUSH_1 
VBC1_SUB_FI
VBC1_NEG_F
VBC1_POP
[1:150] ;zr = zl = -1;
VBC2_PUSH_CONST 37 //zr
VBC2_PUSH_CONST 44 //zl
VBC2_PUSH_CONST -1 // -
VBC1_STORE_CF
VBC1_POP
[1:153] ;selfInitPoses = 10;
VBC2_PUSH_CONST 25 //selfInitPoses
VBC2_PUSH_CONST 10 
VBC1_POP
[1:156] ;stepLength = 0.0;    
VBC2_PUSH_CONST 19 //stepLength
VBC1_PUSH_0 
VBC1_POP
[1:157] ;sideLength = 0.0;    
VBC2_PUSH_CONST 20 //sideLength
VBC1_PUSH_0 
VBC1_POP
[1:158] ;rotation = 0;        
VBC2_PUSH_CONST 21 //rotation
VBC1_PUSH_0 
VBC1_POP_CF
[1:159] ;selfFirstLegIsRightLeg = 1; 
VBC2_PUSH_CONST 22 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_POP
[1:160] ;motion_to_right = 1;
VBC2_PUSH_CONST 23 //motion_to_right
VBC1_PUSH_1 
VBC1_POP
[1:161] ;side_motion = 0.0;
VBC2_PUSH_CONST 24 //side_motion
VBC1_PUSH_0 
VBC1_POP
[1:162] ;selfInitPoses = 20; 
VBC2_PUSH_CONST 25 //selfInitPoses
VBC2_PUSH_CONST 20 
VBC1_POP
[1:164] ;stepZtr = (ztr0 + gaitHeight) / selfInitPoses;
VBC2_PUSH_CONST 56 //stepZtr
VBC3_PUSH_GLOBAL 54 //ztr0
VBC3_PUSH_GLOBAL 13 //gaitHeight
VBC1_ADD_FI
VBC3_PUSH_GLOBAL 25 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:165] ;stepZtl = (ztl0 + gaitHeight) / selfInitPoses;
VBC2_PUSH_CONST 57 //stepZtl
VBC3_PUSH_GLOBAL 55 //ztl0
VBC3_PUSH_GLOBAL 13 //gaitHeight
VBC1_ADD_FI
VBC3_PUSH_GLOBAL 25 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:167] ;solyLandingSkew = 0.00;
VBC2_PUSH_CONST 16 //solyLandingSkew
VBC1_PUSH_0 
VBC1_POP
[1:169] ;tors_angle = 0;     
VBC2_PUSH_CONST 64 //tors_angle
VBC1_PUSH_0 
VBC1_POP_CF
[1:171] ;stepYtr = amplitude / 2.0 / selfInitPoses;
VBC2_PUSH_CONST 58 //stepYtr
VBC3_PUSH_GLOBAL 48 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 25 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:172] ;stepYtl = amplitude / 2.0 / selfInitPoses;
VBC2_PUSH_CONST 59 //stepYtl
VBC3_PUSH_GLOBAL 48 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 25 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:173] ;alpha01 = 3.141592654;
VBC2_PUSH_CONST 49 //alpha01
VBC5_PUSH_CONST 1078530011 
VBC1_POP
[1:174] ;if( fr1 != 0 )
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_PUSH_0 
VBC1_NOT_EQU
VBC4_FALSE_JUMP LAB489 //if to false
;alpha01 = alpha01 * 2 / fr1;
VBC2_PUSH_CONST 49 //alpha01
VBC3_PUSH_GLOBAL 49 //alpha01
VBC1_PUSH_2 
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_DIV_FI
VBC1_POP
LAB489: //if else
[1:182] ;timeStep = 2;
VBC2_PUSH_CONST 3 //timeStep
VBC1_PUSH_2 
VBC1_POP
[1:184] ;stepLengthOrder = 50;
VBC2_PUSH_CONST 9 //stepLengthOrder
VBC2_PUSH_CONST 50 
VBC1_POP
[1:185] ;ugol_torsa = 0.3;  	
VBC2_PUSH_CONST 17 //ugol_torsa
VBC5_PUSH_CONST 1050253722 
VBC1_POP
[1:186] ;bodyTiltAtWalk = 0.055;
VBC2_PUSH_CONST 15 //bodyTiltAtWalk
VBC5_PUSH_CONST 1029785518 
VBC1_POP
[1:187] ;hipTilt = 0;
VBC2_PUSH_CONST 8 //hipTilt
VBC1_PUSH_0 
VBC1_POP
[1:188] ;gaitHeight = 190; 
VBC2_PUSH_CONST 13 //gaitHeight
VBC3_PUSH_CONST 190 
VBC1_POP
[1:189] ;stepHeight = 40; 
VBC2_PUSH_CONST 14 //stepHeight
VBC2_PUSH_CONST 40 
VBC1_POP
[1:190] ;fps = 4;
VBC2_PUSH_CONST 10 //fps
VBC2_PUSH_CONST 4 
VBC1_POP
[1:191] ;fr1 = 5;           
VBC2_PUSH_CONST 11 //fr1
VBC2_PUSH_CONST 5 
VBC1_POP
[1:192] ;fr2 = 7;          
VBC2_PUSH_CONST 12 //fr2
VBC2_PUSH_CONST 7 
VBC1_POP
[1:193] ;amplitude = 32;    
VBC2_PUSH_CONST 48 //amplitude
VBC2_PUSH_CONST 32 
VBC1_POP_CF
[1:195] ;if (timeStep == 1){
VBC3_PUSH_GLOBAL 3 //timeStep
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB614 //if to false
;
[1:196] ;stepLengthOrder = 40;
VBC2_PUSH_CONST 9 //stepLengthOrder
VBC2_PUSH_CONST 40 
VBC1_POP
[1:197] ;ugol_torsa = 0.65;
VBC2_PUSH_CONST 17 //ugol_torsa
VBC5_PUSH_CONST 1059481190 
VBC1_POP
[1:198] ;bodyTiltAtWalk = -0.02; 
VBC2_PUSH_CONST 15 //bodyTiltAtWalk
VBC5_PUSH_CONST -1130113270 // -
VBC1_POP
[1:199] ;hipTilt = 80;
VBC2_PUSH_CONST 8 //hipTilt
VBC2_PUSH_CONST 80 
VBC1_POP
[1:200] ;gaitHeight = 135;
VBC2_PUSH_CONST 13 //gaitHeight
VBC3_PUSH_CONST 135 
VBC1_POP
[1:201] ;stepHeight = 35;
VBC2_PUSH_CONST 14 //stepHeight
VBC2_PUSH_CONST 35 
VBC1_POP
[1:202] ;fps = 2;
VBC2_PUSH_CONST 10 //fps
VBC1_PUSH_2 
VBC1_POP
[1:203] ;fr1 = 4;           
VBC2_PUSH_CONST 11 //fr1
VBC2_PUSH_CONST 4 
VBC1_POP
[1:204] ;fr2 = 9;          
VBC2_PUSH_CONST 12 //fr2
VBC2_PUSH_CONST 9 
VBC1_POP
[1:205] ;amplitude = 40;    
VBC2_PUSH_CONST 48 //amplitude
VBC2_PUSH_CONST 40 
VBC1_POP_CF
LAB614: //if else
[1:215] ;
VBC1_RETURN
;stabilizeRotationByIMU <void()>
[1:221] ;sfQuaternionToEulerImu();
VBC5_PUSH_CONST 303 | 0x80000000 //import func index sfQuaternionToEulerImu
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:222] ;rotation = (forwardDirection - svEulerYaw) * 1.1;
VBC2_PUSH_CONST 21 //rotation
VBC3_PUSH_GLOBAL 66 //forwardDirection
VBC3_PUSH_GLOBAL 1025 //svEulerYaw
VBC1_SUB_FF
VBC5_PUSH_CONST 1066192077 
VBC1_MUL_FF
VBC1_POP
[1:223] ;if( rotation > 3.141592654 ) rotation -= 2 * 3.141592654;
VBC3_PUSH_GLOBAL 21 //rotation
VBC5_PUSH_CONST 1078530011 
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB662 //if to false
;if( rotation > 3.141592654 ) rotation -= 2 * 3.141592654;
VBC2_PUSH_CONST 21 //rotation
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1086918619 
VBC1_SUB_FF
VBC1_POP
LAB662: //if else
[1:224] ;if( rotation < -3.141592654 ) rotation += 2 * 3.141592654;
VBC3_PUSH_GLOBAL 21 //rotation
VBC5_PUSH_CONST -1068953637 // -
VBC1_LESS_FF
VBC4_FALSE_JUMP LAB686 //if to false
;if( rotation < -3.141592654 ) rotation += 2 * 3.141592654;
VBC2_PUSH_CONST 21 //rotation
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1086918619 
VBC1_ADD_FF
VBC1_POP
LAB686: //if else
[1:225] ;if( rotation > 0.3 ) rotation = 0.3;
VBC3_PUSH_GLOBAL 21 //rotation
VBC5_PUSH_CONST 1050253722 
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB707 //if to false
;if( rotation > 0.3 ) rotation = 0.3;
VBC2_PUSH_CONST 21 //rotation
VBC5_PUSH_CONST 1050253722 
VBC1_POP
LAB707: //if else
[1:226] ;if( rotation < -0.3 ) rotation = -0.3;
VBC3_PUSH_GLOBAL 21 //rotation
VBC5_PUSH_CONST -1097229926 // -
VBC1_LESS_FF
VBC4_FALSE_JUMP LAB728 //if to false
;if( rotation < -0.3 ) rotation = -0.3;
VBC2_PUSH_CONST 21 //rotation
VBC5_PUSH_CONST -1097229926 // -
VBC1_POP
LAB728: //if else
[1:227] ;correctedRotation = rotation * 0.25 * 0.23 / (rotation <= 0 ? rotationYieldRight : rotationYieldLeft);
VBC2_PUSH_CONST 67 //correctedRotation
VBC3_PUSH_GLOBAL 21 //rotation
VBC5_PUSH_CONST 1048576000 
VBC1_MUL_FF
VBC5_PUSH_CONST 1047233823 
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 21 //rotation
VBC1_PUSH_0 
VBC1_LESS_EQU_FI
VBC4_FALSE_JUMP LAB761
VBC3_PUSH_GLOBAL 29 //rotationYieldRight
VBC4_JUMP LAB764
LAB761:
VBC3_PUSH_GLOBAL 30 //rotationYieldLeft
LAB764:
VBC1_DIV_FF
VBC1_POP
[1:228] ;if (orderFromHead == 1)correctedRotation = 0;
VBC3_PUSH_GLOBAL 4 //orderFromHead
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB783 //if to false
;if (orderFromHead == 1)correctedRotation = 0;
VBC2_PUSH_CONST 67 //correctedRotation
VBC1_PUSH_0 
VBC1_POP_CF
VBC4_JUMP LAB822 //if to exit
LAB783: //if else
;else if (orderFromHead == 2) correctedRotation = 0.3;
VBC3_PUSH_GLOBAL 4 //orderFromHead
VBC1_PUSH_2 
VBC1_EQU
VBC4_FALSE_JUMP LAB804 //if to false
;else if (orderFromHead == 2) correctedRotation = 0.3;
VBC2_PUSH_CONST 67 //correctedRotation
VBC5_PUSH_CONST 1050253722 
VBC1_POP
VBC4_JUMP LAB822 //if to exit
LAB804: //if else
;else if (orderFromHead == 3) correctedRotation = -0.3;
VBC3_PUSH_GLOBAL 4 //orderFromHead
VBC2_PUSH_CONST 3 
VBC1_EQU
VBC4_FALSE_JUMP LAB822 //if to false
;else if (orderFromHead == 3) correctedRotation = -0.3;
VBC2_PUSH_CONST 67 //correctedRotation
VBC5_PUSH_CONST -1097229926 // -
VBC1_POP
LAB822: //if else
LAB822: //if exit
LAB822: //if exit
[1:234] ;
VBC1_RETURN
;computeAlphaForWalk <int()>
[1:238] ;flag = 0;
VBC2_PUSH_CONST 61 //flag
VBC1_PUSH_0 
VBC1_POP
[1:239] ;torsoAdd = tors_angle * 2607.594587 ;
VBC2_PUSH_CONST 65 //torsoAdd
VBC3_PUSH_GLOBAL 64 //tors_angle
VBC5_PUSH_CONST 1159920003 
VBC1_MUL_FF
VBC1_POP_CI
[1:240] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 615  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:241] ;if (correctedRotation > 0) {
VBC3_PUSH_GLOBAL 67 //correctedRotation
VBC1_PUSH_0 
VBC1_GREAT_FI
VBC4_FALSE_JUMP LAB875 //if to false
;
[1:242] ;xtr *= 1.3;
VBC2_PUSH_CONST 32 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1067869798 
VBC1_MUL_FF
VBC1_POP
[1:243] ;xtl *= 0.7;
VBC2_PUSH_CONST 39 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1060320051 
VBC1_MUL_FF
VBC1_POP
LAB875: //if else
[1:245] ;if (correctedRotation < 0) {
VBC3_PUSH_GLOBAL 67 //correctedRotation
VBC1_PUSH_0 
VBC1_LESS_FI
VBC4_FALSE_JUMP LAB906 //if to false
;
[1:246] ;xtr *= 0.7;
VBC2_PUSH_CONST 32 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1060320051 
VBC1_MUL_FF
VBC1_POP
[1:247] ;xtl *= 1.3;
VBC2_PUSH_CONST 39 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1067869798 
VBC1_MUL_FF
VBC1_POP
LAB906: //if else
[1:249] ;sfIkAngle( xtr, ytr, ztr, xr, yr, zr, wr );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 32 //xtr
VBC3_PUSH_GLOBAL 33 //ytr
VBC3_PUSH_GLOBAL 34 //ztr
VBC3_PUSH_GLOBAL 35 //xr
VBC3_PUSH_GLOBAL 36 //yr
VBC3_PUSH_GLOBAL 37 //zr
VBC3_PUSH_GLOBAL 38 //wr
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
[1:250] ;if( svIkOutPresent ) {
VBC3_PUSH_GLOBAL 1237 //svIkOutPresent
VBC4_FALSE_JUMP LAB1309 //if to false
;
[1:251] ;flag = flag + 1;
VBC2_PUSH_CONST 61 //flag
VBC3_PUSH_GLOBAL 61 //flag
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
[1:253] ;if (selfFirstLegIsRightLeg == 1){
VBC3_PUSH_GLOBAL 22 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB1135 //if to false
;
[1:254] ;sfPoseGroup( 1024 , -(svIkEncA5 - torsoAdd), fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC3_PUSH_GLOBAL 65 //torsoAdd
VBC1_SUB
VBC1_NEG
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:255] ;sfPoseGroup( 4096 , -svIkEncA6, fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:256] ;sfPoseGroup( 16384 , -svIkEncA7 + hipTilt, fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 8 //hipTilt
VBC1_ADD
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:257] ;sfPoseGroup( 65536 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:258] ;sfPoseGroup( 67108864 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 67108864 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:259] ;sfPoseGroup( 262144 , svIkEncA9, fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:260] ;sfPoseGroup( 1048576 , -svIkEncA10, fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:261] ;sfPoseGroup( 2 , -torsoAdd, fps);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 65 //torsoAdd
VBC1_NEG
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:262] ;sfPoseGroup( 4 , (1400 - xtl * 30), fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 4 
VBC3_PUSH_CONST 1400 
VBC3_PUSH_GLOBAL 39 //xtl
VBC2_PUSH_CONST 30 
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB1309 //if to exit
LAB1135: //if else
;
[1:265] ;sfPoseGroupLin( 2048 , (svIkEncA5 - tors_angle), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC3_PUSH_GLOBAL 64 //tors_angle
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:266] ;sfPoseGroup( 8192 , -svIkEncA6, fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:267] ;sfPoseGroup( 32768 , -svIkEncA7 + hipTilt, fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 8 //hipTilt
VBC1_ADD
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:268] ;sfPoseGroup( 131072 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:269] ;sfPoseGroup( 134217728 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 134217728 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:270] ;sfPoseGroup( 524288 , svIkEncA9, fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:271] ;sfPoseGroup( 2097152 , -svIkEncA10, fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:272] ;sfPoseGroup(2 , -torsoAdd, fps);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 65 //torsoAdd
VBC1_NEG
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:273] ;sfPoseGroup( 8 , (1400 - xtr * 30), fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 8 
VBC3_PUSH_CONST 1400 
VBC3_PUSH_GLOBAL 32 //xtr
VBC2_PUSH_CONST 30 
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB1309: //if exit
LAB1309: //if else
[1:279] ;sfIkAngle( xtl, -ytl, ztl, xl, -yl, zl, wl );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 39 //xtl
VBC3_PUSH_GLOBAL 40 //ytl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 41 //ztl
VBC3_PUSH_GLOBAL 42 //xl
VBC3_PUSH_GLOBAL 43 //yl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 44 //zl
VBC3_PUSH_GLOBAL 45 //wl
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
[1:280] ;if (correctedRotation > 0) {
VBC3_PUSH_GLOBAL 67 //correctedRotation
VBC1_PUSH_0 
VBC1_GREAT_FI
VBC4_FALSE_JUMP LAB1370 //if to false
;
[1:281] ;xtr /= 1.3;
VBC2_PUSH_CONST 32 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1067869798 
VBC1_DIV_FF
VBC1_POP
[1:282] ;xtl /= 0.7;
VBC2_PUSH_CONST 39 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1060320051 
VBC1_DIV_FF
VBC1_POP
LAB1370: //if else
[1:284] ;if (correctedRotation < 0) {
VBC3_PUSH_GLOBAL 67 //correctedRotation
VBC1_PUSH_0 
VBC1_LESS_FI
VBC4_FALSE_JUMP LAB1401 //if to false
;
[1:285] ;xtr /= 0.7;
VBC2_PUSH_CONST 32 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1060320051 
VBC1_DIV_FF
VBC1_POP
[1:286] ;xtl /= 1.3;
VBC2_PUSH_CONST 39 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1067869798 
VBC1_DIV_FF
VBC1_POP
LAB1401: //if else
[1:288] ;if( svIkOutPresent ) {
VBC3_PUSH_GLOBAL 1237 //svIkOutPresent
VBC4_FALSE_JUMP LAB1746 //if to false
;
[1:289] ;flag = flag + 1;
VBC2_PUSH_CONST 61 //flag
VBC3_PUSH_GLOBAL 61 //flag
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
[1:291] ;if (selfFirstLegIsRightLeg == 1){
VBC3_PUSH_GLOBAL 22 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB1588 //if to false
;
[1:292] ;sfPoseGroup( 2048 , -(svIkEncA5 + torsoAdd), fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC3_PUSH_GLOBAL 65 //torsoAdd
VBC1_ADD
VBC1_NEG
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:293] ;sfPoseGroup( 8192 , -svIkEncA6, fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:294] ;sfPoseGroup( 32768 , -svIkEncA7 + hipTilt, fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 8 //hipTilt
VBC1_ADD
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:295] ;sfPoseGroup( 131072 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:296] ;sfPoseGroup( 134217728 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 134217728 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:297] ;sfPoseGroup( 524288 , svIkEncA9, fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:298] ;sfPoseGroup( 2097152 , -svIkEncA10, fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:299] ;sfPoseGroup( 8 , (1400 - xtr * 30), fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 8 
VBC3_PUSH_CONST 1400 
VBC3_PUSH_GLOBAL 32 //xtr
VBC2_PUSH_CONST 30 
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB1746 //if to exit
LAB1588: //if else
;
[1:302] ;sfPoseGroup( 1024 , (svIkEncA5 - tors_angle), fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC3_PUSH_GLOBAL 64 //tors_angle
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:303] ;sfPoseGroup( 4096 , -svIkEncA6, fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:304] ;sfPoseGroup( 16384 , -svIkEncA7 + hipTilt, fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 8 //hipTilt
VBC1_ADD
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:305] ;sfPoseGroup( 65536 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:306] ;sfPoseGroup( 67108864 , -svIkEncA8 / 2, fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 67108864 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:307] ;sfPoseGroup( 262144 , svIkEncA9, fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:308] ;sfPoseGroup( 1048576 , -svIkEncA10, fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:309] ;sfPoseGroup( 4 , (1400 - xtl * 30), fps );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC2_PUSH_CONST 4 
VBC3_PUSH_CONST 1400 
VBC3_PUSH_GLOBAL 39 //xtl
VBC2_PUSH_CONST 30 
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 10 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB1746: //if exit
LAB1746: //if else
[1:313] ;sfWaitFrame( timeStep );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 3 //timeStep
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:314] ;if (flag < 2) flag_event = flag_event + 1;
VBC3_PUSH_GLOBAL 61 //flag
VBC1_PUSH_2 
VBC1_LESS
VBC4_FALSE_JUMP LAB1770 //if to false
;if (flag < 2) flag_event = flag_event + 1;
VBC2_PUSH_CONST 62 //flag_event
VBC3_PUSH_GLOBAL 62 //flag_event
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
LAB1770: //if else
[1:315] ;return 1;
VBC1_PUSH_1 
VBC2_POP_RESULT 2
VBC1_RETURN
;computeAlphaForWalkFine <void(,int)>
[1:330] ;sfIkAngle( xtr, ytr, ztr, xr, yr, zr, wr );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 32 //xtr
VBC3_PUSH_GLOBAL 33 //ytr
VBC3_PUSH_GLOBAL 34 //ztr
VBC3_PUSH_GLOBAL 35 //xr
VBC3_PUSH_GLOBAL 36 //yr
VBC3_PUSH_GLOBAL 37 //zr
VBC3_PUSH_GLOBAL 38 //wr
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
[1:332] ;if( svIkOutPresent ) {
VBC3_PUSH_GLOBAL 1237 //svIkOutPresent
VBC4_FALSE_JUMP LAB2062 //if to false
;
[1:334] ;if (selfFirstLegIsRightLeg == 1){
VBC3_PUSH_GLOBAL 22 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB1942 //if to false
;
[1:335] ;sfPoseGroupLin( 1024 , -svIkEncA5, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:336] ;sfPoseGroupLin( 4096 , -svIkEncA6, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:337] ;sfPoseGroupLin( 16384 , -svIkEncA7, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:338] ;sfPoseGroupLin( 65536 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:339] ;sfPoseGroupLin( 67108864 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 67108864 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:340] ;sfPoseGroupLin( 262144 , svIkEncA9, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:341] ;sfPoseGroupLin( 1048576 , -svIkEncA10, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB2062 //if to exit
LAB1942: //if else
;
[1:344] ;sfPoseGroupLin( 2048 , svIkEncA5, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:345] ;sfPoseGroupLin( 8192 , -svIkEncA6, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:346] ;sfPoseGroupLin( 32768 , -svIkEncA7, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:347] ;sfPoseGroupLin( 131072 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:348] ;sfPoseGroupLin( 134217728 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 134217728 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:349] ;sfPoseGroupLin( 524288 , svIkEncA9, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:350] ;sfPoseGroupLin( 2097152 , -svIkEncA10, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB2062: //if exit
LAB2062: //if else
[1:356] ;sfIkAngle( xtl, -ytl, ztl, xl, -yl, zl, wl );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 39 //xtl
VBC3_PUSH_GLOBAL 40 //ytl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 41 //ztl
VBC3_PUSH_GLOBAL 42 //xl
VBC3_PUSH_GLOBAL 43 //yl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 44 //zl
VBC3_PUSH_GLOBAL 45 //wl
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
[1:357] ;if( svIkOutPresent ) {
VBC3_PUSH_GLOBAL 1237 //svIkOutPresent
VBC4_FALSE_JUMP LAB2352 //if to false
;
[1:359] ;if (selfFirstLegIsRightLeg == 1){
VBC3_PUSH_GLOBAL 22 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB2233 //if to false
;
[1:360] ;sfPoseGroupLin( 2048 , -svIkEncA5, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:361] ;sfPoseGroupLin( 8192 , -svIkEncA6, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:362] ;sfPoseGroupLin( 32768 , -svIkEncA7, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:363] ;sfPoseGroupLin( 131072 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:364] ;sfPoseGroupLin( 134217728 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 134217728 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:365] ;sfPoseGroupLin( 524288 , svIkEncA9, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:366] ;sfPoseGroupLin( 2097152 , -svIkEncA10, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB2352 //if to exit
LAB2233: //if else
;
[1:369] ;sfPoseGroupLin( 1024 , svIkEncA5, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:370] ;sfPoseGroupLin( 4096 , -svIkEncA6, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:371] ;sfPoseGroupLin( 16384 , -svIkEncA7, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:372] ;sfPoseGroupLin( 65536 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:373] ;sfPoseGroupLin( 67108864 , -svIkEncA8 / 2, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 67108864 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:374] ;sfPoseGroupLin( 262144 , svIkEncA9, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:375] ;sfPoseGroupLin( 1048576 , -svIkEncA10, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB2352: //if exit
LAB2352: //if else
[1:379] ;sfPoseGroupLin( 256  | 512 , 4540, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 768 
VBC3_PUSH_CONST 4540 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:380] ;sfPoseGroupLin( 4  | 8 , 1400, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_CONST 12 
VBC3_PUSH_CONST 1400 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:381] ;sfPoseGroupLin( 64  | 128 , 700, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 192 
VBC3_PUSH_CONST 700 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:382] ;sfWaitFrame( frameCount );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:389] ;
VBC1_RETURN
;testDrop <void()>
[1:390] ;if( sfAbs(svImuAccX) > 50000 || sfAbs(svImuAccZ) > 50000 ) {
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 1000 //svImuAccX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC4_PUSH_CONST 50000 
VBC1_GREAT
VBC4_TRUE_JUMP_KEEP LAB2442
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 1002 //svImuAccZ
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC4_PUSH_CONST 50000 
VBC1_GREAT
VBC4_TRUE_JUMP_KEEP LAB2442
VBC1_PUSH_0
LAB2442:
VBC4_FALSE_JUMP LAB2452 //if to false
;
[1:395] ;sfWaitFrame(100);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_CONST 100 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB2452: //if else
[1:401] ;
VBC1_RETURN
;walkInitialPose <void()>
[1:406] ;xtr = xtl = 0;
VBC2_PUSH_CONST 32 //xtr
VBC2_PUSH_CONST 39 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:407] ;for( j = 0; j < selfInitPoses; j++ ) {
VBC2_PUSH_CONST 68 //j
VBC1_PUSH_0 
VBC1_POP
LAB2464: //for condition
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 25 //selfInitPoses
VBC1_LESS
VBC4_FALSE_JUMP LAB2549 //to for exit
;
[1:409] ;ztr = ztr0 - j * stepZtr;
VBC2_PUSH_CONST 34 //ztr
VBC3_PUSH_GLOBAL 54 //ztr0
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 56 //stepZtr
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:410] ;ztl = ztl0 - j * stepZtl;
VBC2_PUSH_CONST 41 //ztl
VBC3_PUSH_GLOBAL 55 //ztl0
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 57 //stepZtl
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:411] ;ytr = -d10 - j * stepYtr;
VBC2_PUSH_CONST 33 //ytr
VBC3_PUSH_GLOBAL 47 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 58 //stepYtr
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:412] ;ytl =  d10 - j * stepYtl;
VBC2_PUSH_CONST 40 //ytl
VBC3_PUSH_GLOBAL 47 //d10
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 59 //stepYtl
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:414] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 823  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB2542 //if to false
;return;
VBC1_RETURN
LAB2542: //if else
LAB2542: //for step
VBC2_PUSH_CONST 68 //j
VBC1_INC
VBC4_JUMP LAB2464 //to condition
LAB2549: //for exit
[1:424] ;
VBC1_RETURN
;walkInitialPoseFine <void()>
[1:425] ;xtr = xtl = 0;
VBC2_PUSH_CONST 32 //xtr
VBC2_PUSH_CONST 39 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:426] ;ztr = ztl = -gaitHeight;
VBC2_PUSH_CONST 34 //ztr
VBC2_PUSH_CONST 41 //ztl
VBC3_PUSH_GLOBAL 13 //gaitHeight
VBC1_NEG
VBC1_STORE_CF
VBC1_POP
[1:427] ;ytr = -d10 - amplitude / 2.0;
VBC2_PUSH_CONST 33 //ytr
VBC3_PUSH_GLOBAL 47 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 48 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:428] ;ytl =  d10 - amplitude / 2.0;
VBC2_PUSH_CONST 40 //ytl
VBC3_PUSH_GLOBAL 47 //d10
VBC3_PUSH_GLOBAL 48 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:429] ;computeAlphaForWalkFine( 40 );
VBC3_PUSH_CONST 1774  //func address computeAlphaForWalkFine
VBC2_PUSH_CONST 40 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:433] ;
VBC1_RETURN
;walkFinalPose <void()>
[1:434] ;for( j = 0; j < selfInitPoses; j++ ) {
VBC2_PUSH_CONST 68 //j
VBC1_PUSH_0 
VBC1_POP
LAB2612: //for condition
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 25 //selfInitPoses
VBC1_LESS
VBC4_FALSE_JUMP LAB2715 //to for exit
;
[1:436] ;ztr = -gaitHeight + (j+1) * stepZtr;
VBC2_PUSH_CONST 34 //ztr
VBC3_PUSH_GLOBAL 13 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_1 
VBC1_ADD
VBC3_PUSH_GLOBAL 56 //stepZtr
VBC1_MUL_IF
VBC1_ADD_IF
VBC1_POP
[1:437] ;ztl = -gaitHeight + (j+1) * stepZtr;
VBC2_PUSH_CONST 41 //ztl
VBC3_PUSH_GLOBAL 13 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_1 
VBC1_ADD
VBC3_PUSH_GLOBAL 56 //stepZtr
VBC1_MUL_IF
VBC1_ADD_IF
VBC1_POP
[1:438] ;ytr = -d10 + (selfInitPoses - (j+1)) * stepYtr;
VBC2_PUSH_CONST 33 //ytr
VBC3_PUSH_GLOBAL 47 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 25 //selfInitPoses
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_SUB
VBC3_PUSH_GLOBAL 58 //stepYtr
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:439] ;ytl =  d10 + (selfInitPoses - (j+1)) * stepYtl;
VBC2_PUSH_CONST 40 //ytl
VBC3_PUSH_GLOBAL 47 //d10
VBC3_PUSH_GLOBAL 25 //selfInitPoses
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_SUB
VBC3_PUSH_GLOBAL 59 //stepYtl
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:441] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 823  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB2708 //if to false
;return;
VBC1_RETURN
LAB2708: //if else
LAB2708: //for step
VBC2_PUSH_CONST 68 //j
VBC1_INC
VBC4_JUMP LAB2612 //to condition
LAB2715: //for exit
[1:452] ;
VBC1_RETURN
;walkFinalPoseFine <void()>
[1:453] ;xtr = xtl = 0;
VBC2_PUSH_CONST 32 //xtr
VBC2_PUSH_CONST 39 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:454] ;ztr = ztl = -(svIkC5+svIkA6+svIkA7+svIkA8+svIkA9+svIkB10 - 1);
VBC2_PUSH_CONST 34 //ztr
VBC2_PUSH_CONST 41 //ztl
VBC3_PUSH_GLOBAL 1217 //svIkC5
VBC3_PUSH_GLOBAL 1218 //svIkA6
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1219 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1220 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1221 //svIkA9
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1223 //svIkB10
VBC1_ADD_FF
VBC1_PUSH_1 
VBC1_SUB_FI
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:455] ;ytr = -d10;
VBC2_PUSH_CONST 33 //ytr
VBC3_PUSH_GLOBAL 47 //d10
VBC1_NEG_F
VBC1_POP
[1:456] ;ytl =  d10;
VBC2_PUSH_CONST 40 //ytl
VBC3_PUSH_GLOBAL 47 //d10
VBC1_POP
[1:457] ;computeAlphaForWalkFine( 40 );
VBC3_PUSH_CONST 1774  //func address computeAlphaForWalkFine
VBC2_PUSH_CONST 40 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:460] ;
VBC1_RETURN
;walkInit <void()>
[1:474] ;correctedStepLenght = stepLength;
VBC2_PUSH_CONST 50 //correctedStepLenght
VBC3_PUSH_GLOBAL 19 //stepLength
VBC1_POP
[1:475] ;correctedStepLenghtHalf = correctedStepLenght / 2;
VBC2_PUSH_CONST 51 //correctedStepLenghtHalf
VBC3_PUSH_GLOBAL 50 //correctedStepLenght
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_POP
[1:476] ;correctedSideLenght = sideLength;
VBC2_PUSH_CONST 52 //correctedSideLenght
VBC3_PUSH_GLOBAL 20 //sideLength
VBC1_POP
[1:477] ;correctedSideLenghtHalf = correctedSideLenght / 2;
VBC2_PUSH_CONST 53 //correctedSideLenghtHalf
VBC3_PUSH_GLOBAL 52 //correctedSideLenght
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_POP
[1:483] ;stepRotation = correctedRotation / (fr2 - 2.0) * 2;
VBC2_PUSH_CONST 80 //stepRotation
VBC3_PUSH_GLOBAL 67 //correctedRotation
VBC3_PUSH_GLOBAL 12 //fr2
VBC5_PUSH_CONST 1073741824 
VBC1_SUB_IF
VBC1_DIV_FF
VBC1_PUSH_2 
VBC1_MUL_FI
VBC1_POP
[1:485] ;dx0Typical = correctedStepLenght / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 71 //dx0Typical
VBC3_PUSH_GLOBAL 50 //correctedStepLenght
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_POP
[1:486] ;dy0Typical = correctedSideLenght / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 72 //dy0Typical
VBC3_PUSH_GLOBAL 52 //correctedSideLenght
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_POP
[1:487] ;dobavka_x_ot_torsa = svIkA5 * 2.0 * sfMathSin(ugol_torsa) / fr2;
VBC2_PUSH_CONST 63 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC5_PUSH_CONST 1073741824 
VBC1_MUL_FF
VBC5_PUSH_CONST 301 | 0x80000000 //import func index sfMathSin
//alloc addon amount for result
VBC3_PUSH_GLOBAL 17 //ugol_torsa
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_DIV_FI
VBC1_POP
[1:489] ;xr = xl = bodyTiltAtWalk;
VBC2_PUSH_CONST 35 //xr
VBC2_PUSH_CONST 42 //xl
VBC3_PUSH_GLOBAL 15 //bodyTiltAtWalk
VBC1_STORE
VBC1_POP
[1:490] ;yl =  solyLandingSkew;
VBC2_PUSH_CONST 43 //yl
VBC3_PUSH_GLOBAL 16 //solyLandingSkew
VBC1_POP
[1:491] ;yr = -solyLandingSkew;
VBC2_PUSH_CONST 36 //yr
VBC3_PUSH_GLOBAL 16 //solyLandingSkew
VBC1_NEG_F
VBC1_POP
[1:492] ;fase_offset = 0.7; 
VBC2_PUSH_CONST 74 //fase_offset
VBC5_PUSH_CONST 1060320051 
VBC1_POP
[1:497] ;
VBC1_RETURN
;walkPhasa1 <void()>
[1:498] ;ztl = ztr = -gaitHeight;
VBC2_PUSH_CONST 41 //ztl
VBC2_PUSH_CONST 34 //ztr
VBC3_PUSH_GLOBAL 13 //gaitHeight
VBC1_NEG
VBC1_STORE_CF
VBC1_POP
[1:499] ;xtl_plan = correctedStepLenght * (0.5 - fr1 / (2.0 * fr1 + fr2)) - dobavka_x_ot_torsa * fr1 * fr2 / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 81 //xtl_plan
VBC3_PUSH_GLOBAL 50 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 11 //fr1
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_ADD_FI
VBC1_DIV_IF
VBC1_SUB_FF
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 63 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_MUL_FI
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:500] ;for( j = 0; j < fr1; j ++ ) {
VBC2_PUSH_CONST 68 //j
VBC1_PUSH_0 
VBC1_POP
LAB2990: //for condition
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_LESS
VBC4_FALSE_JUMP LAB3132 //to for exit
;
[1:502] ;s = (amplitude / 2 + correctedSideLenghtHalf) * sfMathCos(alpha01 * (j / 2 + fase_offset * framestep));
VBC2_PUSH_CONST 73 //s
VBC3_PUSH_GLOBAL 48 //amplitude
VBC1_PUSH_2 
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 53 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 49 //alpha01
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 74 //fase_offset
VBC3_PUSH_GLOBAL 31 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_MUL_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_MUL_FF
VBC1_POP
[1:503] ;ytr = s - d10 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 33 //ytr
VBC3_PUSH_GLOBAL 73 //s
VBC3_PUSH_GLOBAL 47 //d10
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 53 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
[1:504] ;ytl = s + d10 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 40 //ytl
VBC3_PUSH_GLOBAL 73 //s
VBC3_PUSH_GLOBAL 47 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 53 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
[1:505] ;if( stepType == 0 ) continue;
VBC3_PUSH_GLOBAL 60 //stepType
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB3079 //if to false
;if( stepType == 0 ) continue;
VBC4_JUMP LAB3125 //to loop condition
LAB3079: //if else
[1:506] ;dx1 = (xtl_plan - xtl) / (fr1 - j);
VBC2_PUSH_CONST 77 //dx1
VBC3_PUSH_GLOBAL 81 //xtl_plan
VBC3_PUSH_GLOBAL 39 //xtl
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 11 //fr1
VBC3_PUSH_GLOBAL 68 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:507] ;xtr += dx1;
VBC2_PUSH_CONST 32 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 77 //dx1
VBC1_ADD_FF
VBC1_POP
[1:508] ;xtl += dx1;
VBC2_PUSH_CONST 39 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 77 //dx1
VBC1_ADD_FF
VBC1_POP
[1:510] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 823  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB3125 //if to false
;return;
VBC1_RETURN
LAB3125: //if else
LAB3125: //for step
VBC2_PUSH_CONST 68 //j
VBC1_INC
VBC4_JUMP LAB2990 //to condition
LAB3132: //for exit
[1:517] ;
VBC1_RETURN
;walkPhasa3 <void()>
[1:518] ;ztl = ztr = -gaitHeight;
VBC2_PUSH_CONST 41 //ztl
VBC2_PUSH_CONST 34 //ztr
VBC3_PUSH_GLOBAL 13 //gaitHeight
VBC1_NEG
VBC1_STORE_CF
VBC1_POP
[1:519] ;xtr_plan = correctedStepLenght * (0.5 - fr1 / (2.0 * fr1 + fr2)) - dobavka_x_ot_torsa * fr1 * fr2 / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 82 //xtr_plan
VBC3_PUSH_GLOBAL 50 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 11 //fr1
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_ADD_FI
VBC1_DIV_IF
VBC1_SUB_FF
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 63 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_MUL_FI
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:520] ;for( j = 0; j < fr1; j ++ ) {
VBC2_PUSH_CONST 68 //j
VBC1_PUSH_0 
VBC1_POP
LAB3203: //for condition
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_LESS
VBC4_FALSE_JUMP LAB3336 //to for exit
;
[1:522] ;s = (amplitude / 2 + correctedSideLenghtHalf) * sfMathCos(alpha01 * ((j -fr2) / 2 + fase_offset * framestep));
VBC2_PUSH_CONST 73 //s
VBC3_PUSH_GLOBAL 48 //amplitude
VBC1_PUSH_2 
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 53 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 49 //alpha01
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_SUB
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 74 //fase_offset
VBC3_PUSH_GLOBAL 31 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_MUL_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_MUL_FF
VBC1_POP
[1:523] ;ytr = s - d10 - correctedSideLenghtHalf; 
VBC2_PUSH_CONST 33 //ytr
VBC3_PUSH_GLOBAL 73 //s
VBC3_PUSH_GLOBAL 47 //d10
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 53 //correctedSideLenghtHalf
VBC1_SUB_FF
VBC1_POP
[1:524] ;ytl = s + d10 + correctedSideLenghtHalf; 
VBC2_PUSH_CONST 40 //ytl
VBC3_PUSH_GLOBAL 73 //s
VBC3_PUSH_GLOBAL 47 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 53 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
[1:525] ;dx1 = (xtr_plan - xtr) / (fr1 - j);
VBC2_PUSH_CONST 77 //dx1
VBC3_PUSH_GLOBAL 82 //xtr_plan
VBC3_PUSH_GLOBAL 32 //xtr
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 11 //fr1
VBC3_PUSH_GLOBAL 68 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:526] ;xtr += dx1;
VBC2_PUSH_CONST 32 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 77 //dx1
VBC1_ADD_FF
VBC1_POP
[1:527] ;xtl += dx1;
VBC2_PUSH_CONST 39 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 77 //dx1
VBC1_ADD_FF
VBC1_POP
[1:529] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 823  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB3329 //if to false
;return;
VBC1_RETURN
LAB3329: //if else
LAB3329: //for step
VBC2_PUSH_CONST 68 //j
VBC1_INC
VBC4_JUMP LAB3203 //to condition
LAB3336: //for exit
[1:536] ;
VBC1_RETURN
;walkPhasa2 <void()>
[1:537] ;wr = 0; wl = 0;
VBC2_PUSH_CONST 38 //wr
VBC1_PUSH_0 
VBC1_POP_CF
[1:537] ;wr = 0; wl = 0;
VBC2_PUSH_CONST 45 //wl
VBC1_PUSH_0 
VBC1_POP_CF
[1:538] ;dy = correctedSideLenght / fr2;
VBC2_PUSH_CONST 76 //dy
VBC3_PUSH_GLOBAL 52 //correctedSideLenght
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_DIV_FI
VBC1_POP
[1:539] ;xtl_plan = correctedStepLenght * (0.5 - (fr1 + fr2) / (2.0 * fr1 + fr2)) + dobavka_x_ot_torsa * fr1 * fr2 / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 81 //xtl_plan
VBC3_PUSH_GLOBAL 50 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 11 //fr1
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_ADD_FI
VBC1_DIV_IF
VBC1_SUB_FF
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 63 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_MUL_FI
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_ADD_FF
VBC1_POP
[1:540] ;xtr_plan = correctedStepLenght * 0.5 + dx0Typical + dobavka_x_ot_torsa;
VBC2_PUSH_CONST 82 //xtr_plan
VBC3_PUSH_GLOBAL 50 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 71 //dx0Typical
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 63 //dobavka_x_ot_torsa
VBC1_ADD_FF
VBC1_POP
[1:541] ;for( j = 0; j < fr2; j ++ ) {
VBC2_PUSH_CONST 68 //j
VBC1_PUSH_0 
VBC1_POP
LAB3439: //for condition
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_LESS
VBC4_FALSE_JUMP LAB3763 //to for exit
;
[1:542] ;ztr = -gaitHeight + stepHeight;
VBC2_PUSH_CONST 34 //ztr
VBC3_PUSH_GLOBAL 13 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 14 //stepHeight
VBC1_ADD
VBC1_POP_CF
[1:543] ;dx2 = (xtl_plan - xtl) / (fr2 - j);
VBC2_PUSH_CONST 78 //dx2
VBC3_PUSH_GLOBAL 81 //xtl_plan
VBC3_PUSH_GLOBAL 39 //xtl
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 12 //fr2
VBC3_PUSH_GLOBAL 68 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:544] ;if (stepType == 0)
VBC3_PUSH_GLOBAL 60 //stepType
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB3517 //if to false
;tors_angle = sfFMathASin(dobavka_x_ot_torsa / svIkA5 * (j + 1) / 2);
VBC2_PUSH_CONST 64 //tors_angle
VBC5_PUSH_CONST 352 | 0x80000000 //import func index sfFMathASin
//alloc addon amount for result
VBC3_PUSH_GLOBAL 63 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_MUL_FI
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_POP
VBC4_JUMP LAB3552 //if to exit
LAB3517: //if else
;tors_angle = sfFMathASin(sfMathSin(-ugol_torsa) + dobavka_x_ot_torsa / svIkA5 * (j + 1));
VBC2_PUSH_CONST 64 //tors_angle
VBC5_PUSH_CONST 352 | 0x80000000 //import func index sfFMathASin
//alloc addon amount for result
VBC5_PUSH_CONST 301 | 0x80000000 //import func index sfMathSin
//alloc addon amount for result
VBC3_PUSH_GLOBAL 17 //ugol_torsa
VBC1_NEG_F
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC3_PUSH_GLOBAL 63 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_MUL_FI
VBC1_ADD_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_POP
LAB3552: //if exit
[1:548] ;if( j == 0 ) {
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB3592 //if to false
;
[1:549] ;xtr += dx2 - dobavka_x_ot_torsa;
VBC2_PUSH_CONST 32 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 78 //dx2
VBC3_PUSH_GLOBAL 63 //dobavka_x_ot_torsa
VBC1_SUB_FF
VBC1_ADD_FF
VBC1_POP
[1:550] ;ytr  = s - d10 + dy0Typical;
VBC2_PUSH_CONST 33 //ytr
VBC3_PUSH_GLOBAL 73 //s
VBC3_PUSH_GLOBAL 47 //d10
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 72 //dy0Typical
VBC1_ADD_FF
VBC1_POP
VBC4_JUMP LAB3728 //if to exit
LAB3592: //if else
;else if( j == (fr2 - 1) ) {
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_PUSH_1 
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB3642 //if to false
;
[1:553] ;xtr += dx2 - dobavka_x_ot_torsa;
VBC2_PUSH_CONST 32 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 78 //dx2
VBC3_PUSH_GLOBAL 63 //dobavka_x_ot_torsa
VBC1_SUB_FF
VBC1_ADD_FF
VBC1_POP
[1:554] ;ytr  = s - d10 + 2 * dy0Typical - correctedSideLenght;
VBC2_PUSH_CONST 33 //ytr
VBC3_PUSH_GLOBAL 73 //s
VBC3_PUSH_GLOBAL 47 //d10
VBC1_SUB_FF
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 72 //dy0Typical
VBC1_MUL_IF
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 52 //correctedSideLenght
VBC1_SUB_FF
VBC1_POP
VBC4_JUMP LAB3728 //if to exit
LAB3642: //if else
;
[1:557] ;if (j == 1)
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB3668 //if to false
;ztr = -gaitHeight + stepHeight / 2.0;
VBC2_PUSH_CONST 34 //ztr
VBC3_PUSH_GLOBAL 13 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 14 //stepHeight
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_IF
VBC1_ADD_IF
VBC1_POP
LAB3668: //if else
[1:559] ;dx = (xtr_plan - xtr) / (fr2 - j);
VBC2_PUSH_CONST 75 //dx
VBC3_PUSH_GLOBAL 82 //xtr_plan
VBC3_PUSH_GLOBAL 32 //xtr
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 12 //fr2
VBC3_PUSH_GLOBAL 68 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:560] ;xtr += dx;
VBC2_PUSH_CONST 32 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 75 //dx
VBC1_ADD_FF
VBC1_POP
[1:561] ;ytr  = s - 64 + dy0Typical - dy * fr2 / (fr2 - 2) * (j / 2);
VBC2_PUSH_CONST 33 //ytr
VBC3_PUSH_GLOBAL 73 //s
VBC2_PUSH_CONST 64 
VBC1_SUB_FI
VBC3_PUSH_GLOBAL 72 //dy0Typical
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 76 //dy
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_PUSH_2 
VBC1_SUB
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_2 
VBC1_DIV
VBC1_MUL_FI
VBC1_SUB_FF
VBC1_POP
LAB3728: //if exit
LAB3728: //if exit
[1:566] ;xtl += dx2;
VBC2_PUSH_CONST 39 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 78 //dx2
VBC1_ADD_FF
VBC1_POP
[1:567] ;ytl += dy0Typical;
VBC2_PUSH_CONST 40 //ytl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 72 //dy0Typical
VBC1_ADD_FF
VBC1_POP
[1:570] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 823  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB3756 //if to false
;return;
VBC1_RETURN
LAB3756: //if else
LAB3756: //for step
VBC2_PUSH_CONST 68 //j
VBC1_INC
VBC4_JUMP LAB3439 //to condition
LAB3763: //for exit
[1:576] ;
VBC1_RETURN
;walkPhasa4 <void()>
[1:580] ;wr = 0; wl = 0;
VBC2_PUSH_CONST 38 //wr
VBC1_PUSH_0 
VBC1_POP_CF
[1:580] ;wr = 0; wl = 0;
VBC2_PUSH_CONST 45 //wl
VBC1_PUSH_0 
VBC1_POP_CF
[1:581] ;dy = correctedSideLenght / (fr2 - 2.0);
VBC2_PUSH_CONST 76 //dy
VBC3_PUSH_GLOBAL 52 //correctedSideLenght
VBC3_PUSH_GLOBAL 12 //fr2
VBC5_PUSH_CONST 1073741824 
VBC1_SUB_IF
VBC1_DIV_FF
VBC1_POP
[1:582] ;if( stepType == 1 ) {
VBC3_PUSH_GLOBAL 60 //stepType
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB3809 //if to false
;
[1:583] ;xtr_plan = 0;
VBC2_PUSH_CONST 82 //xtr_plan
VBC1_PUSH_0 
VBC1_POP_CF
[1:584] ;xtl_plan = 0;
VBC2_PUSH_CONST 81 //xtl_plan
VBC1_PUSH_0 
VBC1_POP_CF
VBC4_JUMP LAB3889 //if to exit
LAB3809: //if else
;
[1:587] ;xtr_plan = correctedStepLenght * (0.5 - (fr1 + fr2) / (2.0 * fr1 + fr2)) + dobavka_x_ot_torsa * fr1 * fr2 / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 82 //xtr_plan
VBC3_PUSH_GLOBAL 50 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 11 //fr1
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_ADD_FI
VBC1_DIV_IF
VBC1_SUB_FF
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 63 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_MUL_FI
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 11 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_ADD_FF
VBC1_POP
[1:588] ;xtl_plan = correctedStepLenght * 0.5 + dx0Typical + dobavka_x_ot_torsa;
VBC2_PUSH_CONST 81 //xtl_plan
VBC3_PUSH_GLOBAL 50 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 71 //dx0Typical
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 63 //dobavka_x_ot_torsa
VBC1_ADD_FF
VBC1_POP
LAB3889: //if exit
[1:590] ;for( j = 0; j < fr2; j ++ ) {
VBC2_PUSH_CONST 68 //j
VBC1_PUSH_0 
VBC1_POP
LAB3893: //for condition
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_LESS
VBC4_FALSE_JUMP LAB4273 //to for exit
;
[1:591] ;ztl = -gaitHeight + stepHeight;
VBC2_PUSH_CONST 41 //ztl
VBC3_PUSH_GLOBAL 13 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 14 //stepHeight
VBC1_ADD
VBC1_POP_CF
[1:593] ;if( stepType == 1 && j == (fr2 - 1) ) {
VBC3_PUSH_GLOBAL 60 //stepType
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB3938
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_PUSH_1 
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB3938
VBC1_PUSH_1
LAB3938:
VBC4_FALSE_JUMP LAB3999 //if to false
;
[1:594] ;ztl = -gaitHeight;
VBC2_PUSH_CONST 41 //ztl
VBC3_PUSH_GLOBAL 13 //gaitHeight
VBC1_NEG
VBC1_POP_CF
[1:595] ;ytl = s + d10;
VBC2_PUSH_CONST 40 //ytl
VBC3_PUSH_GLOBAL 73 //s
VBC3_PUSH_GLOBAL 47 //d10
VBC1_ADD_FF
VBC1_POP
[1:596] ;tors_angle = sfFMathASin(sfMathSin(ugol_torsa) - dobavka_x_ot_torsa / svIkA5 * (j + 1) / 2);
VBC2_PUSH_CONST 64 //tors_angle
VBC5_PUSH_CONST 352 | 0x80000000 //import func index sfFMathASin
//alloc addon amount for result
VBC5_PUSH_CONST 301 | 0x80000000 //import func index sfMathSin
//alloc addon amount for result
VBC3_PUSH_GLOBAL 17 //ugol_torsa
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC3_PUSH_GLOBAL 63 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_MUL_FI
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_POP
VBC4_JUMP LAB4033 //if to exit
LAB3999: //if else
;else tors_angle = sfFMathASin(sfMathSin(ugol_torsa) - dobavka_x_ot_torsa / svIkA5 * (j + 1));
VBC2_PUSH_CONST 64 //tors_angle
VBC5_PUSH_CONST 352 | 0x80000000 //import func index sfFMathASin
//alloc addon amount for result
VBC5_PUSH_CONST 301 | 0x80000000 //import func index sfMathSin
//alloc addon amount for result
VBC3_PUSH_GLOBAL 17 //ugol_torsa
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC3_PUSH_GLOBAL 63 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_MUL_FI
VBC1_SUB_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_POP
LAB4033: //if exit
[1:599] ;dx4 = (xtr_plan - xtr) / (fr2 - j);
VBC2_PUSH_CONST 79 //dx4
VBC3_PUSH_GLOBAL 82 //xtr_plan
VBC3_PUSH_GLOBAL 32 //xtr
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 12 //fr2
VBC3_PUSH_GLOBAL 68 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:600] ;if( j == 0 ) {
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB4108 //if to false
;
[1:601] ;xtl += dx4 - dobavka_x_ot_torsa;
VBC2_PUSH_CONST 39 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 79 //dx4
VBC3_PUSH_GLOBAL 63 //dobavka_x_ot_torsa
VBC1_SUB_FF
VBC1_ADD_FF
VBC1_POP
[1:602] ;ytl = s + d10 + dy0Typical;
VBC2_PUSH_CONST 40 //ytl
VBC3_PUSH_GLOBAL 73 //s
VBC3_PUSH_GLOBAL 47 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 72 //dy0Typical
VBC1_ADD_FF
VBC1_POP
[1:603] ;ztl = -gaitHeight + stepHeight / 2.0;
VBC2_PUSH_CONST 41 //ztl
VBC3_PUSH_GLOBAL 13 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 14 //stepHeight
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_IF
VBC1_ADD_IF
VBC1_POP
VBC4_JUMP LAB4238 //if to exit
LAB4108: //if else
;else if( j == (fr2 - 1) ) {
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 12 //fr2
VBC1_PUSH_1 
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB4162 //if to false
;
[1:606] ;xtl += dx4 - dobavka_x_ot_torsa;
VBC2_PUSH_CONST 39 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 79 //dx4
VBC3_PUSH_GLOBAL 63 //dobavka_x_ot_torsa
VBC1_SUB_FF
VBC1_ADD_FF
VBC1_POP
[1:607] ;ytl  = s + d10 + dy0Typical * 2.0 - correctedSideLenght;
VBC2_PUSH_CONST 40 //ytl
VBC3_PUSH_GLOBAL 73 //s
VBC3_PUSH_GLOBAL 47 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 72 //dy0Typical
VBC5_PUSH_CONST 1073741824 
VBC1_MUL_FF
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 52 //correctedSideLenght
VBC1_SUB_FF
VBC1_POP
VBC4_JUMP LAB4238 //if to exit
LAB4162: //if else
;
[1:610] ;if (j == 1)
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB4188 //if to false
;ztl = -gaitHeight + stepHeight / 2.0;
VBC2_PUSH_CONST 41 //ztl
VBC3_PUSH_GLOBAL 13 //gaitHeight
VBC1_NEG
VBC3_PUSH_GLOBAL 14 //stepHeight
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_IF
VBC1_ADD_IF
VBC1_POP
LAB4188: //if else
[1:612] ;dx = (xtl_plan - xtl) / (fr2 - j);
VBC2_PUSH_CONST 75 //dx
VBC3_PUSH_GLOBAL 81 //xtl_plan
VBC3_PUSH_GLOBAL 39 //xtl
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 12 //fr2
VBC3_PUSH_GLOBAL 68 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:613] ;xtl += dx;
VBC2_PUSH_CONST 39 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 75 //dx
VBC1_ADD_FF
VBC1_POP
[1:614] ;ytl  = s + 64 + dy0Typical - dy * j / 2;
VBC2_PUSH_CONST 40 //ytl
VBC3_PUSH_GLOBAL 73 //s
VBC2_PUSH_CONST 64 
VBC1_ADD_FI
VBC3_PUSH_GLOBAL 72 //dy0Typical
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 76 //dy
VBC3_PUSH_GLOBAL 68 //j
VBC1_MUL_FI
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
LAB4238: //if exit
LAB4238: //if exit
[1:619] ;xtr += dx4;
VBC2_PUSH_CONST 32 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 79 //dx4
VBC1_ADD_FF
VBC1_POP
[1:620] ;ytr += dy0Typical;
VBC2_PUSH_CONST 33 //ytr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 72 //dy0Typical
VBC1_ADD_FF
VBC1_POP
[1:623] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 823  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB4266 //if to false
;return;
VBC1_RETURN
LAB4266: //if else
LAB4266: //for step
VBC2_PUSH_CONST 68 //j
VBC1_INC
VBC4_JUMP LAB3893 //to condition
LAB4273: //for exit
[1:632] ;
VBC1_RETURN
;walkCycle <void(,int)>
VBC2_STACK -4//local vars 4
[1:634] ;
[1:634] ;float xrOld = xr;
VBC2_PUSH_B_OFFSET -1 //xrOld
VBC3_PUSH_GLOBAL 35 //xr
VBC1_POP
[1:635] ;
[1:635] ;float yrOld = yr;
VBC2_PUSH_B_OFFSET -2 //yrOld
VBC3_PUSH_GLOBAL 36 //yr
VBC1_POP
[1:636] ;
[1:636] ;float xlOld = xl;
VBC2_PUSH_B_OFFSET -3 //xlOld
VBC3_PUSH_GLOBAL 42 //xl
VBC1_POP
[1:637] ;
[1:637] ;float ylOld = yl;
VBC2_PUSH_B_OFFSET -4 //ylOld
VBC3_PUSH_GLOBAL 43 //yl
VBC1_POP
[1:640] ;walkInit();
VBC3_PUSH_CONST 2776  //func address walkInit
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:641] ;walkPhasa1();
VBC3_PUSH_CONST 2920  //func address walkPhasa1
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:642] ;walkPhasa2();
VBC3_PUSH_CONST 3337  //func address walkPhasa2
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:643] ;if (half == 0){
VBC2_PUSH_LOCAL 2 //half
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB4333 //if to false
;
[1:644] ;walkPhasa3();
VBC3_PUSH_CONST 3133  //func address walkPhasa3
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:645] ;walkPhasa4();
VBC3_PUSH_CONST 3764  //func address walkPhasa4
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB4333: //if else
[1:649] ;xr = xrOld;
VBC2_PUSH_CONST 35 //xr
VBC2_PUSH_LOCAL -1 //xrOld
VBC1_POP
[1:650] ;yr = yrOld;
VBC2_PUSH_CONST 36 //yr
VBC2_PUSH_LOCAL -2 //yrOld
VBC1_POP
[1:651] ;xl = xlOld;
VBC2_PUSH_CONST 42 //xl
VBC2_PUSH_LOCAL -3 //xlOld
VBC1_POP
[1:652] ;yl = ylOld;
VBC2_PUSH_CONST 43 //yl
VBC2_PUSH_LOCAL -4 //ylOld
VBC1_POP
[1:656] ;
VBC1_RETURN
;mixing <void()>
[1:661] ;leftRightFactor = 100;
VBC2_PUSH_CONST 84 //leftRightFactor
VBC2_PUSH_CONST 100 
VBC1_POP
[1:662] ;frontBackFactor = 180;
VBC2_PUSH_CONST 85 //frontBackFactor
VBC3_PUSH_CONST 180 
VBC1_POP
[1:664] ;while(1) {
LAB4365: //while condition
;
[1:666] ;leftFootSideAddonMix = -svImuGyroZ * leftRightFactor >> 10;
VBC3_PUSH_CONST 1117 //leftFootSideAddonMix
VBC3_PUSH_GLOBAL 1008 //svImuGyroZ
VBC1_NEG
VBC3_PUSH_GLOBAL 84 //leftRightFactor
VBC1_MUL
VBC2_PUSH_CONST 10 
VBC1_RSHIFT
VBC1_POP
[1:667] ;rightFootSideAddonMix = svImuGyroZ * leftRightFactor >> 10;
VBC3_PUSH_CONST 1113 //rightFootSideAddonMix
VBC3_PUSH_GLOBAL 1008 //svImuGyroZ
VBC3_PUSH_GLOBAL 84 //leftRightFactor
VBC1_MUL
VBC2_PUSH_CONST 10 
VBC1_RSHIFT
VBC1_POP
[1:670] ;rightFootFrontAddonMix = leftFootFrontAddonMix = -svImuGyroX * frontBackFactor >> 10;
VBC3_PUSH_CONST 1105 //rightFootFrontAddonMix
VBC3_PUSH_CONST 1109 //leftFootFrontAddonMix
VBC3_PUSH_GLOBAL 1006 //svImuGyroX
VBC1_NEG
VBC3_PUSH_GLOBAL 85 //frontBackFactor
VBC1_MUL
VBC2_PUSH_CONST 10 
VBC1_RSHIFT
VBC1_STORE
VBC1_POP
[1:673] ;sfWaitNextFrame();
VBC1_WAIT
VBC4_JUMP LAB4365 //while forever loop
LAB4418: //while exit
[1:677] ;
VBC1_RETURN
;runTest <void()>
VBC1_STACK_DN1//local vars 1
[1:679] ;walkInitialPoseFine();
VBC3_PUSH_CONST 2550  //func address walkInitialPoseFine
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:683] ;stepType = 0;
VBC2_PUSH_CONST 60 //stepType
VBC1_PUSH_0 
VBC1_POP
[1:684] ;stepLength = stepLengthOrder/ 3.0;
VBC2_PUSH_CONST 19 //stepLength
VBC3_PUSH_GLOBAL 9 //stepLengthOrder
VBC5_PUSH_CONST 1077936128 
VBC1_DIV_IF
VBC1_POP
[1:685] ;walkCycle(0);
VBC3_PUSH_CONST 4274  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:688] ;stepType = 2;
VBC2_PUSH_CONST 60 //stepType
VBC1_PUSH_2 
VBC1_POP
[1:689] ;stepLength = stepLengthOrder * 2.0 / 3.0;
VBC2_PUSH_CONST 19 //stepLength
VBC3_PUSH_GLOBAL 9 //stepLengthOrder
VBC5_PUSH_CONST 1073741824 
VBC1_MUL_IF
VBC5_PUSH_CONST 1077936128 
VBC1_DIV_FF
VBC1_POP
[1:690] ;walkCycle(0);
VBC3_PUSH_CONST 4274  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:693] ;stepLength = stepLengthOrder * 1.0;
VBC2_PUSH_CONST 19 //stepLength
VBC3_PUSH_GLOBAL 9 //stepLengthOrder
VBC5_PUSH_CONST 1065353216 
VBC1_MUL_IF
VBC1_POP
[1:694] ;
[1:695] ;for( i = 0; i < cycle_number; i++ ){
VBC2_PUSH_B_OFFSET -1 //i
VBC1_PUSH_0 
VBC1_POP
LAB4491: //for condition
VBC2_PUSH_LOCAL -1 //i
VBC3_PUSH_GLOBAL 7 //cycle_number
VBC1_LESS
VBC4_FALSE_JUMP LAB4533 //to for exit
;
[1:696] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 615  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:697] ;walkCycle(0);
VBC3_PUSH_CONST 4274  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:698] ;if(orderFromHead == 4) break;
VBC3_PUSH_GLOBAL 4 //orderFromHead
VBC2_PUSH_CONST 4 
VBC1_EQU
VBC4_FALSE_JUMP LAB4526 //if to false
;if(orderFromHead == 4) break;
VBC4_JUMP LAB4533 //to loop exit
LAB4526: //if else
LAB4526: //for step
VBC2_PUSH_B_OFFSET -1 //i
VBC1_INC
VBC4_JUMP LAB4491 //to condition
LAB4533: //for exit
[1:701] ;stepType = 1;
VBC2_PUSH_CONST 60 //stepType
VBC1_PUSH_1 
VBC1_POP
[1:702] ;walkCycle(0);
VBC3_PUSH_CONST 4274  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:705] ;walkFinalPoseFine();
VBC3_PUSH_CONST 2716  //func address walkFinalPoseFine
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:708] ;
VBC1_RETURN
;main <void()>
VBC1_STACK_DN1//local vars 1
[1:709] ;restart_flag = 0;
VBC1_PUSH_2 //restart_flag
VBC1_PUSH_0 
VBC1_POP
[1:710] ;pitStop = 0;
VBC2_PUSH_CONST 5 //pitStop
VBC1_PUSH_0 
VBC1_POP
[1:711] ;startStop = 0;
VBC2_PUSH_CONST 6 //startStop
VBC1_PUSH_0 
VBC1_POP
[1:712] ;slowWalk = 0;
VBC2_PUSH_CONST 18 //slowWalk
VBC1_PUSH_0 
VBC1_POP
[1:713] ;setup();
VBC2_PUSH_CONST 70  //func address setup
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:714] ;sideLength = 0;
VBC2_PUSH_CONST 20 //sideLength
VBC1_PUSH_0 
VBC1_POP_CF
[1:715] ;rotation = 0;
VBC2_PUSH_CONST 21 //rotation
VBC1_PUSH_0 
VBC1_POP_CF
[1:717] ;
[1:717] ;int frameCount = 80;
VBC2_PUSH_B_OFFSET -1 //frameCount
VBC2_PUSH_CONST 80 
VBC1_POP
[1:718] ;sfPoseGroup(1056964607 , 0, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 1056964607 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:719] ;sfWaitFrame( frameCount );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:722] ;sfQuaternionToEulerImu();
VBC5_PUSH_CONST 303 | 0x80000000 //import func index sfQuaternionToEulerImu
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:723] ;forwardDirection = svEulerYaw;
VBC2_PUSH_CONST 66 //forwardDirection
VBC3_PUSH_GLOBAL 1025 //svEulerYaw
VBC1_POP
[1:726] ;sfCreateTask( mixing, 20 );
VBC5_PUSH_CONST 2 | 0x80000000 //import func index sfCreateTask
VBC3_PUSH_CONST 4354  //func address mixing
VBC2_PUSH_CONST 20 
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
[1:727] ;while (pitStop == 0) sfWaitFrame(1); 
LAB4628: //while condition
VBC3_PUSH_GLOBAL 5 //pitStop
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB4646 //while to exit
;while (pitStop == 0) sfWaitFrame(1); 
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC1_PUSH_1 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
VBC4_JUMP LAB4628 //while forever loop
LAB4646: //while exit
[1:729] ;svButtonRight = -1 ;
VBC3_PUSH_CONST 1022 //svButtonRight
VBC2_PUSH_CONST -1 // -
VBC1_POP
[1:730] ;svButtonLeft = -1 ;
VBC3_PUSH_CONST 1021 //svButtonLeft
VBC2_PUSH_CONST -1 // -
VBC1_POP
[1:731] ;sfBip(1, 1);
VBC5_PUSH_CONST 43 | 0x80000000 //import func index sfBip
VBC1_PUSH_1 
VBC1_PUSH_1 
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
[1:732] ;while (svButtonPress != 2 ) sfWaitFrame(1); 
LAB4667: //while condition
VBC3_PUSH_GLOBAL 1023 //svButtonPress
VBC1_PUSH_2 
VBC1_NOT_EQU
VBC4_FALSE_JUMP LAB4685 //while to exit
;while (svButtonPress != 2 ) sfWaitFrame(1); 
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC1_PUSH_1 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
VBC4_JUMP LAB4667 //while forever loop
LAB4685: //while exit
[1:733] ;svButtonRight = 66 ;
VBC3_PUSH_CONST 1022 //svButtonRight
VBC2_PUSH_CONST 66 
VBC1_POP
[1:734] ;svButtonLeft = 69 ;
VBC3_PUSH_CONST 1021 //svButtonLeft
VBC2_PUSH_CONST 69 
VBC1_POP
[1:735] ;restart_flag = 1;
VBC1_PUSH_2 //restart_flag
VBC1_PUSH_1 
VBC1_POP
[1:737] ;runTest(); 
VBC3_PUSH_CONST 4419  //func address runTest
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:739] ;
VBC1_RETURN
//Init table
//Variables
svFrameCount : 1
svImuAccX : 1000
svImuAccY : 1001
svImuAccZ : 1002
svImuAccRawX : 1003
svImuAccRawY : 1004
svImuAccRawZ : 1005
svImuGyroX : 1006
svImuGyroY : 1007
svImuGyroZ : 1008
svImuGyroRawX : 1009
svImuGyroRawY : 1010
svImuGyroRawZ : 1011
svImuQuaterX : 1012
svImuQuaterY : 1013
svImuQuaterZ : 1014
svImuQuaterW : 1015
svImuQuaterAcc : 1016
svImuAccSlowX : 1017
svImuAccSlowY : 1018
svImuAccSlowZ : 1019
svAdc : 1020
svButtonLeft : 1021
svButtonRight : 1022
svButtonPress : 1023
svHeadControlMask : 1024
svEulerYaw F: 1025
svEulerPitch F: 1026
svEulerRoll F: 1027
svRemoteStatus : 1190
svRemoteButton : 1191
svRemoteLeftJoystick : 1192
svRemoteLeftJoystickX : 1193
svRemoteLeftJoystickY : 1194
svRemoteRightJoystick : 1195
svRemoteRightJoystickX : 1196
svRemoteRightJoystickY : 1197
svHumoModelDistPelvic : 1204
svHumoModelLengthPelvicHip : 1205
svHumoModelLengthHipHip : 1206
svHumoModelLengthHipKnee : 1207
svHumoModelLengthKneeFoot : 1208
svHumoModelLengthFootFoot : 1209
svHumoModelDistFootFloor : 1210
svHumoModelFootLength : 1211
svHumoModelFootWidth : 1212
svHumoModelFootCenterBack : 1213
svHumoModelFootCenterInner : 1214
svHumoModelAngPelvic : 1198
svHumoModelAngHipSide : 1200
svHumoModelAngHip : 1199
svHumoModelAngKnee : 1201
svHumoModelAngFoot : 1202
svHumoModelAngFootSide : 1203
svIkA5 F: 1215
svIkB5 F: 1216
svIkC5 F: 1217
svIkA6 F: 1218
svIkA7 F: 1219
svIkA8 F: 1220
svIkA9 F: 1221
svIkA10 F: 1222
svIkB10 F: 1223
svIkC10 F: 1224
svIkLimA5min F: 1225
svIkLimA5max F: 1226
svIkLimA6min F: 1227
svIkLimA6max F: 1228
svIkLimA7min F: 1229
svIkLimA7max F: 1230
svIkLimA8min F: 1231
svIkLimA8max F: 1232
svIkLimA9min F: 1233
svIkLimA9max F: 1234
svIkLimA10min F: 1235
svIkLimA10max F: 1236
svIkOutPresent : 1237
svIkEncA5 : 1238
svIkEncA6 : 1239
svIkEncA7 : 1240
svIkEncA8 : 1241
svIkEncA9 : 1242
svIkEncA10 : 1243
headRotateTarget : 1030
headRotateCurrent : 1031
headRotatePwm : 1032
headRotateAddonMix : 1033
torsoRotateTarget : 1034
torsoRotateCurrent : 1035
torsoRotatePwm : 1036
torsoRotateAddonMix : 1037
rightClavicleTarget : 1038
rightClavicleCurrent : 1039
rightClaviclePwm : 1040
rightClavicleAddonMix : 1041
leftClavicleTarget : 1042
leftClavicleCurrent : 1043
leftClaviclePwm : 1044
leftClavicleAddonMix : 1045
rightShoulderTarget : 1046
rightShoulderCurrent : 1047
rightShoulderPwm : 1048
rightShoulderAddonMix : 1049
leftShoulderTarget : 1050
leftShoulderCurrent : 1051
leftShoulderPwm : 1052
leftShoulderAddonMix : 1053
rightElbowSideTarget : 1054
rightElbowSideCurrent : 1055
rightElbowSidePwm : 1056
rightElbowSideAddonMix : 1057
leftElbowSideTarget : 1058
leftElbowSideCurrent : 1059
leftElbowSidePwm : 1060
leftElbowSideAddonMix : 1061
rightElbowTarget : 1062
rightElbowCurrent : 1063
rightElbowPwm : 1064
rightElbowAddonMix : 1065
leftElbowTarget : 1066
leftElbowCurrent : 1067
leftElbowPwm : 1068
leftElbowAddonMix : 1069
rightPelvicTarget : 1070
rightPelvicCurrent : 1071
rightPelvicPwm : 1072
rightPelvicAddonMix : 1073
leftPelvicTarget : 1074
leftPelvicCurrent : 1075
leftPelvicPwm : 1076
leftPelvicAddonMix : 1077
rightHipSideTarget : 1078
rightHipSideCurrent : 1079
rightHipSidePwm : 1080
rightHipSideAddonMix : 1081
leftHipSideTarget : 1082
leftHipSideCurrent : 1083
leftHipSidePwm : 1084
leftHipSideAddonMix : 1085
rightHipTarget : 1086
rightHipCurrent : 1087
rightHipPwm : 1088
rightHipAddonMix : 1089
leftHipTarget : 1090
leftHipCurrent : 1091
leftHipPwm : 1092
leftHipAddonMix : 1093
rightKneeTarget : 1094
rightKneeCurrent : 1095
rightKneePwm : 1096
rightKneeAddonMix : 1097
leftKneeTarget : 1098
leftKneeCurrent : 1099
leftKneePwm : 1100
leftKneeAddonMix : 1101
rightFootFrontTarget : 1102
rightFootFrontCurrent : 1103
rightFootFrontPwm : 1104
rightFootFrontAddonMix : 1105
leftFootFrontTarget : 1106
leftFootFrontCurrent : 1107
leftFootFrontPwm : 1108
leftFootFrontAddonMix : 1109
rightFootSideTarget : 1110
rightFootSideCurrent : 1111
rightFootSidePwm : 1112
rightFootSideAddonMix : 1113
leftFootSideTarget : 1114
leftFootSideCurrent : 1115
leftFootSidePwm : 1116
leftFootSideAddonMix : 1117
rightHandTarget : 1118
rightHandCurrent : 1119
rightHandPwm : 1120
rightHandAddonMix : 1121
leftHandTarget : 1122
leftHandCurrent : 1123
leftHandPwm : 1124
leftHandAddonMix : 1125
headTiltTarget : 1130
headTiltCurrent : 1131
headTiltPwm : 1132
headTiltAddonMix : 1133
rightKneeBotTarget : 1134
rightKneeBotCurrent : 1135
rightKneeBotPwm : 1136
rightKneeBotAddonMix : 1137
leftKneeBotTarget : 1138
leftKneeBotCurrent : 1139
leftKneeBotPwm : 1140
leftKneeBotAddonMix : 1141
rightClawTarget : 1142
rightClawCurrent : 1143
rightClawPwm : 1144
rightClawAddonMix : 1145
leftClawTarget : 1146
leftClawCurrent : 1147
leftClawPwm : 1148
leftClawAddonMix : 1149
restart_flag : 2
timeStep : 3
orderFromHead : 4
pitStop : 5
startStop : 6
cycle_number : 7
hipTilt : 8
stepLengthOrder : 9
fps : 10
fr1 : 11
fr2 : 12
gaitHeight : 13
stepHeight : 14
bodyTiltAtWalk F: 15
solyLandingSkew F: 16
ugol_torsa F: 17
slowWalk : 18
stepLength F: 19
sideLength F: 20
rotation F: 21
selfFirstLegIsRightLeg : 22
motion_to_right : 23
side_motion F: 24
selfInitPoses : 25
selfExitFlag : 26
selfFallingFlag : 27
selfNeckPan : 28
rotationYieldRight F: 29
rotationYieldLeft F: 30
framestep : 31
xtr F: 32
ytr F: 33
ztr F: 34
xr F: 35
yr F: 36
zr F: 37
wr F: 38
xtl F: 39
ytl F: 40
ztl F: 41
xl F: 42
yl F: 43
zl F: 44
wl F: 45
e10 F: 46
d10 F: 47
amplitude F: 48
alpha01 F: 49
correctedStepLenght F: 50
correctedStepLenghtHalf F: 51
correctedSideLenght F: 52
correctedSideLenghtHalf F: 53
ztr0 F: 54
ztl0 F: 55
stepZtr F: 56
stepZtl F: 57
stepYtr F: 58
stepYtl F: 59
stepType : 60
flag : 61
flag_event : 62
dobavka_x_ot_torsa F: 63
tors_angle F: 64
torsoAdd : 65
forwardDirection F: 66
correctedRotation F: 67
j : 68
xtl0 F: 69
xtr0 F: 70
dx0Typical F: 71
dy0Typical F: 72
s F: 73
fase_offset F: 74
dx F: 75
dy F: 76
dx1 F: 77
dx2 F: 78
dx4 F: 79
stepRotation F: 80
xtl_plan F: 81
xtr_plan F: 82
dx0 F: 83
leftRightFactor : 84
frontBackFactor : 85
