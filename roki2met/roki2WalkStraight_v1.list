//====================================================================
//      SvCompiler V9.06
//By A.Sibilev
//====================================================================
//cblock

;sfVpuVersion <int()>
;sfCreateTask <int(,*<void()>,int)>
;sfLog <void(,cstring,int,int,int)>
;sfLogOpen <void(,cstring)>
;sfLogClose <void()>
;sfWaitFrameOut <void(,int)>
;sfIsFrameOut <int(,int)>
;sfWaitNextFrame <void()>
;sfSlotIndex <int(,cstring)>
;sfSoundIndex <int(,cstring)>
;sfAbs <int(,int)>
;sfIMin <int(,int,int)>
;sfIMax <int(,int,int)>
;sfUMin <int(,int,int)>
;sfUMax <int(,int,int)>
;sfILimit <int(,int,int,int)>
;sfStop <void()>
;sfStartSlot <void(,int)>
;sfBip <void(,int,int)>
;sfWriteFlash <void()>
;sfSoundPlay <void(,int)>
;sfSoundIsPlay <int()>
;sfFreeGroup <void(,int)>
;sfPoseGroup <void(,int,int,int)>
;sfPoseGroupDelay <void(,int,int,int,int)>
;sfPoseCorrect <void(,int,int)>
;sfQueueGroup <void(,int,int,int)>
;sfPoseIdx <void(,int,int,int)>
;sfPoseGroupLin <void(,int,int,int)>
;sfStrainGroup <void(,int)>
;sfPlaySamples <void(,int,int,int,*cblock)>
;sfPlayWSamples <void(,int,int,int,*cwblock)>
;sfAccumSetup1 <void(,*int)>
;sfAccumSetup2 <void(,*int,*int)>
;sfAccumSetup3 <void(,*int,*int,*int)>
;sfAccumSetup4 <void(,*int,*int,*int,*int)>
;sfAccumTrigger <void()>
;sfAccumReset <void()>
;sfUnitParamQueryRead <int(,int,int)>
;sfUnitParamQueryWrite <int(,int,int,int)>
;sfUnitParamStatusRead <int(,int,int,*int)>
;sfMathAcos <int(,int,int)>
;sfMathSqrti <int(,int)>
;sfMathAngleOfTriangle <int(,int,int,int)>
;sfMathAngleOfKnee <int(,int,int,int)>
;sfMathCathetOfSquareTriangle <int(,int,int)>
;sfMathHypotenuseOfSquareTriangle <int(,int,int)>
;sfMathTableSin <int(,int,int)>
;sfHumoModelSetup <void()>
;sfHumoModelFootAtFloor <void(,int,int,int)>
;sfHumoModelFootPush <void(,int,int,int)>
;sfIndexOfMask <int(,int)>
;sfQueueIdxAppend <int(,int,int,int)>
;sfQueueIdxOffsets <int(,int,int,*cblock,int)>
;sfQueueIdxSinMove <int(,int,int,int,int)>
;sfQueueIdxLast <int(,int)>
;sfQueueIdxCount <int(,int)>
;sfQueueMax <int()>
;sfIkSetup <void()>
;sfIkAngle <void(,float,float,float,float,float,float,float)>
;sfMathCos <float(,float)>
;sfMathSin <float(,float)>
;sfQuaternionToEuler <void(,float,float,float,float)>
;sfQuaternionToEulerImu <void()>
;sfFMathACos <float(,float)>
;sfFMathASin <float(,float)>
;sfFMathATan <float(,float)>
;sfFMathATan2 <float(,float,float)>
;sfFMathCos <float(,float)>
;sfFMathSin <float(,float)>
;sfFMathTan <float(,float)>
;sfFMathCosh <float(,float)>
;sfFMathSinh <float(,float)>
;sfFMathTanh <float(,float)>
;sfFMathExp <float(,float)>
;sfFMathFrExp <float(,float,*int)>
;sfFMathLdExp <float(,float,int)>
;sfFMathLog <float(,float)>
;sfFMathLog10 <float(,float)>
;sfFMathModf <float(,float,*float)>
;sfFMathPow <float(,float,float)>
;sfFMathSqrt <float(,float)>
;sfFMathCeil <float(,float)>
;sfFMathFAbs <float(,float)>
;sfFMathFloor <float(,float)>
;sfFMathFMod <float(,float,float)>
;sfQuaternionToMatrix <void(,*:SfMatrix3x3,float,float,float,float)>
;sfQuaternionToMatrixImu <void(,*:SfMatrix3x3)>
;sfGravityVector <void(,*:SfVector3)>
;sfVec3Set <void(,*:SfVector3,float,float,float)>
;sfVec3Sum <void(,*:SfVector3,*:SfVector3,*:SfVector3)>
;sfVec3Diff <void(,*:SfVector3,*:SfVector3,*:SfVector3)>
;sfVec3MulRowColCx <float(,*:SfVector3,float,float,float)>
;sfVec3MulRowCol <float(,*:SfVector3,*:SfVector3)>
;sfVec3ScSum <void(,*:SfVector3,*:SfVector3,float)>
;sfVec3ScDiff <void(,*:SfVector3,*:SfVector3,float)>
;sfVec3ScMul <void(,*:SfVector3,*:SfVector3,float)>
;sfVec3ScDiv <void(,*:SfVector3,*:SfVector3,float)>
;sfMat3x3Set <void(,*:SfMatrix3x3,float,float,float,float,float,float,float,float,float)>
;sfMat3x3SetAll <void(,*:SfMatrix3x3,float)>
;sfMat3x3SetDiag <void(,*:SfMatrix3x3,float)>
;sfMat3x3Copy <void(,*:SfMatrix3x3,*:SfMatrix3x3)>
;sfMat3x3Transpose <void(,*:SfMatrix3x3,*:SfMatrix3x3)>
;sfMat3x3Mul <void(,*:SfMatrix3x3,*:SfMatrix3x3,*:SfMatrix3x3)>
;sfMat3x3ScMul <void(,*:SfMatrix3x3,*:SfMatrix3x3,float)>
;sfMat3x3MulCol <void(,*:SfVector3,*:SfMatrix3x3,*:SfVector3)>
;sfMat3x3RowMul <void(,*:SfVector3,*:SfVector3,*:SfMatrix3x3)>
;sfWaitFrame <void(,int)>
[3:491] ;sfWaitFrameOut( frame + svFrameCount );
VBC5_PUSH_CONST 17 | 0x80000000 //import func index sfWaitFrameOut
VBC2_PUSH_LOCAL 2 //frame
VBC3_PUSH_GLOBAL 1 //svFrameCount
VBC1_ADD
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[3:497] ;
VBC1_RETURN
;sfUnitParamRead <int(,int,int,*int)>
[3:499] ;if( !sfUnitParamQueryRead( devId, paramIndex ) )
VBC5_PUSH_CONST 66 | 0x80000000 //import func index sfUnitParamQueryRead
VBC2_PUSH_LOCAL 4 //devId
VBC2_PUSH_LOCAL 3 //paramIndex
VBC1_CALL2
VBC1_STACK_UP2//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB90 //if to false
;return 0;
VBC1_PUSH_0 
VBC2_POP_RESULT 5
VBC1_RETURN
LAB90: //if else
[3:503] ;sfWaitNextFrame();
VBC1_WAIT
[3:504] ;sfWaitNextFrame();
VBC1_WAIT
[3:505] ;return sfUnitParamStatusRead( devId, paramIndex, paramValue );
VBC5_PUSH_CONST 68 | 0x80000000 //import func index sfUnitParamStatusRead
VBC2_PUSH_LOCAL 4 //devId
VBC2_PUSH_LOCAL 3 //paramIndex
VBC2_PUSH_LOCAL 2 //paramValue
VBC1_CALL3
VBC1_STACK_UP3//remove call address and params
VBC2_POP_RESULT 5
VBC1_RETURN
;parabaloid_list_creator <void()>
[1:93] ;segments_num = fr2 / framestep - 2;
VBC2_PUSH_CONST 60 //segments_num
VBC3_PUSH_GLOBAL 40 //fr2
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_DIV
VBC1_PUSH_2 
VBC1_SUB
VBC1_POP
[1:94] ;segments_sum = 0;
VBC3_PUSH_CONST 161 //segments_sum
VBC1_PUSH_0 
VBC1_POP
[1:95] ;for( j = 0; j < segments_num; j ++ ) {
VBC3_PUSH_CONST 162 //j
VBC1_PUSH_0 
VBC1_POP
LAB130: //for condition
VBC3_PUSH_GLOBAL 162 //j
VBC3_PUSH_GLOBAL 60 //segments_num
VBC1_LESS
VBC4_FALSE_JUMP LAB311 //to for exit
;
[1:96] ;if (j == 0 || j ==  segments_num -1){
VBC3_PUSH_GLOBAL 162 //j
VBC1_PUSH_0 
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB164
VBC3_PUSH_GLOBAL 162 //j
VBC3_PUSH_GLOBAL 60 //segments_num
VBC1_PUSH_1 
VBC1_SUB
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB164
VBC1_PUSH_0
LAB164:
VBC4_FALSE_JUMP LAB180 //if to false
;
[1:97] ;segments[j] = 1;
VBC2_PUSH_CONST 61 //segments
//array address
VBC3_PUSH_GLOBAL 162 //j
//array index
VBC1_ADD //array cell address
VBC1_PUSH_1 
VBC1_POP
VBC4_JUMP LAB289 //if to exit
LAB180: //if else
;else if(j * 2 < segments_num){
VBC3_PUSH_GLOBAL 162 //j
VBC1_PUSH_2 
VBC1_MUL
VBC3_PUSH_GLOBAL 60 //segments_num
VBC1_LESS
VBC4_FALSE_JUMP LAB240 //if to false
;
[1:100] ;segments[j] = 1;
VBC2_PUSH_CONST 61 //segments
//array address
VBC3_PUSH_GLOBAL 162 //j
//array index
VBC1_ADD //array cell address
VBC1_PUSH_1 
VBC1_POP
[1:101] ;for (i = 0; i < j; i++){
VBC3_PUSH_CONST 163 //i
VBC1_PUSH_0 
VBC1_POP
LAB206: //for condition
VBC3_PUSH_GLOBAL 163 //i
VBC3_PUSH_GLOBAL 162 //j
VBC1_LESS
VBC4_FALSE_JUMP LAB236 //to for exit
;
[1:102] ;segments[j] *= 2;
VBC2_PUSH_CONST 61 //segments
//array address
VBC3_PUSH_GLOBAL 162 //j
//array index
VBC1_ADD //array cell address
VBC1_PUSH_TOS
VBC1_LOAD
VBC1_PUSH_2 
VBC1_MUL
VBC1_POP
LAB228: //for step
VBC3_PUSH_CONST 163 //i
VBC1_INC
VBC4_JUMP LAB206 //to condition
LAB236: //for exit
VBC4_JUMP LAB289 //if to exit
LAB240: //if else
;
[1:106] ;segments[j] = 1;
VBC2_PUSH_CONST 61 //segments
//array address
VBC3_PUSH_GLOBAL 162 //j
//array index
VBC1_ADD //array cell address
VBC1_PUSH_1 
VBC1_POP
[1:107] ;for (i = 0; i < (segments_num - j -1); i++){
VBC3_PUSH_CONST 163 //i
VBC1_PUSH_0 
VBC1_POP
LAB253: //for condition
VBC3_PUSH_GLOBAL 163 //i
VBC3_PUSH_GLOBAL 60 //segments_num
VBC3_PUSH_GLOBAL 162 //j
VBC1_SUB
VBC1_PUSH_1 
VBC1_SUB
VBC1_LESS
VBC4_FALSE_JUMP LAB289 //to for exit
;
[1:108] ;segments[j] *= 2;
VBC2_PUSH_CONST 61 //segments
//array address
VBC3_PUSH_GLOBAL 162 //j
//array index
VBC1_ADD //array cell address
VBC1_PUSH_TOS
VBC1_LOAD
VBC1_PUSH_2 
VBC1_MUL
VBC1_POP
LAB281: //for step
VBC3_PUSH_CONST 163 //i
VBC1_INC
VBC4_JUMP LAB253 //to condition
LAB289: //for exit
LAB289: //if exit
LAB289: //if exit
[1:111] ;segments_sum += segments[j];
VBC3_PUSH_CONST 161 //segments_sum
VBC1_PUSH_TOS
VBC1_LOAD
VBC2_PUSH_CONST 61 //segments
//array address
VBC3_PUSH_GLOBAL 162 //j
//array index
VBC1_ADD //array cell address
VBC1_LOAD//array cell value
VBC1_ADD
VBC1_POP
LAB303: //for step
VBC3_PUSH_CONST 162 //j
VBC1_INC
VBC4_JUMP LAB130 //to condition
LAB311: //for exit
[1:115] ;
VBC1_RETURN
;straight_leg_IK <void(,float,float,float,float,float)>
[1:126] ;IkOutPresent = 0;
VBC3_PUSH_CONST 177 //IkOutPresent
VBC1_PUSH_0 
VBC1_POP_CF
[1:127] ;if (svIkLimA5min <= w && w <= svIkLimA5max){
VBC3_PUSH_GLOBAL 3285 //svIkLimA5min
VBC2_PUSH_LOCAL 2 //w
VBC1_LESS_EQU_FF
VBC4_FALSE_JUMP_KEEP LAB338
VBC2_PUSH_LOCAL 2 //w
VBC3_PUSH_GLOBAL 3286 //svIkLimA5max
VBC1_LESS_EQU_FF
VBC4_FALSE_JUMP_KEEP LAB338
VBC1_PUSH_1
LAB338:
VBC4_FALSE_JUMP LAB675 //if to false
;
[1:128] ;alpha6 = sfFMathASin((yt + svIkA5 + svIkB5 + svIkA10)/(svIkA6 + svIkA7 + svIkA8 + svIkA9));
VBC3_PUSH_CONST 167 //alpha6
VBC5_PUSH_CONST 352 | 0x80000000 //import func index sfFMathASin
//alloc addon amount for result
VBC2_PUSH_LOCAL 5 //yt
VBC3_PUSH_GLOBAL 3275 //svIkA5
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3276 //svIkB5
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3282 //svIkA10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3278 //svIkA6
VBC3_PUSH_GLOBAL 3279 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3280 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3281 //svIkA9
VBC1_ADD_FF
VBC1_DIV_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_POP
[1:129] ;test1 = yt;
VBC3_PUSH_CONST 164 //test1
VBC2_PUSH_LOCAL 5 //yt
VBC1_POP
[1:130] ;test3 = (yt + svIkA5 + svIkB5 + svIkA10)/(svIkA6 + svIkA7 + svIkA8 + svIkA9);
VBC3_PUSH_CONST 166 //test3
VBC2_PUSH_LOCAL 5 //yt
VBC3_PUSH_GLOBAL 3275 //svIkA5
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3276 //svIkB5
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3282 //svIkA10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3278 //svIkA6
VBC3_PUSH_GLOBAL 3279 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3280 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3281 //svIkA9
VBC1_ADD_FF
VBC1_DIV_FF
VBC1_POP
[1:131] ;if (svIkLimA6min <= alpha6 && alpha6 <= svIkLimA6max ){
VBC3_PUSH_GLOBAL 3287 //svIkLimA6min
VBC3_PUSH_GLOBAL 167 //alpha6
VBC1_LESS_EQU_FF
VBC4_FALSE_JUMP_KEEP LAB446
VBC3_PUSH_GLOBAL 167 //alpha6
VBC3_PUSH_GLOBAL 3288 //svIkLimA6max
VBC1_LESS_EQU_FF
VBC4_FALSE_JUMP_KEEP LAB446
VBC1_PUSH_1
LAB446:
VBC4_FALSE_JUMP LAB675 //if to false
;
[1:132] ;test2 = xt/(svIkA7 + svIkA8);
VBC3_PUSH_CONST 165 //test2
VBC2_PUSH_LOCAL 6 //xt
VBC3_PUSH_GLOBAL 3279 //svIkA7
VBC3_PUSH_GLOBAL 3280 //svIkA8
VBC1_ADD_FF
VBC1_DIV_FF
VBC1_POP
[1:133] ;alpha7 = sfFMathASin(xt/(svIkA7 + svIkA8));
VBC3_PUSH_CONST 168 //alpha7
VBC5_PUSH_CONST 352 | 0x80000000 //import func index sfFMathASin
//alloc addon amount for result
VBC2_PUSH_LOCAL 6 //xt
VBC3_PUSH_GLOBAL 3279 //svIkA7
VBC3_PUSH_GLOBAL 3280 //svIkA8
VBC1_ADD_FF
VBC1_DIV_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_POP
[1:134] ;if (svIkLimA7min <= alpha7 && alpha7 <= svIkLimA7max){
VBC3_PUSH_GLOBAL 3289 //svIkLimA7min
VBC3_PUSH_GLOBAL 168 //alpha7
VBC1_LESS_EQU_FF
VBC4_FALSE_JUMP_KEEP LAB508
VBC3_PUSH_GLOBAL 168 //alpha7
VBC3_PUSH_GLOBAL 3290 //svIkLimA7max
VBC1_LESS_EQU_FF
VBC4_FALSE_JUMP_KEEP LAB508
VBC1_PUSH_1
LAB508:
VBC4_FALSE_JUMP LAB675 //if to false
;
[1:135] ;alpha9 = sfFMathASin(x) - alpha7;
VBC3_PUSH_CONST 169 //alpha9
VBC5_PUSH_CONST 352 | 0x80000000 //import func index sfFMathASin
//alloc addon amount for result
VBC2_PUSH_LOCAL 4 //x
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC3_PUSH_GLOBAL 168 //alpha7
VBC1_SUB_FF
VBC1_POP
[1:136] ;if (svIkLimA9min <= alpha9 && alpha9 <= svIkLimA9max){
VBC3_PUSH_GLOBAL 3293 //svIkLimA9min
VBC3_PUSH_GLOBAL 169 //alpha9
VBC1_LESS_EQU_FF
VBC4_FALSE_JUMP_KEEP LAB552
VBC3_PUSH_GLOBAL 169 //alpha9
VBC3_PUSH_GLOBAL 3294 //svIkLimA9max
VBC1_LESS_EQU_FF
VBC4_FALSE_JUMP_KEEP LAB552
VBC1_PUSH_1
LAB552:
VBC4_FALSE_JUMP LAB675 //if to false
;
[1:137] ;alpha10 = -sfFMathASin(y) + alpha6;
VBC3_PUSH_CONST 170 //alpha10
VBC5_PUSH_CONST 352 | 0x80000000 //import func index sfFMathASin
//alloc addon amount for result
VBC2_PUSH_LOCAL 3 //y
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_NEG_F
VBC3_PUSH_GLOBAL 167 //alpha6
VBC1_ADD_FF
VBC1_POP
[1:138] ;if (svIkLimA10min <= alpha10 && alpha10 <= svIkLimA10max){
VBC3_PUSH_GLOBAL 3295 //svIkLimA10min
VBC3_PUSH_GLOBAL 170 //alpha10
VBC1_LESS_EQU_FF
VBC4_FALSE_JUMP_KEEP LAB597
VBC3_PUSH_GLOBAL 170 //alpha10
VBC3_PUSH_GLOBAL 3296 //svIkLimA10max
VBC1_LESS_EQU_FF
VBC4_FALSE_JUMP_KEEP LAB597
VBC1_PUSH_1
LAB597:
VBC4_FALSE_JUMP LAB675 //if to false
;
[1:139] ;IkEncA5 = w * 2607.6;		
VBC3_PUSH_CONST 171 //IkEncA5
VBC2_PUSH_LOCAL 2 //w
VBC5_PUSH_CONST 1159920026 
VBC1_MUL_FF
VBC1_POP
[1:140] ;IkEncA6 = alpha6 * 2607.6;
VBC3_PUSH_CONST 172 //IkEncA6
VBC3_PUSH_GLOBAL 167 //alpha6
VBC5_PUSH_CONST 1159920026 
VBC1_MUL_FF
VBC1_POP
[1:141] ;IkEncA7 = alpha7 * 2607.6;
VBC3_PUSH_CONST 173 //IkEncA7
VBC3_PUSH_GLOBAL 168 //alpha7
VBC5_PUSH_CONST 1159920026 
VBC1_MUL_FF
VBC1_POP
[1:142] ;IkEncA8 = 0;				
VBC3_PUSH_CONST 174 //IkEncA8
VBC1_PUSH_0 
VBC1_POP_CF
[1:143] ;IkEncA9 = alpha9 * 2607.6;
VBC3_PUSH_CONST 175 //IkEncA9
VBC3_PUSH_GLOBAL 169 //alpha9
VBC5_PUSH_CONST 1159920026 
VBC1_MUL_FF
VBC1_POP
[1:144] ;IkEncA10 = alpha10 * 2607.6;
VBC3_PUSH_CONST 176 //IkEncA10
VBC3_PUSH_GLOBAL 170 //alpha10
VBC5_PUSH_CONST 1159920026 
VBC1_MUL_FF
VBC1_POP
[1:145] ;IkOutPresent = 1;
VBC3_PUSH_CONST 177 //IkOutPresent
VBC1_PUSH_1 
VBC1_POP_CF
LAB675: //if else
LAB675: //if else
LAB675: //if else
LAB675: //if else
LAB675: //if else
[1:153] ;
VBC1_RETURN
;setup <void()>
[1:154] ;rotationYieldRight = 0.23;
VBC2_PUSH_CONST 18 //rotationYieldRight
VBC5_PUSH_CONST 1047233823 
VBC1_POP
[1:155] ;rotationYieldLeft = 0.23;
VBC2_PUSH_CONST 19 //rotationYieldLeft
VBC5_PUSH_CONST 1047233823 
VBC1_POP
[1:157] ;svIkA5 = 40.2; 
VBC3_PUSH_CONST 3275 //svIkA5
VBC5_PUSH_CONST 1109445837 
VBC1_POP
[1:158] ;svIkB5 = 0;    
VBC3_PUSH_CONST 3276 //svIkB5
VBC1_PUSH_0 
VBC1_POP_CF
[1:159] ;svIkC5 = 0;    
VBC3_PUSH_CONST 3277 //svIkC5
VBC1_PUSH_0 
VBC1_POP_CF
[1:160] ;svIkA6 = 0;    
VBC3_PUSH_CONST 3278 //svIkA6
VBC1_PUSH_0 
VBC1_POP_CF
[1:161] ;svIkA7 = 99;   
VBC3_PUSH_CONST 3279 //svIkA7
VBC2_PUSH_CONST 99 
VBC1_POP_CF
[1:162] ;svIkA8 = 99;   
VBC3_PUSH_CONST 3280 //svIkA8
VBC2_PUSH_CONST 99 
VBC1_POP_CF
[1:163] ;svIkA9 = 0;    
VBC3_PUSH_CONST 3281 //svIkA9
VBC1_PUSH_0 
VBC1_POP_CF
[1:164] ;svIkA10 = 13.7;  
VBC3_PUSH_CONST 3282 //svIkA10
VBC5_PUSH_CONST 1096495923 
VBC1_POP
[1:165] ;svIkB10 = 23.8;  
VBC3_PUSH_CONST 3283 //svIkB10
VBC5_PUSH_CONST 1102997094 
VBC1_POP
[1:166] ;svIkC10 = 0;   
VBC3_PUSH_CONST 3284 //svIkC10
VBC1_PUSH_0 
VBC1_POP_CF
[1:169] ;e10 = 55;      
VBC2_PUSH_CONST 35 //e10
VBC2_PUSH_CONST 55 
VBC1_POP_CF
[1:170] ;d10 = 62;      
VBC2_PUSH_CONST 36 //d10
VBC2_PUSH_CONST 62 
VBC1_POP_CF
[1:173] ;svIkLimA5min = -90 * 0.017453293;
VBC3_PUSH_CONST 3285 //svIkLimA5min
VBC5_PUSH_CONST -1077342245 
VBC1_POP
[1:174] ;svIkLimA5max = 90 * 0.017453293;
VBC3_PUSH_CONST 3286 //svIkLimA5max
VBC5_PUSH_CONST 1070141403 
VBC1_POP
[1:177] ;svIkLimA6min = -108 * 0.017453293;
VBC3_PUSH_CONST 3287 //svIkLimA6min
VBC5_PUSH_CONST -1074706887 
VBC1_POP
[1:178] ;svIkLimA6max = 15 * 0.017453293;
VBC3_PUSH_CONST 3288 //svIkLimA6max
VBC5_PUSH_CONST 1048971922 
VBC1_POP
[1:180] ;svIkLimA7min = -130 * 0.017453293;
VBC3_PUSH_CONST 3289 //svIkLimA7min
VBC5_PUSH_CONST -1072613858 
VBC1_POP
[1:181] ;svIkLimA7max = 50 * 0.017453293;
VBC3_PUSH_CONST 3290 //svIkLimA7max
VBC5_PUSH_CONST 1063216883 
VBC1_POP
[1:184] ;svIkLimA8min = -180 * 0.017453293;
VBC3_PUSH_CONST 3291 //svIkLimA8min
VBC5_PUSH_CONST -1068953637 
VBC1_POP
[1:185] ;svIkLimA8max = 8 * 0.017453293;
VBC3_PUSH_CONST 3292 //svIkLimA8max
VBC5_PUSH_CONST 1041168949 
VBC1_POP
[1:188] ;svIkLimA9min = -45 * 0.017453293;
VBC3_PUSH_CONST 3293 //svIkLimA9min
VBC5_PUSH_CONST -1085730853 
VBC1_POP
[1:189] ;svIkLimA9max = 78 * 0.017453293;
VBC3_PUSH_CONST 3294 //svIkLimA9max
VBC5_PUSH_CONST 1068384497 
VBC1_POP
[1:192] ;svIkLimA10min = -24 * 0.017453293;
VBC3_PUSH_CONST 3295 //svIkLimA10min
VBC5_PUSH_CONST -1093241008 
VBC1_POP
[1:193] ;svIkLimA10max = 24 * 0.017453293;
VBC3_PUSH_CONST 3296 //svIkLimA10max
VBC5_PUSH_CONST 1054242640 
VBC1_POP
[1:194] ;sfIkSetup();
VBC5_PUSH_CONST 200 | 0x80000000 //import func index sfIkSetup
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:196] ;framestep = 2;
VBC2_PUSH_CONST 20 //framestep
VBC1_PUSH_2 
VBC1_POP
[1:198] ;gaitHeight = 180;  
VBC2_PUSH_CONST 41 //gaitHeight
VBC3_PUSH_CONST 180 
VBC1_POP_CF
[1:199] ;stepHeight = 38.0; 
VBC2_PUSH_CONST 42 //stepHeight
VBC5_PUSH_CONST 1108869120 
VBC1_POP
[1:201] ;selfMotionShiftCorrectionX = 0.0 / 21.0;
VBC2_PUSH_CONST 7 //selfMotionShiftCorrectionX
VBC1_PUSH_0 
VBC1_POP
[1:202] ;selfMotionShiftCorrectionY = 0.0 / 21.0;
VBC2_PUSH_CONST 8 //selfMotionShiftCorrectionY
VBC1_PUSH_0 
VBC1_POP
[1:206] ;ztr0 = -(svIkC5+svIkA6+svIkA7+svIkA8+svIkA9+svIkB10 - 1); 
VBC2_PUSH_CONST 47 //ztr0
VBC3_PUSH_GLOBAL 3277 //svIkC5
VBC3_PUSH_GLOBAL 3278 //svIkA6
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3279 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3280 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3281 //svIkA9
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3283 //svIkB10
VBC1_ADD_FF
VBC1_PUSH_1 
VBC1_SUB_FI
VBC1_NEG_F
VBC1_POP
[1:207] ;ztl0 = -(svIkC5+svIkA6+svIkA7+svIkA8+svIkA9+svIkB10 - 1); 
VBC2_PUSH_CONST 48 //ztl0
VBC3_PUSH_GLOBAL 3277 //svIkC5
VBC3_PUSH_GLOBAL 3278 //svIkA6
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3279 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3280 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3281 //svIkA9
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3283 //svIkB10
VBC1_ADD_FF
VBC1_PUSH_1 
VBC1_SUB_FI
VBC1_NEG_F
VBC1_POP
[1:209] ;zr = zl = -1;
VBC2_PUSH_CONST 26 //zr
VBC2_PUSH_CONST 33 //zl
VBC2_PUSH_CONST -1 // -
VBC1_STORE_CF
VBC1_POP
[1:211] ;selfInitPoses = 10;
VBC2_PUSH_CONST 14 //selfInitPoses
VBC2_PUSH_CONST 10 
VBC1_POP
[1:213] ;stepLength = 10.0;    
VBC2_PUSH_CONST 4 //stepLength
VBC5_PUSH_CONST 1092616192 
VBC1_POP
[1:214] ;sideLength = 0.0;    
VBC2_PUSH_CONST 5 //sideLength
VBC1_PUSH_0 
VBC1_POP
[1:215] ;rotation = 0;        
VBC2_PUSH_CONST 6 //rotation
VBC1_PUSH_0 
VBC1_POP_CF
[1:216] ;selfFirstLegIsRightLeg = 1; 
VBC2_PUSH_CONST 13 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_POP
[1:217] ;selfInitPoses = 20; 
VBC2_PUSH_CONST 14 //selfInitPoses
VBC2_PUSH_CONST 20 
VBC1_POP
[1:219] ;stepZtr = (ztr0 + gaitHeight) / selfInitPoses;
VBC2_PUSH_CONST 49 //stepZtr
VBC3_PUSH_GLOBAL 47 //ztr0
VBC3_PUSH_GLOBAL 41 //gaitHeight
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 14 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:220] ;stepZtl = (ztl0 + gaitHeight) / selfInitPoses;
VBC2_PUSH_CONST 50 //stepZtl
VBC3_PUSH_GLOBAL 48 //ztl0
VBC3_PUSH_GLOBAL 41 //gaitHeight
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 14 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:222] ;bodyTiltAtWalk = 0.01;
VBC2_PUSH_CONST 58 //bodyTiltAtWalk
VBC5_PUSH_CONST 1008981770 
VBC1_POP
[1:223] ;solyLandingSkew = 0.05;
VBC2_PUSH_CONST 59 //solyLandingSkew
VBC5_PUSH_CONST 1028443341 
VBC1_POP
[1:225] ;fr1 = 20; 
VBC2_PUSH_CONST 39 //fr1
VBC2_PUSH_CONST 20 
VBC1_POP
[1:226] ;fr2 = 20;  
VBC2_PUSH_CONST 40 //fr2
VBC2_PUSH_CONST 20 
VBC1_POP
[1:227] ;amplitude = 20; 
VBC2_PUSH_CONST 37 //amplitude
VBC2_PUSH_CONST 20 
VBC1_POP_CF
[1:229] ;stepYtr = amplitude / 2.0 / selfInitPoses;
VBC2_PUSH_CONST 51 //stepYtr
VBC3_PUSH_GLOBAL 37 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 14 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:230] ;stepYtl = amplitude / 2.0 / selfInitPoses;
VBC2_PUSH_CONST 52 //stepYtl
VBC3_PUSH_GLOBAL 37 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 14 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:235] ;alpha01 = 3.141592654;
VBC2_PUSH_CONST 38 //alpha01
VBC5_PUSH_CONST 1078530011 
VBC1_POP
[1:236] ;if( fr1 != 0 )
VBC3_PUSH_GLOBAL 39 //fr1
VBC1_PUSH_0 
VBC1_NOT_EQU
VBC4_FALSE_JUMP LAB1123 //if to false
;alpha01 = alpha01 * 2 / fr1;
VBC2_PUSH_CONST 38 //alpha01
VBC3_PUSH_GLOBAL 38 //alpha01
VBC1_PUSH_2 
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 39 //fr1
VBC1_DIV_FI
VBC1_POP
LAB1123: //if else
[1:243] ;fps = 8;
VBC2_PUSH_CONST 54 //fps
VBC2_PUSH_CONST 8 
VBC1_POP
[1:244] ;frames_per_cycle = 2;
VBC2_PUSH_CONST 55 //frames_per_cycle
VBC1_PUSH_2 
VBC1_POP
[1:253] ;
VBC1_RETURN
;computeAlphaForWalkStraight <int(,int,int)>
[1:256] ;straight_leg_IK( xtr, ytr, xr, yr, wr ); 
VBC3_PUSH_CONST 312  //func address straight_leg_IK
VBC3_PUSH_GLOBAL 21 //xtr
VBC3_PUSH_GLOBAL 22 //ytr
VBC3_PUSH_GLOBAL 24 //xr
VBC3_PUSH_GLOBAL 25 //yr
VBC3_PUSH_GLOBAL 27 //wr
VBC1_CALL5
VBC1_STACK_UP6//remove result, call address and params
[1:257] ;if( IkOutPresent ) {
VBC3_PUSH_GLOBAL 177 //IkOutPresent
VBC4_FALSE_JUMP LAB1681 //if to false
;
[1:259] ;if (selfFirstLegIsRightLeg == 1){
VBC3_PUSH_GLOBAL 13 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB1543 //if to false
;
[1:260] ;if (fasa == 2){
VBC2_PUSH_LOCAL 3 //fasa
VBC1_PUSH_2 
VBC1_EQU
VBC4_FALSE_JUMP LAB1291 //if to false
;
[1:261] ;if(cycle == 0 || cycle == (fr2 - framestep)) IkEncA6 += stepHeight / 124.0 / 2 * 2607.6;
VBC2_PUSH_LOCAL 2 //cycle
VBC1_PUSH_0 
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB1200
VBC2_PUSH_LOCAL 2 //cycle
VBC3_PUSH_GLOBAL 40 //fr2
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_SUB
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB1200
VBC1_PUSH_0
LAB1200:
VBC4_FALSE_JUMP LAB1228 //if to false
;if(cycle == 0 || cycle == (fr2 - framestep)) IkEncA6 += stepHeight / 124.0 / 2 * 2607.6;
VBC3_PUSH_CONST 172 //IkEncA6
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 42 //stepHeight
VBC5_PUSH_CONST 1123549184 
VBC1_DIV_FF
VBC1_PUSH_2 
VBC1_DIV_FI
VBC5_PUSH_CONST 1159920026 
VBC1_MUL_FF
VBC1_ADD_FF
VBC1_POP
LAB1228: //if else
[1:262] ;if (framestep <= cycle && cycle < fr2 - framestep){
VBC3_PUSH_GLOBAL 20 //framestep
VBC2_PUSH_LOCAL 2 //cycle
VBC1_LESS_EQU
VBC4_FALSE_JUMP_KEEP LAB1253
VBC2_PUSH_LOCAL 2 //cycle
VBC3_PUSH_GLOBAL 40 //fr2
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_SUB
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB1253
VBC1_PUSH_1
LAB1253:
VBC4_FALSE_JUMP LAB1291 //if to false
;
[1:263] ;IkEncA6 += stepHeight / 124.0 * 2607.6;
VBC3_PUSH_CONST 172 //IkEncA6
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 42 //stepHeight
VBC5_PUSH_CONST 1123549184 
VBC1_DIV_FF
VBC5_PUSH_CONST 1159920026 
VBC1_MUL_FF
VBC1_ADD_FF
VBC1_POP
[1:264] ;IkEncA10 += 0.3 * 2607.6;
VBC3_PUSH_CONST 176 //IkEncA10
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1145278957 
VBC1_ADD_FF
VBC1_POP
LAB1291: //if else
LAB1291: //if else
[1:267] ;if (fasa == 4){
VBC2_PUSH_LOCAL 3 //fasa
VBC2_PUSH_CONST 4 
VBC1_EQU
VBC4_FALSE_JUMP LAB1402 //if to false
;
[1:268] ;if(cycle == 0 || cycle == (fr2 - framestep)) IkEncA6 -= stepHeight / 124.0 / 2 * 2607.6;
VBC2_PUSH_LOCAL 2 //cycle
VBC1_PUSH_0 
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB1323
VBC2_PUSH_LOCAL 2 //cycle
VBC3_PUSH_GLOBAL 40 //fr2
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_SUB
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB1323
VBC1_PUSH_0
LAB1323:
VBC4_FALSE_JUMP LAB1351 //if to false
;if(cycle == 0 || cycle == (fr2 - framestep)) IkEncA6 -= stepHeight / 124.0 / 2 * 2607.6;
VBC3_PUSH_CONST 172 //IkEncA6
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 42 //stepHeight
VBC5_PUSH_CONST 1123549184 
VBC1_DIV_FF
VBC1_PUSH_2 
VBC1_DIV_FI
VBC5_PUSH_CONST 1159920026 
VBC1_MUL_FF
VBC1_SUB_FF
VBC1_POP
LAB1351: //if else
[1:269] ;if (framestep <= cycle && cycle < fr2 - framestep){
VBC3_PUSH_GLOBAL 20 //framestep
VBC2_PUSH_LOCAL 2 //cycle
VBC1_LESS_EQU
VBC4_FALSE_JUMP_KEEP LAB1376
VBC2_PUSH_LOCAL 2 //cycle
VBC3_PUSH_GLOBAL 40 //fr2
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_SUB
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB1376
VBC1_PUSH_1
LAB1376:
VBC4_FALSE_JUMP LAB1402 //if to false
;
[1:270] ;IkEncA6 -= stepHeight / 124.0 * 2607.6;
VBC3_PUSH_CONST 172 //IkEncA6
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 42 //stepHeight
VBC5_PUSH_CONST 1123549184 
VBC1_DIV_FF
VBC5_PUSH_CONST 1159920026 
VBC1_MUL_FF
VBC1_SUB_FF
VBC1_POP
LAB1402: //if else
LAB1402: //if else
[1:274] ;sfPoseGroupLin( 1024 , -IkEncA5, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 171 //IkEncA5
VBC1_NEG_F
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 54 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:275] ;sfPoseGroupLin( 4096 , -IkEncA6, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 172 //IkEncA6
VBC1_NEG_F
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 54 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:276] ;sfPoseGroupLin( 16384 , IkEncA7, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 173 //IkEncA7
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 54 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:277] ;sfPoseGroupLin( 65536 , -IkEncA8, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 174 //IkEncA8
VBC1_NEG_F
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 54 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:278] ;if (relaxFootR == 0){
VBC3_PUSH_GLOBAL 56 //relaxFootR
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB1524 //if to false
;
[1:279] ;sfPoseGroupLin( 262144 , IkEncA9, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 175 //IkEncA9
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 54 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:280] ;sfPoseGroupLin( 1048576 , -IkEncA10, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 176 //IkEncA10
VBC1_NEG_F
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 54 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB1539 //if to exit
LAB1524: //if else
;
[1:283] ;relaxFootR = 0;
VBC2_PUSH_CONST 56 //relaxFootR
VBC1_PUSH_0 
VBC1_POP
[1:284] ;sfFreeGroup( 262144  | 1048576  );
VBC5_PUSH_CONST 50 | 0x80000000 //import func index sfFreeGroup
VBC4_PUSH_CONST 1310720 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB1539: //if exit
VBC4_JUMP LAB1681 //if to exit
LAB1543: //if else
;
[1:289] ;sfPoseGroupLin( 2048 , IkEncA5, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 171 //IkEncA5
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 54 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:290] ;sfPoseGroupLin( 8192 , -IkEncA6, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 172 //IkEncA6
VBC1_NEG_F
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 54 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:291] ;sfPoseGroupLin( 32768 , -IkEncA7, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 173 //IkEncA7
VBC1_NEG_F
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 54 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:292] ;sfPoseGroupLin( 131072 , -IkEncA8, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 174 //IkEncA8
VBC1_NEG_F
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 54 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:293] ;if (relaxFootR == 0){
VBC3_PUSH_GLOBAL 56 //relaxFootR
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB1666 //if to false
;
[1:294] ;sfPoseGroupLin( 524288 , IkEncA9, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 175 //IkEncA9
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 54 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:295] ;sfPoseGroupLin( 2097152 , -IkEncA10, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 176 //IkEncA10
VBC1_NEG_F
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 54 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB1681 //if to exit
LAB1666: //if else
;
[1:298] ;relaxFootR = 0;
VBC2_PUSH_CONST 56 //relaxFootR
VBC1_PUSH_0 
VBC1_POP
[1:299] ;sfFreeGroup( 524288  | 2097152  );
VBC5_PUSH_CONST 50 | 0x80000000 //import func index sfFreeGroup
VBC4_PUSH_CONST 2621440 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB1681: //if exit
LAB1681: //if exit
LAB1681: //if else
[1:305] ;straight_leg_IK( xtl, -ytl, xl, -yl, wl );
VBC3_PUSH_CONST 312  //func address straight_leg_IK
VBC3_PUSH_GLOBAL 28 //xtl
VBC3_PUSH_GLOBAL 29 //ytl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 31 //xl
VBC3_PUSH_GLOBAL 32 //yl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 34 //wl
VBC1_CALL5
VBC1_STACK_UP6//remove result, call address and params
[1:306] ;if( IkOutPresent ) {
VBC3_PUSH_GLOBAL 177 //IkOutPresent
VBC4_FALSE_JUMP LAB2231 //if to false
;
[1:308] ;if (selfFirstLegIsRightLeg == 1){
VBC3_PUSH_GLOBAL 13 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB2094 //if to false
;
[1:309] ;if (fasa == 2){
VBC2_PUSH_LOCAL 3 //fasa
VBC1_PUSH_2 
VBC1_EQU
VBC4_FALSE_JUMP LAB1829 //if to false
;
[1:310] ;if(cycle == 0 || cycle == (fr2 - framestep)) IkEncA6 -= stepHeight / 124.0 / 2 * 2607.6;
VBC2_PUSH_LOCAL 2 //cycle
VBC1_PUSH_0 
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB1750
VBC2_PUSH_LOCAL 2 //cycle
VBC3_PUSH_GLOBAL 40 //fr2
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_SUB
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB1750
VBC1_PUSH_0
LAB1750:
VBC4_FALSE_JUMP LAB1778 //if to false
;if(cycle == 0 || cycle == (fr2 - framestep)) IkEncA6 -= stepHeight / 124.0 / 2 * 2607.6;
VBC3_PUSH_CONST 172 //IkEncA6
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 42 //stepHeight
VBC5_PUSH_CONST 1123549184 
VBC1_DIV_FF
VBC1_PUSH_2 
VBC1_DIV_FI
VBC5_PUSH_CONST 1159920026 
VBC1_MUL_FF
VBC1_SUB_FF
VBC1_POP
LAB1778: //if else
[1:311] ;if (framestep <= cycle && cycle < fr2 - framestep){
VBC3_PUSH_GLOBAL 20 //framestep
VBC2_PUSH_LOCAL 2 //cycle
VBC1_LESS_EQU
VBC4_FALSE_JUMP_KEEP LAB1803
VBC2_PUSH_LOCAL 2 //cycle
VBC3_PUSH_GLOBAL 40 //fr2
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_SUB
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB1803
VBC1_PUSH_1
LAB1803:
VBC4_FALSE_JUMP LAB1829 //if to false
;
[1:312] ;IkEncA6 -= stepHeight / 124.0 * 2607.6;
VBC3_PUSH_CONST 172 //IkEncA6
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 42 //stepHeight
VBC5_PUSH_CONST 1123549184 
VBC1_DIV_FF
VBC5_PUSH_CONST 1159920026 
VBC1_MUL_FF
VBC1_SUB_FF
VBC1_POP
LAB1829: //if else
LAB1829: //if else
[1:315] ;if (fasa == 4){
VBC2_PUSH_LOCAL 3 //fasa
VBC2_PUSH_CONST 4 
VBC1_EQU
VBC4_FALSE_JUMP LAB1952 //if to false
;
[1:316] ;if(cycle == 0 || cycle == (fr2 - framestep)) IkEncA6 += stepHeight / 124.0 / 2 * 2607.6;
VBC2_PUSH_LOCAL 2 //cycle
VBC1_PUSH_0 
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB1861
VBC2_PUSH_LOCAL 2 //cycle
VBC3_PUSH_GLOBAL 40 //fr2
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_SUB
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB1861
VBC1_PUSH_0
LAB1861:
VBC4_FALSE_JUMP LAB1889 //if to false
;if(cycle == 0 || cycle == (fr2 - framestep)) IkEncA6 += stepHeight / 124.0 / 2 * 2607.6;
VBC3_PUSH_CONST 172 //IkEncA6
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 42 //stepHeight
VBC5_PUSH_CONST 1123549184 
VBC1_DIV_FF
VBC1_PUSH_2 
VBC1_DIV_FI
VBC5_PUSH_CONST 1159920026 
VBC1_MUL_FF
VBC1_ADD_FF
VBC1_POP
LAB1889: //if else
[1:317] ;if (framestep <= cycle && cycle < fr2 - framestep){
VBC3_PUSH_GLOBAL 20 //framestep
VBC2_PUSH_LOCAL 2 //cycle
VBC1_LESS_EQU
VBC4_FALSE_JUMP_KEEP LAB1914
VBC2_PUSH_LOCAL 2 //cycle
VBC3_PUSH_GLOBAL 40 //fr2
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_SUB
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB1914
VBC1_PUSH_1
LAB1914:
VBC4_FALSE_JUMP LAB1952 //if to false
;
[1:318] ;IkEncA6 += stepHeight / 124.0 * 2607.6;
VBC3_PUSH_CONST 172 //IkEncA6
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 42 //stepHeight
VBC5_PUSH_CONST 1123549184 
VBC1_DIV_FF
VBC5_PUSH_CONST 1159920026 
VBC1_MUL_FF
VBC1_ADD_FF
VBC1_POP
[1:319] ;IkEncA10 += 0.3 * 2607.6;
VBC3_PUSH_CONST 176 //IkEncA10
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1145278957 
VBC1_ADD_FF
VBC1_POP
LAB1952: //if else
LAB1952: //if else
[1:322] ;sfPoseGroupLin( 2048 , -IkEncA5, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 171 //IkEncA5
VBC1_NEG_F
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 54 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:323] ;sfPoseGroupLin( 8192 , -IkEncA6, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 172 //IkEncA6
VBC1_NEG_F
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 54 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:324] ;sfPoseGroupLin( 32768 , IkEncA7, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 173 //IkEncA7
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 54 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:325] ;sfPoseGroupLin( 131072 , -IkEncA8, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 174 //IkEncA8
VBC1_NEG_F
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 54 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:326] ;if (relaxFootL == 0){
VBC3_PUSH_GLOBAL 57 //relaxFootL
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB2075 //if to false
;
[1:327] ;sfPoseGroupLin( 524288 , IkEncA9, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 175 //IkEncA9
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 54 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:328] ;sfPoseGroupLin( 2097152 , -IkEncA10, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 176 //IkEncA10
VBC1_NEG_F
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 54 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB2090 //if to exit
LAB2075: //if else
;
[1:331] ;relaxFootL = 0;
VBC2_PUSH_CONST 57 //relaxFootL
VBC1_PUSH_0 
VBC1_POP
[1:332] ;sfFreeGroup( 524288  | 2097152  );
VBC5_PUSH_CONST 50 | 0x80000000 //import func index sfFreeGroup
VBC4_PUSH_CONST 2621440 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB2090: //if exit
VBC4_JUMP LAB2231 //if to exit
LAB2094: //if else
;
[1:337] ;sfPoseGroupLin( 1024 , IkEncA5, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 171 //IkEncA5
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 54 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:338] ;sfPoseGroupLin( 4096 , -IkEncA6, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 172 //IkEncA6
VBC1_NEG_F
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 54 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:339] ;sfPoseGroupLin( 16384 , -IkEncA7, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 173 //IkEncA7
VBC1_NEG_F
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 54 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:340] ;sfPoseGroupLin( 65536 , -IkEncA8, fps );   
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 174 //IkEncA8
VBC1_NEG_F
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 54 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:341] ;if (relaxFootL == 0){
VBC3_PUSH_GLOBAL 57 //relaxFootL
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB2216 //if to false
;
[1:342] ;sfPoseGroupLin( 262144 , IkEncA9, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 175 //IkEncA9
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 54 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:343] ;sfPoseGroupLin( 1048576 , -IkEncA10, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 176 //IkEncA10
VBC1_NEG_F
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 54 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB2231 //if to exit
LAB2216: //if else
;
[1:346] ;relaxFootL = 0;
VBC2_PUSH_CONST 57 //relaxFootL
VBC1_PUSH_0 
VBC1_POP
[1:347] ;sfFreeGroup( 262144  | 1048576  ); 
VBC5_PUSH_CONST 50 | 0x80000000 //import func index sfFreeGroup
VBC4_PUSH_CONST 1310720 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB2231: //if exit
LAB2231: //if exit
LAB2231: //if else
[1:353] ;sfWaitFrame( framestep );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:354] ;return 1;
VBC1_PUSH_1 
VBC2_POP_RESULT 4
VBC1_RETURN
;walkStraightInitialPose <void()>
VBC1_STACK_DN1//local vars 1
[1:372] ;
[1:372] ;int pose_taking_cycles = 20;
VBC2_PUSH_B_OFFSET -1 //pose_taking_cycles
VBC2_PUSH_CONST 20 
VBC1_POP
[1:373] ;xtr = xtl = 0;
VBC2_PUSH_CONST 21 //xtr
VBC2_PUSH_CONST 28 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:374] ;for( j = 0; j < pose_taking_cycles; j++ ) {
VBC3_PUSH_CONST 162 //j
VBC1_PUSH_0 
VBC1_POP
LAB2260: //for condition
VBC3_PUSH_GLOBAL 162 //j
VBC2_PUSH_LOCAL -1 //pose_taking_cycles
VBC1_LESS
VBC4_FALSE_JUMP LAB2327 //to for exit
;
[1:378] ;ytr = -d10 - j * amplitude * 2.0 /pose_taking_cycles;
VBC2_PUSH_CONST 22 //ytr
VBC3_PUSH_GLOBAL 36 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 162 //j
VBC3_PUSH_GLOBAL 37 //amplitude
VBC1_MUL_IF
VBC5_PUSH_CONST 1073741824 
VBC1_MUL_FF
VBC2_PUSH_LOCAL -1 //pose_taking_cycles
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
[1:379] ;ytl =  ytr + 2.0 * d10;
VBC2_PUSH_CONST 29 //ytl
VBC3_PUSH_GLOBAL 22 //ytr
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 36 //d10
VBC1_MUL_FF
VBC1_ADD_FF
VBC1_POP
[1:381] ;computeAlphaForWalkStraight(0, j);
VBC3_PUSH_CONST 1133  //func address computeAlphaForWalkStraight
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 162 //j
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
LAB2319: //for step
VBC3_PUSH_CONST 162 //j
VBC1_INC
VBC4_JUMP LAB2260 //to condition
LAB2327: //for exit
[1:386] ;
VBC1_RETURN
;walkStraightFinalPose <void()>
[1:387] ;for( j = 0; j < selfInitPoses; j++ ) {
VBC3_PUSH_CONST 162 //j
VBC1_PUSH_0 
VBC1_POP
LAB2333: //for condition
VBC3_PUSH_GLOBAL 162 //j
VBC3_PUSH_GLOBAL 14 //selfInitPoses
VBC1_LESS
VBC4_FALSE_JUMP LAB2416 //to for exit
;
[1:389] ;xtr = ytr = 0;
VBC2_PUSH_CONST 21 //xtr
VBC2_PUSH_CONST 22 //ytr
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:390] ;wr = wl = 0;
VBC2_PUSH_CONST 27 //wr
VBC2_PUSH_CONST 34 //wl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:391] ;ytr = -d10 + (selfInitPoses - (j+1)) * stepYtr;
VBC2_PUSH_CONST 22 //ytr
VBC3_PUSH_GLOBAL 36 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 14 //selfInitPoses
VBC3_PUSH_GLOBAL 162 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_SUB
VBC3_PUSH_GLOBAL 51 //stepYtr
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:392] ;ytl =  d10 + (selfInitPoses - (j+1)) * stepYtl;
VBC2_PUSH_CONST 29 //ytl
VBC3_PUSH_GLOBAL 36 //d10
VBC3_PUSH_GLOBAL 14 //selfInitPoses
VBC3_PUSH_GLOBAL 162 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_SUB
VBC3_PUSH_GLOBAL 52 //stepYtl
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:394] ;computeAlphaForWalkStraight(0, j);
VBC3_PUSH_CONST 1133  //func address computeAlphaForWalkStraight
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 162 //j
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
LAB2408: //for step
VBC3_PUSH_CONST 162 //j
VBC1_INC
VBC4_JUMP LAB2333 //to condition
LAB2416: //for exit
[1:398] ;
VBC1_RETURN
;walkStraightInit <void()>
[1:412] ;correctedStepLenght = stepLength + selfMotionShiftCorrectionX;
VBC2_PUSH_CONST 43 //correctedStepLenght
VBC3_PUSH_GLOBAL 4 //stepLength
VBC3_PUSH_GLOBAL 7 //selfMotionShiftCorrectionX
VBC1_ADD_FF
VBC1_POP
[1:413] ;correctedSideLenght = sideLength - selfMotionShiftCorrectionY;
VBC2_PUSH_CONST 45 //correctedSideLenght
VBC3_PUSH_GLOBAL 5 //sideLength
VBC3_PUSH_GLOBAL 8 //selfMotionShiftCorrectionY
VBC1_SUB_FF
VBC1_POP
[1:414] ;correctedSideLenghtHalf = correctedSideLenght / 2;
VBC2_PUSH_CONST 46 //correctedSideLenghtHalf
VBC3_PUSH_GLOBAL 45 //correctedSideLenght
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_POP
[1:417] ;correctedRotation = -rotation *0.25 * 0.23 / ( rotation <= 0 ? rotationYieldRight : rotationYieldLeft);
VBC3_PUSH_CONST 182 //correctedRotation
VBC3_PUSH_GLOBAL 6 //rotation
VBC1_NEG_F
VBC5_PUSH_CONST 1048576000 
VBC1_MUL_FF
VBC5_PUSH_CONST 1047233823 
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 6 //rotation
VBC1_PUSH_0 
VBC1_LESS_EQU_FI
VBC4_FALSE_JUMP LAB2480
VBC3_PUSH_GLOBAL 18 //rotationYieldRight
VBC4_JUMP LAB2483
LAB2480:
VBC3_PUSH_GLOBAL 19 //rotationYieldLeft
LAB2483:
VBC1_DIV_FF
VBC1_POP
[1:418] ;dx0Typical = correctedStepLenght / (2.0 * fr1 + fr2) * framestep;
VBC3_PUSH_CONST 180 //dx0Typical
VBC3_PUSH_GLOBAL 43 //correctedStepLenght
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 39 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 40 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_MUL_FI
VBC1_POP
[1:419] ;dy0Typical = correctedSideLenght / (2.0 * fr1 + fr2) * framestep;
VBC3_PUSH_CONST 181 //dy0Typical
VBC3_PUSH_GLOBAL 45 //correctedSideLenght
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 39 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 40 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_MUL_FI
VBC1_POP
[1:422] ;xr = xl = bodyTiltAtWalk;
VBC2_PUSH_CONST 24 //xr
VBC2_PUSH_CONST 31 //xl
VBC3_PUSH_GLOBAL 58 //bodyTiltAtWalk
VBC1_STORE
VBC1_POP
[1:423] ;yl =  solyLandingSkew;
VBC2_PUSH_CONST 32 //yl
VBC3_PUSH_GLOBAL 59 //solyLandingSkew
VBC1_POP
[1:424] ;yr = -solyLandingSkew;
VBC2_PUSH_CONST 25 //yr
VBC3_PUSH_GLOBAL 59 //solyLandingSkew
VBC1_NEG_F
VBC1_POP
[1:425] ;fase_offset = 2.8;
VBC3_PUSH_CONST 184 //fase_offset
VBC5_PUSH_CONST 1077097267 
VBC1_POP
[1:426] ;parabaloid_list_creator();
VBC2_PUSH_CONST 108  //func address parabaloid_list_creator
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:432] ;
VBC1_RETURN
;walkStraightPhasa1 <void()>
[1:433] ;ztl = ztr = -gaitHeight;
VBC2_PUSH_CONST 30 //ztl
VBC2_PUSH_CONST 23 //ztr
VBC3_PUSH_GLOBAL 41 //gaitHeight
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:434] ;for( j = 0; j < fr1; j += framestep ) {
VBC3_PUSH_CONST 162 //j
VBC1_PUSH_0 
VBC1_POP
LAB2586: //for condition
VBC3_PUSH_GLOBAL 162 //j
VBC3_PUSH_GLOBAL 39 //fr1
VBC1_LESS
VBC4_FALSE_JUMP LAB2789 //to for exit
;
[1:435] ;s = (amplitude / 2 + correctedSideLenghtHalf) * sfMathCos(alpha01 * (j / 2 + fase_offset * framestep));
VBC3_PUSH_CONST 183 //s
VBC3_PUSH_GLOBAL 37 //amplitude
VBC1_PUSH_2 
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 46 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 38 //alpha01
VBC3_PUSH_GLOBAL 162 //j
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 184 //fase_offset
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_MUL_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_MUL_FF
VBC1_POP
[1:436] ;ytr = s - d10 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 22 //ytr
VBC3_PUSH_GLOBAL 183 //s
VBC3_PUSH_GLOBAL 36 //d10
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 46 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
[1:437] ;ytl = s + d10 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 29 //ytl
VBC3_PUSH_GLOBAL 183 //s
VBC3_PUSH_GLOBAL 36 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 46 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
[1:438] ;if( stepType == 0 ) continue;
VBC3_PUSH_GLOBAL 53 //stepType
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB2676 //if to false
;if( stepType == 0 ) continue;
VBC4_JUMP LAB2775 //to loop condition
LAB2676: //if else
[1:439] ;relaxFootL = ((j <= 0) ? 1 : 0);
VBC2_PUSH_CONST 57 //relaxFootL
VBC3_PUSH_GLOBAL 162 //j
VBC1_PUSH_0 
VBC1_LESS_EQU
VBC4_FALSE_JUMP LAB2692
VBC1_PUSH_1 
VBC4_JUMP LAB2693
LAB2692:
VBC1_PUSH_0 
LAB2693:
VBC1_POP
[1:440] ;xtl_plan = correctedStepLenght * ( 0.5 -  fr1/( 2.0 * fr1 + fr2));
VBC3_PUSH_CONST 185 //xtl_plan
VBC3_PUSH_GLOBAL 43 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 39 //fr1
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 39 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 40 //fr2
VBC1_ADD_FI
VBC1_DIV_IF
VBC1_SUB_FF
VBC1_MUL_FF
VBC1_POP
[1:441] ;dx1 = (xtl_plan - xtl) / (fr1 - i) * framestep;
VBC3_PUSH_CONST 189 //dx1
VBC3_PUSH_GLOBAL 185 //xtl_plan
VBC3_PUSH_GLOBAL 28 //xtl
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 39 //fr1
VBC3_PUSH_GLOBAL 163 //i
VBC1_SUB
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_MUL_FI
VBC1_POP
[1:442] ;xtl += dx1;
VBC2_PUSH_CONST 28 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 189 //dx1
VBC1_ADD_FF
VBC1_POP
[1:443] ;xtr += dx1;
VBC2_PUSH_CONST 21 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 189 //dx1
VBC1_ADD_FF
VBC1_POP
[1:445] ;computeAlphaForWalkStraight(0, j);
VBC3_PUSH_CONST 1133  //func address computeAlphaForWalkStraight
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 162 //j
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
LAB2775: //for step
VBC3_PUSH_CONST 162 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB2586 //to condition
LAB2789: //for exit
[1:451] ;
VBC1_RETURN
;walkStraightPhasa3 <void()>
[1:452] ;ztl = ztr = -gaitHeight;
VBC2_PUSH_CONST 30 //ztl
VBC2_PUSH_CONST 23 //ztr
VBC3_PUSH_GLOBAL 41 //gaitHeight
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:453] ;for( j = 0; j < fr1; j += framestep ) {
VBC3_PUSH_CONST 162 //j
VBC1_PUSH_0 
VBC1_POP
LAB2805: //for condition
VBC3_PUSH_GLOBAL 162 //j
VBC3_PUSH_GLOBAL 39 //fr1
VBC1_LESS
VBC4_FALSE_JUMP LAB2949 //to for exit
;
[1:454] ;s = (amplitude / 2.0 + correctedSideLenghtHalf) * sfMathCos(alpha01 * ((j +fr1) / 2 + fase_offset * framestep));
VBC3_PUSH_CONST 183 //s
VBC3_PUSH_GLOBAL 37 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 46 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 38 //alpha01
VBC3_PUSH_GLOBAL 162 //j
VBC3_PUSH_GLOBAL 39 //fr1
VBC1_ADD
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 184 //fase_offset
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_MUL_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_MUL_FF
VBC1_POP
[1:455] ;ytr = s - d10 - correctedSideLenghtHalf;
VBC2_PUSH_CONST 22 //ytr
VBC3_PUSH_GLOBAL 183 //s
VBC3_PUSH_GLOBAL 36 //d10
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 46 //correctedSideLenghtHalf
VBC1_SUB_FF
VBC1_POP
[1:456] ;ytl = s + d10 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 29 //ytl
VBC3_PUSH_GLOBAL 183 //s
VBC3_PUSH_GLOBAL 36 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 46 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
[1:457] ;xtl += dx2;
VBC2_PUSH_CONST 28 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 190 //dx2
VBC1_ADD_FF
VBC1_POP
[1:458] ;xtr += dx2;
VBC2_PUSH_CONST 21 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 190 //dx2
VBC1_ADD_FF
VBC1_POP
[1:459] ;relaxFootR = ((j <= 0) ? 1 : 0);
VBC2_PUSH_CONST 56 //relaxFootR
VBC3_PUSH_GLOBAL 162 //j
VBC1_PUSH_0 
VBC1_LESS_EQU
VBC4_FALSE_JUMP LAB2924
VBC1_PUSH_1 
VBC4_JUMP LAB2925
LAB2924:
VBC1_PUSH_0 
LAB2925:
VBC1_POP
[1:461] ;computeAlphaForWalkStraight(0, j);
VBC3_PUSH_CONST 1133  //func address computeAlphaForWalkStraight
VBC1_PUSH_0 
VBC3_PUSH_GLOBAL 162 //j
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
LAB2935: //for step
VBC3_PUSH_CONST 162 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB2805 //to condition
LAB2949: //for exit
[1:466] ;
VBC1_RETURN
;walkStraightPhasa2 <void()>
VBC1_STACK_DN1//local vars 1
[1:470] ;ztr = -gaitHeight + stepHeight;
VBC2_PUSH_CONST 23 //ztr
VBC3_PUSH_GLOBAL 41 //gaitHeight
VBC1_NEG_F
VBC3_PUSH_GLOBAL 42 //stepHeight
VBC1_ADD_FF
VBC1_POP
[1:471] ;dy = correctedSideLenght * framestep / fr2;
VBC3_PUSH_CONST 192 //dy
VBC3_PUSH_GLOBAL 45 //correctedSideLenght
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 40 //fr2
VBC1_DIV_FI
VBC1_POP
[1:475] ;stepRotation = correctedRotation / (fr2 - 2.0 * framestep) * 2.0;
VBC3_PUSH_CONST 193 //stepRotation
VBC3_PUSH_GLOBAL 182 //correctedRotation
VBC3_PUSH_GLOBAL 40 //fr2
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_DIV_FF
VBC5_PUSH_CONST 1073741824 
VBC1_MUL_FF
VBC1_POP
[1:476] ;xtl_plan = correctedStepLenght *( 0.5 - (fr1 + fr2) / (2.0 * fr1 + fr2));
VBC3_PUSH_CONST 185 //xtl_plan
VBC3_PUSH_GLOBAL 43 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 39 //fr1
VBC3_PUSH_GLOBAL 40 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 39 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 40 //fr2
VBC1_ADD_FI
VBC1_DIV_IF
VBC1_SUB_FF
VBC1_MUL_FF
VBC1_POP
[1:477] ;xtr_plan = correctedStepLenght / 2.0 + dx0Typical;
VBC3_PUSH_CONST 186 //xtr_plan
VBC3_PUSH_GLOBAL 43 //correctedStepLenght
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 180 //dx0Typical
VBC1_ADD_FF
VBC1_POP
[1:478] ;for( j = 0; j < fr2; j += framestep ) {
VBC3_PUSH_CONST 162 //j
VBC1_PUSH_0 
VBC1_POP
LAB3061: //for condition
VBC3_PUSH_GLOBAL 162 //j
VBC3_PUSH_GLOBAL 40 //fr2
VBC1_LESS
VBC4_FALSE_JUMP LAB3361 //to for exit
;
[1:479] ;dx2 = (xtl_plan - xtl) / (fr2 - j) * framestep;
VBC3_PUSH_CONST 190 //dx2
VBC3_PUSH_GLOBAL 185 //xtl_plan
VBC3_PUSH_GLOBAL 28 //xtl
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 40 //fr2
VBC3_PUSH_GLOBAL 162 //j
VBC1_SUB
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_MUL_FI
VBC1_POP
[1:480] ;if( j == 0 ) {
VBC3_PUSH_GLOBAL 162 //j
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB3131 //if to false
;
[1:481] ;xtr += dx2;
VBC2_PUSH_CONST 21 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 190 //dx2
VBC1_ADD_FF
VBC1_POP
[1:482] ;ytr  = s - d10 + dy0Typical;
VBC2_PUSH_CONST 22 //ytr
VBC3_PUSH_GLOBAL 183 //s
VBC3_PUSH_GLOBAL 36 //d10
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 181 //dy0Typical
VBC1_ADD_FF
VBC1_POP
VBC4_JUMP LAB3296 //if to exit
LAB3131: //if else
;else if( j == (fr2 - framestep) ) {
VBC3_PUSH_GLOBAL 162 //j
VBC3_PUSH_GLOBAL 40 //fr2
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB3179 //if to false
;
[1:485] ;xtr += dx2;
VBC2_PUSH_CONST 21 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 190 //dx2
VBC1_ADD_FF
VBC1_POP
[1:486] ;ytr  = s - d10 + 2 * dy0Typical - correctedSideLenght;
VBC2_PUSH_CONST 22 //ytr
VBC3_PUSH_GLOBAL 183 //s
VBC3_PUSH_GLOBAL 36 //d10
VBC1_SUB_FF
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 181 //dy0Typical
VBC1_MUL_IF
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 45 //correctedSideLenght
VBC1_SUB_FF
VBC1_POP
VBC4_JUMP LAB3296 //if to exit
LAB3179: //if else
;
[1:489] ;if (j == framestep) float dxr = (xtr_plan - xtr) / segments_sum;
VBC3_PUSH_GLOBAL 162 //j
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_EQU
VBC4_FALSE_JUMP LAB3204 //if to false
;
[1:489] ;if (j == framestep) float dxr = (xtr_plan - xtr) / segments_sum;
VBC2_PUSH_B_OFFSET -1 //dxr
VBC3_PUSH_GLOBAL 186 //xtr_plan
VBC3_PUSH_GLOBAL 21 //xtr
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 161 //segments_sum
VBC1_DIV_FI
VBC1_POP
LAB3204: //if else
[1:490] ;dx = dxr * segments[(j - framestep)/ framestep];
VBC3_PUSH_CONST 187 //dx
VBC2_PUSH_LOCAL -1 //dxr
VBC2_PUSH_CONST 61 //segments
//array address
VBC3_PUSH_GLOBAL 162 //j
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_SUB
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_DIV
//array index
VBC1_ADD //array cell address
VBC1_LOAD//array cell value
VBC1_MUL_FI
VBC1_POP
[1:491] ;xtr += dx;
VBC2_PUSH_CONST 21 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 187 //dx
VBC1_ADD_FF
VBC1_POP
[1:492] ;ytr  = s - 64 + dy0Typical - dy * (j / 2) * fr2 / (fr2 - 2.0 * framestep);
VBC2_PUSH_CONST 22 //ytr
VBC3_PUSH_GLOBAL 183 //s
VBC2_PUSH_CONST 64 
VBC1_SUB_FI
VBC3_PUSH_GLOBAL 181 //dy0Typical
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 192 //dy
VBC3_PUSH_GLOBAL 162 //j
VBC1_PUSH_2 
VBC1_DIV
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 40 //fr2
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 40 //fr2
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:493] ;wr = correctedRotation - j * stepRotation;
VBC2_PUSH_CONST 27 //wr
VBC3_PUSH_GLOBAL 182 //correctedRotation
VBC3_PUSH_GLOBAL 162 //j
VBC3_PUSH_GLOBAL 193 //stepRotation
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:494] ;wl = wr;
VBC2_PUSH_CONST 34 //wl
VBC3_PUSH_GLOBAL 27 //wr
VBC1_POP
LAB3296: //if exit
LAB3296: //if exit
[1:496] ;xtl += dx2;
VBC2_PUSH_CONST 28 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 190 //dx2
VBC1_ADD_FF
VBC1_POP
[1:497] ;ytl += dy0Typical;
VBC2_PUSH_CONST 29 //ytl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 181 //dy0Typical
VBC1_ADD_FF
VBC1_POP
[1:498] ;relaxFootR = (j == (fr2 - framestep) ? 1 : 0);
VBC2_PUSH_CONST 56 //relaxFootR
VBC3_PUSH_GLOBAL 162 //j
VBC3_PUSH_GLOBAL 40 //fr2
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB3336
VBC1_PUSH_1 
VBC4_JUMP LAB3337
LAB3336:
VBC1_PUSH_0 
LAB3337:
VBC1_POP
[1:500] ;computeAlphaForWalkStraight(2, j);
VBC3_PUSH_CONST 1133  //func address computeAlphaForWalkStraight
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 162 //j
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
LAB3347: //for step
VBC3_PUSH_CONST 162 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB3061 //to condition
LAB3361: //for exit
[1:506] ;
VBC1_RETURN
;walkStraightPhasa4 <void()>
VBC1_STACK_DN1//local vars 1
[1:508] ;ztl = -gaitHeight + stepHeight;
VBC2_PUSH_CONST 30 //ztl
VBC3_PUSH_GLOBAL 41 //gaitHeight
VBC1_NEG_F
VBC3_PUSH_GLOBAL 42 //stepHeight
VBC1_ADD_FF
VBC1_POP
[1:510] ;for( j = 0; j < fr2; j += framestep ) {
VBC3_PUSH_CONST 162 //j
VBC1_PUSH_0 
VBC1_POP
LAB3379: //for condition
VBC3_PUSH_GLOBAL 162 //j
VBC3_PUSH_GLOBAL 40 //fr2
VBC1_LESS
VBC4_FALSE_JUMP LAB3793 //to for exit
;
[1:511] ;if( stepType == 1 ) {
VBC3_PUSH_GLOBAL 53 //stepType
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB3444 //if to false
;
[1:512] ;xtr_plan = xtl_plan = 0;
VBC3_PUSH_CONST 186 //xtr_plan
VBC3_PUSH_CONST 185 //xtl_plan
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:513] ;if (j == (fr2 - framestep)){
VBC3_PUSH_GLOBAL 162 //j
VBC3_PUSH_GLOBAL 40 //fr2
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB3440 //if to false
;
[1:514] ;ztl = -gaitHeight;
VBC2_PUSH_CONST 30 //ztl
VBC3_PUSH_GLOBAL 41 //gaitHeight
VBC1_NEG_F
VBC1_POP
[1:515] ;ytl = s + d10;
VBC2_PUSH_CONST 29 //ytl
VBC3_PUSH_GLOBAL 183 //s
VBC3_PUSH_GLOBAL 36 //d10
VBC1_ADD_FF
VBC1_POP
LAB3440: //if else
VBC4_JUMP LAB3517 //if to exit
LAB3444: //if else
;
[1:519] ;xtr_plan = correctedStepLenght *( 0.5 - (fr1 + fr2) / (2.0 * fr1 + fr2));
VBC3_PUSH_CONST 186 //xtr_plan
VBC3_PUSH_GLOBAL 43 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 39 //fr1
VBC3_PUSH_GLOBAL 40 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 39 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 40 //fr2
VBC1_ADD_FI
VBC1_DIV_IF
VBC1_SUB_FF
VBC1_MUL_FF
VBC1_POP
[1:520] ;xtl_plan = correctedStepLenght / 2 + dx0Typical;
VBC3_PUSH_CONST 185 //xtl_plan
VBC3_PUSH_GLOBAL 43 //correctedStepLenght
VBC1_PUSH_2 
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 180 //dx0Typical
VBC1_ADD_FF
VBC1_POP
[1:521] ;dy = correctedSideLenght /(fr2- 2.0 * framestep) *framestep;
VBC3_PUSH_CONST 192 //dy
VBC3_PUSH_GLOBAL 45 //correctedSideLenght
VBC3_PUSH_GLOBAL 40 //fr2
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_MUL_FI
VBC1_POP
LAB3517: //if exit
[1:523] ;dx4 = (xtr_plan - xtr) / (fr2 - j) * framestep;
VBC3_PUSH_CONST 191 //dx4
VBC3_PUSH_GLOBAL 186 //xtr_plan
VBC3_PUSH_GLOBAL 21 //xtr
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 40 //fr2
VBC3_PUSH_GLOBAL 162 //j
VBC1_SUB
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_MUL_FI
VBC1_POP
[1:524] ;if( j == 0 ) {
VBC3_PUSH_GLOBAL 162 //j
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB3576 //if to false
;
[1:525] ;xtl += dx4;
VBC2_PUSH_CONST 28 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 191 //dx4
VBC1_ADD_FF
VBC1_POP
[1:526] ;ytl  = s + d10 + dy;
VBC2_PUSH_CONST 29 //ytl
VBC3_PUSH_GLOBAL 183 //s
VBC3_PUSH_GLOBAL 36 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 192 //dy
VBC1_ADD_FF
VBC1_POP
VBC4_JUMP LAB3727 //if to exit
LAB3576: //if else
;else if( j == (fr2 - framestep) ) {
VBC3_PUSH_GLOBAL 162 //j
VBC3_PUSH_GLOBAL 40 //fr2
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB3624 //if to false
;
[1:529] ;xtl += dx4;
VBC2_PUSH_CONST 28 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 191 //dx4
VBC1_ADD_FF
VBC1_POP
[1:530] ;ytl  = s + d10 + 2 * dy - correctedSideLenght;
VBC2_PUSH_CONST 29 //ytl
VBC3_PUSH_GLOBAL 183 //s
VBC3_PUSH_GLOBAL 36 //d10
VBC1_ADD_FF
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 192 //dy
VBC1_MUL_IF
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 45 //correctedSideLenght
VBC1_SUB_FF
VBC1_POP
VBC4_JUMP LAB3727 //if to exit
LAB3624: //if else
;
[1:533] ;if (j == framestep) float dxl = (xtl_plan - xtl) / segments_sum;
VBC3_PUSH_GLOBAL 162 //j
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_EQU
VBC4_FALSE_JUMP LAB3649 //if to false
;
[1:533] ;if (j == framestep) float dxl = (xtl_plan - xtl) / segments_sum;
VBC2_PUSH_B_OFFSET -1 //dxl
VBC3_PUSH_GLOBAL 185 //xtl_plan
VBC3_PUSH_GLOBAL 28 //xtl
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 161 //segments_sum
VBC1_DIV_FI
VBC1_POP
LAB3649: //if else
[1:534] ;dx = dxl * segments[(j - framestep)/ framestep];
VBC3_PUSH_CONST 187 //dx
VBC2_PUSH_LOCAL -1 //dxl
VBC2_PUSH_CONST 61 //segments
//array address
VBC3_PUSH_GLOBAL 162 //j
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_SUB
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_DIV
//array index
VBC1_ADD //array cell address
VBC1_LOAD//array cell value
VBC1_MUL_FI
VBC1_POP
[1:535] ;xtl += dx;
VBC2_PUSH_CONST 28 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 187 //dx
VBC1_ADD_FF
VBC1_POP
[1:536] ;ytl  = s + 64 + dy0Typical - dy * j / 2.0;
VBC2_PUSH_CONST 29 //ytl
VBC3_PUSH_GLOBAL 183 //s
VBC2_PUSH_CONST 64 
VBC1_ADD_FI
VBC3_PUSH_GLOBAL 181 //dy0Typical
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 192 //dy
VBC3_PUSH_GLOBAL 162 //j
VBC1_MUL_FI
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:537] ;wr = j * stepRotation - correctedRotation;
VBC2_PUSH_CONST 27 //wr
VBC3_PUSH_GLOBAL 162 //j
VBC3_PUSH_GLOBAL 193 //stepRotation
VBC1_MUL_IF
VBC3_PUSH_GLOBAL 182 //correctedRotation
VBC1_SUB_FF
VBC1_POP
[1:538] ;wl = wr;
VBC2_PUSH_CONST 34 //wl
VBC3_PUSH_GLOBAL 27 //wr
VBC1_POP
LAB3727: //if exit
LAB3727: //if exit
[1:540] ;xtr += dx4;
VBC2_PUSH_CONST 21 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 191 //dx4
VBC1_ADD_FF
VBC1_POP
[1:541] ;ytr += dy0Typical;
VBC2_PUSH_CONST 22 //ytr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 181 //dy0Typical
VBC1_ADD_FF
VBC1_POP
[1:542] ;relaxFootL = (j == (fr2 - framestep) ? 1 : 0);
VBC2_PUSH_CONST 57 //relaxFootL
VBC3_PUSH_GLOBAL 162 //j
VBC3_PUSH_GLOBAL 40 //fr2
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB3767
VBC1_PUSH_1 
VBC4_JUMP LAB3768
LAB3767:
VBC1_PUSH_0 
LAB3768:
VBC1_POP
[1:544] ;computeAlphaForWalkStraight(4, j);
VBC3_PUSH_CONST 1133  //func address computeAlphaForWalkStraight
VBC2_PUSH_CONST 4 
VBC3_PUSH_GLOBAL 162 //j
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
LAB3779: //for step
VBC3_PUSH_CONST 162 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 20 //framestep
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB3379 //to condition
LAB3793: //for exit
[1:554] ;
VBC1_RETURN
;walkCycle <void()>
VBC2_STACK -4//local vars 4
[1:559] ;
[1:559] ;float xrOld = xr;
VBC2_PUSH_B_OFFSET -1 //xrOld
VBC3_PUSH_GLOBAL 24 //xr
VBC1_POP
[1:560] ;
[1:560] ;float yrOld = yr;
VBC2_PUSH_B_OFFSET -2 //yrOld
VBC3_PUSH_GLOBAL 25 //yr
VBC1_POP
[1:561] ;
[1:561] ;float xlOld = xl;
VBC2_PUSH_B_OFFSET -3 //xlOld
VBC3_PUSH_GLOBAL 31 //xl
VBC1_POP
[1:562] ;
[1:562] ;float ylOld = yl;
VBC2_PUSH_B_OFFSET -4 //ylOld
VBC3_PUSH_GLOBAL 32 //yl
VBC1_POP
[1:565] ;walkStraightInit();
VBC3_PUSH_CONST 2417  //func address walkStraightInit
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:566] ;walkStraightPhasa1();
VBC3_PUSH_CONST 2571  //func address walkStraightPhasa1
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:567] ;walkStraightPhasa2();
VBC3_PUSH_CONST 2950  //func address walkStraightPhasa2
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:568] ;walkStraightPhasa3();
VBC3_PUSH_CONST 2790  //func address walkStraightPhasa3
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:569] ;walkStraightPhasa4();
VBC3_PUSH_CONST 3362  //func address walkStraightPhasa4
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:573] ;xr = xrOld;
VBC2_PUSH_CONST 24 //xr
VBC2_PUSH_LOCAL -1 //xrOld
VBC1_POP
[1:574] ;yr = yrOld;
VBC2_PUSH_CONST 25 //yr
VBC2_PUSH_LOCAL -2 //yrOld
VBC1_POP
[1:575] ;xl = xlOld;
VBC2_PUSH_CONST 31 //xl
VBC2_PUSH_LOCAL -3 //xlOld
VBC1_POP
[1:576] ;yl = ylOld;
VBC2_PUSH_CONST 32 //yl
VBC2_PUSH_LOCAL -4 //ylOld
VBC1_POP
[1:579] ;
VBC1_RETURN
;stabilizeRotationByIMU <void()>
[1:581] ;sfQuaternionToEulerImu();
VBC5_PUSH_CONST 303 | 0x80000000 //import func index sfQuaternionToEulerImu
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:582] ;rotation = -(svEulerYaw - forwardDirection);
VBC2_PUSH_CONST 6 //rotation
VBC3_PUSH_GLOBAL 2600 //svEulerYaw
VBC3_PUSH_GLOBAL 194 //forwardDirection
VBC1_SUB_FF
VBC1_NEG_F
VBC1_POP
[1:583] ;if( rotation > 3.141592654 ) rotation -= 2 * 3.141592654;
VBC3_PUSH_GLOBAL 6 //rotation
VBC5_PUSH_CONST 1078530011 
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB3908 //if to false
;if( rotation > 3.141592654 ) rotation -= 2 * 3.141592654;
VBC2_PUSH_CONST 6 //rotation
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1086918619 
VBC1_SUB_FF
VBC1_POP
LAB3908: //if else
[1:584] ;if( rotation < -3.141592654 ) rotation += 2 * 3.141592654;
VBC3_PUSH_GLOBAL 6 //rotation
VBC5_PUSH_CONST -1068953637 // -
VBC1_LESS_FF
VBC4_FALSE_JUMP LAB3932 //if to false
;if( rotation < -3.141592654 ) rotation += 2 * 3.141592654;
VBC2_PUSH_CONST 6 //rotation
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1086918619 
VBC1_ADD_FF
VBC1_POP
LAB3932: //if else
[1:585] ;if( rotation > 0.7 ) rotation = 0.7;
VBC3_PUSH_GLOBAL 6 //rotation
VBC5_PUSH_CONST 1060320051 
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB3953 //if to false
;if( rotation > 0.7 ) rotation = 0.7;
VBC2_PUSH_CONST 6 //rotation
VBC5_PUSH_CONST 1060320051 
VBC1_POP
LAB3953: //if else
[1:586] ;if( rotation < -0.7 ) rotation = -0.7;
VBC3_PUSH_GLOBAL 6 //rotation
VBC5_PUSH_CONST -1087163597 // -
VBC1_LESS_FF
VBC4_FALSE_JUMP LAB3974 //if to false
;if( rotation < -0.7 ) rotation = -0.7;
VBC2_PUSH_CONST 6 //rotation
VBC5_PUSH_CONST -1087163597 // -
VBC1_POP
LAB3974: //if else
[1:594] ;
VBC1_RETURN
;mixing <void()>
[1:599] ;leftRightFactor = 100;
VBC3_PUSH_CONST 195 //leftRightFactor
VBC2_PUSH_CONST 100 
VBC1_POP
[1:600] ;frontBackFactor = 70;
VBC3_PUSH_CONST 196 //frontBackFactor
VBC2_PUSH_CONST 70 
VBC1_POP
[1:602] ;while(1) {
LAB3987: //while condition
;
[1:604] ;leftFootSideAddonMix = -svImuGyroZ * leftRightFactor >> 10;
VBC3_PUSH_CONST 2953 //leftFootSideAddonMix
VBC3_PUSH_GLOBAL 2568 //svImuGyroZ
VBC1_NEG
VBC3_PUSH_GLOBAL 195 //leftRightFactor
VBC1_MUL
VBC2_PUSH_CONST 10 
VBC1_RSHIFT
VBC1_POP
[1:605] ;rightFootSideAddonMix = svImuGyroZ * leftRightFactor >> 10;
VBC3_PUSH_CONST 2937 //rightFootSideAddonMix
VBC3_PUSH_GLOBAL 2568 //svImuGyroZ
VBC3_PUSH_GLOBAL 195 //leftRightFactor
VBC1_MUL
VBC2_PUSH_CONST 10 
VBC1_RSHIFT
VBC1_POP
[1:608] ;rightFootFrontAddonMix = leftFootFrontAddonMix = -svImuGyroX * frontBackFactor >> 10;
VBC3_PUSH_CONST 2905 //rightFootFrontAddonMix
VBC3_PUSH_CONST 2921 //leftFootFrontAddonMix
VBC3_PUSH_GLOBAL 2566 //svImuGyroX
VBC1_NEG
VBC3_PUSH_GLOBAL 196 //frontBackFactor
VBC1_MUL
VBC2_PUSH_CONST 10 
VBC1_RSHIFT
VBC1_STORE
VBC1_POP
[1:611] ;sfWaitNextFrame();
VBC1_WAIT
VBC4_JUMP LAB3987 //while forever loop
LAB4040: //while exit
[1:618] ;
VBC1_RETURN
;setup_final <void()>
[1:619] ;fr1 = 20; 
VBC2_PUSH_CONST 39 //fr1
VBC2_PUSH_CONST 20 
VBC1_POP
[1:620] ;fr2 = 20;  
VBC2_PUSH_CONST 40 //fr2
VBC2_PUSH_CONST 20 
VBC1_POP
[1:621] ;amplitude = 20; 
VBC2_PUSH_CONST 37 //amplitude
VBC2_PUSH_CONST 20 
VBC1_POP_CF
[1:622] ;bodyTiltAtWalk = 0.01;
VBC2_PUSH_CONST 58 //bodyTiltAtWalk
VBC5_PUSH_CONST 1008981770 
VBC1_POP
[1:623] ;solyLandingSkew = 0.08;
VBC2_PUSH_CONST 59 //solyLandingSkew
VBC5_PUSH_CONST 1034147594 
VBC1_POP
[1:624] ;relaxFootR = 0;
VBC2_PUSH_CONST 56 //relaxFootR
VBC1_PUSH_0 
VBC1_POP
[1:625] ;relaxFootL = 0;
VBC2_PUSH_CONST 57 //relaxFootL
VBC1_PUSH_0 
VBC1_POP
[1:626] ;sideLength = 0;
VBC2_PUSH_CONST 5 //sideLength
VBC1_PUSH_0 
VBC1_POP_CF
[1:627] ;rotation = 0;
VBC2_PUSH_CONST 6 //rotation
VBC1_PUSH_0 
VBC1_POP_CF
[1:630] ;
VBC1_RETURN
;runTest <void()>
VBC1_STACK_DN1//local vars 1
[1:632] ;walkStraightInitialPose();
VBC3_PUSH_CONST 2242  //func address walkStraightInitialPose
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:634] ;stepType = 0;
VBC2_PUSH_CONST 53 //stepType
VBC1_PUSH_0 
VBC1_POP
[1:635] ;stepLength = 40 / 3.0;
VBC2_PUSH_CONST 4 //stepLength
VBC5_PUSH_CONST 1096111445 
VBC1_POP
[1:636] ;walkCycle();
VBC3_PUSH_CONST 3794  //func address walkCycle
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:639] ;stepType = 2;
VBC2_PUSH_CONST 53 //stepType
VBC1_PUSH_2 
VBC1_POP
[1:640] ;stepLength = 40 * 2.0 / 3.0;
VBC2_PUSH_CONST 4 //stepLength
VBC5_PUSH_CONST 1104500053 
VBC1_POP
[1:641] ;walkCycle();
VBC3_PUSH_CONST 3794  //func address walkCycle
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:644] ;stepLength = 40;
VBC2_PUSH_CONST 4 //stepLength
VBC2_PUSH_CONST 40 
VBC1_POP_CF
[1:645] ;
[1:646] ;for( i = 0; i < 5 ; i++ ){
VBC2_PUSH_B_OFFSET -1 //i
VBC1_PUSH_0 
VBC1_POP
LAB4138: //for condition
VBC2_PUSH_LOCAL -1 //i
VBC2_PUSH_CONST 5 
VBC1_LESS
VBC4_FALSE_JUMP LAB4164 //to for exit
;
[1:647] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 3866  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:648] ;walkCycle();
VBC3_PUSH_CONST 3794  //func address walkCycle
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB4157: //for step
VBC2_PUSH_B_OFFSET -1 //i
VBC1_INC
VBC4_JUMP LAB4138 //to condition
LAB4164: //for exit
[1:651] ;stepType = 1;
VBC2_PUSH_CONST 53 //stepType
VBC1_PUSH_1 
VBC1_POP
[1:652] ;walkCycle();
VBC3_PUSH_CONST 3794  //func address walkCycle
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:655] ;walkStraightFinalPose();
VBC3_PUSH_CONST 2328  //func address walkStraightFinalPose
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:660] ;
VBC1_RETURN
;main <void()>
VBC1_STACK_DN1//local vars 1
[1:661] ;restart_flag = 0;
VBC1_PUSH_2 //restart_flag
VBC1_PUSH_0 
VBC1_POP
[1:662] ;pitStop = 0;
VBC2_PUSH_CONST 3 //pitStop
VBC1_PUSH_0 
VBC1_POP
[1:663] ;setup();
VBC3_PUSH_CONST 676  //func address setup
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:664] ;setup_final();
VBC3_PUSH_CONST 4041  //func address setup_final
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:666] ;
[1:666] ;int frameCount = 80;
VBC2_PUSH_B_OFFSET -1 //frameCount
VBC2_PUSH_CONST 80 
VBC1_POP
[1:667] ;sfPoseGroup(1056964607 , 0, frameCount);
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC5_PUSH_CONST 1056964607 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:668] ;sfWaitFrame(frameCount);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:672] ;sfQuaternionToEulerImu();
VBC5_PUSH_CONST 303 | 0x80000000 //import func index sfQuaternionToEulerImu
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:673] ;forwardDirection = svEulerYaw;
VBC3_PUSH_CONST 194 //forwardDirection
VBC3_PUSH_GLOBAL 2600 //svEulerYaw
VBC1_POP
[1:676] ;sfCreateTask( mixing, 20 );
VBC5_PUSH_CONST 2 | 0x80000000 //import func index sfCreateTask
VBC3_PUSH_CONST 3975  //func address mixing
VBC2_PUSH_CONST 20 
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
[1:680] ;svButtonRight = -1 ;
VBC3_PUSH_CONST 2582 //svButtonRight
VBC2_PUSH_CONST -1 // -
VBC1_POP
[1:681] ;svButtonLeft = -1 ;
VBC3_PUSH_CONST 2581 //svButtonLeft
VBC2_PUSH_CONST -1 // -
VBC1_POP
[1:682] ;sfBip(1, 1);
VBC5_PUSH_CONST 43 | 0x80000000 //import func index sfBip
VBC1_PUSH_1 
VBC1_PUSH_1 
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
[1:683] ;while (svButtonPress != 2 ) sfWaitFrame(1); 
LAB4270: //while condition
VBC3_PUSH_GLOBAL 2583 //svButtonPress
VBC1_PUSH_2 
VBC1_NOT_EQU
VBC4_FALSE_JUMP LAB4288 //while to exit
;while (svButtonPress != 2 ) sfWaitFrame(1); 
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC1_PUSH_1 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
VBC4_JUMP LAB4270 //while forever loop
LAB4288: //while exit
[1:684] ;svButtonRight = 66 ;
VBC3_PUSH_CONST 2582 //svButtonRight
VBC2_PUSH_CONST 66 
VBC1_POP
[1:685] ;svButtonLeft = 69 ;
VBC3_PUSH_CONST 2581 //svButtonLeft
VBC2_PUSH_CONST 69 
VBC1_POP
[1:686] ;restart_flag = 1;
VBC1_PUSH_2 //restart_flag
VBC1_PUSH_1 
VBC1_POP
[1:688] ;runTest();
VBC3_PUSH_CONST 4089  //func address runTest
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:691] ;
VBC1_RETURN
//Init table
//Variables
svFrameCount : 1
svImuAccX : 2560
svImuAccY : 2561
svImuAccZ : 2562
svImuAccRawX : 2563
svImuAccRawY : 2564
svImuAccRawZ : 2565
svImuGyroX : 2566
svImuGyroY : 2567
svImuGyroZ : 2568
svImuGyroRawX : 2569
svImuGyroRawY : 2570
svImuGyroRawZ : 2571
svImuQuaterX : 2572
svImuQuaterY : 2573
svImuQuaterZ : 2574
svImuQuaterW : 2575
svImuQuaterAcc : 2576
svImuAccSlowX : 2577
svImuAccSlowY : 2578
svImuAccSlowZ : 2579
svAdc : 2580
svButtonLeft : 2581
svButtonRight : 2582
svButtonPress : 2583
svHeadControlMask : 2584
svDefFrameCount : 2585
svEulerYaw F: 2600
svEulerPitch F: 2601
svEulerRoll F: 2602
svRemoteStatus : 3250
svRemoteButton : 3251
svRemoteLeftJoystick : 3252
svRemoteLeftJoystickX : 3253
svRemoteLeftJoystickY : 3254
svRemoteRightJoystick : 3255
svRemoteRightJoystickX : 3256
svRemoteRightJoystickY : 3257
svDebug0 : 2603
svDebug1 : 2604
svDebug2 : 2605
svDebug3 : 2606
svHumoModelDistPelvic : 3264
svHumoModelLengthPelvicHip : 3265
svHumoModelLengthHipHip : 3266
svHumoModelLengthHipKnee : 3267
svHumoModelLengthKneeFoot : 3268
svHumoModelLengthFootFoot : 3269
svHumoModelDistFootFloor : 3270
svHumoModelFootLength : 3271
svHumoModelFootWidth : 3272
svHumoModelFootCenterBack : 3273
svHumoModelFootCenterInner : 3274
svHumoModelAngPelvic : 3258
svHumoModelAngHipSide : 3260
svHumoModelAngHip : 3259
svHumoModelAngKnee : 3261
svHumoModelAngFoot : 3262
svHumoModelAngFootSide : 3263
svIkA5 F: 3275
svIkB5 F: 3276
svIkC5 F: 3277
svIkA6 F: 3278
svIkA7 F: 3279
svIkA8 F: 3280
svIkA9 F: 3281
svIkA10 F: 3282
svIkB10 F: 3283
svIkC10 F: 3284
svIkLimA5min F: 3285
svIkLimA5max F: 3286
svIkLimA6min F: 3287
svIkLimA6max F: 3288
svIkLimA7min F: 3289
svIkLimA7max F: 3290
svIkLimA8min F: 3291
svIkLimA8max F: 3292
svIkLimA9min F: 3293
svIkLimA9max F: 3294
svIkLimA10min F: 3295
svIkLimA10max F: 3296
svIkOutPresent : 3297
svIkEncA5 : 3298
svIkEncA6 : 3299
svIkEncA7 : 3300
svIkEncA8 : 3301
svIkEncA9 : 3302
svIkEncA10 : 3303
headRotateTarget : 2610
headRotateCurrent : 2611
headRotatePwm : 2612
headRotateVelo : 2613
headRotateFlags : 2615
headRotateAddonMix : 2617
torsoRotateTarget : 2626
torsoRotateCurrent : 2627
torsoRotatePwm : 2628
torsoRotateVelo : 2629
torsoRotateFlags : 2631
torsoRotateAddonMix : 2633
rightClavicleTarget : 2642
rightClavicleCurrent : 2643
rightClaviclePwm : 2644
rightClavicleVelo : 2645
rightClavicleFlags : 2647
rightClavicleAddonMix : 2649
leftClavicleTarget : 2658
leftClavicleCurrent : 2659
leftClaviclePwm : 2660
leftClavicleVelo : 2661
leftClavicleFlags : 2663
leftClavicleAddonMix : 2665
rightShoulderTarget : 2674
rightShoulderCurrent : 2675
rightShoulderPwm : 2676
rightShoulderVelo : 2677
rightShoulderFlags : 2679
rightShoulderAddonMix : 2681
leftShoulderTarget : 2690
leftShoulderCurrent : 2691
leftShoulderPwm : 2692
leftShoulderVelo : 2693
leftShoulderFlags : 2695
leftShoulderAddonMix : 2697
rightElbowSideTarget : 2706
rightElbowSideCurrent : 2707
rightElbowSidePwm : 2708
rightElbowSideVelo : 2709
rightElbowSideFlags : 2711
rightElbowSideAddonMix : 2713
leftElbowSideTarget : 2722
leftElbowSideCurrent : 2723
leftElbowSidePwm : 2724
leftElbowSideVelo : 2725
leftElbowSideFlags : 2727
leftElbowSideAddonMix : 2729
rightElbowTarget : 2738
rightElbowCurrent : 2739
rightElbowPwm : 2740
rightElbowVelo : 2741
rightElbowFlags : 2743
rightElbowAddonMix : 2745
leftElbowTarget : 2754
leftElbowCurrent : 2755
leftElbowPwm : 2756
leftElbowVelo : 2757
leftElbowFlags : 2759
leftElbowAddonMix : 2761
rightPelvicTarget : 2770
rightPelvicCurrent : 2771
rightPelvicPwm : 2772
rightPelvicVelo : 2773
rightPelvicFlags : 2775
rightPelvicAddonMix : 2777
leftPelvicTarget : 2786
leftPelvicCurrent : 2787
leftPelvicPwm : 2788
leftPelvicVelo : 2789
leftPelvicFlags : 2791
leftPelvicAddonMix : 2793
rightHipSideTarget : 2802
rightHipSideCurrent : 2803
rightHipSidePwm : 2804
rightHipSideVelo : 2805
rightHipSideFlags : 2807
rightHipSideAddonMix : 2809
leftHipSideTarget : 2818
leftHipSideCurrent : 2819
leftHipSidePwm : 2820
leftHipSideVelo : 2821
leftHipSideFlags : 2823
leftHipSideAddonMix : 2825
rightHipTarget : 2834
rightHipCurrent : 2835
rightHipPwm : 2836
rightHipVelo : 2837
rightHipFlags : 2839
rightHipAddonMix : 2841
leftHipTarget : 2850
leftHipCurrent : 2851
leftHipPwm : 2852
leftHipVelo : 2853
leftHipFlags : 2855
leftHipAddonMix : 2857
rightKneeTarget : 2866
rightKneeCurrent : 2867
rightKneePwm : 2868
rightKneeVelo : 2869
rightKneeFlags : 2871
rightKneeAddonMix : 2873
leftKneeTarget : 2882
leftKneeCurrent : 2883
leftKneePwm : 2884
leftKneeVelo : 2885
leftKneeFlags : 2887
leftKneeAddonMix : 2889
rightFootFrontTarget : 2898
rightFootFrontCurrent : 2899
rightFootFrontPwm : 2900
rightFootFrontVelo : 2901
rightFootFrontFlags : 2903
rightFootFrontAddonMix : 2905
leftFootFrontTarget : 2914
leftFootFrontCurrent : 2915
leftFootFrontPwm : 2916
leftFootFrontVelo : 2917
leftFootFrontFlags : 2919
leftFootFrontAddonMix : 2921
rightFootSideTarget : 2930
rightFootSideCurrent : 2931
rightFootSidePwm : 2932
rightFootSideVelo : 2933
rightFootSideFlags : 2935
rightFootSideAddonMix : 2937
leftFootSideTarget : 2946
leftFootSideCurrent : 2947
leftFootSidePwm : 2948
leftFootSideVelo : 2949
leftFootSideFlags : 2951
leftFootSideAddonMix : 2953
rightHandTarget : 2962
rightHandCurrent : 2963
rightHandPwm : 2964
rightHandVelo : 2965
rightHandFlags : 2967
rightHandAddonMix : 2969
leftHandTarget : 2978
leftHandCurrent : 2979
leftHandPwm : 2980
leftHandVelo : 2981
leftHandFlags : 2983
leftHandAddonMix : 2985
headTiltTarget : 3010
headTiltCurrent : 3011
headTiltPwm : 3012
headTiltVelo : 3013
headTiltFlags : 3015
headTiltAddonMix : 3017
rightKneeBotTarget : 3026
rightKneeBotCurrent : 3027
rightKneeBotPwm : 3028
rightKneeBotVelo : 3029
rightKneeBotFlags : 3031
rightKneeBotAddonMix : 3033
leftKneeBotTarget : 3042
leftKneeBotCurrent : 3043
leftKneeBotPwm : 3044
leftKneeBotVelo : 3045
leftKneeBotFlags : 3047
leftKneeBotAddonMix : 3049
rightClawTarget : 3058
rightClawCurrent : 3059
rightClawPwm : 3060
rightClawVelo : 3061
rightClawFlags : 3063
rightClawAddonMix : 3065
leftClawTarget : 3074
leftClawCurrent : 3075
leftClawPwm : 3076
leftClawVelo : 3077
leftClawFlags : 3079
leftClawAddonMix : 3081
restart_flag : 2
pitStop : 3
stepLength F: 4
sideLength F: 5
rotation F: 6
selfMotionShiftCorrectionX F: 7
selfMotionShiftCorrectionY F: 8
selfFirstStepYield F: 9
selfCycleStepYield F: 10
selfSideStepRightYield F: 11
selfSideStepLeftYield F: 12
selfFirstLegIsRightLeg : 13
selfInitPoses : 14
selfExitFlag : 15
selfFallingFlag : 16
selfNeckPan : 17
rotationYieldRight F: 18
rotationYieldLeft F: 19
framestep : 20
xtr F: 21
ytr F: 22
ztr F: 23
xr F: 24
yr F: 25
zr F: 26
wr F: 27
xtl F: 28
ytl F: 29
ztl F: 30
xl F: 31
yl F: 32
zl F: 33
wl F: 34
e10 F: 35
d10 F: 36
amplitude F: 37
alpha01 F: 38
fr1 : 39
fr2 : 40
gaitHeight F: 41
stepHeight F: 42
correctedStepLenght F: 43
correctedStepLenghtHalf F: 44
correctedSideLenght F: 45
correctedSideLenghtHalf F: 46
ztr0 F: 47
ztl0 F: 48
stepZtr F: 49
stepZtl F: 50
stepYtr F: 51
stepYtl F: 52
stepType : 53
fps : 54
frames_per_cycle : 55
relaxFootR : 56
relaxFootL : 57
bodyTiltAtWalk F: 58
solyLandingSkew F: 59
segments_num : 60
segments[] : 61
segments_sum : 161
j : 162
i : 163
test1 F: 164
test2 F: 165
test3 F: 166
alpha6 F: 167
alpha7 F: 168
alpha9 F: 169
alpha10 F: 170
IkEncA5 F: 171
IkEncA6 F: 172
IkEncA7 F: 173
IkEncA8 F: 174
IkEncA9 F: 175
IkEncA10 F: 176
IkOutPresent F: 177
xtl0 F: 178
xtr0 F: 179
dx0Typical F: 180
dy0Typical F: 181
correctedRotation F: 182
s F: 183
fase_offset F: 184
xtl_plan F: 185
xtr_plan F: 186
dx F: 187
dx0 F: 188
dx1 F: 189
dx2 F: 190
dx4 F: 191
dy F: 192
stepRotation F: 193
forwardDirection F: 194
leftRightFactor : 195
frontBackFactor : 196
