//====================================================================
//      SvCompiler V9.06
//By A.Sibilev
//====================================================================
//cblock

;sfVpuVersion <int()>
;sfCreateTask <int(,*<void()>,int)>
;sfLog <void(,cstring,int,int,int)>
;sfLogOpen <void(,cstring)>
;sfLogClose <void()>
;sfWaitFrameOut <void(,int)>
;sfIsFrameOut <int(,int)>
;sfWaitNextFrame <void()>
;sfSlotIndex <int(,cstring)>
;sfSoundIndex <int(,cstring)>
;sfAbs <int(,int)>
;sfIMin <int(,int,int)>
;sfIMax <int(,int,int)>
;sfUMin <int(,int,int)>
;sfUMax <int(,int,int)>
;sfILimit <int(,int,int,int)>
;sfStop <void()>
;sfStartSlot <void(,int)>
;sfBip <void(,int,int)>
;sfWriteFlash <void()>
;sfSoundPlay <void(,int)>
;sfSoundIsPlay <int()>
;sfFreeGroup <void(,int)>
;sfPoseGroup <void(,int,int,int)>
;sfPoseGroupDelay <void(,int,int,int,int)>
;sfPoseCorrect <void(,int,int)>
;sfQueueGroup <void(,int,int,int)>
;sfPoseIdx <void(,int,int,int)>
;sfPoseGroupLin <void(,int,int,int)>
;sfStrainGroup <void(,int)>
;sfPlaySamples <void(,int,int,int,*cblock)>
;sfPlayWSamples <void(,int,int,int,*cwblock)>
;sfAccumSetup1 <void(,*int)>
;sfAccumSetup2 <void(,*int,*int)>
;sfAccumSetup3 <void(,*int,*int,*int)>
;sfAccumSetup4 <void(,*int,*int,*int,*int)>
;sfAccumTrigger <void()>
;sfAccumReset <void()>
;sfUnitParamQueryRead <int(,int,int)>
;sfUnitParamQueryWrite <int(,int,int,int)>
;sfUnitParamStatusRead <int(,int,int,*int)>
;sfMathAcos <int(,int,int)>
;sfMathSqrti <int(,int)>
;sfMathAngleOfTriangle <int(,int,int,int)>
;sfMathAngleOfKnee <int(,int,int,int)>
;sfMathCathetOfSquareTriangle <int(,int,int)>
;sfMathHypotenuseOfSquareTriangle <int(,int,int)>
;sfMathTableSin <int(,int,int)>
;sfHumoModelSetup <void()>
;sfHumoModelFootAtFloor <void(,int,int,int)>
;sfHumoModelFootPush <void(,int,int,int)>
;sfIndexOfMask <int(,int)>
;sfQueueIdxAppend <int(,int,int,int)>
;sfQueueIdxOffsets <int(,int,int,*cblock,int)>
;sfQueueIdxSinMove <int(,int,int,int,int)>
;sfQueueIdxLast <int(,int)>
;sfQueueIdxCount <int(,int)>
;sfQueueMax <int()>
;sfIkSetup <void()>
;sfIkAngle <void(,float,float,float,float,float,float,float)>
;sfMathCos <float(,float)>
;sfMathSin <float(,float)>
;sfQuaternionToEuler <void(,float,float,float,float)>
;sfQuaternionToEulerImu <void()>
;sfFMathACos <float(,float)>
;sfFMathASin <float(,float)>
;sfFMathATan <float(,float)>
;sfFMathATan2 <float(,float,float)>
;sfFMathCos <float(,float)>
;sfFMathSin <float(,float)>
;sfFMathTan <float(,float)>
;sfFMathCosh <float(,float)>
;sfFMathSinh <float(,float)>
;sfFMathTanh <float(,float)>
;sfFMathExp <float(,float)>
;sfFMathFrExp <float(,float,*int)>
;sfFMathLdExp <float(,float,int)>
;sfFMathLog <float(,float)>
;sfFMathLog10 <float(,float)>
;sfFMathModf <float(,float,*float)>
;sfFMathPow <float(,float,float)>
;sfFMathSqrt <float(,float)>
;sfFMathCeil <float(,float)>
;sfFMathFAbs <float(,float)>
;sfFMathFloor <float(,float)>
;sfFMathFMod <float(,float,float)>
;sfQuaternionToMatrix <void(,*:SfMatrix3x3,float,float,float,float)>
;sfQuaternionToMatrixImu <void(,*:SfMatrix3x3)>
;sfGravityVector <void(,*:SfVector3)>
;sfVec3Set <void(,*:SfVector3,float,float,float)>
;sfVec3Sum <void(,*:SfVector3,*:SfVector3,*:SfVector3)>
;sfVec3Diff <void(,*:SfVector3,*:SfVector3,*:SfVector3)>
;sfVec3MulRowColCx <float(,*:SfVector3,float,float,float)>
;sfVec3MulRowCol <float(,*:SfVector3,*:SfVector3)>
;sfVec3ScSum <void(,*:SfVector3,*:SfVector3,float)>
;sfVec3ScDiff <void(,*:SfVector3,*:SfVector3,float)>
;sfVec3ScMul <void(,*:SfVector3,*:SfVector3,float)>
;sfVec3ScDiv <void(,*:SfVector3,*:SfVector3,float)>
;sfMat3x3Set <void(,*:SfMatrix3x3,float,float,float,float,float,float,float,float,float)>
;sfMat3x3SetAll <void(,*:SfMatrix3x3,float)>
;sfMat3x3SetDiag <void(,*:SfMatrix3x3,float)>
;sfMat3x3Copy <void(,*:SfMatrix3x3,*:SfMatrix3x3)>
;sfMat3x3Transpose <void(,*:SfMatrix3x3,*:SfMatrix3x3)>
;sfMat3x3Mul <void(,*:SfMatrix3x3,*:SfMatrix3x3,*:SfMatrix3x3)>
;sfMat3x3ScMul <void(,*:SfMatrix3x3,*:SfMatrix3x3,float)>
;sfMat3x3MulCol <void(,*:SfVector3,*:SfMatrix3x3,*:SfVector3)>
;sfMat3x3RowMul <void(,*:SfVector3,*:SfVector3,*:SfMatrix3x3)>
;sfWaitFrame <void(,int)>
[3:491] ;sfWaitFrameOut( frame + svFrameCount );
VBC5_PUSH_CONST 17 | 0x80000000 //import func index sfWaitFrameOut
VBC2_PUSH_LOCAL 2 //frame
VBC3_PUSH_GLOBAL 1 //svFrameCount
VBC1_ADD
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[3:497] ;
VBC1_RETURN
;sfUnitParamRead <int(,int,int,*int)>
[3:499] ;if( !sfUnitParamQueryRead( devId, paramIndex ) )
VBC5_PUSH_CONST 66 | 0x80000000 //import func index sfUnitParamQueryRead
VBC2_PUSH_LOCAL 4 //devId
VBC2_PUSH_LOCAL 3 //paramIndex
VBC1_CALL2
VBC1_STACK_UP2//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB90 //if to false
;return 0;
VBC1_PUSH_0 
VBC2_POP_RESULT 5
VBC1_RETURN
LAB90: //if else
[3:503] ;sfWaitNextFrame();
VBC1_WAIT
[3:504] ;sfWaitNextFrame();
VBC1_WAIT
[3:505] ;return sfUnitParamStatusRead( devId, paramIndex, paramValue );
VBC5_PUSH_CONST 68 | 0x80000000 //import func index sfUnitParamStatusRead
VBC2_PUSH_LOCAL 4 //devId
VBC2_PUSH_LOCAL 3 //paramIndex
VBC2_PUSH_LOCAL 2 //paramValue
VBC1_CALL3
VBC1_STACK_UP3//remove call address and params
VBC2_POP_RESULT 5
VBC1_RETURN
;setup <void()>
[1:98] ;flag_event = 0;
VBC2_PUSH_CONST 64 //flag_event
VBC1_PUSH_0 
VBC1_POP
[1:99] ;timeStep = 1;
VBC2_PUSH_CONST 59 //timeStep
VBC1_PUSH_1 
VBC1_POP
[1:100] ;rotationYieldRight = 0.23;
VBC2_PUSH_CONST 22 //rotationYieldRight
VBC5_PUSH_CONST 1047233823 
VBC1_POP
[1:101] ;rotationYieldLeft = 0.23;
VBC2_PUSH_CONST 23 //rotationYieldLeft
VBC5_PUSH_CONST 1047233823 
VBC1_POP
[1:103] ;svIkA5 = 40.2; 
VBC3_PUSH_CONST 3275 //svIkA5
VBC5_PUSH_CONST 1109445837 
VBC1_POP
[1:104] ;svIkB5 = 0;    
VBC3_PUSH_CONST 3276 //svIkB5
VBC1_PUSH_0 
VBC1_POP_CF
[1:105] ;svIkC5 = 0;    
VBC3_PUSH_CONST 3277 //svIkC5
VBC1_PUSH_0 
VBC1_POP_CF
[1:106] ;svIkA6 = 0;    
VBC3_PUSH_CONST 3278 //svIkA6
VBC1_PUSH_0 
VBC1_POP_CF
[1:107] ;svIkA7 = 99;   
VBC3_PUSH_CONST 3279 //svIkA7
VBC2_PUSH_CONST 99 
VBC1_POP_CF
[1:108] ;svIkA8 = 99;   
VBC3_PUSH_CONST 3280 //svIkA8
VBC2_PUSH_CONST 99 
VBC1_POP_CF
[1:109] ;svIkA9 = 0;    
VBC3_PUSH_CONST 3281 //svIkA9
VBC1_PUSH_0 
VBC1_POP_CF
[1:110] ;svIkA10 = 13.7;  
VBC3_PUSH_CONST 3282 //svIkA10
VBC5_PUSH_CONST 1096495923 
VBC1_POP
[1:111] ;svIkB10 = 23.8;  
VBC3_PUSH_CONST 3283 //svIkB10
VBC5_PUSH_CONST 1102997094 
VBC1_POP
[1:112] ;svIkC10 = 0;   
VBC3_PUSH_CONST 3284 //svIkC10
VBC1_PUSH_0 
VBC1_POP_CF
[1:114] ;e10 = 55;      
VBC2_PUSH_CONST 39 //e10
VBC2_PUSH_CONST 55 
VBC1_POP_CF
[1:115] ;d10 = 62;      
VBC2_PUSH_CONST 40 //d10
VBC2_PUSH_CONST 62 
VBC1_POP_CF
[1:118] ;svIkLimA5min = -150 * 0.017453293;
VBC3_PUSH_CONST 3285 //svIkLimA5min
VBC5_PUSH_CONST -1071149770 
VBC1_POP
[1:119] ;svIkLimA5max = 150 * 0.017453293;
VBC3_PUSH_CONST 3286 //svIkLimA5max
VBC5_PUSH_CONST 1076333878 
VBC1_POP
[1:122] ;svIkLimA6min = -90 * 0.017453293;
VBC3_PUSH_CONST 3287 //svIkLimA6min
VBC5_PUSH_CONST -1077342245 
VBC1_POP
[1:123] ;svIkLimA6max = 17 * 0.017453293;
VBC3_PUSH_CONST 3288 //svIkLimA6max
VBC5_PUSH_CONST 1050143192 
VBC1_POP
[1:125] ;svIkLimA7min = -97 * 0.017453293;
VBC3_PUSH_CONST 3289 //svIkLimA7min
VBC5_PUSH_CONST -1076317384 
VBC1_POP
[1:126] ;svIkLimA7max = 103 * 0.017453293;
VBC3_PUSH_CONST 3290 //svIkLimA7max
VBC5_PUSH_CONST 1072044717 
VBC1_POP
[1:129] ;svIkLimA8min = -158 * 0.017453293;
VBC3_PUSH_CONST 3291 //svIkLimA8min
VBC5_PUSH_CONST -1070564135 
VBC1_POP
[1:130] ;svIkLimA8max = 32 * 0.017453293;
VBC3_PUSH_CONST 3292 //svIkLimA8max
VBC5_PUSH_CONST 1057946165 
VBC1_POP
[1:133] ;svIkLimA9min = -122 * 0.017453293;
VBC3_PUSH_CONST 3293 //svIkLimA9min
VBC5_PUSH_CONST -1073199493 
VBC1_POP
[1:134] ;svIkLimA9max = 83 * 0.017453293;
VBC3_PUSH_CONST 3294 //svIkLimA9max
VBC5_PUSH_CONST 1069116541 
VBC1_POP
[1:137] ;svIkLimA10min = -83 * 0.017453293;
VBC3_PUSH_CONST 3295 //svIkLimA10min
VBC5_PUSH_CONST -1078367107 
VBC1_POP
[1:138] ;svIkLimA10max = 20 * 0.017453293;
VBC3_PUSH_CONST 3296 //svIkLimA10max
VBC5_PUSH_CONST 1051900098 
VBC1_POP
[1:139] ;sfIkSetup();
VBC5_PUSH_CONST 200 | 0x80000000 //import func index sfIkSetup
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:141] ;framestep = 2;
VBC2_PUSH_CONST 24 //framestep
VBC1_PUSH_2 
VBC1_POP
[1:143] ;gaitHeight = 180; 
VBC2_PUSH_CONST 45 //gaitHeight
VBC3_PUSH_CONST 180 
VBC1_POP_CF
[1:144] ;stepHeight = 32; 
VBC2_PUSH_CONST 46 //stepHeight
VBC2_PUSH_CONST 32 
VBC1_POP_CF
[1:146] ;selfMotionShiftCorrectionX = -50.0 / 21.0;
VBC2_PUSH_CONST 9 //selfMotionShiftCorrectionX
VBC5_PUSH_CONST -1072143994 
VBC1_POP
[1:147] ;selfMotionShiftCorrectionY = 70.0 / 21.0;
VBC2_PUSH_CONST 10 //selfMotionShiftCorrectionY
VBC5_PUSH_CONST 1079334229 
VBC1_POP
[1:151] ;ztr0 = -(svIkC5+svIkA6+svIkA7+svIkA8+svIkA9+svIkB10 - 1); 
VBC2_PUSH_CONST 51 //ztr0
VBC3_PUSH_GLOBAL 3277 //svIkC5
VBC3_PUSH_GLOBAL 3278 //svIkA6
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3279 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3280 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3281 //svIkA9
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3283 //svIkB10
VBC1_ADD_FF
VBC1_PUSH_1 
VBC1_SUB_FI
VBC1_NEG_F
VBC1_POP
[1:152] ;ztl0 = -(svIkC5+svIkA6+svIkA7+svIkA8+svIkA9+svIkB10 - 1); 
VBC2_PUSH_CONST 52 //ztl0
VBC3_PUSH_GLOBAL 3277 //svIkC5
VBC3_PUSH_GLOBAL 3278 //svIkA6
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3279 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3280 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3281 //svIkA9
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3283 //svIkB10
VBC1_ADD_FF
VBC1_PUSH_1 
VBC1_SUB_FI
VBC1_NEG_F
VBC1_POP
[1:154] ;zr = zl = -1;
VBC2_PUSH_CONST 30 //zr
VBC2_PUSH_CONST 37 //zl
VBC2_PUSH_CONST -1 // -
VBC1_STORE_CF
VBC1_POP
[1:157] ;selfInitPoses = 10;
VBC2_PUSH_CONST 18 //selfInitPoses
VBC2_PUSH_CONST 10 
VBC1_POP
[1:159] ;selfTIK2RAD = 0.00058909;
VBC2_PUSH_CONST 7 //selfTIK2RAD
VBC5_PUSH_CONST 974810409 
VBC1_POP
[1:160] ;stepLength = 0.0;    
VBC2_PUSH_CONST 3 //stepLength
VBC1_PUSH_0 
VBC1_POP
[1:161] ;sideLength = 0.0;    
VBC2_PUSH_CONST 4 //sideLength
VBC1_PUSH_0 
VBC1_POP
[1:162] ;rotation = 0;        
VBC2_PUSH_CONST 5 //rotation
VBC1_PUSH_0 
VBC1_POP_CF
[1:163] ;selfFirstLegIsRightLeg = -1; 
VBC2_PUSH_CONST 15 //selfFirstLegIsRightLeg
VBC2_PUSH_CONST -1 // -
VBC1_POP
[1:164] ;motion_to_right = 1;
VBC2_PUSH_CONST 16 //motion_to_right
VBC1_PUSH_1 
VBC1_POP
[1:165] ;side_motion = 0.0;
VBC2_PUSH_CONST 17 //side_motion
VBC1_PUSH_0 
VBC1_POP
[1:166] ;selfInitPoses = 20; 
VBC2_PUSH_CONST 18 //selfInitPoses
VBC2_PUSH_CONST 20 
VBC1_POP
[1:168] ;stepZtr = (ztr0 + gaitHeight) / selfInitPoses;
VBC2_PUSH_CONST 53 //stepZtr
VBC3_PUSH_GLOBAL 51 //ztr0
VBC3_PUSH_GLOBAL 45 //gaitHeight
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 18 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:169] ;stepZtl = (ztl0 + gaitHeight) / selfInitPoses;
VBC2_PUSH_CONST 54 //stepZtl
VBC3_PUSH_GLOBAL 52 //ztl0
VBC3_PUSH_GLOBAL 45 //gaitHeight
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 18 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:170] ;bodyTiltAtWalk = 0.02;
VBC2_PUSH_CONST 60 //bodyTiltAtWalk
VBC5_PUSH_CONST 1017370378 
VBC1_POP
[1:171] ;solyLandingSkew = 0.00;
VBC2_PUSH_CONST 61 //solyLandingSkew
VBC1_PUSH_0 
VBC1_POP
[1:173] ;if( slowWalk ) {
VBC3_PUSH_GLOBAL 2 //slowWalk
VBC4_FALSE_JUMP LAB527 //if to false
;
[1:174] ;fr1 = 50; 
VBC2_PUSH_CONST 43 //fr1
VBC2_PUSH_CONST 50 
VBC1_POP
[1:175] ;fr2 = 20; 
VBC2_PUSH_CONST 44 //fr2
VBC2_PUSH_CONST 20 
VBC1_POP
[1:176] ;amplitude = 110;    
VBC2_PUSH_CONST 41 //amplitude
VBC2_PUSH_CONST 110 
VBC1_POP_CF
VBC4_JUMP LAB542 //if to exit
LAB527: //if else
;
[1:179] ;fr1 = 8;           
VBC2_PUSH_CONST 43 //fr1
VBC2_PUSH_CONST 8 
VBC1_POP
[1:180] ;fr2 = 12;          
VBC2_PUSH_CONST 44 //fr2
VBC2_PUSH_CONST 12 
VBC1_POP
[1:181] ;amplitude = 32;    
VBC2_PUSH_CONST 41 //amplitude
VBC2_PUSH_CONST 32 
VBC1_POP_CF
LAB542: //if exit
[1:183] ;stepYtr = amplitude / 2.0 / selfInitPoses;
VBC2_PUSH_CONST 55 //stepYtr
VBC3_PUSH_GLOBAL 41 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 18 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:184] ;stepYtl = amplitude / 2.0 / selfInitPoses;
VBC2_PUSH_CONST 56 //stepYtl
VBC3_PUSH_GLOBAL 41 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 18 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:189] ;alpha01 = 3.141592654;
VBC2_PUSH_CONST 42 //alpha01
VBC5_PUSH_CONST 1078530011 
VBC1_POP
[1:190] ;if( fr1 != 0 )
VBC3_PUSH_GLOBAL 43 //fr1
VBC1_PUSH_0 
VBC1_NOT_EQU
VBC4_FALSE_JUMP LAB603 //if to false
;alpha01 = alpha01 * 2 / fr1;
VBC2_PUSH_CONST 42 //alpha01
VBC3_PUSH_GLOBAL 42 //alpha01
VBC1_PUSH_2 
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 43 //fr1
VBC1_DIV_FI
VBC1_POP
LAB603: //if else
[1:197] ;fps = 8;
VBC2_PUSH_CONST 58 //fps
VBC2_PUSH_CONST 8 
VBC1_POP
[1:198] ;stepLengthOrder = 130;
VBC2_PUSH_CONST 6 //stepLengthOrder
VBC3_PUSH_CONST 130 
VBC1_POP_CF
[1:199] ;if (timeStep == 1){
VBC3_PUSH_GLOBAL 59 //timeStep
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB651 //if to false
;
[1:200] ;stepLengthOrder = 40;
VBC2_PUSH_CONST 6 //stepLengthOrder
VBC2_PUSH_CONST 40 
VBC1_POP_CF
[1:201] ;fps = 2; 
VBC2_PUSH_CONST 58 //fps
VBC1_PUSH_2 
VBC1_POP
[1:202] ;bodyTiltAtWalk = -0.02; 
VBC2_PUSH_CONST 60 //bodyTiltAtWalk
VBC5_PUSH_CONST -1130113270 // -
VBC1_POP
[1:203] ;gaitHeight = 150;
VBC2_PUSH_CONST 45 //gaitHeight
VBC3_PUSH_CONST 150 
VBC1_POP_CF
[1:204] ;stepHeight = 40;
VBC2_PUSH_CONST 46 //stepHeight
VBC2_PUSH_CONST 40 
VBC1_POP_CF
LAB651: //if else
[1:213] ;
VBC1_RETURN
;computeAlphaForWalk <int()>
[1:217] ;flag = 0;
VBC2_PUSH_CONST 63 //flag
VBC1_PUSH_0 
VBC1_POP
[1:218] ;sfIkAngle( xtr, ytr, ztr, xr, yr, zr, wr );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 25 //xtr
VBC3_PUSH_GLOBAL 26 //ytr
VBC3_PUSH_GLOBAL 27 //ztr
VBC3_PUSH_GLOBAL 28 //xr
VBC3_PUSH_GLOBAL 29 //yr
VBC3_PUSH_GLOBAL 30 //zr
VBC3_PUSH_GLOBAL 31 //wr
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
[1:219] ;if( svIkOutPresent ) {
VBC3_PUSH_GLOBAL 3297 //svIkOutPresent
VBC4_FALSE_JUMP LAB920 //if to false
;
[1:220] ;flag = flag + 1;
VBC2_PUSH_CONST 63 //flag
VBC3_PUSH_GLOBAL 63 //flag
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
[1:222] ;if (selfFirstLegIsRightLeg == 1){
VBC3_PUSH_GLOBAL 15 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB816 //if to false
;
[1:223] ;sfPoseGroupLin( 1024 , -svIkEncA5, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 3298 //svIkEncA5
VBC1_NEG
VBC3_PUSH_GLOBAL 58 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:224] ;sfPoseGroupLin( 4096 , -svIkEncA6, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 3299 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 58 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:225] ;sfPoseGroupLin( 16384 , -svIkEncA7, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 3300 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 58 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:226] ;sfPoseGroupLin( 65536 , -svIkEncA8, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC3_PUSH_GLOBAL 58 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:227] ;sfPoseGroupLin( 262144 , svIkEncA9, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 3302 //svIkEncA9
VBC3_PUSH_GLOBAL 58 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:228] ;sfPoseGroupLin( 1048576 , -svIkEncA10, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 3303 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 58 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB920 //if to exit
LAB816: //if else
;
[1:232] ;sfPoseGroupLin( 2048 , svIkEncA5, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 3298 //svIkEncA5
VBC3_PUSH_GLOBAL 58 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:233] ;sfPoseGroupLin( 8192 , -svIkEncA6, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 3299 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 58 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:234] ;sfPoseGroupLin( 32768 , -svIkEncA7, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 3300 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 58 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:235] ;sfPoseGroupLin( 131072 , -svIkEncA8, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC3_PUSH_GLOBAL 58 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:236] ;sfPoseGroupLin( 524288 , svIkEncA9, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 3302 //svIkEncA9
VBC3_PUSH_GLOBAL 58 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:237] ;sfPoseGroupLin( 2097152 , -svIkEncA10, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 3303 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 58 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB920: //if exit
LAB920: //if else
[1:244] ;sfIkAngle( xtl, -ytl, ztl, xl, -yl, zl, wl );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 32 //xtl
VBC3_PUSH_GLOBAL 33 //ytl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 34 //ztl
VBC3_PUSH_GLOBAL 35 //xl
VBC3_PUSH_GLOBAL 36 //yl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 37 //zl
VBC3_PUSH_GLOBAL 38 //wl
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
[1:245] ;if( svIkOutPresent ) {
VBC3_PUSH_GLOBAL 3297 //svIkOutPresent
VBC4_FALSE_JUMP LAB1186 //if to false
;
[1:246] ;flag = flag + 1;
VBC2_PUSH_CONST 63 //flag
VBC3_PUSH_GLOBAL 63 //flag
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
[1:248] ;if (selfFirstLegIsRightLeg == 1){
VBC3_PUSH_GLOBAL 15 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB1083 //if to false
;
[1:249] ;sfPoseGroupLin( 2048 , -svIkEncA5, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 3298 //svIkEncA5
VBC1_NEG
VBC3_PUSH_GLOBAL 58 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:250] ;sfPoseGroupLin( 8192 , -svIkEncA6, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 3299 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 58 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:251] ;sfPoseGroupLin( 32768 , -svIkEncA7, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 3300 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 58 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:252] ;sfPoseGroupLin( 131072 , -svIkEncA8, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC3_PUSH_GLOBAL 58 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:253] ;sfPoseGroupLin( 524288 , svIkEncA9, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 3302 //svIkEncA9
VBC3_PUSH_GLOBAL 58 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:254] ;sfPoseGroupLin( 2097152 , -svIkEncA10, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 3303 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 58 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB1186 //if to exit
LAB1083: //if else
;
[1:258] ;sfPoseGroupLin( 1024 , svIkEncA5, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 3298 //svIkEncA5
VBC3_PUSH_GLOBAL 58 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:259] ;sfPoseGroupLin( 4096 , -svIkEncA6, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 3299 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 58 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:260] ;sfPoseGroupLin( 16384 , -svIkEncA7, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 3300 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 58 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:261] ;sfPoseGroupLin( 65536 , -svIkEncA8, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC3_PUSH_GLOBAL 58 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:262] ;sfPoseGroupLin( 262144 , svIkEncA9, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 3302 //svIkEncA9
VBC3_PUSH_GLOBAL 58 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:263] ;sfPoseGroupLin( 1048576 , -svIkEncA10, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 3303 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 58 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB1186: //if exit
LAB1186: //if else
[1:268] ;sfWaitFrame( timeStep );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 59 //timeStep
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:269] ;if (flag < 2) flag_event = flag_event + 1;
VBC3_PUSH_GLOBAL 63 //flag
VBC1_PUSH_2 
VBC1_LESS
VBC4_FALSE_JUMP LAB1210 //if to false
;if (flag < 2) flag_event = flag_event + 1;
VBC2_PUSH_CONST 64 //flag_event
VBC3_PUSH_GLOBAL 64 //flag_event
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
LAB1210: //if else
[1:270] ;return 1;
VBC1_PUSH_1 
VBC2_POP_RESULT 2
VBC1_RETURN
;computeAlphaForWalkFine <void(,int)>
[1:285] ;sfIkAngle( xtr, ytr, ztr, xr, yr, zr, wr );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 25 //xtr
VBC3_PUSH_GLOBAL 26 //ytr
VBC3_PUSH_GLOBAL 27 //ztr
VBC3_PUSH_GLOBAL 28 //xr
VBC3_PUSH_GLOBAL 29 //yr
VBC3_PUSH_GLOBAL 30 //zr
VBC3_PUSH_GLOBAL 31 //wr
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
[1:287] ;if( svIkOutPresent ) {
VBC3_PUSH_GLOBAL 3297 //svIkOutPresent
VBC4_FALSE_JUMP LAB1458 //if to false
;
[1:289] ;if (selfFirstLegIsRightLeg == 1){
VBC3_PUSH_GLOBAL 15 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB1360 //if to false
;
[1:290] ;sfPoseGroupLin( 1024 , -svIkEncA5, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 3298 //svIkEncA5
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:291] ;sfPoseGroupLin( 4096 , -svIkEncA6, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 3299 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:292] ;sfPoseGroupLin( 16384 , -svIkEncA7, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 3300 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:293] ;sfPoseGroupLin( 65536 , -svIkEncA8, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:294] ;sfPoseGroupLin( 262144 , svIkEncA9, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 3302 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:295] ;sfPoseGroupLin( 1048576 , -svIkEncA10, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 3303 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB1458 //if to exit
LAB1360: //if else
;
[1:298] ;sfPoseGroupLin( 2048 , svIkEncA5, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 3298 //svIkEncA5
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:299] ;sfPoseGroupLin( 8192 , -svIkEncA6, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 3299 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:300] ;sfPoseGroupLin( 32768 , -svIkEncA7, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 3300 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:301] ;sfPoseGroupLin( 131072 , -svIkEncA8, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:302] ;sfPoseGroupLin( 524288 , svIkEncA9, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 3302 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:303] ;sfPoseGroupLin( 2097152 , -svIkEncA10, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 3303 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB1458: //if exit
LAB1458: //if else
[1:309] ;sfIkAngle( xtl, -ytl, ztl, xl, -yl, zl, wl );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 32 //xtl
VBC3_PUSH_GLOBAL 33 //ytl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 34 //ztl
VBC3_PUSH_GLOBAL 35 //xl
VBC3_PUSH_GLOBAL 36 //yl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 37 //zl
VBC3_PUSH_GLOBAL 38 //wl
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
[1:310] ;if( svIkOutPresent ) {
VBC3_PUSH_GLOBAL 3297 //svIkOutPresent
VBC4_FALSE_JUMP LAB1704 //if to false
;
[1:312] ;if (selfFirstLegIsRightLeg == 1){
VBC3_PUSH_GLOBAL 15 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB1607 //if to false
;
[1:313] ;sfPoseGroupLin( 2048 , -svIkEncA5, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 3298 //svIkEncA5
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:314] ;sfPoseGroupLin( 8192 , -svIkEncA6, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 3299 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:315] ;sfPoseGroupLin( 32768 , -svIkEncA7, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 3300 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:316] ;sfPoseGroupLin( 131072 , -svIkEncA8, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:317] ;sfPoseGroupLin( 524288 , svIkEncA9, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 3302 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:318] ;sfPoseGroupLin( 2097152 , -svIkEncA10, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 3303 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB1704 //if to exit
LAB1607: //if else
;
[1:321] ;sfPoseGroupLin( 1024 , svIkEncA5, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 3298 //svIkEncA5
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:322] ;sfPoseGroupLin( 4096 , -svIkEncA6, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 3299 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:323] ;sfPoseGroupLin( 16384 , -svIkEncA7, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 3300 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:324] ;sfPoseGroupLin( 65536 , -svIkEncA8, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:325] ;sfPoseGroupLin( 262144 , svIkEncA9, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 3302 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:326] ;sfPoseGroupLin( 1048576 , -svIkEncA10, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 3303 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB1704: //if exit
LAB1704: //if else
[1:330] ;sfPoseGroupLin( 256  | 512 , 4540, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 768 
VBC3_PUSH_CONST 4540 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:331] ;sfPoseGroupLin( 4  | 8 , 1400, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_CONST 12 
VBC3_PUSH_CONST 1400 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:332] ;sfPoseGroupLin( 64  | 128 , 700, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 192 
VBC3_PUSH_CONST 700 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:333] ;sfWaitFrame( frameCount );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:340] ;
VBC1_RETURN
;testDrop <void()>
[1:341] ;if( sfAbs(svImuAccX) > 50000 || sfAbs(svImuAccZ) > 50000 ) {
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 2560 //svImuAccX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC4_PUSH_CONST 50000 
VBC1_GREAT
VBC4_TRUE_JUMP_KEEP LAB1794
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 2562 //svImuAccZ
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC4_PUSH_CONST 50000 
VBC1_GREAT
VBC4_TRUE_JUMP_KEEP LAB1794
VBC1_PUSH_0
LAB1794:
VBC4_FALSE_JUMP LAB1804 //if to false
;
[1:346] ;sfWaitFrame(100);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_CONST 100 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB1804: //if else
[1:352] ;
VBC1_RETURN
;walkInitialPose <void()>
[1:357] ;xtr = xtl = 0;
VBC2_PUSH_CONST 25 //xtr
VBC2_PUSH_CONST 32 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:358] ;for( j = 0; j < selfInitPoses; j++ ) {
VBC2_PUSH_CONST 65 //j
VBC1_PUSH_0 
VBC1_POP
LAB1816: //for condition
VBC3_PUSH_GLOBAL 65 //j
VBC3_PUSH_GLOBAL 18 //selfInitPoses
VBC1_LESS
VBC4_FALSE_JUMP LAB1901 //to for exit
;
[1:360] ;ztr = ztr0 - j * stepZtr;
VBC2_PUSH_CONST 27 //ztr
VBC3_PUSH_GLOBAL 51 //ztr0
VBC3_PUSH_GLOBAL 65 //j
VBC3_PUSH_GLOBAL 53 //stepZtr
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:361] ;ztl = ztl0 - j * stepZtl;
VBC2_PUSH_CONST 34 //ztl
VBC3_PUSH_GLOBAL 52 //ztl0
VBC3_PUSH_GLOBAL 65 //j
VBC3_PUSH_GLOBAL 54 //stepZtl
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:362] ;ytr = -d10 - j * stepYtr;
VBC2_PUSH_CONST 26 //ytr
VBC3_PUSH_GLOBAL 40 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 65 //j
VBC3_PUSH_GLOBAL 55 //stepYtr
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:363] ;ytl =  d10 - j * stepYtl;
VBC2_PUSH_CONST 33 //ytl
VBC3_PUSH_GLOBAL 40 //d10
VBC3_PUSH_GLOBAL 65 //j
VBC3_PUSH_GLOBAL 56 //stepYtl
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:365] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 652  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB1894 //if to false
;return;
VBC1_RETURN
LAB1894: //if else
LAB1894: //for step
VBC2_PUSH_CONST 65 //j
VBC1_INC
VBC4_JUMP LAB1816 //to condition
LAB1901: //for exit
[1:375] ;
VBC1_RETURN
;walkInitialPoseFine <void()>
[1:376] ;xtr = xtl = 0;
VBC2_PUSH_CONST 25 //xtr
VBC2_PUSH_CONST 32 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:377] ;ztr = ztl = -gaitHeight;
VBC2_PUSH_CONST 27 //ztr
VBC2_PUSH_CONST 34 //ztl
VBC3_PUSH_GLOBAL 45 //gaitHeight
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:378] ;ytr = -d10 - amplitude / 2.0;
VBC2_PUSH_CONST 26 //ytr
VBC3_PUSH_GLOBAL 40 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 41 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:379] ;ytl =  d10 - amplitude / 2.0;
VBC2_PUSH_CONST 33 //ytl
VBC3_PUSH_GLOBAL 40 //d10
VBC3_PUSH_GLOBAL 41 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:380] ;computeAlphaForWalkFine( 40 );
VBC3_PUSH_CONST 1214  //func address computeAlphaForWalkFine
VBC2_PUSH_CONST 40 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:384] ;
VBC1_RETURN
;walkFinalPose <void()>
[1:385] ;for( j = 0; j < selfInitPoses; j++ ) {
VBC2_PUSH_CONST 65 //j
VBC1_PUSH_0 
VBC1_POP
LAB1964: //for condition
VBC3_PUSH_GLOBAL 65 //j
VBC3_PUSH_GLOBAL 18 //selfInitPoses
VBC1_LESS
VBC4_FALSE_JUMP LAB2067 //to for exit
;
[1:387] ;ztr = -gaitHeight + (j+1) * stepZtr;
VBC2_PUSH_CONST 27 //ztr
VBC3_PUSH_GLOBAL 45 //gaitHeight
VBC1_NEG_F
VBC3_PUSH_GLOBAL 65 //j
VBC1_PUSH_1 
VBC1_ADD
VBC3_PUSH_GLOBAL 53 //stepZtr
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:388] ;ztl = -gaitHeight + (j+1) * stepZtr;
VBC2_PUSH_CONST 34 //ztl
VBC3_PUSH_GLOBAL 45 //gaitHeight
VBC1_NEG_F
VBC3_PUSH_GLOBAL 65 //j
VBC1_PUSH_1 
VBC1_ADD
VBC3_PUSH_GLOBAL 53 //stepZtr
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:389] ;ytr = -d10 + (selfInitPoses - (j+1)) * stepYtr;
VBC2_PUSH_CONST 26 //ytr
VBC3_PUSH_GLOBAL 40 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 18 //selfInitPoses
VBC3_PUSH_GLOBAL 65 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_SUB
VBC3_PUSH_GLOBAL 55 //stepYtr
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:390] ;ytl =  d10 + (selfInitPoses - (j+1)) * stepYtl;
VBC2_PUSH_CONST 33 //ytl
VBC3_PUSH_GLOBAL 40 //d10
VBC3_PUSH_GLOBAL 18 //selfInitPoses
VBC3_PUSH_GLOBAL 65 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_SUB
VBC3_PUSH_GLOBAL 56 //stepYtl
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:392] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 652  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB2060 //if to false
;return;
VBC1_RETURN
LAB2060: //if else
LAB2060: //for step
VBC2_PUSH_CONST 65 //j
VBC1_INC
VBC4_JUMP LAB1964 //to condition
LAB2067: //for exit
[1:403] ;
VBC1_RETURN
;walkFinalPoseFine <void()>
[1:404] ;xtr = xtl = 0;
VBC2_PUSH_CONST 25 //xtr
VBC2_PUSH_CONST 32 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:405] ;ztr = ztl = -(svIkC5+svIkA6+svIkA7+svIkA8+svIkA9+svIkB10 - 1);
VBC2_PUSH_CONST 27 //ztr
VBC2_PUSH_CONST 34 //ztl
VBC3_PUSH_GLOBAL 3277 //svIkC5
VBC3_PUSH_GLOBAL 3278 //svIkA6
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3279 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3280 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3281 //svIkA9
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3283 //svIkB10
VBC1_ADD_FF
VBC1_PUSH_1 
VBC1_SUB_FI
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:406] ;ytr = -d10;
VBC2_PUSH_CONST 26 //ytr
VBC3_PUSH_GLOBAL 40 //d10
VBC1_NEG_F
VBC1_POP
[1:407] ;ytl =  d10;
VBC2_PUSH_CONST 33 //ytl
VBC3_PUSH_GLOBAL 40 //d10
VBC1_POP
[1:408] ;computeAlphaForWalkFine( 40 );
VBC3_PUSH_CONST 1214  //func address computeAlphaForWalkFine
VBC2_PUSH_CONST 40 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:411] ;
VBC1_RETURN
;walkInit <void()>
[1:422] ;correctedStepLenght = stepLength + selfMotionShiftCorrectionX;
VBC2_PUSH_CONST 47 //correctedStepLenght
VBC3_PUSH_GLOBAL 3 //stepLength
VBC3_PUSH_GLOBAL 9 //selfMotionShiftCorrectionX
VBC1_ADD_FF
VBC1_POP
[1:423] ;correctedStepLenghtHalf = correctedStepLenght / 2;
VBC2_PUSH_CONST 48 //correctedStepLenghtHalf
VBC3_PUSH_GLOBAL 47 //correctedStepLenght
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_POP
[1:424] ;correctedSideLenght = sideLength - selfMotionShiftCorrectionY;
VBC2_PUSH_CONST 49 //correctedSideLenght
VBC3_PUSH_GLOBAL 4 //sideLength
VBC3_PUSH_GLOBAL 10 //selfMotionShiftCorrectionY
VBC1_SUB_FF
VBC1_POP
[1:425] ;correctedSideLenghtHalf = correctedSideLenght / 2;
VBC2_PUSH_CONST 50 //correctedSideLenghtHalf
VBC3_PUSH_GLOBAL 49 //correctedSideLenght
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_POP
[1:428] ;correctedRotation = -rotation *0.25 * 0.23 / ( rotation <= 0 ? rotationYieldRight : rotationYieldLeft);
VBC2_PUSH_CONST 70 //correctedRotation
VBC3_PUSH_GLOBAL 5 //rotation
VBC1_NEG_F
VBC5_PUSH_CONST 1048576000 
VBC1_MUL_FF
VBC5_PUSH_CONST 1047233823 
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 5 //rotation
VBC1_PUSH_0 
VBC1_LESS_EQU_FI
VBC4_FALSE_JUMP LAB2198
VBC3_PUSH_GLOBAL 22 //rotationYieldRight
VBC4_JUMP LAB2201
LAB2198:
VBC3_PUSH_GLOBAL 23 //rotationYieldLeft
LAB2201:
VBC1_DIV_FF
VBC1_POP
[1:430] ;xtl0 = correctedStepLenght * (1 - (fr1 + fr2 + 2.0 * framestep) / (2 * fr1 + fr2 + 2.0 * framestep)) * 1.5;
VBC2_PUSH_CONST 66 //xtl0
VBC3_PUSH_GLOBAL 47 //correctedStepLenght
VBC1_PUSH_1 
VBC3_PUSH_GLOBAL 43 //fr1
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 43 //fr1
VBC1_MUL
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_DIV_FF
VBC1_SUB_IF
VBC1_MUL_FF
VBC5_PUSH_CONST 1069547520 
VBC1_MUL_FF
VBC1_POP
[1:431] ;xtr0 = correctedStepLenght * (0.5 - (fr1 + fr2 + 2.0 * framestep) / (2 * fr1 + fr2 + 2.0 * framestep));
VBC2_PUSH_CONST 67 //xtr0
VBC3_PUSH_GLOBAL 47 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 43 //fr1
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 43 //fr1
VBC1_MUL
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_MUL_FF
VBC1_POP
[1:432] ;dx0Typical = correctedStepLenght / (2 * fr1 + fr2 + 2.0 * framestep) * framestep;
VBC2_PUSH_CONST 68 //dx0Typical
VBC3_PUSH_GLOBAL 47 //correctedStepLenght
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 43 //fr1
VBC1_MUL
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_MUL_FI
VBC1_POP
[1:433] ;dy0Typical = correctedSideLenght / (2.0 * fr2) * framestep;
VBC2_PUSH_CONST 69 //dy0Typical
VBC3_PUSH_GLOBAL 49 //correctedSideLenght
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_MUL_FI
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_MUL_FI
VBC1_POP
[1:436] ;xr = xl = bodyTiltAtWalk;
VBC2_PUSH_CONST 28 //xr
VBC2_PUSH_CONST 35 //xl
VBC3_PUSH_GLOBAL 60 //bodyTiltAtWalk
VBC1_STORE
VBC1_POP
[1:437] ;yl =  solyLandingSkew;
VBC2_PUSH_CONST 36 //yl
VBC3_PUSH_GLOBAL 61 //solyLandingSkew
VBC1_POP
[1:438] ;yr = -solyLandingSkew;
VBC2_PUSH_CONST 29 //yr
VBC3_PUSH_GLOBAL 61 //solyLandingSkew
VBC1_NEG_F
VBC1_POP
[1:439] ;fase_offset = 0.7;
VBC2_PUSH_CONST 72 //fase_offset
VBC5_PUSH_CONST 1060320051 
VBC1_POP
[1:444] ;
VBC1_RETURN
;walkPhasa1 <void()>
[1:445] ;ztl = ztr = -gaitHeight;
VBC2_PUSH_CONST 34 //ztl
VBC2_PUSH_CONST 27 //ztr
VBC3_PUSH_GLOBAL 45 //gaitHeight
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:446] ;for( j = 0; j < fr1; j += framestep ) {
VBC2_PUSH_CONST 65 //j
VBC1_PUSH_0 
VBC1_POP
LAB2400: //for condition
VBC3_PUSH_GLOBAL 65 //j
VBC3_PUSH_GLOBAL 43 //fr1
VBC1_LESS
VBC4_FALSE_JUMP LAB2556 //to for exit
;
[1:448] ;s = (amplitude / 2 + correctedSideLenghtHalf) * sfMathCos(alpha01 * (j / 2 + fase_offset * framestep));
VBC2_PUSH_CONST 71 //s
VBC3_PUSH_GLOBAL 41 //amplitude
VBC1_PUSH_2 
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 50 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 42 //alpha01
VBC3_PUSH_GLOBAL 65 //j
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 72 //fase_offset
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_MUL_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_MUL_FF
VBC1_POP
[1:449] ;ytr = s - d10 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 26 //ytr
VBC3_PUSH_GLOBAL 71 //s
VBC3_PUSH_GLOBAL 40 //d10
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 50 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
[1:450] ;ytl = s + d10 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 33 //ytl
VBC3_PUSH_GLOBAL 71 //s
VBC3_PUSH_GLOBAL 40 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 50 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
[1:451] ;if( stepType == 0 ) continue;
VBC3_PUSH_GLOBAL 57 //stepType
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB2489 //if to false
;if( stepType == 0 ) continue;
VBC4_JUMP LAB2543 //to loop condition
LAB2489: //if else
[1:452] ;xtl = xtl0 - dx0Typical - dx0Typical * j / framestep;
VBC2_PUSH_CONST 32 //xtl
VBC3_PUSH_GLOBAL 66 //xtl0
VBC3_PUSH_GLOBAL 68 //dx0Typical
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 68 //dx0Typical
VBC3_PUSH_GLOBAL 65 //j
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
[1:453] ;xtr = xtr0 - dx0Typical - dx0Typical * j / framestep;
VBC2_PUSH_CONST 25 //xtr
VBC3_PUSH_GLOBAL 67 //xtr0
VBC3_PUSH_GLOBAL 68 //dx0Typical
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 68 //dx0Typical
VBC3_PUSH_GLOBAL 65 //j
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
[1:455] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 652  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB2543 //if to false
;return;
VBC1_RETURN
LAB2543: //if else
LAB2543: //for step
VBC2_PUSH_CONST 65 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB2400 //to condition
LAB2556: //for exit
[1:462] ;
VBC1_RETURN
;walkPhasa3 <void()>
[1:463] ;ztl = ztr = -gaitHeight;
VBC2_PUSH_CONST 34 //ztl
VBC2_PUSH_CONST 27 //ztr
VBC3_PUSH_GLOBAL 45 //gaitHeight
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:464] ;for( j = 0; j < fr1; j += framestep ) {
VBC2_PUSH_CONST 65 //j
VBC1_PUSH_0 
VBC1_POP
LAB2571: //for condition
VBC3_PUSH_GLOBAL 65 //j
VBC3_PUSH_GLOBAL 43 //fr1
VBC1_LESS
VBC4_FALSE_JUMP LAB2692 //to for exit
;
[1:466] ;s = (amplitude / 2 + correctedSideLenghtHalf) * sfMathCos(alpha01 * ((j -fr2) / 2 + fase_offset * framestep));
VBC2_PUSH_CONST 71 //s
VBC3_PUSH_GLOBAL 41 //amplitude
VBC1_PUSH_2 
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 50 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 42 //alpha01
VBC3_PUSH_GLOBAL 65 //j
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_SUB
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 72 //fase_offset
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_MUL_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_MUL_FF
VBC1_POP
[1:467] ;ytr = s - d10 - correctedSideLenghtHalf;
VBC2_PUSH_CONST 26 //ytr
VBC3_PUSH_GLOBAL 71 //s
VBC3_PUSH_GLOBAL 40 //d10
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 50 //correctedSideLenghtHalf
VBC1_SUB_FF
VBC1_POP
[1:468] ;ytl = s + d10 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 33 //ytl
VBC3_PUSH_GLOBAL 71 //s
VBC3_PUSH_GLOBAL 40 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 50 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
[1:469] ;xtl -= dx0Typical;
VBC2_PUSH_CONST 32 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 68 //dx0Typical
VBC1_SUB_FF
VBC1_POP
[1:470] ;xtr -= dx0Typical;
VBC2_PUSH_CONST 25 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 68 //dx0Typical
VBC1_SUB_FF
VBC1_POP
[1:472] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 652  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB2679 //if to false
;return;
VBC1_RETURN
LAB2679: //if else
LAB2679: //for step
VBC2_PUSH_CONST 65 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB2571 //to condition
LAB2692: //for exit
[1:478] ;
VBC1_RETURN
;walkPhasa2 <void()>
[1:483] ;ztr = -gaitHeight + stepHeight;
VBC2_PUSH_CONST 27 //ztr
VBC3_PUSH_GLOBAL 45 //gaitHeight
VBC1_NEG_F
VBC3_PUSH_GLOBAL 46 //stepHeight
VBC1_ADD_FF
VBC1_POP
[1:496] ;dy = correctedSideLenght * framestep / (fr2 - 2.0 * framestep);
VBC2_PUSH_CONST 74 //dy
VBC3_PUSH_GLOBAL 49 //correctedSideLenght
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 44 //fr2
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_DIV_FF
VBC1_POP
[1:500] ;stepRotation = correctedRotation / (fr2 - 2.0 * framestep) * 2;
VBC2_PUSH_CONST 75 //stepRotation
VBC3_PUSH_GLOBAL 70 //correctedRotation
VBC3_PUSH_GLOBAL 44 //fr2
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_DIV_FF
VBC1_PUSH_2 
VBC1_MUL_FI
VBC1_POP
[1:502] ;if( stepType == 0 )
VBC3_PUSH_GLOBAL 57 //stepType
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB2789 //if to false
;dx = correctedStepLenght / (fr2 - 2.0 * framestep) * framestep / 2;
VBC2_PUSH_CONST 73 //dx
VBC3_PUSH_GLOBAL 47 //correctedStepLenght
VBC3_PUSH_GLOBAL 44 //fr2
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_MUL_FI
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_POP
VBC4_JUMP LAB2813 //if to exit
LAB2789: //if else
;dx = correctedStepLenght / (fr2 - 2.0 * framestep) * framestep;
VBC2_PUSH_CONST 73 //dx
VBC3_PUSH_GLOBAL 47 //correctedStepLenght
VBC3_PUSH_GLOBAL 44 //fr2
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_MUL_FI
VBC1_POP
LAB2813: //if exit
[1:507] ;for( j = 0; j < fr2; j += framestep ) {
VBC2_PUSH_CONST 65 //j
VBC1_PUSH_0 
VBC1_POP
LAB2817: //for condition
VBC3_PUSH_GLOBAL 65 //j
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_LESS
VBC4_FALSE_JUMP LAB3005 //to for exit
;
[1:508] ;if( j == 0 ) {
VBC3_PUSH_GLOBAL 65 //j
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB2864 //if to false
;
[1:509] ;xtr -= dx0Typical;
VBC2_PUSH_CONST 25 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 68 //dx0Typical
VBC1_SUB_FF
VBC1_POP
[1:510] ;ytr  = s - d10 + dy0Typical;
VBC2_PUSH_CONST 26 //ytr
VBC3_PUSH_GLOBAL 71 //s
VBC3_PUSH_GLOBAL 40 //d10
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 69 //dy0Typical
VBC1_ADD_FF
VBC1_POP
VBC4_JUMP LAB2964 //if to exit
LAB2864: //if else
;else if( j == (fr2 - framestep) ) {
VBC3_PUSH_GLOBAL 65 //j
VBC3_PUSH_GLOBAL 44 //fr2
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB2912 //if to false
;
[1:513] ;xtr -= dx0Typical;
VBC2_PUSH_CONST 25 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 68 //dx0Typical
VBC1_SUB_FF
VBC1_POP
[1:514] ;ytr  = s - d10 + 2 * dy0Typical - correctedSideLenght;
VBC2_PUSH_CONST 26 //ytr
VBC3_PUSH_GLOBAL 71 //s
VBC3_PUSH_GLOBAL 40 //d10
VBC1_SUB_FF
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 69 //dy0Typical
VBC1_MUL_IF
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 49 //correctedSideLenght
VBC1_SUB_FF
VBC1_POP
VBC4_JUMP LAB2964 //if to exit
LAB2912: //if else
;
[1:517] ;xtr += dx;
VBC2_PUSH_CONST 25 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 73 //dx
VBC1_ADD_FF
VBC1_POP
[1:518] ;ytr  = s - 64 + dy0Typical - dy * (j / 2);
VBC2_PUSH_CONST 26 //ytr
VBC3_PUSH_GLOBAL 71 //s
VBC2_PUSH_CONST 64 
VBC1_SUB_FI
VBC3_PUSH_GLOBAL 69 //dy0Typical
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 74 //dy
VBC3_PUSH_GLOBAL 65 //j
VBC1_PUSH_2 
VBC1_DIV
VBC1_MUL_FI
VBC1_SUB_FF
VBC1_POP
[1:519] ;wr = correctedRotation - j * stepRotation;
VBC2_PUSH_CONST 31 //wr
VBC3_PUSH_GLOBAL 70 //correctedRotation
VBC3_PUSH_GLOBAL 65 //j
VBC3_PUSH_GLOBAL 75 //stepRotation
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:520] ;wl = wr;
VBC2_PUSH_CONST 38 //wl
VBC3_PUSH_GLOBAL 31 //wr
VBC1_POP
LAB2964: //if exit
LAB2964: //if exit
[1:522] ;xtl -= dx0Typical;
VBC2_PUSH_CONST 32 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 68 //dx0Typical
VBC1_SUB_FF
VBC1_POP
[1:523] ;ytl += dy0Typical;
VBC2_PUSH_CONST 33 //ytl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 69 //dy0Typical
VBC1_ADD_FF
VBC1_POP
[1:526] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 652  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB2992 //if to false
;return;
VBC1_RETURN
LAB2992: //if else
LAB2992: //for step
VBC2_PUSH_CONST 65 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB2817 //to condition
LAB3005: //for exit
[1:532] ;
VBC1_RETURN
;walkPhasa4 <void()>
[1:536] ;stepRotation = correctedRotation / (fr2 - 2.0 * framestep) * 2;
VBC2_PUSH_CONST 75 //stepRotation
VBC3_PUSH_GLOBAL 70 //correctedRotation
VBC3_PUSH_GLOBAL 44 //fr2
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_DIV_FF
VBC1_PUSH_2 
VBC1_MUL_FI
VBC1_POP
[1:537] ;ztl = -gaitHeight + stepHeight;
VBC2_PUSH_CONST 34 //ztl
VBC3_PUSH_GLOBAL 45 //gaitHeight
VBC1_NEG_F
VBC3_PUSH_GLOBAL 46 //stepHeight
VBC1_ADD_FF
VBC1_POP
[1:538] ;if( stepType == 1 ) {
VBC3_PUSH_GLOBAL 57 //stepType
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB3120 //if to false
;
[1:539] ;dx0 = dx0Typical * 4 / fr2;
VBC2_PUSH_CONST 76 //dx0
VBC3_PUSH_GLOBAL 68 //dx0Typical
VBC2_PUSH_CONST 4 
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_DIV_FI
VBC1_POP
[1:540] ;dx = (correctedStepLenght * (fr1 + fr2) / (4 * fr1) + 2.0 * dx0) / (fr2 - 2.0 * framestep) * framestep / 1.23076941;
VBC2_PUSH_CONST 73 //dx
VBC3_PUSH_GLOBAL 47 //correctedStepLenght
VBC3_PUSH_GLOBAL 43 //fr1
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_ADD
VBC1_MUL_FI
VBC2_PUSH_CONST 4 
VBC3_PUSH_GLOBAL 43 //fr1
VBC1_MUL
VBC1_DIV_FI
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 76 //dx0
VBC1_MUL_FF
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 44 //fr2
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_MUL_FI
VBC5_PUSH_CONST 1067289050 
VBC1_DIV_FF
VBC1_POP
VBC4_JUMP LAB3150 //if to exit
LAB3120: //if else
;
[1:543] ;dx = correctedStepLenght / (fr2 - 2.0 * framestep) * framestep;
VBC2_PUSH_CONST 73 //dx
VBC3_PUSH_GLOBAL 47 //correctedStepLenght
VBC3_PUSH_GLOBAL 44 //fr2
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_MUL_FI
VBC1_POP
[1:544] ;dx0 = dx0Typical;
VBC2_PUSH_CONST 76 //dx0
VBC3_PUSH_GLOBAL 68 //dx0Typical
VBC1_POP
LAB3150: //if exit
[1:546] ;for( j = 0; j < fr2; j += framestep ) {
VBC2_PUSH_CONST 65 //j
VBC1_PUSH_0 
VBC1_POP
LAB3154: //for condition
VBC3_PUSH_GLOBAL 65 //j
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_LESS
VBC4_FALSE_JUMP LAB3371 //to for exit
;
[1:547] ;if( stepType == 1 && j == (fr2 - framestep) ) {
VBC3_PUSH_GLOBAL 57 //stepType
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB3190
VBC3_PUSH_GLOBAL 65 //j
VBC3_PUSH_GLOBAL 44 //fr2
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB3190
VBC1_PUSH_1
LAB3190:
VBC4_FALSE_JUMP LAB3211 //if to false
;
[1:548] ;ztl = -gaitHeight;
VBC2_PUSH_CONST 34 //ztl
VBC3_PUSH_GLOBAL 45 //gaitHeight
VBC1_NEG_F
VBC1_POP
[1:549] ;ytl = s + d10;
VBC2_PUSH_CONST 33 //ytl
VBC3_PUSH_GLOBAL 71 //s
VBC3_PUSH_GLOBAL 40 //d10
VBC1_ADD_FF
VBC1_POP
LAB3211: //if else
[1:551] ;if( j == 0 ) {
VBC3_PUSH_GLOBAL 65 //j
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB3246 //if to false
;
[1:552] ;xtl -= dx0;
VBC2_PUSH_CONST 32 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 76 //dx0
VBC1_SUB_FF
VBC1_POP
[1:553] ;ytl  = s + 64 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 33 //ytl
VBC3_PUSH_GLOBAL 71 //s
VBC2_PUSH_CONST 64 
VBC1_ADD_FI
VBC3_PUSH_GLOBAL 50 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
VBC4_JUMP LAB3330 //if to exit
LAB3246: //if else
;else if( j == (fr2 - framestep) ) {
VBC3_PUSH_GLOBAL 65 //j
VBC3_PUSH_GLOBAL 44 //fr2
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB3288 //if to false
;
[1:556] ;xtl -= dx0;
VBC2_PUSH_CONST 32 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 76 //dx0
VBC1_SUB_FF
VBC1_POP
[1:557] ;ytl  = s + d10 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 33 //ytl
VBC3_PUSH_GLOBAL 71 //s
VBC3_PUSH_GLOBAL 40 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 50 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
VBC4_JUMP LAB3330 //if to exit
LAB3288: //if else
;
[1:560] ;xtl += dx;
VBC2_PUSH_CONST 32 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 73 //dx
VBC1_ADD_FF
VBC1_POP
[1:561] ;ytl  = s + 64 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 33 //ytl
VBC3_PUSH_GLOBAL 71 //s
VBC2_PUSH_CONST 64 
VBC1_ADD_FI
VBC3_PUSH_GLOBAL 50 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
[1:562] ;wr = j * stepRotation - correctedRotation;
VBC2_PUSH_CONST 31 //wr
VBC3_PUSH_GLOBAL 65 //j
VBC3_PUSH_GLOBAL 75 //stepRotation
VBC1_MUL_IF
VBC3_PUSH_GLOBAL 70 //correctedRotation
VBC1_SUB_FF
VBC1_POP
[1:563] ;wl = wr;
VBC2_PUSH_CONST 38 //wl
VBC3_PUSH_GLOBAL 31 //wr
VBC1_POP
LAB3330: //if exit
LAB3330: //if exit
[1:565] ;xtr -= dx0;
VBC2_PUSH_CONST 25 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 76 //dx0
VBC1_SUB_FF
VBC1_POP
[1:566] ;ytr += dy0Typical;
VBC2_PUSH_CONST 26 //ytr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 69 //dy0Typical
VBC1_ADD_FF
VBC1_POP
[1:569] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 652  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB3358 //if to false
;return;
VBC1_RETURN
LAB3358: //if else
LAB3358: //for step
VBC2_PUSH_CONST 65 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB3154 //to condition
LAB3371: //for exit
[1:579] ;
VBC1_RETURN
;walkCycle <void(,int)>
VBC2_STACK -4//local vars 4
[1:586] ;
[1:586] ;float xrOld = xr;
VBC2_PUSH_B_OFFSET -1 //xrOld
VBC3_PUSH_GLOBAL 28 //xr
VBC1_POP
[1:587] ;
[1:587] ;float yrOld = yr;
VBC2_PUSH_B_OFFSET -2 //yrOld
VBC3_PUSH_GLOBAL 29 //yr
VBC1_POP
[1:588] ;
[1:588] ;float xlOld = xl;
VBC2_PUSH_B_OFFSET -3 //xlOld
VBC3_PUSH_GLOBAL 35 //xl
VBC1_POP
[1:589] ;
[1:589] ;float ylOld = yl;
VBC2_PUSH_B_OFFSET -4 //ylOld
VBC3_PUSH_GLOBAL 36 //yl
VBC1_POP
[1:603] ;walkInit();
VBC3_PUSH_CONST 2128  //func address walkInit
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:604] ;walkPhasa1();
VBC3_PUSH_CONST 2386  //func address walkPhasa1
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:605] ;walkPhasa2();
VBC3_PUSH_CONST 2693  //func address walkPhasa2
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:606] ;if (half == 0){
VBC2_PUSH_LOCAL 2 //half
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB3431 //if to false
;
[1:607] ;walkPhasa3();
VBC3_PUSH_CONST 2557  //func address walkPhasa3
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:608] ;walkPhasa4();
VBC3_PUSH_CONST 3006  //func address walkPhasa4
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB3431: //if else
[1:613] ;xr = xrOld;
VBC2_PUSH_CONST 28 //xr
VBC2_PUSH_LOCAL -1 //xrOld
VBC1_POP
[1:614] ;yr = yrOld;
VBC2_PUSH_CONST 29 //yr
VBC2_PUSH_LOCAL -2 //yrOld
VBC1_POP
[1:615] ;xl = xlOld;
VBC2_PUSH_CONST 35 //xl
VBC2_PUSH_LOCAL -3 //xlOld
VBC1_POP
[1:616] ;yl = ylOld;
VBC2_PUSH_CONST 36 //yl
VBC2_PUSH_LOCAL -4 //ylOld
VBC1_POP
[1:619] ;
VBC1_RETURN
;stabilizeRotationByIMU <void()>
[1:621] ;sfQuaternionToEulerImu();
VBC5_PUSH_CONST 303 | 0x80000000 //import func index sfQuaternionToEulerImu
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:622] ;rotation = -(svEulerYaw - forwardDirection);
VBC2_PUSH_CONST 5 //rotation
VBC3_PUSH_GLOBAL 2600 //svEulerYaw
VBC3_PUSH_GLOBAL 77 //forwardDirection
VBC1_SUB_FF
VBC1_NEG_F
VBC1_POP
[1:623] ;if( rotation > 3.141592654 ) rotation -= 2 * 3.141592654;
VBC3_PUSH_GLOBAL 5 //rotation
VBC5_PUSH_CONST 1078530011 
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB3494 //if to false
;if( rotation > 3.141592654 ) rotation -= 2 * 3.141592654;
VBC2_PUSH_CONST 5 //rotation
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1086918619 
VBC1_SUB_FF
VBC1_POP
LAB3494: //if else
[1:624] ;if( rotation < -3.141592654 ) rotation += 2 * 3.141592654;
VBC3_PUSH_GLOBAL 5 //rotation
VBC5_PUSH_CONST -1068953637 // -
VBC1_LESS_FF
VBC4_FALSE_JUMP LAB3518 //if to false
;if( rotation < -3.141592654 ) rotation += 2 * 3.141592654;
VBC2_PUSH_CONST 5 //rotation
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1086918619 
VBC1_ADD_FF
VBC1_POP
LAB3518: //if else
[1:625] ;if( rotation > 0.7 ) rotation = 0.7;
VBC3_PUSH_GLOBAL 5 //rotation
VBC5_PUSH_CONST 1060320051 
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB3539 //if to false
;if( rotation > 0.7 ) rotation = 0.7;
VBC2_PUSH_CONST 5 //rotation
VBC5_PUSH_CONST 1060320051 
VBC1_POP
LAB3539: //if else
[1:626] ;if( rotation < -0.7 ) rotation = -0.7;
VBC3_PUSH_GLOBAL 5 //rotation
VBC5_PUSH_CONST -1087163597 // -
VBC1_LESS_FF
VBC4_FALSE_JUMP LAB3560 //if to false
;if( rotation < -0.7 ) rotation = -0.7;
VBC2_PUSH_CONST 5 //rotation
VBC5_PUSH_CONST -1087163597 // -
VBC1_POP
LAB3560: //if else
[1:634] ;
VBC1_RETURN
;mixing <void()>
[1:639] ;leftRightFactor = 100;
VBC2_PUSH_CONST 78 //leftRightFactor
VBC2_PUSH_CONST 100 
VBC1_POP
[1:640] ;frontBackFactor = 100;
VBC2_PUSH_CONST 79 //frontBackFactor
VBC2_PUSH_CONST 100 
VBC1_POP
[1:642] ;while(1) {
LAB3571: //while condition
;
[1:644] ;leftFootSideAddonMix = -svImuGyroZ * leftRightFactor >> 10;
VBC3_PUSH_CONST 2953 //leftFootSideAddonMix
VBC3_PUSH_GLOBAL 2568 //svImuGyroZ
VBC1_NEG
VBC3_PUSH_GLOBAL 78 //leftRightFactor
VBC1_MUL
VBC2_PUSH_CONST 10 
VBC1_RSHIFT
VBC1_POP
[1:645] ;rightFootSideAddonMix = svImuGyroZ * leftRightFactor >> 10;
VBC3_PUSH_CONST 2937 //rightFootSideAddonMix
VBC3_PUSH_GLOBAL 2568 //svImuGyroZ
VBC3_PUSH_GLOBAL 78 //leftRightFactor
VBC1_MUL
VBC2_PUSH_CONST 10 
VBC1_RSHIFT
VBC1_POP
[1:648] ;rightFootFrontAddonMix = leftFootFrontAddonMix = -svImuGyroX * frontBackFactor >> 10;
VBC3_PUSH_CONST 2905 //rightFootFrontAddonMix
VBC3_PUSH_CONST 2921 //leftFootFrontAddonMix
VBC3_PUSH_GLOBAL 2566 //svImuGyroX
VBC1_NEG
VBC3_PUSH_GLOBAL 79 //frontBackFactor
VBC1_MUL
VBC2_PUSH_CONST 10 
VBC1_RSHIFT
VBC1_STORE
VBC1_POP
[1:651] ;sfWaitNextFrame();
VBC1_WAIT
VBC4_JUMP LAB3571 //while forever loop
LAB3624: //while exit
[1:661] ;
VBC1_RETURN
;runTest <void()>
VBC1_STACK_DN1//local vars 1
[1:663] ;walkInitialPoseFine();
VBC3_PUSH_CONST 1902  //func address walkInitialPoseFine
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:665] ;stepType = 0;
VBC2_PUSH_CONST 57 //stepType
VBC1_PUSH_0 
VBC1_POP
[1:666] ;stepLength = stepLengthOrder/ 3.0;
VBC2_PUSH_CONST 3 //stepLength
VBC3_PUSH_GLOBAL 6 //stepLengthOrder
VBC5_PUSH_CONST 1077936128 
VBC1_DIV_FF
VBC1_POP
[1:667] ;walkCycle(0);
VBC3_PUSH_CONST 3372  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:670] ;stepType = 2;
VBC2_PUSH_CONST 57 //stepType
VBC1_PUSH_2 
VBC1_POP
[1:671] ;stepLength = stepLengthOrder * 2.0 / 3.0;
VBC2_PUSH_CONST 3 //stepLength
VBC3_PUSH_GLOBAL 6 //stepLengthOrder
VBC5_PUSH_CONST 1073741824 
VBC1_MUL_FF
VBC5_PUSH_CONST 1077936128 
VBC1_DIV_FF
VBC1_POP
[1:672] ;walkCycle(0);
VBC3_PUSH_CONST 3372  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:675] ;stepLength = stepLengthOrder;
VBC2_PUSH_CONST 3 //stepLength
VBC3_PUSH_GLOBAL 6 //stepLengthOrder
VBC1_POP
[1:676] ;
[1:677] ;for( i = 0; i < 50 ; i++ ){
VBC2_PUSH_B_OFFSET -1 //i
VBC1_PUSH_0 
VBC1_POP
LAB3691: //for condition
VBC2_PUSH_LOCAL -1 //i
VBC2_PUSH_CONST 50 
VBC1_LESS
VBC4_FALSE_JUMP LAB3718 //to for exit
;
[1:678] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 3452  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:679] ;walkCycle(0);
VBC3_PUSH_CONST 3372  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB3711: //for step
VBC2_PUSH_B_OFFSET -1 //i
VBC1_INC
VBC4_JUMP LAB3691 //to condition
LAB3718: //for exit
[1:682] ;stepType = 1;
VBC2_PUSH_CONST 57 //stepType
VBC1_PUSH_1 
VBC1_POP
[1:683] ;walkCycle(0);
VBC3_PUSH_CONST 3372  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:686] ;walkFinalPoseFine();
VBC3_PUSH_CONST 2068  //func address walkFinalPoseFine
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:693] ;
VBC1_RETURN
;joystickToStepLength <int()>
[1:695] ;return -svRemoteRightJoystickY * 50 / 100;
VBC3_PUSH_GLOBAL 3257 //svRemoteRightJoystickY
VBC1_NEG
VBC2_PUSH_CONST 50 
VBC1_MUL
VBC2_PUSH_CONST 100 
VBC1_DIV
VBC2_POP_RESULT 2
VBC1_RETURN
;joystickToSideLength <int()>
[1:701] ;side_motion = - svRemoteRightJoystickX * 20.0 / 100.0;
VBC2_PUSH_CONST 17 //side_motion
VBC3_PUSH_GLOBAL 3256 //svRemoteRightJoystickX
VBC1_NEG
VBC5_PUSH_CONST 1101004800 
VBC1_MUL_IF
VBC5_PUSH_CONST 1120403456 
VBC1_DIV_FF
VBC1_POP
[1:702] ;motion_to_right = (side_motion <= 0 ? 1:0);
VBC2_PUSH_CONST 16 //motion_to_right
VBC3_PUSH_GLOBAL 17 //side_motion
VBC1_PUSH_0 
VBC1_LESS_EQU_FI
VBC4_FALSE_JUMP LAB3782
VBC1_PUSH_1 
VBC4_JUMP LAB3783
LAB3782:
VBC1_PUSH_0 
LAB3783:
VBC1_POP
[1:703] ;return sfAbs (side_motion);
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 17 //side_motion
VBC1_F_TO_I
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_POP_RESULT 2
VBC1_RETURN
;joystickToRotation <int()>
[1:709] ;return -svRemoteLeftJoystickX * 260 / 100;
VBC3_PUSH_GLOBAL 3253 //svRemoteLeftJoystickX
VBC1_NEG
VBC3_PUSH_CONST 260 
VBC1_MUL
VBC2_PUSH_CONST 100 
VBC1_DIV
VBC2_POP_RESULT 2
VBC1_RETURN
;walkLoop <void()>
VBC1_STACK_DN1//local vars 1
[1:714] ;
[1:716] ;stepType = 0;
VBC2_PUSH_CONST 57 //stepType
VBC1_PUSH_0 
VBC1_POP
[1:717] ;stepLength = joystickToStepLength() / 3.0;
VBC2_PUSH_CONST 3 //stepLength
VBC3_PUSH_CONST 3734  //func address joystickToStepLength
VBC1_CALL0
//remove call address and params
VBC5_PUSH_CONST 1077936128 
VBC1_DIV_IF
VBC1_POP
[1:718] ;sideLength = joystickToSideLength();
VBC2_PUSH_CONST 4 //sideLength
VBC3_PUSH_CONST 3747  //func address joystickToSideLength
VBC1_CALL0
//remove call address and params
VBC1_POP_CF
[1:719] ;selfFirstLegIsRightLeg = motion_to_right;
VBC2_PUSH_CONST 15 //selfFirstLegIsRightLeg
VBC3_PUSH_GLOBAL 16 //motion_to_right
VBC1_POP
[1:720] ;forwardDirection += joystickToRotation() / 1000.0;
VBC2_PUSH_CONST 77 //forwardDirection
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_CONST 3798  //func address joystickToRotation
VBC1_CALL0
//remove call address and params
VBC5_PUSH_CONST 1148846080 
VBC1_DIV_IF
VBC1_ADD_FF
VBC1_POP
[1:721] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 3452  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:722] ;walkCycle(0);
VBC3_PUSH_CONST 3372  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:723] ;stepNumber -= 1;
VBC2_PUSH_CONST 62 //stepNumber
VBC1_PUSH_TOS
VBC1_LOAD
VBC1_PUSH_1 
VBC1_SUB
VBC1_POP
[1:726] ;if( sfAbs( svRemoteRightJoystickX ) < 10 
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 3256 //svRemoteRightJoystickX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB3968
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 3257 //svRemoteRightJoystickY
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB3968
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 3253 //svRemoteLeftJoystickX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB3968
VBC3_PUSH_GLOBAL 3254 //svRemoteLeftJoystickY
VBC1_PUSH_0 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB3953
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC3_PUSH_CONST 2048 
VBC1_DIV
VBC1_PUSH_2 
VBC1_MOD
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB3953
VBC1_PUSH_1
LAB3953:
VBC1_LNOT
VBC4_FALSE_JUMP_KEEP LAB3968
VBC3_PUSH_GLOBAL 62 //stepNumber
VBC1_PUSH_1 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB3968
VBC1_PUSH_1
LAB3968:
VBC4_FALSE_JUMP LAB3973 //if to false
;return;
VBC1_RETURN
LAB3973: //if else
[1:736] ;stepType = 2;
VBC2_PUSH_CONST 57 //stepType
VBC1_PUSH_2 
VBC1_POP
[1:737] ;stepLength = joystickToStepLength() * 2.0 / 3.0;
VBC2_PUSH_CONST 3 //stepLength
VBC3_PUSH_CONST 3734  //func address joystickToStepLength
VBC1_CALL0
//remove call address and params
VBC5_PUSH_CONST 1073741824 
VBC1_MUL_IF
VBC5_PUSH_CONST 1077936128 
VBC1_DIV_FF
VBC1_POP
[1:738] ;sideLength = joystickToSideLength();
VBC2_PUSH_CONST 4 //sideLength
VBC3_PUSH_CONST 3747  //func address joystickToSideLength
VBC1_CALL0
//remove call address and params
VBC1_POP_CF
[1:739] ;selfFirstLegIsRightLeg = motion_to_right;
VBC2_PUSH_CONST 15 //selfFirstLegIsRightLeg
VBC3_PUSH_GLOBAL 16 //motion_to_right
VBC1_POP
[1:740] ;forwardDirection += joystickToRotation() / 1000.0;
VBC2_PUSH_CONST 77 //forwardDirection
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_CONST 3798  //func address joystickToRotation
VBC1_CALL0
//remove call address and params
VBC5_PUSH_CONST 1148846080 
VBC1_DIV_IF
VBC1_ADD_FF
VBC1_POP
[1:741] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 3452  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:742] ;walkCycle(0);
VBC3_PUSH_CONST 3372  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:743] ;stepNumber -= 1;
VBC2_PUSH_CONST 62 //stepNumber
VBC1_PUSH_TOS
VBC1_LOAD
VBC1_PUSH_1 
VBC1_SUB
VBC1_POP
[1:746] ;if( sfAbs( svRemoteRightJoystickX ) < 10 
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 3256 //svRemoteRightJoystickX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB4134
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 3257 //svRemoteRightJoystickY
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB4134
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 3253 //svRemoteLeftJoystickX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB4134
VBC3_PUSH_GLOBAL 3254 //svRemoteLeftJoystickY
VBC1_PUSH_0 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB4119
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC3_PUSH_CONST 2048 
VBC1_DIV
VBC1_PUSH_2 
VBC1_MOD
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB4119
VBC1_PUSH_1
LAB4119:
VBC1_LNOT
VBC4_FALSE_JUMP_KEEP LAB4134
VBC3_PUSH_GLOBAL 62 //stepNumber
VBC1_PUSH_1 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB4134
VBC1_PUSH_1
LAB4134:
VBC4_FALSE_JUMP LAB4139 //if to false
;return;
VBC1_RETURN
LAB4139: //if else
[1:755] ;while( sfAbs( svRemoteRightJoystickX ) >= 10 || sfAbs( svRemoteRightJoystickY ) >= 10 || sfAbs( svRemoteLeftJoystickX ) >= 10) {
LAB4139: //while condition
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 3256 //svRemoteRightJoystickX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_GREAT_EQU
VBC4_TRUE_JUMP_KEEP LAB4191
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 3257 //svRemoteRightJoystickY
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_GREAT_EQU
VBC4_TRUE_JUMP_KEEP LAB4191
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 3253 //svRemoteLeftJoystickX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_GREAT_EQU
VBC4_TRUE_JUMP_KEEP LAB4191
VBC1_PUSH_0
LAB4191:
VBC4_FALSE_JUMP LAB4381 //while to exit
;
[1:757] ;stepLength = joystickToStepLength();
VBC2_PUSH_CONST 3 //stepLength
VBC3_PUSH_CONST 3734  //func address joystickToStepLength
VBC1_CALL0
//remove call address and params
VBC1_POP_CF
[1:758] ;sideLength = joystickToSideLength();
VBC2_PUSH_CONST 4 //sideLength
VBC3_PUSH_CONST 3747  //func address joystickToSideLength
VBC1_CALL0
//remove call address and params
VBC1_POP_CF
[1:759] ;forwardDirection += joystickToRotation() / 1000.0;
VBC2_PUSH_CONST 77 //forwardDirection
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_CONST 3798  //func address joystickToRotation
VBC1_CALL0
//remove call address and params
VBC5_PUSH_CONST 1148846080 
VBC1_DIV_IF
VBC1_ADD_FF
VBC1_POP
[1:760] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 3452  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:761] ;if (selfFirstLegIsRightLeg != motion_to_right) walkCycle(1); 
VBC3_PUSH_GLOBAL 15 //selfFirstLegIsRightLeg
VBC3_PUSH_GLOBAL 16 //motion_to_right
VBC1_NOT_EQU
VBC4_FALSE_JUMP LAB4247 //if to false
;if (selfFirstLegIsRightLeg != motion_to_right) walkCycle(1); 
VBC3_PUSH_CONST 3372  //func address walkCycle
VBC1_PUSH_1 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB4247: //if else
[1:762] ;selfFirstLegIsRightLeg = motion_to_right;
VBC2_PUSH_CONST 15 //selfFirstLegIsRightLeg
VBC3_PUSH_GLOBAL 16 //motion_to_right
VBC1_POP
[1:763] ;walkCycle(0);
VBC3_PUSH_CONST 3372  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:764] ;stepNumber -= 1;
VBC2_PUSH_CONST 62 //stepNumber
VBC1_PUSH_TOS
VBC1_LOAD
VBC1_PUSH_1 
VBC1_SUB
VBC1_POP
[1:765] ;if ((svRemoteLeftJoystickY < 0 && ((svRemoteButton / 2048) % 2 == 1)) || stepNumber > 0){
VBC3_PUSH_GLOBAL 3254 //svRemoteLeftJoystickY
VBC1_PUSH_0 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB4291
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC3_PUSH_CONST 2048 
VBC1_DIV
VBC1_PUSH_2 
VBC1_MOD
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB4291
VBC1_PUSH_1
LAB4291:
VBC4_TRUE_JUMP_KEEP LAB4305
VBC3_PUSH_GLOBAL 62 //stepNumber
VBC1_PUSH_0 
VBC1_GREAT
VBC4_TRUE_JUMP_KEEP LAB4305
VBC1_PUSH_0
LAB4305:
VBC4_FALSE_JUMP LAB4377 //if to false
;
[1:766] ;if (svRemoteLeftJoystickY < 0 && ((svRemoteButton / 2048) % 2 == 1)) stepNumber = -svRemoteLeftJoystickY;
VBC3_PUSH_GLOBAL 3254 //svRemoteLeftJoystickY
VBC1_PUSH_0 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB4334
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC3_PUSH_CONST 2048 
VBC1_DIV
VBC1_PUSH_2 
VBC1_MOD
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB4334
VBC1_PUSH_1
LAB4334:
VBC4_FALSE_JUMP LAB4345 //if to false
;if (svRemoteLeftJoystickY < 0 && ((svRemoteButton / 2048) % 2 == 1)) stepNumber = -svRemoteLeftJoystickY;
VBC2_PUSH_CONST 62 //stepNumber
VBC3_PUSH_GLOBAL 3254 //svRemoteLeftJoystickY
VBC1_NEG
VBC1_POP
LAB4345: //if else
[1:767] ;for( i = 0; i < stepNumber ; i++ ){
VBC2_PUSH_B_OFFSET -1 //i
VBC1_PUSH_0 
VBC1_POP
LAB4349: //for condition
VBC2_PUSH_LOCAL -1 //i
VBC3_PUSH_GLOBAL 62 //stepNumber
VBC1_LESS
VBC4_FALSE_JUMP LAB4377 //to for exit
;
[1:768] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 3452  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:769] ;walkCycle(0);
VBC3_PUSH_CONST 3372  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB4370: //for step
VBC2_PUSH_B_OFFSET -1 //i
VBC1_INC
VBC4_JUMP LAB4349 //to condition
LAB4377: //for exit
LAB4377: //if else
VBC4_JUMP LAB4139 //while forever loop
LAB4381: //while exit
[1:775] ;
VBC1_RETURN
;kick <void(,int,int)>
VBC2_STACK -11//local vars 11
[1:776] ;
[1:776] ;float gaitHeightKick = 200;
VBC2_PUSH_B_OFFSET -1 //gaitHeightKick
VBC3_PUSH_CONST 200 
VBC1_POP_CF
[1:777] ;
[1:777] ;float stepHeightKick = 40;
VBC2_PUSH_B_OFFSET -2 //stepHeightKick
VBC2_PUSH_CONST 40 
VBC1_POP_CF
[1:778] ;
[1:778] ;float stepLengthKick = 50;
VBC2_PUSH_B_OFFSET -3 //stepLengthKick
VBC2_PUSH_CONST 50 
VBC1_POP_CF
[1:779] ;
[1:779] ;float kick_size = 100;
VBC2_PUSH_B_OFFSET -4 //kick_size
VBC2_PUSH_CONST 100 
VBC1_POP_CF
[1:780] ;
[1:780] ;float bodyTiltAtKick = 0.04;
VBC2_PUSH_B_OFFSET -5 //bodyTiltAtKick
VBC5_PUSH_CONST 1025758986 
VBC1_POP
[1:781] ;
[1:781] ;int pose_taking_cycles = 20;
VBC2_PUSH_B_OFFSET -6 //pose_taking_cycles
VBC2_PUSH_CONST 20 
VBC1_POP
[1:783] ;
[1:783] ;float xrOld = xr;
VBC2_PUSH_B_OFFSET -7 //xrOld
VBC3_PUSH_GLOBAL 28 //xr
VBC1_POP
[1:784] ;
[1:784] ;float yrOld = yr;
VBC2_PUSH_B_OFFSET -8 //yrOld
VBC3_PUSH_GLOBAL 29 //yr
VBC1_POP
[1:785] ;
[1:785] ;float xlOld = xl;
VBC2_PUSH_B_OFFSET -9 //xlOld
VBC3_PUSH_GLOBAL 35 //xl
VBC1_POP
[1:786] ;
[1:786] ;float ylOld = yl;
VBC2_PUSH_B_OFFSET -10 //ylOld
VBC3_PUSH_GLOBAL 36 //yl
VBC1_POP
[1:787] ;if (small == 1) kick_size = -10;
VBC2_PUSH_LOCAL 2 //small
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB4455 //if to false
;if (small == 1) kick_size = -10;
VBC2_PUSH_B_OFFSET -4 //kick_size
VBC2_PUSH_CONST -10 // -
VBC1_POP_CF
LAB4455: //if else
[1:788] ;selfFirstLegIsRightLeg = kickByRight;
VBC2_PUSH_CONST 15 //selfFirstLegIsRightLeg
VBC2_PUSH_LOCAL 3 //kickByRight
VBC1_POP
[1:789] ;dx0Typical = stepLengthKick / (2 * fr1 + fr2 + 2.0 * framestep) * framestep;
VBC2_PUSH_CONST 68 //dx0Typical
VBC2_PUSH_LOCAL -3 //stepLengthKick
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 43 //fr1
VBC1_MUL
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_MUL_FI
VBC1_POP
[1:790] ;xr = xl = bodyTiltAtKick;
VBC2_PUSH_CONST 28 //xr
VBC2_PUSH_CONST 35 //xl
VBC2_PUSH_LOCAL -5 //bodyTiltAtKick
VBC1_STORE
VBC1_POP
[1:791] ;yl =  solyLandingSkew;
VBC2_PUSH_CONST 36 //yl
VBC3_PUSH_GLOBAL 61 //solyLandingSkew
VBC1_POP
[1:792] ;yr = -solyLandingSkew;
VBC2_PUSH_CONST 29 //yr
VBC3_PUSH_GLOBAL 61 //solyLandingSkew
VBC1_NEG_F
VBC1_POP
[1:793] ;s = (amplitude / 2 ) * sfMathCos(alpha01 * (fr1 / 2 + 0.5 * framestep));
VBC2_PUSH_CONST 71 //s
VBC3_PUSH_GLOBAL 41 //amplitude
VBC1_PUSH_2 
VBC1_DIV_FI
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 42 //alpha01
VBC3_PUSH_GLOBAL 43 //fr1
VBC1_PUSH_2 
VBC1_DIV
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_MUL_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_MUL_FF
VBC1_POP
[1:794] ;xtr = xtl = 0;
VBC2_PUSH_CONST 25 //xtr
VBC2_PUSH_CONST 32 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:797] ;ztr = ztl = -gaitHeightKick;
VBC2_PUSH_CONST 27 //ztr
VBC2_PUSH_CONST 34 //ztl
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:801] ;for( j = 0; j < pose_taking_cycles; j += 1 ){
VBC2_PUSH_CONST 65 //j
VBC1_PUSH_0 
VBC1_POP
LAB4565: //for condition
VBC3_PUSH_GLOBAL 65 //j
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_LESS
VBC4_FALSE_JUMP LAB4651 //to for exit
;
[1:802] ;ztr = ztr0 + j * (-ztr0 - gaitHeightKick) / pose_taking_cycles;
VBC2_PUSH_CONST 27 //ztr
VBC3_PUSH_GLOBAL 51 //ztr0
VBC3_PUSH_GLOBAL 65 //j
VBC3_PUSH_GLOBAL 51 //ztr0
VBC1_NEG_F
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_SUB_FF
VBC1_MUL_IF
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_DIV_FI
VBC1_ADD_FF
VBC1_POP
[1:803] ;ztl = ztr;
VBC2_PUSH_CONST 34 //ztl
VBC3_PUSH_GLOBAL 27 //ztr
VBC1_POP
[1:804] ;ytr = -d10 - j * amplitude * 3 /pose_taking_cycles;
VBC2_PUSH_CONST 26 //ytr
VBC3_PUSH_GLOBAL 40 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 65 //j
VBC3_PUSH_GLOBAL 41 //amplitude
VBC1_MUL_IF
VBC2_PUSH_CONST 3 
VBC1_MUL_FI
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
[1:805] ;ytl =  ytr + 2 * d10;
VBC2_PUSH_CONST 33 //ytl
VBC3_PUSH_GLOBAL 26 //ytr
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 40 //d10
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:806] ;computeAlphaForWalk();
VBC3_PUSH_CONST 652  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB4640: //for step
VBC2_PUSH_CONST 65 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB4565 //to condition
LAB4651: //for exit
[1:809] ;ztr = ztl = -gaitHeightKick;
VBC2_PUSH_CONST 27 //ztr
VBC2_PUSH_CONST 34 //ztl
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:810] ;ytr = s - d10;
VBC2_PUSH_CONST 26 //ytr
VBC3_PUSH_GLOBAL 71 //s
VBC3_PUSH_GLOBAL 40 //d10
VBC1_SUB_FF
VBC1_POP
[1:811] ;ytl = s + d10;
VBC2_PUSH_CONST 33 //ytl
VBC3_PUSH_GLOBAL 71 //s
VBC3_PUSH_GLOBAL 40 //d10
VBC1_ADD_FF
VBC1_POP
[1:813] ;for( j = fr1; j < fr1 + fr2; j += framestep ){
VBC2_PUSH_CONST 65 //j
VBC3_PUSH_GLOBAL 43 //fr1
VBC1_POP
LAB4686: //for condition
VBC3_PUSH_GLOBAL 65 //j
VBC3_PUSH_GLOBAL 43 //fr1
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_ADD
VBC1_LESS
VBC4_FALSE_JUMP LAB4914 //to for exit
;
[1:814] ;ztr = -gaitHeightKick + stepHeightKick;
VBC2_PUSH_CONST 27 //ztr
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC2_PUSH_LOCAL -2 //stepHeightKick
VBC1_ADD_FF
VBC1_POP
[1:815] ;dx = stepLengthKick / fr2;
VBC2_PUSH_CONST 73 //dx
VBC2_PUSH_LOCAL -3 //stepLengthKick
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_DIV_FI
VBC1_POP
[1:816] ;dx0 = stepLengthKick/( 2 * fr1 + fr2 + 4 ) * framestep;
VBC2_PUSH_CONST 76 //dx0
VBC2_PUSH_LOCAL -3 //stepLengthKick
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 43 //fr1
VBC1_MUL
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_ADD
VBC2_PUSH_CONST 4 
VBC1_ADD
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_MUL_FI
VBC1_POP
[1:817] ;if (j == fr1 || j == fr1 + fr2 - 2){
VBC3_PUSH_GLOBAL 65 //j
VBC3_PUSH_GLOBAL 43 //fr1
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB4770
VBC3_PUSH_GLOBAL 65 //j
VBC3_PUSH_GLOBAL 43 //fr1
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_ADD
VBC1_PUSH_2 
VBC1_SUB
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB4770
VBC1_PUSH_0
LAB4770:
VBC4_FALSE_JUMP LAB4796 //if to false
;
[1:818] ;xtr -= dx0;
VBC2_PUSH_CONST 25 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 76 //dx0
VBC1_SUB_FF
VBC1_POP
[1:819] ;ytr = s - 64;
VBC2_PUSH_CONST 26 //ytr
VBC3_PUSH_GLOBAL 71 //s
VBC2_PUSH_CONST 64 
VBC1_SUB_FI
VBC1_POP
VBC4_JUMP LAB4819 //if to exit
LAB4796: //if else
;xtr += dx * fr2 / (fr2 - 2 * framestep);
VBC2_PUSH_CONST 25 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 73 //dx
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_MUL
VBC1_SUB
VBC1_DIV_FI
VBC1_ADD_FF
VBC1_POP
LAB4819: //if exit
[1:823] ;if (j == fr1 + fr2 - 10)
VBC3_PUSH_GLOBAL 65 //j
VBC3_PUSH_GLOBAL 43 //fr1
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_ADD
VBC2_PUSH_CONST 10 
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB4845 //if to false
;xtr += kick_size;
VBC2_PUSH_CONST 25 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC2_PUSH_LOCAL -4 //kick_size
VBC1_ADD_FF
VBC1_POP
LAB4845: //if else
[1:825] ;xtl -= kick_size;
VBC2_PUSH_CONST 32 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC2_PUSH_LOCAL -4 //kick_size
VBC1_SUB_FF
VBC1_POP
[1:826] ;if (j == fr1 + fr2 - 4)
VBC3_PUSH_GLOBAL 65 //j
VBC3_PUSH_GLOBAL 43 //fr1
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_ADD
VBC2_PUSH_CONST 4 
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB4879 //if to false
;xtr -= kick_size;
VBC2_PUSH_CONST 25 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC2_PUSH_LOCAL -4 //kick_size
VBC1_SUB_FF
VBC1_POP
LAB4879: //if else
[1:828] ;xtl += kick_size;
VBC2_PUSH_CONST 32 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC2_PUSH_LOCAL -4 //kick_size
VBC1_ADD_FF
VBC1_POP
[1:829] ;xtl -= dx0;
VBC2_PUSH_CONST 32 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 76 //dx0
VBC1_SUB_FF
VBC1_POP
[1:830] ;computeAlphaForWalk();
VBC3_PUSH_CONST 652  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB4901: //for step
VBC2_PUSH_CONST 65 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB4686 //to condition
LAB4914: //for exit
[1:832] ;for( j = fr1 + fr2; j < 2 * fr1 + fr2; j += framestep ){
VBC2_PUSH_CONST 65 //j
VBC3_PUSH_GLOBAL 43 //fr1
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_ADD
VBC1_POP
LAB4924: //for condition
VBC3_PUSH_GLOBAL 65 //j
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 43 //fr1
VBC1_MUL
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_ADD
VBC1_LESS
VBC4_FALSE_JUMP LAB5048 //to for exit
;
[1:833] ;s = (amplitude / 2 ) * sfMathCos(alpha01 * (j - fr2 + framestep) / 2);
VBC2_PUSH_CONST 71 //s
VBC3_PUSH_GLOBAL 41 //amplitude
VBC1_PUSH_2 
VBC1_DIV_FI
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 42 //alpha01
VBC3_PUSH_GLOBAL 65 //j
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_SUB
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_ADD
VBC1_MUL_FI
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_MUL_FF
VBC1_POP
[1:834] ;ytr = s - d10;
VBC2_PUSH_CONST 26 //ytr
VBC3_PUSH_GLOBAL 71 //s
VBC3_PUSH_GLOBAL 40 //d10
VBC1_SUB_FF
VBC1_POP
[1:835] ;ytl = s + d10;
VBC2_PUSH_CONST 33 //ytl
VBC3_PUSH_GLOBAL 71 //s
VBC3_PUSH_GLOBAL 40 //d10
VBC1_ADD_FF
VBC1_POP
[1:836] ;ztl = -gaitHeightKick;
VBC2_PUSH_CONST 34 //ztl
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC1_POP
[1:837] ;ztr = -gaitHeightKick;
VBC2_PUSH_CONST 27 //ztr
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC1_POP
[1:838] ;dx0 = dx0Typical;
VBC2_PUSH_CONST 76 //dx0
VBC3_PUSH_GLOBAL 68 //dx0Typical
VBC1_POP
[1:839] ;xtl -= dx0;
VBC2_PUSH_CONST 32 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 76 //dx0
VBC1_SUB_FF
VBC1_POP
[1:840] ;xtr -= dx0;
VBC2_PUSH_CONST 25 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 76 //dx0
VBC1_SUB_FF
VBC1_POP
[1:841] ;computeAlphaForWalk();
VBC3_PUSH_CONST 652  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB5035: //for step
VBC2_PUSH_CONST 65 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB4924 //to condition
LAB5048: //for exit
[1:843] ;for( j = 2 * fr1 + fr2; j < 2 * (fr1 + fr2); j += framestep ){
VBC2_PUSH_CONST 65 //j
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 43 //fr1
VBC1_MUL
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_ADD
VBC1_POP
LAB5060: //for condition
VBC3_PUSH_GLOBAL 65 //j
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 43 //fr1
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_ADD
VBC1_MUL
VBC1_LESS
VBC4_FALSE_JUMP LAB5279 //to for exit
;
[1:844] ;ztl = -gaitHeightKick + stepHeightKick;
VBC2_PUSH_CONST 34 //ztl
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC2_PUSH_LOCAL -2 //stepHeightKick
VBC1_ADD_FF
VBC1_POP
[1:845] ;dx0 = dx0Typical * 4 / fr2;
VBC2_PUSH_CONST 76 //dx0
VBC3_PUSH_GLOBAL 68 //dx0Typical
VBC2_PUSH_CONST 4 
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_DIV_FI
VBC1_POP
[1:846] ;dx = (stepLengthKick * (fr1 + fr2) / (4 * fr1) + 2 * dx0) / (fr2 - 2 * framestep) * framestep;
VBC2_PUSH_CONST 73 //dx
VBC2_PUSH_LOCAL -3 //stepLengthKick
VBC3_PUSH_GLOBAL 43 //fr1
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_ADD
VBC1_MUL_FI
VBC2_PUSH_CONST 4 
VBC3_PUSH_GLOBAL 43 //fr1
VBC1_MUL
VBC1_DIV_FI
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 76 //dx0
VBC1_MUL_IF
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_MUL
VBC1_SUB
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_MUL_FI
VBC1_POP
[1:847] ;if (j == (2 * fr1 + 2 * fr2 - framestep)){
VBC3_PUSH_GLOBAL 65 //j
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 43 //fr1
VBC1_MUL
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_MUL
VBC1_ADD
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB5178 //if to false
;
[1:848] ;ztl = -gaitHeightKick;
VBC2_PUSH_CONST 34 //ztl
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC1_POP
[1:849] ;ytl = s + d10;
VBC2_PUSH_CONST 33 //ytl
VBC3_PUSH_GLOBAL 71 //s
VBC3_PUSH_GLOBAL 40 //d10
VBC1_ADD_FF
VBC1_POP
LAB5178: //if else
[1:851] ;if (j == (2 * fr1 + fr2 ) || j == (2 * (fr1 + fr2) - framestep)){
VBC3_PUSH_GLOBAL 65 //j
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 43 //fr1
VBC1_MUL
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_ADD
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB5217
VBC3_PUSH_GLOBAL 65 //j
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 43 //fr1
VBC3_PUSH_GLOBAL 44 //fr2
VBC1_ADD
VBC1_MUL
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_SUB
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB5217
VBC1_PUSH_0
LAB5217:
VBC4_FALSE_JUMP LAB5243 //if to false
;
[1:852] ;xtl -= dx0;
VBC2_PUSH_CONST 32 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 76 //dx0
VBC1_SUB_FF
VBC1_POP
[1:853] ;ytl = s + 64;
VBC2_PUSH_CONST 33 //ytl
VBC3_PUSH_GLOBAL 71 //s
VBC2_PUSH_CONST 64 
VBC1_ADD_FI
VBC1_POP
VBC4_JUMP LAB5252 //if to exit
LAB5243: //if else
;xtl += dx;
VBC2_PUSH_CONST 32 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 73 //dx
VBC1_ADD_FF
VBC1_POP
LAB5252: //if exit
[1:857] ;xtr -= dx0;
VBC2_PUSH_CONST 25 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 76 //dx0
VBC1_SUB_FF
VBC1_POP
[1:858] ;computeAlphaForWalk();
VBC3_PUSH_CONST 652  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB5266: //for step
VBC2_PUSH_CONST 65 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 24 //framestep
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB5060 //to condition
LAB5279: //for exit
[1:862] ;pose_taking_cycles = 2;
VBC2_PUSH_B_OFFSET -6 //pose_taking_cycles
VBC1_PUSH_2 
VBC1_POP
[1:863] ;
[1:863] ;int pose_hight_after_kick = ztr0;
VBC2_PUSH_B_OFFSET -11 //pose_hight_after_kick
VBC3_PUSH_GLOBAL 51 //ztr0
VBC1_POP_CI
[1:864] ;for( j = 0; j < pose_taking_cycles; j += 1 ){
VBC2_PUSH_CONST 65 //j
VBC1_PUSH_0 
VBC1_POP
LAB5293: //for condition
VBC3_PUSH_GLOBAL 65 //j
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_LESS
VBC4_FALSE_JUMP LAB5395 //to for exit
;
[1:865] ;ztr = -gaitHeightKick + (j + 1 )*(pose_hight_after_kick + gaitHeightKick) / pose_taking_cycles;
VBC2_PUSH_CONST 27 //ztr
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC3_PUSH_GLOBAL 65 //j
VBC1_PUSH_1 
VBC1_ADD
VBC2_PUSH_LOCAL -11 //pose_hight_after_kick
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_ADD_IF
VBC1_MUL_IF
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_DIV_FI
VBC1_ADD_FF
VBC1_POP
[1:866] ;ztl = ztr;
VBC2_PUSH_CONST 34 //ztl
VBC3_PUSH_GLOBAL 27 //ztr
VBC1_POP
[1:867] ;ytr = -d10 - (pose_taking_cycles - (j + 1)) * amplitude / 2 / pose_taking_cycles;
VBC2_PUSH_CONST 26 //ytr
VBC3_PUSH_GLOBAL 40 //d10
VBC1_NEG_F
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC3_PUSH_GLOBAL 65 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_SUB
VBC3_PUSH_GLOBAL 41 //amplitude
VBC1_MUL_IF
VBC1_PUSH_2 
VBC1_DIV_FI
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
[1:868] ;ytl = d10 - (pose_taking_cycles - (j + 1)) * amplitude / 2 / pose_taking_cycles;
VBC2_PUSH_CONST 33 //ytl
VBC3_PUSH_GLOBAL 40 //d10
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC3_PUSH_GLOBAL 65 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_SUB
VBC3_PUSH_GLOBAL 41 //amplitude
VBC1_MUL_IF
VBC1_PUSH_2 
VBC1_DIV_FI
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
[1:869] ;computeAlphaForWalk();
VBC3_PUSH_CONST 652  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB5384: //for step
VBC2_PUSH_CONST 65 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB5293 //to condition
LAB5395: //for exit
[1:872] ;xr = xrOld;
VBC2_PUSH_CONST 28 //xr
VBC2_PUSH_LOCAL -7 //xrOld
VBC1_POP
[1:873] ;yr = yrOld;
VBC2_PUSH_CONST 29 //yr
VBC2_PUSH_LOCAL -8 //yrOld
VBC1_POP
[1:874] ;xl = xlOld;
VBC2_PUSH_CONST 35 //xl
VBC2_PUSH_LOCAL -9 //xlOld
VBC1_POP
[1:875] ;yl = ylOld;
VBC2_PUSH_CONST 36 //yl
VBC2_PUSH_LOCAL -10 //ylOld
VBC1_POP
[1:878] ;
VBC1_RETURN
;turn <void(,int)>
VBC1_STACK_DN1//local vars 1
[1:879] ;
[1:879] ;int frameCount = 4;
VBC2_PUSH_B_OFFSET -1 //frameCount
VBC2_PUSH_CONST 4 
VBC1_POP
[1:880] ;if (direction == 1){
VBC2_PUSH_LOCAL 2 //direction
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB5460 //if to false
;
[1:881] ;sfPoseGroup( 1024 , -2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 1024 
VBC3_PUSH_CONST -2000 // -
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:882] ;sfPoseGroup( 2048 , 2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 2048 
VBC3_PUSH_CONST 2000 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB5460: //if else
[1:884] ;if (direction == -1){
VBC2_PUSH_LOCAL 2 //direction
VBC2_PUSH_CONST -1 // -
VBC1_EQU
VBC4_FALSE_JUMP LAB5499 //if to false
;
[1:885] ;sfPoseGroup( 1024 , 2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 1024 
VBC3_PUSH_CONST 2000 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:886] ;sfPoseGroup( 2048 , -2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 2048 
VBC3_PUSH_CONST -2000 // -
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB5499: //if else
[1:888] ;sfPoseGroup( 1048576 , 2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_CONST 2000 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:889] ;sfPoseGroup( 2097152 , 2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_CONST 2000 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:890] ;sfWaitFrame( frameCount );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:891] ;sfPoseGroup( 1024 , 0, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 1024 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:892] ;sfPoseGroup( 2048 , 0, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 2048 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:893] ;sfPoseGroup( 1048576 , 0, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 1048576 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:894] ;sfPoseGroup( 2097152 , 0, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 2097152 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:895] ;sfWaitFrame( frameCount );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:896] ;sfWaitFrame( 6 );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_CONST 6 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:899] ;
VBC1_RETURN
;movingRemoteControl <void()>
[1:901] ;while(1) {
LAB5604: //while condition
;
[1:903] ;while( sfAbs( svRemoteRightJoystickX ) < 10  
LAB5604: //while condition
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 3256 //svRemoteRightJoystickX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB5686
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 3257 //svRemoteRightJoystickY
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB5686
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 3253 //svRemoteLeftJoystickX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB5686
VBC3_PUSH_GLOBAL 3254 //svRemoteLeftJoystickY
VBC1_PUSH_0 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB5680
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC3_PUSH_CONST 2048 
VBC1_DIV
VBC1_PUSH_2 
VBC1_MOD
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB5680
VBC1_PUSH_1
LAB5680:
VBC1_LNOT
VBC4_FALSE_JUMP_KEEP LAB5686
VBC1_PUSH_1
LAB5686:
VBC4_FALSE_JUMP LAB5796 //while to exit
;
[1:908] ;if (svRemoteButton == 262144 || svRemoteButton == 128) kick(1,0); 
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC4_PUSH_CONST 262144 
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB5714
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC3_PUSH_CONST 128 
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB5714
VBC1_PUSH_0
LAB5714:
VBC4_FALSE_JUMP LAB5725 //if to false
;if (svRemoteButton == 262144 || svRemoteButton == 128) kick(1,0); 
VBC3_PUSH_CONST 4382  //func address kick
VBC1_PUSH_1 
VBC1_PUSH_0 
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
LAB5725: //if else
[1:909] ;if (svRemoteButton == 524288 || svRemoteButton == 64) kick(0,0); 
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC4_PUSH_CONST 524288 
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB5748
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC2_PUSH_CONST 64 
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB5748
VBC1_PUSH_0
LAB5748:
VBC4_FALSE_JUMP LAB5759 //if to false
;if (svRemoteButton == 524288 || svRemoteButton == 64) kick(0,0); 
VBC3_PUSH_CONST 4382  //func address kick
VBC1_PUSH_0 
VBC1_PUSH_0 
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
LAB5759: //if else
[1:910] ;if (svRemoteButton == 1) turn(1); 
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB5774 //if to false
;if (svRemoteButton == 1) turn(1); 
VBC3_PUSH_CONST 5416  //func address turn
VBC1_PUSH_1 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB5774: //if else
[1:911] ;if (svRemoteButton == 8) turn(-1); 
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC2_PUSH_CONST 8 
VBC1_EQU
VBC4_FALSE_JUMP LAB5791 //if to false
;if (svRemoteButton == 8) turn(-1); 
VBC3_PUSH_CONST 5416  //func address turn
VBC2_PUSH_CONST -1 // -
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB5791: //if else
[1:912] ;sfWaitNextFrame();
VBC1_WAIT
VBC4_JUMP LAB5604 //while forever loop
LAB5796: //while exit
[1:916] ;sideLength = joystickToSideLength();
VBC2_PUSH_CONST 4 //sideLength
VBC3_PUSH_CONST 3747  //func address joystickToSideLength
VBC1_CALL0
//remove call address and params
VBC1_POP_CF
[1:917] ;selfFirstLegIsRightLeg = motion_to_right;
VBC2_PUSH_CONST 15 //selfFirstLegIsRightLeg
VBC3_PUSH_GLOBAL 16 //motion_to_right
VBC1_POP
[1:918] ;if (svRemoteLeftJoystickY < 0 && ((svRemoteButton / 2048) % 2 == 1)) stepNumber = -svRemoteLeftJoystickY;
VBC3_PUSH_GLOBAL 3254 //svRemoteLeftJoystickY
VBC1_PUSH_0 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB5834
VBC3_PUSH_GLOBAL 3251 //svRemoteButton
VBC3_PUSH_CONST 2048 
VBC1_DIV
VBC1_PUSH_2 
VBC1_MOD
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB5834
VBC1_PUSH_1
LAB5834:
VBC4_FALSE_JUMP LAB5845 //if to false
;if (svRemoteLeftJoystickY < 0 && ((svRemoteButton / 2048) % 2 == 1)) stepNumber = -svRemoteLeftJoystickY;
VBC2_PUSH_CONST 62 //stepNumber
VBC3_PUSH_GLOBAL 3254 //svRemoteLeftJoystickY
VBC1_NEG
VBC1_POP
LAB5845: //if else
[1:920] ;walkInitialPoseFine();
VBC3_PUSH_CONST 1902  //func address walkInitialPoseFine
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:921] ;walkLoop();
VBC3_PUSH_CONST 3812  //func address walkLoop
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:924] ;stepType = 1;
VBC2_PUSH_CONST 57 //stepType
VBC1_PUSH_1 
VBC1_POP
[1:925] ;walkCycle(0);
VBC3_PUSH_CONST 3372  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:927] ;walkFinalPoseFine();
VBC3_PUSH_CONST 2068  //func address walkFinalPoseFine
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
VBC4_JUMP LAB5604 //while forever loop
LAB5874: //while exit
[1:931] ;walkFinalPoseFine();
VBC3_PUSH_CONST 2068  //func address walkFinalPoseFine
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:934] ;
VBC1_RETURN
;main <void()>
[1:935] ;slowWalk = 0;
VBC1_PUSH_2 //slowWalk
VBC1_PUSH_0 
VBC1_POP
[1:936] ;setup();
VBC2_PUSH_CONST 108  //func address setup
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:937] ;sideLength = 0;
VBC2_PUSH_CONST 4 //sideLength
VBC1_PUSH_0 
VBC1_POP_CF
[1:938] ;rotation = 0;
VBC2_PUSH_CONST 5 //rotation
VBC1_PUSH_0 
VBC1_POP_CF
[1:941] ;sfWaitFrame( 100 );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_CONST 100 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:944] ;sfQuaternionToEulerImu();
VBC5_PUSH_CONST 303 | 0x80000000 //import func index sfQuaternionToEulerImu
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:945] ;forwardDirection = svEulerYaw;
VBC2_PUSH_CONST 77 //forwardDirection
VBC3_PUSH_GLOBAL 2600 //svEulerYaw
VBC1_POP
[1:948] ;sfCreateTask( mixing, 20 );
VBC5_PUSH_CONST 2 | 0x80000000 //import func index sfCreateTask
VBC3_PUSH_CONST 3561  //func address mixing
VBC2_PUSH_CONST 20 
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
[1:951] ;runTest(); 
VBC3_PUSH_CONST 3625  //func address runTest
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:956] ;
VBC1_RETURN
//Init table
//Variables
svFrameCount : 1
svImuAccX : 2560
svImuAccY : 2561
svImuAccZ : 2562
svImuAccRawX : 2563
svImuAccRawY : 2564
svImuAccRawZ : 2565
svImuGyroX : 2566
svImuGyroY : 2567
svImuGyroZ : 2568
svImuGyroRawX : 2569
svImuGyroRawY : 2570
svImuGyroRawZ : 2571
svImuQuaterX : 2572
svImuQuaterY : 2573
svImuQuaterZ : 2574
svImuQuaterW : 2575
svImuQuaterAcc : 2576
svImuAccSlowX : 2577
svImuAccSlowY : 2578
svImuAccSlowZ : 2579
svAdc : 2580
svButtonLeft : 2581
svButtonRight : 2582
svButtonPress : 2583
svHeadControlMask : 2584
svDefFrameCount : 2585
svEulerYaw F: 2600
svEulerPitch F: 2601
svEulerRoll F: 2602
svRemoteStatus : 3250
svRemoteButton : 3251
svRemoteLeftJoystick : 3252
svRemoteLeftJoystickX : 3253
svRemoteLeftJoystickY : 3254
svRemoteRightJoystick : 3255
svRemoteRightJoystickX : 3256
svRemoteRightJoystickY : 3257
svDebug0 : 2603
svDebug1 : 2604
svDebug2 : 2605
svDebug3 : 2606
svHumoModelDistPelvic : 3264
svHumoModelLengthPelvicHip : 3265
svHumoModelLengthHipHip : 3266
svHumoModelLengthHipKnee : 3267
svHumoModelLengthKneeFoot : 3268
svHumoModelLengthFootFoot : 3269
svHumoModelDistFootFloor : 3270
svHumoModelFootLength : 3271
svHumoModelFootWidth : 3272
svHumoModelFootCenterBack : 3273
svHumoModelFootCenterInner : 3274
svHumoModelAngPelvic : 3258
svHumoModelAngHipSide : 3260
svHumoModelAngHip : 3259
svHumoModelAngKnee : 3261
svHumoModelAngFoot : 3262
svHumoModelAngFootSide : 3263
svIkA5 F: 3275
svIkB5 F: 3276
svIkC5 F: 3277
svIkA6 F: 3278
svIkA7 F: 3279
svIkA8 F: 3280
svIkA9 F: 3281
svIkA10 F: 3282
svIkB10 F: 3283
svIkC10 F: 3284
svIkLimA5min F: 3285
svIkLimA5max F: 3286
svIkLimA6min F: 3287
svIkLimA6max F: 3288
svIkLimA7min F: 3289
svIkLimA7max F: 3290
svIkLimA8min F: 3291
svIkLimA8max F: 3292
svIkLimA9min F: 3293
svIkLimA9max F: 3294
svIkLimA10min F: 3295
svIkLimA10max F: 3296
svIkOutPresent : 3297
svIkEncA5 : 3298
svIkEncA6 : 3299
svIkEncA7 : 3300
svIkEncA8 : 3301
svIkEncA9 : 3302
svIkEncA10 : 3303
headRotateTarget : 2610
headRotateCurrent : 2611
headRotatePwm : 2612
headRotateVelo : 2613
headRotateFlags : 2615
headRotateAddonMix : 2617
torsoRotateTarget : 2626
torsoRotateCurrent : 2627
torsoRotatePwm : 2628
torsoRotateVelo : 2629
torsoRotateFlags : 2631
torsoRotateAddonMix : 2633
rightClavicleTarget : 2642
rightClavicleCurrent : 2643
rightClaviclePwm : 2644
rightClavicleVelo : 2645
rightClavicleFlags : 2647
rightClavicleAddonMix : 2649
leftClavicleTarget : 2658
leftClavicleCurrent : 2659
leftClaviclePwm : 2660
leftClavicleVelo : 2661
leftClavicleFlags : 2663
leftClavicleAddonMix : 2665
rightShoulderTarget : 2674
rightShoulderCurrent : 2675
rightShoulderPwm : 2676
rightShoulderVelo : 2677
rightShoulderFlags : 2679
rightShoulderAddonMix : 2681
leftShoulderTarget : 2690
leftShoulderCurrent : 2691
leftShoulderPwm : 2692
leftShoulderVelo : 2693
leftShoulderFlags : 2695
leftShoulderAddonMix : 2697
rightElbowSideTarget : 2706
rightElbowSideCurrent : 2707
rightElbowSidePwm : 2708
rightElbowSideVelo : 2709
rightElbowSideFlags : 2711
rightElbowSideAddonMix : 2713
leftElbowSideTarget : 2722
leftElbowSideCurrent : 2723
leftElbowSidePwm : 2724
leftElbowSideVelo : 2725
leftElbowSideFlags : 2727
leftElbowSideAddonMix : 2729
rightElbowTarget : 2738
rightElbowCurrent : 2739
rightElbowPwm : 2740
rightElbowVelo : 2741
rightElbowFlags : 2743
rightElbowAddonMix : 2745
leftElbowTarget : 2754
leftElbowCurrent : 2755
leftElbowPwm : 2756
leftElbowVelo : 2757
leftElbowFlags : 2759
leftElbowAddonMix : 2761
rightPelvicTarget : 2770
rightPelvicCurrent : 2771
rightPelvicPwm : 2772
rightPelvicVelo : 2773
rightPelvicFlags : 2775
rightPelvicAddonMix : 2777
leftPelvicTarget : 2786
leftPelvicCurrent : 2787
leftPelvicPwm : 2788
leftPelvicVelo : 2789
leftPelvicFlags : 2791
leftPelvicAddonMix : 2793
rightHipSideTarget : 2802
rightHipSideCurrent : 2803
rightHipSidePwm : 2804
rightHipSideVelo : 2805
rightHipSideFlags : 2807
rightHipSideAddonMix : 2809
leftHipSideTarget : 2818
leftHipSideCurrent : 2819
leftHipSidePwm : 2820
leftHipSideVelo : 2821
leftHipSideFlags : 2823
leftHipSideAddonMix : 2825
rightHipTarget : 2834
rightHipCurrent : 2835
rightHipPwm : 2836
rightHipVelo : 2837
rightHipFlags : 2839
rightHipAddonMix : 2841
leftHipTarget : 2850
leftHipCurrent : 2851
leftHipPwm : 2852
leftHipVelo : 2853
leftHipFlags : 2855
leftHipAddonMix : 2857
rightKneeTarget : 2866
rightKneeCurrent : 2867
rightKneePwm : 2868
rightKneeVelo : 2869
rightKneeFlags : 2871
rightKneeAddonMix : 2873
leftKneeTarget : 2882
leftKneeCurrent : 2883
leftKneePwm : 2884
leftKneeVelo : 2885
leftKneeFlags : 2887
leftKneeAddonMix : 2889
rightFootFrontTarget : 2898
rightFootFrontCurrent : 2899
rightFootFrontPwm : 2900
rightFootFrontVelo : 2901
rightFootFrontFlags : 2903
rightFootFrontAddonMix : 2905
leftFootFrontTarget : 2914
leftFootFrontCurrent : 2915
leftFootFrontPwm : 2916
leftFootFrontVelo : 2917
leftFootFrontFlags : 2919
leftFootFrontAddonMix : 2921
rightFootSideTarget : 2930
rightFootSideCurrent : 2931
rightFootSidePwm : 2932
rightFootSideVelo : 2933
rightFootSideFlags : 2935
rightFootSideAddonMix : 2937
leftFootSideTarget : 2946
leftFootSideCurrent : 2947
leftFootSidePwm : 2948
leftFootSideVelo : 2949
leftFootSideFlags : 2951
leftFootSideAddonMix : 2953
rightHandTarget : 2962
rightHandCurrent : 2963
rightHandPwm : 2964
rightHandVelo : 2965
rightHandFlags : 2967
rightHandAddonMix : 2969
leftHandTarget : 2978
leftHandCurrent : 2979
leftHandPwm : 2980
leftHandVelo : 2981
leftHandFlags : 2983
leftHandAddonMix : 2985
headTiltTarget : 3010
headTiltCurrent : 3011
headTiltPwm : 3012
headTiltVelo : 3013
headTiltFlags : 3015
headTiltAddonMix : 3017
rightKneeBotTarget : 3026
rightKneeBotCurrent : 3027
rightKneeBotPwm : 3028
rightKneeBotVelo : 3029
rightKneeBotFlags : 3031
rightKneeBotAddonMix : 3033
leftKneeBotTarget : 3042
leftKneeBotCurrent : 3043
leftKneeBotPwm : 3044
leftKneeBotVelo : 3045
leftKneeBotFlags : 3047
leftKneeBotAddonMix : 3049
rightClawTarget : 3058
rightClawCurrent : 3059
rightClawPwm : 3060
rightClawVelo : 3061
rightClawFlags : 3063
rightClawAddonMix : 3065
leftClawTarget : 3074
leftClawCurrent : 3075
leftClawPwm : 3076
leftClawVelo : 3077
leftClawFlags : 3079
leftClawAddonMix : 3081
slowWalk : 2
stepLength F: 3
sideLength F: 4
rotation F: 5
stepLengthOrder F: 6
selfTIK2RAD F: 7
selfFrameDelay F: 8
selfMotionShiftCorrectionX F: 9
selfMotionShiftCorrectionY F: 10
selfFirstStepYield F: 11
selfCycleStepYield F: 12
selfSideStepRightYield F: 13
selfSideStepLeftYield F: 14
selfFirstLegIsRightLeg : 15
motion_to_right : 16
side_motion F: 17
selfInitPoses : 18
selfExitFlag : 19
selfFallingFlag : 20
selfNeckPan : 21
rotationYieldRight F: 22
rotationYieldLeft F: 23
framestep : 24
xtr F: 25
ytr F: 26
ztr F: 27
xr F: 28
yr F: 29
zr F: 30
wr F: 31
xtl F: 32
ytl F: 33
ztl F: 34
xl F: 35
yl F: 36
zl F: 37
wl F: 38
e10 F: 39
d10 F: 40
amplitude F: 41
alpha01 F: 42
fr1 : 43
fr2 : 44
gaitHeight F: 45
stepHeight F: 46
correctedStepLenght F: 47
correctedStepLenghtHalf F: 48
correctedSideLenght F: 49
correctedSideLenghtHalf F: 50
ztr0 F: 51
ztl0 F: 52
stepZtr F: 53
stepZtl F: 54
stepYtr F: 55
stepYtl F: 56
stepType : 57
fps : 58
timeStep : 59
bodyTiltAtWalk F: 60
solyLandingSkew F: 61
stepNumber : 62
flag : 63
flag_event : 64
j : 65
xtl0 F: 66
xtr0 F: 67
dx0Typical F: 68
dy0Typical F: 69
correctedRotation F: 70
s F: 71
fase_offset F: 72
dx F: 73
dy F: 74
stepRotation F: 75
dx0 F: 76
forwardDirection F: 77
leftRightFactor : 78
frontBackFactor : 79
