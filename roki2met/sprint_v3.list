//====================================================================
//      SvCompiler V6.06
//By A.Sibilev
//====================================================================
//cblock

;sfVpuVersion <int()>
;sfCreateTask <int(,*<void()>,int)>
;sfLog <void(,cstring,int,int,int)>
;sfLogOpen <void(,cstring)>
;sfLogClose <void()>
;sfWaitFrameOut <void(,int)>
;sfIsFrameOut <int(,int)>
;sfWaitNextFrame <void()>
;sfSlotIndex <int(,cstring)>
;sfAbs <int(,int)>
;sfIMin <int(,int,int)>
;sfIMax <int(,int,int)>
;sfUMin <int(,int,int)>
;sfUMax <int(,int,int)>
;sfILimit <int(,int,int,int)>
;sfStop <void()>
;sfStartSlot <void(,int)>
;sfBip <void(,int,int)>
;sfFreeGroup <void(,int)>
;sfPoseGroup <void(,int,int,int)>
;sfPoseGroupDelay <void(,int,int,int,int)>
;sfPoseCorrect <void(,int,int)>
;sfQueueGroup <void(,int,int,int)>
;sfPoseIdx <void(,int,int,int)>
;sfPoseGroupLin <void(,int,int,int)>
;sfStrainGroup <void(,int)>
;sfPlaySamples <void(,int,*cblock,int)>
;sfAccumSetup1 <void(,*int)>
;sfAccumSetup2 <void(,*int,*int)>
;sfAccumSetup3 <void(,*int,*int,*int)>
;sfAccumSetup4 <void(,*int,*int,*int,*int)>
;sfAccumTrigger <void()>
;sfAccumReset <void()>
;sfMathAcos <int(,int,int)>
;sfMathSqrti <int(,int)>
;sfMathAngleOfTriangle <int(,int,int,int)>
;sfMathAngleOfKnee <int(,int,int,int)>
;sfMathCathetOfSquareTriangle <int(,int,int)>
;sfMathHypotenuseOfSquareTriangle <int(,int,int)>
;sfMathTableSin <int(,int,int)>
;sfHumoModelSetup <void()>
;sfHumoModelFootAtFloor <void(,int,int,int)>
;sfHumoModelFootPush <void(,int,int,int)>
;sfIndexOfMask <int(,int)>
;sfQueueIdxAppend <int(,int,int,int)>
;sfQueueIdxOffsets <int(,int,int,*cblock,int)>
;sfQueueIdxSinMove <int(,int,int,int,int)>
;sfQueueIdxLast <int(,int)>
;sfQueueIdxCount <int(,int)>
;sfQueueMax <int()>
;sfIkSetup <void()>
;sfIkAngle <void(,float,float,float,float,float,float,float)>
;sfMathCos <float(,float)>
;sfMathSin <float(,float)>
;sfQuaternionToEuler <void(,float,float,float,float)>
;sfQuaternionToEulerImu <void()>
;sfFMathACos <float(,float)>
;sfFMathASin <float(,float)>
;sfFMathATan <float(,float)>
;sfFMathATan2 <float(,float,float)>
;sfFMathCos <float(,float)>
;sfFMathSin <float(,float)>
;sfFMathTan <float(,float)>
;sfFMathCosh <float(,float)>
;sfFMathSinh <float(,float)>
;sfFMathTanh <float(,float)>
;sfFMathExp <float(,float)>
;sfFMathFrExp <float(,float,*int)>
;sfFMathLdExp <float(,float,int)>
;sfFMathLog <float(,float)>
;sfFMathLog10 <float(,float)>
;sfFMathModf <float(,float,*float)>
;sfFMathPow <float(,float,float)>
;sfFMathSqrt <float(,float)>
;sfFMathCeil <float(,float)>
;sfFMathFAbs <float(,float)>
;sfFMathFloor <float(,float)>
;sfFMathFMod <float(,float,float)>
;sfWaitFrame <void(,int)>
[3:348] ;sfWaitFrameOut( frame + svFrameCount );
VBC5_PUSH_CONST 17 | 0x80000000 //import func index sfWaitFrameOut
VBC2_PUSH_LOCAL 2 //frame
VBC3_PUSH_GLOBAL 1 //svFrameCount
VBC1_ADD
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[2:10] ;
VBC1_RETURN
;setup <void()>
[1:100] ;flag_event = 0;
VBC2_PUSH_CONST 63 //flag_event
VBC1_PUSH_0 
VBC1_POP
[1:101] ;rotationYieldRight = 0.23;
VBC2_PUSH_CONST 20 //rotationYieldRight
VBC5_PUSH_CONST 1047233823 
VBC1_POP
[1:102] ;rotationYieldLeft = 0.23;
VBC2_PUSH_CONST 21 //rotationYieldLeft
VBC5_PUSH_CONST 1047233823 
VBC1_POP
[1:104] ;svIkA5 = 40.2; 
VBC3_PUSH_CONST 1215 //svIkA5
VBC5_PUSH_CONST 1109445837 
VBC1_POP
[1:105] ;svIkB5 = 0;    
VBC3_PUSH_CONST 1216 //svIkB5
VBC1_PUSH_0 
VBC1_POP_CF
[1:106] ;svIkC5 = 0;    
VBC3_PUSH_CONST 1217 //svIkC5
VBC1_PUSH_0 
VBC1_POP_CF
[1:107] ;svIkA6 = 0;    
VBC3_PUSH_CONST 1218 //svIkA6
VBC1_PUSH_0 
VBC1_POP_CF
[1:108] ;svIkA7 = 99;   
VBC3_PUSH_CONST 1219 //svIkA7
VBC2_PUSH_CONST 99 
VBC1_POP_CF
[1:109] ;svIkA8 = 99;   
VBC3_PUSH_CONST 1220 //svIkA8
VBC2_PUSH_CONST 99 
VBC1_POP_CF
[1:110] ;svIkA9 = 0;    
VBC3_PUSH_CONST 1221 //svIkA9
VBC1_PUSH_0 
VBC1_POP_CF
[1:111] ;svIkA10 = 13.7;  
VBC3_PUSH_CONST 1222 //svIkA10
VBC5_PUSH_CONST 1096495923 
VBC1_POP
[1:112] ;svIkB10 = 23.8;  
VBC3_PUSH_CONST 1223 //svIkB10
VBC5_PUSH_CONST 1102997094 
VBC1_POP
[1:113] ;svIkC10 = 0;   
VBC3_PUSH_CONST 1224 //svIkC10
VBC1_PUSH_0 
VBC1_POP_CF
[1:115] ;e10 = 55;      
VBC2_PUSH_CONST 37 //e10
VBC2_PUSH_CONST 55 
VBC1_POP_CF
[1:116] ;d10 = 62;      
VBC2_PUSH_CONST 38 //d10
VBC2_PUSH_CONST 62 
VBC1_POP_CF
[1:119] ;svIkLimA5min = -90 * 0.017453293;
VBC3_PUSH_CONST 1225 //svIkLimA5min
VBC5_PUSH_CONST -1077342245 
VBC1_POP
[1:120] ;svIkLimA5max = 90 * 0.017453293;
VBC3_PUSH_CONST 1226 //svIkLimA5max
VBC5_PUSH_CONST 1070141403 
VBC1_POP
[1:123] ;svIkLimA6min = -108 * 0.017453293;
VBC3_PUSH_CONST 1227 //svIkLimA6min
VBC5_PUSH_CONST -1074706887 
VBC1_POP
[1:124] ;svIkLimA6max = 15 * 0.017453293;
VBC3_PUSH_CONST 1228 //svIkLimA6max
VBC5_PUSH_CONST 1048971922 
VBC1_POP
[1:126] ;svIkLimA7min = -130 * 0.017453293;
VBC3_PUSH_CONST 1229 //svIkLimA7min
VBC5_PUSH_CONST -1072613858 
VBC1_POP
[1:127] ;svIkLimA7max = 50 * 0.017453293;
VBC3_PUSH_CONST 1230 //svIkLimA7max
VBC5_PUSH_CONST 1063216883 
VBC1_POP
[1:130] ;svIkLimA8min = -180 * 0.017453293;
VBC3_PUSH_CONST 1231 //svIkLimA8min
VBC5_PUSH_CONST -1068953637 
VBC1_POP
[1:131] ;svIkLimA8max = 8 * 0.017453293;
VBC3_PUSH_CONST 1232 //svIkLimA8max
VBC5_PUSH_CONST 1041168949 
VBC1_POP
[1:134] ;svIkLimA9min = -45 * 0.017453293;
VBC3_PUSH_CONST 1233 //svIkLimA9min
VBC5_PUSH_CONST -1085730853 
VBC1_POP
[1:135] ;svIkLimA9max = 78 * 0.017453293;
VBC3_PUSH_CONST 1234 //svIkLimA9max
VBC5_PUSH_CONST 1068384497 
VBC1_POP
[1:138] ;svIkLimA10min = -24 * 0.017453293;
VBC3_PUSH_CONST 1235 //svIkLimA10min
VBC5_PUSH_CONST -1093241008 
VBC1_POP
[1:139] ;svIkLimA10max = 24 * 0.017453293;
VBC3_PUSH_CONST 1236 //svIkLimA10max
VBC5_PUSH_CONST 1054242640 
VBC1_POP
[1:140] ;sfIkSetup();
VBC5_PUSH_CONST 200 | 0x80000000 //import func index sfIkSetup
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:142] ;framestep = 2;
VBC2_PUSH_CONST 22 //framestep
VBC1_PUSH_2 
VBC1_POP
[1:146] ;selfMotionShiftCorrectionX = 0.0;
VBC2_PUSH_CONST 7 //selfMotionShiftCorrectionX
VBC1_PUSH_0 
VBC1_POP
[1:147] ;selfMotionShiftCorrectionY = 0.0;
VBC2_PUSH_CONST 8 //selfMotionShiftCorrectionY
VBC1_PUSH_0 
VBC1_POP
[1:151] ;ztr0 = -(svIkC5+svIkA6+svIkA7+svIkA8+svIkA9+svIkB10 - 1); 
VBC2_PUSH_CONST 49 //ztr0
VBC3_PUSH_GLOBAL 1217 //svIkC5
VBC3_PUSH_GLOBAL 1218 //svIkA6
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1219 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1220 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1221 //svIkA9
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1223 //svIkB10
VBC1_ADD_FF
VBC1_PUSH_1 
VBC1_SUB_FI
VBC1_NEG_F
VBC1_POP
[1:152] ;ztl0 = -(svIkC5+svIkA6+svIkA7+svIkA8+svIkA9+svIkB10 - 1); 
VBC2_PUSH_CONST 50 //ztl0
VBC3_PUSH_GLOBAL 1217 //svIkC5
VBC3_PUSH_GLOBAL 1218 //svIkA6
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1219 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1220 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1221 //svIkA9
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1223 //svIkB10
VBC1_ADD_FF
VBC1_PUSH_1 
VBC1_SUB_FI
VBC1_NEG_F
VBC1_POP
[1:154] ;zr = zl = -1;
VBC2_PUSH_CONST 28 //zr
VBC2_PUSH_CONST 35 //zl
VBC2_PUSH_CONST -1 // -
VBC1_STORE_CF
VBC1_POP
[1:157] ;selfInitPoses = 10;
VBC2_PUSH_CONST 16 //selfInitPoses
VBC2_PUSH_CONST 10 
VBC1_POP
[1:160] ;stepLength = 0.0;    
VBC2_PUSH_CONST 3 //stepLength
VBC1_PUSH_0 
VBC1_POP
[1:161] ;sideLength = 0.0;    
VBC2_PUSH_CONST 4 //sideLength
VBC1_PUSH_0 
VBC1_POP
[1:162] ;rotation = 0;        
VBC2_PUSH_CONST 5 //rotation
VBC1_PUSH_0 
VBC1_POP_CF
[1:163] ;selfFirstLegIsRightLeg = 1; 
VBC2_PUSH_CONST 13 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_POP
[1:164] ;motion_to_right = 1;
VBC2_PUSH_CONST 14 //motion_to_right
VBC1_PUSH_1 
VBC1_POP
[1:165] ;side_motion = 0.0;
VBC2_PUSH_CONST 15 //side_motion
VBC1_PUSH_0 
VBC1_POP
[1:166] ;selfInitPoses = 20; 
VBC2_PUSH_CONST 16 //selfInitPoses
VBC2_PUSH_CONST 20 
VBC1_POP
[1:168] ;stepZtr = (ztr0 + gaitHeight) / selfInitPoses;
VBC2_PUSH_CONST 51 //stepZtr
VBC3_PUSH_GLOBAL 49 //ztr0
VBC3_PUSH_GLOBAL 43 //gaitHeight
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 16 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:169] ;stepZtl = (ztl0 + gaitHeight) / selfInitPoses;
VBC2_PUSH_CONST 52 //stepZtl
VBC3_PUSH_GLOBAL 50 //ztl0
VBC3_PUSH_GLOBAL 43 //gaitHeight
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 16 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:171] ;solyLandingSkew = 0.00;
VBC2_PUSH_CONST 59 //solyLandingSkew
VBC1_PUSH_0 
VBC1_POP
[1:173] ;tors_angle = 0;     
VBC2_PUSH_CONST 66 //tors_angle
VBC1_PUSH_0 
VBC1_POP_CF
[1:175] ;stepYtr = amplitude / 2.0 / selfInitPoses;
VBC2_PUSH_CONST 53 //stepYtr
VBC3_PUSH_GLOBAL 39 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 16 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:176] ;stepYtl = amplitude / 2.0 / selfInitPoses;
VBC2_PUSH_CONST 54 //stepYtl
VBC3_PUSH_GLOBAL 39 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 16 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:181] ;alpha01 = 3.141592654;
VBC2_PUSH_CONST 40 //alpha01
VBC5_PUSH_CONST 1078530011 
VBC1_POP
[1:182] ;if( fr1 != 0 )
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_PUSH_0 
VBC1_NOT_EQU
VBC4_FALSE_JUMP LAB488 //if to false
;alpha01 = alpha01 * 2 / fr1;
VBC2_PUSH_CONST 40 //alpha01
VBC3_PUSH_GLOBAL 40 //alpha01
VBC1_PUSH_2 
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_DIV_FI
VBC1_POP
LAB488: //if else
[1:190] ;timeStep = 1;
VBC2_PUSH_CONST 57 //timeStep
VBC1_PUSH_1 
VBC1_POP
[1:192] ;stepLengthOrder = 60;
VBC2_PUSH_CONST 6 //stepLengthOrder
VBC2_PUSH_CONST 60 
VBC1_POP_CF
[1:193] ;ugol_torsa = 0.7;  	
VBC2_PUSH_CONST 64 //ugol_torsa
VBC5_PUSH_CONST 1060320051 
VBC1_POP
[1:194] ;bodyTiltAtWalk = 0.055;
VBC2_PUSH_CONST 58 //bodyTiltAtWalk
VBC5_PUSH_CONST 1029785518 
VBC1_POP
[1:195] ;hipTilt = 0;
VBC2_PUSH_CONST 60 //hipTilt
VBC1_PUSH_0 
VBC1_POP
[1:196] ;gaitHeight = 180; 
VBC2_PUSH_CONST 43 //gaitHeight
VBC3_PUSH_CONST 180 
VBC1_POP_CF
[1:197] ;stepHeight = 40; 
VBC2_PUSH_CONST 44 //stepHeight
VBC2_PUSH_CONST 40 
VBC1_POP_CF
[1:198] ;fps = 4;
VBC2_PUSH_CONST 56 //fps
VBC2_PUSH_CONST 4 
VBC1_POP
[1:199] ;fr1 = 4;           
VBC2_PUSH_CONST 41 //fr1
VBC2_PUSH_CONST 4 
VBC1_POP
[1:200] ;fr2 = 6;          
VBC2_PUSH_CONST 42 //fr2
VBC2_PUSH_CONST 6 
VBC1_POP
[1:201] ;amplitude = 32;    
VBC2_PUSH_CONST 39 //amplitude
VBC2_PUSH_CONST 32 
VBC1_POP_CF
[1:203] ;if (timeStep == 1){
VBC3_PUSH_GLOBAL 57 //timeStep
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB614 //if to false
;
[1:204] ;stepLengthOrder = 40;
VBC2_PUSH_CONST 6 //stepLengthOrder
VBC2_PUSH_CONST 40 
VBC1_POP_CF
[1:205] ;ugol_torsa = 0.65;
VBC2_PUSH_CONST 64 //ugol_torsa
VBC5_PUSH_CONST 1059481190 
VBC1_POP
[1:206] ;bodyTiltAtWalk = -0.02; 
VBC2_PUSH_CONST 58 //bodyTiltAtWalk
VBC5_PUSH_CONST -1130113270 // -
VBC1_POP
[1:207] ;hipTilt = 220;
VBC2_PUSH_CONST 60 //hipTilt
VBC3_PUSH_CONST 220 
VBC1_POP
[1:208] ;gaitHeight = 135;
VBC2_PUSH_CONST 43 //gaitHeight
VBC3_PUSH_CONST 135 
VBC1_POP_CF
[1:209] ;stepHeight = 35;
VBC2_PUSH_CONST 44 //stepHeight
VBC2_PUSH_CONST 35 
VBC1_POP_CF
[1:210] ;fps = 2;
VBC2_PUSH_CONST 56 //fps
VBC1_PUSH_2 
VBC1_POP
[1:211] ;fr1 = 4;           
VBC2_PUSH_CONST 41 //fr1
VBC2_PUSH_CONST 4 
VBC1_POP
[1:212] ;fr2 = 9;          
VBC2_PUSH_CONST 42 //fr2
VBC2_PUSH_CONST 9 
VBC1_POP
[1:213] ;amplitude = 40;    
VBC2_PUSH_CONST 39 //amplitude
VBC2_PUSH_CONST 40 
VBC1_POP_CF
LAB614: //if else
[1:223] ;
VBC1_RETURN
;computeAlphaForWalk <int()>
[1:229] ;flag = 0;
VBC2_PUSH_CONST 62 //flag
VBC1_PUSH_0 
VBC1_POP
[1:230] ;torsoAdd = tors_angle * 2607.594587 ;
VBC2_PUSH_CONST 67 //torsoAdd
VBC3_PUSH_GLOBAL 66 //tors_angle
VBC5_PUSH_CONST 1159920003 
VBC1_MUL_FF
VBC1_POP_CI
[1:231] ;sfIkAngle( xtr, ytr, ztr, xr, yr, zr, wr );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 23 //xtr
VBC3_PUSH_GLOBAL 24 //ytr
VBC3_PUSH_GLOBAL 25 //ztr
VBC3_PUSH_GLOBAL 26 //xr
VBC3_PUSH_GLOBAL 27 //yr
VBC3_PUSH_GLOBAL 28 //zr
VBC3_PUSH_GLOBAL 29 //wr
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
[1:232] ;if( svIkOutPresent ) {
VBC3_PUSH_GLOBAL 1237 //svIkOutPresent
VBC4_FALSE_JUMP LAB988 //if to false
;
[1:233] ;flag = flag + 1;
VBC2_PUSH_CONST 62 //flag
VBC3_PUSH_GLOBAL 62 //flag
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
[1:235] ;if (selfFirstLegIsRightLeg == 1){
VBC3_PUSH_GLOBAL 13 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB837 //if to false
;
[1:236] ;sfPoseGroupLin( 1024 , -(svIkEncA5 - torsoAdd), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC3_PUSH_GLOBAL 67 //torsoAdd
VBC1_SUB
VBC1_NEG
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:237] ;sfPoseGroupLin( 4096 , -svIkEncA6, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:238] ;sfPoseGroupLin( 16384 , -svIkEncA7 + hipTilt, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 60 //hipTilt
VBC1_ADD
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:239] ;sfPoseGroupLin( 65536 , -svIkEncA8, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:240] ;sfPoseGroupLin( 262144 , svIkEncA9, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:241] ;sfPoseGroupLin( 1048576 , -svIkEncA10, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:242] ;sfPoseGroupLin( 2 , -torsoAdd, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 67 //torsoAdd
VBC1_NEG
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:243] ;sfPoseGroupLin( 4 , (1400 - xtl * 30), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_CONST 4 
VBC3_PUSH_CONST 1400 
VBC3_PUSH_GLOBAL 30 //xtl
VBC2_PUSH_CONST 30 
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB988 //if to exit
LAB837: //if else
;
[1:246] ;sfPoseGroupLin( 2048 , (svIkEncA5 - tors_angle), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC3_PUSH_GLOBAL 66 //tors_angle
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:247] ;sfPoseGroupLin( 8192 , -svIkEncA6, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:248] ;sfPoseGroupLin( 32768 , -svIkEncA7 + hipTilt, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 60 //hipTilt
VBC1_ADD
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:249] ;sfPoseGroupLin( 131072 , -svIkEncA8, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:250] ;sfPoseGroupLin( 524288 , svIkEncA9, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:251] ;sfPoseGroupLin( 2097152 , -svIkEncA10, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:252] ;sfPoseGroupLin(2 , -torsoAdd, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 67 //torsoAdd
VBC1_NEG
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:253] ;sfPoseGroupLin( 8 , (1400 - xtr * 30), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_CONST 8 
VBC3_PUSH_CONST 1400 
VBC3_PUSH_GLOBAL 23 //xtr
VBC2_PUSH_CONST 30 
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB988: //if exit
LAB988: //if else
[1:259] ;sfIkAngle( xtl, -ytl, ztl, xl, -yl, zl, wl );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 30 //xtl
VBC3_PUSH_GLOBAL 31 //ytl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 32 //ztl
VBC3_PUSH_GLOBAL 33 //xl
VBC3_PUSH_GLOBAL 34 //yl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 35 //zl
VBC3_PUSH_GLOBAL 36 //wl
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
[1:260] ;if( svIkOutPresent ) {
VBC3_PUSH_GLOBAL 1237 //svIkOutPresent
VBC4_FALSE_JUMP LAB1317 //if to false
;
[1:261] ;flag = flag + 1;
VBC2_PUSH_CONST 62 //flag
VBC3_PUSH_GLOBAL 62 //flag
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
[1:263] ;if (selfFirstLegIsRightLeg == 1){
VBC3_PUSH_GLOBAL 13 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB1182 //if to false
;
[1:264] ;sfPoseGroupLin( 2048 , -(svIkEncA5 + torsoAdd), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC3_PUSH_GLOBAL 67 //torsoAdd
VBC1_ADD
VBC1_NEG
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:265] ;sfPoseGroupLin( 8192 , -svIkEncA6, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:266] ;sfPoseGroupLin( 32768 , -svIkEncA7 + hipTilt, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 60 //hipTilt
VBC1_ADD
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:267] ;sfPoseGroupLin( 131072 , -svIkEncA8, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:268] ;sfPoseGroupLin( 524288 , svIkEncA9, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:269] ;sfPoseGroupLin( 2097152 , -svIkEncA10, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:270] ;sfPoseGroupLin( 8 , (1400 - xtr * 30), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_CONST 8 
VBC3_PUSH_CONST 1400 
VBC3_PUSH_GLOBAL 23 //xtr
VBC2_PUSH_CONST 30 
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB1317 //if to exit
LAB1182: //if else
;
[1:273] ;sfPoseGroupLin( 1024 , (svIkEncA5 - tors_angle), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC3_PUSH_GLOBAL 66 //tors_angle
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:274] ;sfPoseGroupLin( 4096 , -svIkEncA6, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:275] ;sfPoseGroupLin( 16384 , -svIkEncA7 + hipTilt, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 60 //hipTilt
VBC1_ADD
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:276] ;sfPoseGroupLin( 65536 , -svIkEncA8, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:277] ;sfPoseGroupLin( 262144 , svIkEncA9, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:278] ;sfPoseGroupLin( 1048576 , -svIkEncA10, fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:279] ;sfPoseGroupLin( 4 , (1400 - xtl * 30), fps );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_CONST 4 
VBC3_PUSH_CONST 1400 
VBC3_PUSH_GLOBAL 30 //xtl
VBC2_PUSH_CONST 30 
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_F_TO_I
VBC3_PUSH_GLOBAL 56 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB1317: //if exit
LAB1317: //if else
[1:283] ;sfWaitFrame( timeStep );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 57 //timeStep
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:284] ;if (flag < 2) flag_event = flag_event + 1;
VBC3_PUSH_GLOBAL 62 //flag
VBC1_PUSH_2 
VBC1_LESS
VBC4_FALSE_JUMP LAB1341 //if to false
;if (flag < 2) flag_event = flag_event + 1;
VBC2_PUSH_CONST 63 //flag_event
VBC3_PUSH_GLOBAL 63 //flag_event
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
LAB1341: //if else
[1:285] ;return 1;
VBC1_PUSH_1 
VBC2_POP_RESULT 2
VBC1_RETURN
;computeAlphaForWalkFine <void(,int)>
[1:300] ;sfIkAngle( xtr, ytr, ztr, xr, yr, zr, wr );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 23 //xtr
VBC3_PUSH_GLOBAL 24 //ytr
VBC3_PUSH_GLOBAL 25 //ztr
VBC3_PUSH_GLOBAL 26 //xr
VBC3_PUSH_GLOBAL 27 //yr
VBC3_PUSH_GLOBAL 28 //zr
VBC3_PUSH_GLOBAL 29 //wr
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
[1:302] ;if( svIkOutPresent ) {
VBC3_PUSH_GLOBAL 1237 //svIkOutPresent
VBC4_FALSE_JUMP LAB1589 //if to false
;
[1:304] ;if (selfFirstLegIsRightLeg == 1){
VBC3_PUSH_GLOBAL 13 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB1491 //if to false
;
[1:305] ;sfPoseGroupLin( 1024 , -svIkEncA5, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:306] ;sfPoseGroupLin( 4096 , -svIkEncA6, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:307] ;sfPoseGroupLin( 16384 , -svIkEncA7, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:308] ;sfPoseGroupLin( 65536 , -svIkEncA8, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:309] ;sfPoseGroupLin( 262144 , svIkEncA9, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:310] ;sfPoseGroupLin( 1048576 , -svIkEncA10, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB1589 //if to exit
LAB1491: //if else
;
[1:313] ;sfPoseGroupLin( 2048 , svIkEncA5, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:314] ;sfPoseGroupLin( 8192 , -svIkEncA6, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:315] ;sfPoseGroupLin( 32768 , -svIkEncA7, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:316] ;sfPoseGroupLin( 131072 , -svIkEncA8, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:317] ;sfPoseGroupLin( 524288 , svIkEncA9, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:318] ;sfPoseGroupLin( 2097152 , -svIkEncA10, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB1589: //if exit
LAB1589: //if else
[1:324] ;sfIkAngle( xtl, -ytl, ztl, xl, -yl, zl, wl );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 30 //xtl
VBC3_PUSH_GLOBAL 31 //ytl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 32 //ztl
VBC3_PUSH_GLOBAL 33 //xl
VBC3_PUSH_GLOBAL 34 //yl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 35 //zl
VBC3_PUSH_GLOBAL 36 //wl
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
[1:325] ;if( svIkOutPresent ) {
VBC3_PUSH_GLOBAL 1237 //svIkOutPresent
VBC4_FALSE_JUMP LAB1835 //if to false
;
[1:327] ;if (selfFirstLegIsRightLeg == 1){
VBC3_PUSH_GLOBAL 13 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB1738 //if to false
;
[1:328] ;sfPoseGroupLin( 2048 , -svIkEncA5, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:329] ;sfPoseGroupLin( 8192 , -svIkEncA6, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:330] ;sfPoseGroupLin( 32768 , -svIkEncA7, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:331] ;sfPoseGroupLin( 131072 , -svIkEncA8, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:332] ;sfPoseGroupLin( 524288 , svIkEncA9, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:333] ;sfPoseGroupLin( 2097152 , -svIkEncA10, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB1835 //if to exit
LAB1738: //if else
;
[1:336] ;sfPoseGroupLin( 1024 , svIkEncA5, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 1238 //svIkEncA5
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:337] ;sfPoseGroupLin( 4096 , -svIkEncA6, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 1239 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:338] ;sfPoseGroupLin( 16384 , -svIkEncA7, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 1240 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:339] ;sfPoseGroupLin( 65536 , -svIkEncA8, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 1241 //svIkEncA8
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:340] ;sfPoseGroupLin( 262144 , svIkEncA9, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 1242 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:341] ;sfPoseGroupLin( 1048576 , -svIkEncA10, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 1243 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB1835: //if exit
LAB1835: //if else
[1:345] ;sfPoseGroupLin( 256  | 512 , 4540, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 768 
VBC3_PUSH_CONST 4540 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:346] ;sfPoseGroupLin( 4  | 8 , 1400, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC2_PUSH_CONST 12 
VBC3_PUSH_CONST 1400 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:347] ;sfPoseGroupLin( 64  | 128 , 700, frameCount );
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 192 
VBC3_PUSH_CONST 700 
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:348] ;sfWaitFrame( frameCount );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL 2 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:355] ;
VBC1_RETURN
;testDrop <void()>
[1:356] ;if( sfAbs(svImuAccX) > 50000 || sfAbs(svImuAccZ) > 50000 ) {
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 1000 //svImuAccX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC4_PUSH_CONST 50000 
VBC1_GREAT
VBC4_TRUE_JUMP_KEEP LAB1925
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 1002 //svImuAccZ
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC4_PUSH_CONST 50000 
VBC1_GREAT
VBC4_TRUE_JUMP_KEEP LAB1925
VBC1_PUSH_0
LAB1925:
VBC4_FALSE_JUMP LAB1935 //if to false
;
[1:361] ;sfWaitFrame(100);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_CONST 100 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB1935: //if else
[1:367] ;
VBC1_RETURN
;walkInitialPose <void()>
[1:372] ;xtr = xtl = 0;
VBC2_PUSH_CONST 23 //xtr
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:373] ;for( j = 0; j < selfInitPoses; j++ ) {
VBC2_PUSH_CONST 68 //j
VBC1_PUSH_0 
VBC1_POP
LAB1947: //for condition
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 16 //selfInitPoses
VBC1_LESS
VBC4_FALSE_JUMP LAB2032 //to for exit
;
[1:375] ;ztr = ztr0 - j * stepZtr;
VBC2_PUSH_CONST 25 //ztr
VBC3_PUSH_GLOBAL 49 //ztr0
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 51 //stepZtr
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:376] ;ztl = ztl0 - j * stepZtl;
VBC2_PUSH_CONST 32 //ztl
VBC3_PUSH_GLOBAL 50 //ztl0
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 52 //stepZtl
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:377] ;ytr = -d10 - j * stepYtr;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 38 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 53 //stepYtr
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:378] ;ytl =  d10 - j * stepYtl;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 38 //d10
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 54 //stepYtl
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:380] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 615  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB2025 //if to false
;return;
VBC1_RETURN
LAB2025: //if else
LAB2025: //for step
VBC2_PUSH_CONST 68 //j
VBC1_INC
VBC4_JUMP LAB1947 //to condition
LAB2032: //for exit
[1:390] ;
VBC1_RETURN
;walkInitialPoseFine <void()>
[1:391] ;xtr = xtl = 0;
VBC2_PUSH_CONST 23 //xtr
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:392] ;ztr = ztl = -gaitHeight;
VBC2_PUSH_CONST 25 //ztr
VBC2_PUSH_CONST 32 //ztl
VBC3_PUSH_GLOBAL 43 //gaitHeight
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:393] ;ytr = -d10 - amplitude / 2.0;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 38 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 39 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:394] ;ytl =  d10 - amplitude / 2.0;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 38 //d10
VBC3_PUSH_GLOBAL 39 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:395] ;computeAlphaForWalkFine( 40 );
VBC3_PUSH_CONST 1345  //func address computeAlphaForWalkFine
VBC2_PUSH_CONST 40 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:399] ;
VBC1_RETURN
;walkFinalPose <void()>
[1:400] ;for( j = 0; j < selfInitPoses; j++ ) {
VBC2_PUSH_CONST 68 //j
VBC1_PUSH_0 
VBC1_POP
LAB2095: //for condition
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 16 //selfInitPoses
VBC1_LESS
VBC4_FALSE_JUMP LAB2198 //to for exit
;
[1:402] ;ztr = -gaitHeight + (j+1) * stepZtr;
VBC2_PUSH_CONST 25 //ztr
VBC3_PUSH_GLOBAL 43 //gaitHeight
VBC1_NEG_F
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_1 
VBC1_ADD
VBC3_PUSH_GLOBAL 51 //stepZtr
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:403] ;ztl = -gaitHeight + (j+1) * stepZtr;
VBC2_PUSH_CONST 32 //ztl
VBC3_PUSH_GLOBAL 43 //gaitHeight
VBC1_NEG_F
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_1 
VBC1_ADD
VBC3_PUSH_GLOBAL 51 //stepZtr
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:404] ;ytr = -d10 + (selfInitPoses - (j+1)) * stepYtr;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 38 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 16 //selfInitPoses
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_SUB
VBC3_PUSH_GLOBAL 53 //stepYtr
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:405] ;ytl =  d10 + (selfInitPoses - (j+1)) * stepYtl;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 38 //d10
VBC3_PUSH_GLOBAL 16 //selfInitPoses
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_SUB
VBC3_PUSH_GLOBAL 54 //stepYtl
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:407] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 615  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB2191 //if to false
;return;
VBC1_RETURN
LAB2191: //if else
LAB2191: //for step
VBC2_PUSH_CONST 68 //j
VBC1_INC
VBC4_JUMP LAB2095 //to condition
LAB2198: //for exit
[1:418] ;
VBC1_RETURN
;walkFinalPoseFine <void()>
[1:419] ;xtr = xtl = 0;
VBC2_PUSH_CONST 23 //xtr
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:420] ;ztr = ztl = -(svIkC5+svIkA6+svIkA7+svIkA8+svIkA9+svIkB10 - 1);
VBC2_PUSH_CONST 25 //ztr
VBC2_PUSH_CONST 32 //ztl
VBC3_PUSH_GLOBAL 1217 //svIkC5
VBC3_PUSH_GLOBAL 1218 //svIkA6
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1219 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1220 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1221 //svIkA9
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 1223 //svIkB10
VBC1_ADD_FF
VBC1_PUSH_1 
VBC1_SUB_FI
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:421] ;ytr = -d10;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 38 //d10
VBC1_NEG_F
VBC1_POP
[1:422] ;ytl =  d10;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 38 //d10
VBC1_POP
[1:423] ;computeAlphaForWalkFine( 40 );
VBC3_PUSH_CONST 1345  //func address computeAlphaForWalkFine
VBC2_PUSH_CONST 40 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:426] ;
VBC1_RETURN
;walkInit <void()>
[1:440] ;correctedStepLenght = stepLength + selfMotionShiftCorrectionX;
VBC2_PUSH_CONST 45 //correctedStepLenght
VBC3_PUSH_GLOBAL 3 //stepLength
VBC3_PUSH_GLOBAL 7 //selfMotionShiftCorrectionX
VBC1_ADD_FF
VBC1_POP
[1:441] ;correctedStepLenghtHalf = correctedStepLenght / 2;
VBC2_PUSH_CONST 46 //correctedStepLenghtHalf
VBC3_PUSH_GLOBAL 45 //correctedStepLenght
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_POP
[1:442] ;correctedSideLenght = sideLength - selfMotionShiftCorrectionY;
VBC2_PUSH_CONST 47 //correctedSideLenght
VBC3_PUSH_GLOBAL 4 //sideLength
VBC3_PUSH_GLOBAL 8 //selfMotionShiftCorrectionY
VBC1_SUB_FF
VBC1_POP
[1:443] ;correctedSideLenghtHalf = correctedSideLenght / 2;
VBC2_PUSH_CONST 48 //correctedSideLenghtHalf
VBC3_PUSH_GLOBAL 47 //correctedSideLenght
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_POP
[1:446] ;correctedRotation = -rotation *0.25 * 0.23 / ( rotation <= 0 ? rotationYieldRight : rotationYieldLeft);
VBC2_PUSH_CONST 73 //correctedRotation
VBC3_PUSH_GLOBAL 5 //rotation
VBC1_NEG_F
VBC5_PUSH_CONST 1048576000 
VBC1_MUL_FF
VBC5_PUSH_CONST 1047233823 
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 5 //rotation
VBC1_PUSH_0 
VBC1_LESS_EQU_FI
VBC4_FALSE_JUMP LAB2329
VBC3_PUSH_GLOBAL 20 //rotationYieldRight
VBC4_JUMP LAB2332
LAB2329:
VBC3_PUSH_GLOBAL 21 //rotationYieldLeft
LAB2332:
VBC1_DIV_FF
VBC1_POP
[1:447] ;if (correctedRotation > 0.125) correctedRotation = 0.125;
VBC3_PUSH_GLOBAL 73 //correctedRotation
VBC5_PUSH_CONST 1040187392 
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB2355 //if to false
;if (correctedRotation > 0.125) correctedRotation = 0.125;
VBC2_PUSH_CONST 73 //correctedRotation
VBC5_PUSH_CONST 1040187392 
VBC1_POP
LAB2355: //if else
[1:448] ;if (correctedRotation < -0.125) correctedRotation = -0.125;
VBC3_PUSH_GLOBAL 73 //correctedRotation
VBC5_PUSH_CONST -1107296256 // -
VBC1_LESS_FF
VBC4_FALSE_JUMP LAB2376 //if to false
;if (correctedRotation < -0.125) correctedRotation = -0.125;
VBC2_PUSH_CONST 73 //correctedRotation
VBC5_PUSH_CONST -1107296256 // -
VBC1_POP
LAB2376: //if else
[1:451] ;stepRotation = correctedRotation / (fr2 - 2.0) * 2;
VBC2_PUSH_CONST 81 //stepRotation
VBC3_PUSH_GLOBAL 73 //correctedRotation
VBC3_PUSH_GLOBAL 42 //fr2
VBC5_PUSH_CONST 1073741824 
VBC1_SUB_IF
VBC1_DIV_FF
VBC1_PUSH_2 
VBC1_MUL_FI
VBC1_POP
[1:453] ;dx0Typical = correctedStepLenght / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 71 //dx0Typical
VBC3_PUSH_GLOBAL 45 //correctedStepLenght
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_POP
[1:454] ;dy0Typical = correctedSideLenght / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 72 //dy0Typical
VBC3_PUSH_GLOBAL 47 //correctedSideLenght
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_POP
[1:455] ;dobavka_x_ot_torsa = svIkA5 * 2.0 * sfMathSin(ugol_torsa) / fr2;
VBC2_PUSH_CONST 65 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC5_PUSH_CONST 1073741824 
VBC1_MUL_FF
VBC5_PUSH_CONST 301 | 0x80000000 //import func index sfMathSin
//alloc addon amount for result
VBC3_PUSH_GLOBAL 64 //ugol_torsa
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_DIV_FI
VBC1_POP
[1:457] ;xr = xl = bodyTiltAtWalk;
VBC2_PUSH_CONST 26 //xr
VBC2_PUSH_CONST 33 //xl
VBC3_PUSH_GLOBAL 58 //bodyTiltAtWalk
VBC1_STORE
VBC1_POP
[1:458] ;yl =  solyLandingSkew;
VBC2_PUSH_CONST 34 //yl
VBC3_PUSH_GLOBAL 59 //solyLandingSkew
VBC1_POP
[1:459] ;yr = -solyLandingSkew;
VBC2_PUSH_CONST 27 //yr
VBC3_PUSH_GLOBAL 59 //solyLandingSkew
VBC1_NEG_F
VBC1_POP
[1:460] ;fase_offset = 0.7; 
VBC2_PUSH_CONST 75 //fase_offset
VBC5_PUSH_CONST 1060320051 
VBC1_POP
[1:465] ;
VBC1_RETURN
;walkPhasa1 <void()>
[1:466] ;ztl = ztr = -gaitHeight;
VBC2_PUSH_CONST 32 //ztl
VBC2_PUSH_CONST 25 //ztr
VBC3_PUSH_GLOBAL 43 //gaitHeight
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:467] ;xtl_plan = correctedStepLenght * (0.5 - fr1 / (2.0 * fr1 + fr2)) - dobavka_x_ot_torsa * fr1 * fr2 / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 82 //xtl_plan
VBC3_PUSH_GLOBAL 45 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 41 //fr1
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD_FI
VBC1_DIV_IF
VBC1_SUB_FF
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 65 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_MUL_FI
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:468] ;for( j = 0; j < fr1; j ++ ) {
VBC2_PUSH_CONST 68 //j
VBC1_PUSH_0 
VBC1_POP
LAB2562: //for condition
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_LESS
VBC4_FALSE_JUMP LAB2738 //to for exit
;
[1:470] ;s = (amplitude / 2 + correctedSideLenghtHalf) * sfMathCos(alpha01 * (j / 2 + fase_offset * framestep));
VBC2_PUSH_CONST 74 //s
VBC3_PUSH_GLOBAL 39 //amplitude
VBC1_PUSH_2 
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 48 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 40 //alpha01
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 75 //fase_offset
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_MUL_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_MUL_FF
VBC1_POP
[1:471] ;ytr = s - d10 + correctedSideLenghtHalf - (1 - sfMathCos(tors_angle)) * svIkA5;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 74 //s
VBC3_PUSH_GLOBAL 38 //d10
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 48 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_PUSH_1 
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 66 //tors_angle
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_SUB_IF
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC1_MUL_FF
VBC1_SUB_FF
VBC1_POP
[1:472] ;ytl = s + d10 + correctedSideLenghtHalf + (1 - sfMathCos(tors_angle)) * svIkA5;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 74 //s
VBC3_PUSH_GLOBAL 38 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 48 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_PUSH_1 
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 66 //tors_angle
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_SUB_IF
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC1_MUL_FF
VBC1_ADD_FF
VBC1_POP
[1:473] ;if( stepType == 0 ) continue;
VBC3_PUSH_GLOBAL 55 //stepType
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB2685 //if to false
;if( stepType == 0 ) continue;
VBC4_JUMP LAB2731 //to loop condition
LAB2685: //if else
[1:474] ;dx1 = (xtl_plan - xtl) / (fr1 - j);
VBC2_PUSH_CONST 78 //dx1
VBC3_PUSH_GLOBAL 82 //xtl_plan
VBC3_PUSH_GLOBAL 30 //xtl
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 41 //fr1
VBC3_PUSH_GLOBAL 68 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:475] ;xtr += dx1;
VBC2_PUSH_CONST 23 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 78 //dx1
VBC1_ADD_FF
VBC1_POP
[1:476] ;xtl += dx1;
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 78 //dx1
VBC1_ADD_FF
VBC1_POP
[1:478] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 615  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB2731 //if to false
;return;
VBC1_RETURN
LAB2731: //if else
LAB2731: //for step
VBC2_PUSH_CONST 68 //j
VBC1_INC
VBC4_JUMP LAB2562 //to condition
LAB2738: //for exit
[1:485] ;
VBC1_RETURN
;walkPhasa3 <void()>
[1:486] ;ztl = ztr = -gaitHeight;
VBC2_PUSH_CONST 32 //ztl
VBC2_PUSH_CONST 25 //ztr
VBC3_PUSH_GLOBAL 43 //gaitHeight
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:487] ;xtr_plan = correctedStepLenght * (0.5 - fr1 / (2.0 * fr1 + fr2)) - dobavka_x_ot_torsa * fr1 * fr2 / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 83 //xtr_plan
VBC3_PUSH_GLOBAL 45 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 41 //fr1
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD_FI
VBC1_DIV_IF
VBC1_SUB_FF
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 65 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_MUL_FI
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:488] ;for( j = 0; j < fr1; j ++ ) {
VBC2_PUSH_CONST 68 //j
VBC1_PUSH_0 
VBC1_POP
LAB2809: //for condition
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_LESS
VBC4_FALSE_JUMP LAB2976 //to for exit
;
[1:490] ;s = (amplitude / 2 + correctedSideLenghtHalf) * sfMathCos(alpha01 * ((j -fr2) / 2 + fase_offset * framestep));
VBC2_PUSH_CONST 74 //s
VBC3_PUSH_GLOBAL 39 //amplitude
VBC1_PUSH_2 
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 48 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 40 //alpha01
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_SUB
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 75 //fase_offset
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_MUL_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_MUL_FF
VBC1_POP
[1:491] ;ytr = s - d10 - correctedSideLenghtHalf - (1 - sfMathCos(tors_angle)) * svIkA5;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 74 //s
VBC3_PUSH_GLOBAL 38 //d10
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 48 //correctedSideLenghtHalf
VBC1_SUB_FF
VBC1_PUSH_1 
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 66 //tors_angle
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_SUB_IF
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC1_MUL_FF
VBC1_SUB_FF
VBC1_POP
[1:492] ;ytl = s + d10 + correctedSideLenghtHalf + (1 - sfMathCos(tors_angle)) * svIkA5;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 74 //s
VBC3_PUSH_GLOBAL 38 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 48 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_PUSH_1 
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 66 //tors_angle
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_SUB_IF
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC1_MUL_FF
VBC1_ADD_FF
VBC1_POP
[1:493] ;dx1 = (xtr_plan - xtr) / (fr1 - j);
VBC2_PUSH_CONST 78 //dx1
VBC3_PUSH_GLOBAL 83 //xtr_plan
VBC3_PUSH_GLOBAL 23 //xtr
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 41 //fr1
VBC3_PUSH_GLOBAL 68 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:494] ;xtr += dx1;
VBC2_PUSH_CONST 23 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 78 //dx1
VBC1_ADD_FF
VBC1_POP
[1:495] ;xtl += dx1;
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 78 //dx1
VBC1_ADD_FF
VBC1_POP
[1:497] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 615  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB2969 //if to false
;return;
VBC1_RETURN
LAB2969: //if else
LAB2969: //for step
VBC2_PUSH_CONST 68 //j
VBC1_INC
VBC4_JUMP LAB2809 //to condition
LAB2976: //for exit
[1:504] ;
VBC1_RETURN
;walkPhasa2 <void()>
[1:505] ;dy = correctedSideLenght / fr2;
VBC2_PUSH_CONST 77 //dy
VBC3_PUSH_GLOBAL 47 //correctedSideLenght
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_DIV_FI
VBC1_POP
[1:506] ;xtl_plan = correctedStepLenght * (0.5 - (fr1 + fr2) / (2.0 * fr1 + fr2)) + dobavka_x_ot_torsa * fr1 * fr2 / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 82 //xtl_plan
VBC3_PUSH_GLOBAL 45 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 41 //fr1
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD_FI
VBC1_DIV_IF
VBC1_SUB_FF
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 65 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_MUL_FI
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_ADD_FF
VBC1_POP
[1:507] ;xtr_plan = correctedStepLenght * 0.5 + dx0Typical + dobavka_x_ot_torsa;
VBC2_PUSH_CONST 83 //xtr_plan
VBC3_PUSH_GLOBAL 45 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 71 //dx0Typical
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 65 //dobavka_x_ot_torsa
VBC1_ADD_FF
VBC1_POP
[1:508] ;for( j = 0; j < fr2; j ++ ) {
VBC2_PUSH_CONST 68 //j
VBC1_PUSH_0 
VBC1_POP
LAB3071: //for condition
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_LESS
VBC4_FALSE_JUMP LAB3466 //to for exit
;
[1:509] ;ztr = -gaitHeight + stepHeight;
VBC2_PUSH_CONST 25 //ztr
VBC3_PUSH_GLOBAL 43 //gaitHeight
VBC1_NEG_F
VBC3_PUSH_GLOBAL 44 //stepHeight
VBC1_ADD_FF
VBC1_POP
[1:510] ;dx2 = (xtl_plan - xtl) / (fr2 - j);
VBC2_PUSH_CONST 79 //dx2
VBC3_PUSH_GLOBAL 82 //xtl_plan
VBC3_PUSH_GLOBAL 30 //xtl
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 42 //fr2
VBC3_PUSH_GLOBAL 68 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:511] ;if (stepType == 0)
VBC3_PUSH_GLOBAL 55 //stepType
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB3149 //if to false
;tors_angle = sfFMathASin(dobavka_x_ot_torsa / svIkA5 * (j + 1) / 2);
VBC2_PUSH_CONST 66 //tors_angle
VBC5_PUSH_CONST 352 | 0x80000000 //import func index sfFMathASin
//alloc addon amount for result
VBC3_PUSH_GLOBAL 65 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_MUL_FI
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_POP
VBC4_JUMP LAB3184 //if to exit
LAB3149: //if else
;tors_angle = sfFMathASin(sfMathSin(-ugol_torsa) + dobavka_x_ot_torsa / svIkA5 * (j + 1));
VBC2_PUSH_CONST 66 //tors_angle
VBC5_PUSH_CONST 352 | 0x80000000 //import func index sfFMathASin
//alloc addon amount for result
VBC5_PUSH_CONST 301 | 0x80000000 //import func index sfMathSin
//alloc addon amount for result
VBC3_PUSH_GLOBAL 64 //ugol_torsa
VBC1_NEG_F
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC3_PUSH_GLOBAL 65 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_MUL_FI
VBC1_ADD_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_POP
LAB3184: //if exit
[1:515] ;if( j == 0 ) {
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB3241 //if to false
;
[1:516] ;xtr += dx2 - dobavka_x_ot_torsa;
VBC2_PUSH_CONST 23 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 79 //dx2
VBC3_PUSH_GLOBAL 65 //dobavka_x_ot_torsa
VBC1_SUB_FF
VBC1_ADD_FF
VBC1_POP
[1:517] ;ytr  = s - d10 + dy0Typical - (1 - sfMathCos(tors_angle)) * svIkA5;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 74 //s
VBC3_PUSH_GLOBAL 38 //d10
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 72 //dy0Typical
VBC1_ADD_FF
VBC1_PUSH_1 
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 66 //tors_angle
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_SUB_IF
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC1_MUL_FF
VBC1_SUB_FF
VBC1_POP
VBC4_JUMP LAB3431 //if to exit
LAB3241: //if else
;else if( j == (fr2 - 1) ) {
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_PUSH_1 
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB3308 //if to false
;
[1:520] ;xtr += dx2 - dobavka_x_ot_torsa;
VBC2_PUSH_CONST 23 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 79 //dx2
VBC3_PUSH_GLOBAL 65 //dobavka_x_ot_torsa
VBC1_SUB_FF
VBC1_ADD_FF
VBC1_POP
[1:521] ;ytr  = s - d10 + 2 * dy0Typical - correctedSideLenght - (1 - sfMathCos(tors_angle)) * svIkA5;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 74 //s
VBC3_PUSH_GLOBAL 38 //d10
VBC1_SUB_FF
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 72 //dy0Typical
VBC1_MUL_IF
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 47 //correctedSideLenght
VBC1_SUB_FF
VBC1_PUSH_1 
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 66 //tors_angle
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_SUB_IF
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC1_MUL_FF
VBC1_SUB_FF
VBC1_POP
VBC4_JUMP LAB3431 //if to exit
LAB3308: //if else
;
[1:524] ;if (j == 1)
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB3334 //if to false
;ztr = -gaitHeight + stepHeight / 2.0;
VBC2_PUSH_CONST 25 //ztr
VBC3_PUSH_GLOBAL 43 //gaitHeight
VBC1_NEG_F
VBC3_PUSH_GLOBAL 44 //stepHeight
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC1_ADD_FF
VBC1_POP
LAB3334: //if else
[1:526] ;dx = (xtr_plan - xtr) / (fr2 - j);
VBC2_PUSH_CONST 76 //dx
VBC3_PUSH_GLOBAL 83 //xtr_plan
VBC3_PUSH_GLOBAL 23 //xtr
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 42 //fr2
VBC3_PUSH_GLOBAL 68 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:527] ;xtr += dx;
VBC2_PUSH_CONST 23 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 76 //dx
VBC1_ADD_FF
VBC1_POP
[1:528] ;ytr  = s - 64 + dy0Typical - dy * fr2 / (fr2 - 2) * (j / 2) - (1 - sfMathCos(tors_angle)) * svIkA5;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 74 //s
VBC2_PUSH_CONST 64 
VBC1_SUB_FI
VBC3_PUSH_GLOBAL 72 //dy0Typical
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 77 //dy
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_PUSH_2 
VBC1_SUB
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_2 
VBC1_DIV
VBC1_MUL_FI
VBC1_SUB_FF
VBC1_PUSH_1 
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 66 //tors_angle
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_SUB_IF
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC1_MUL_FF
VBC1_SUB_FF
VBC1_POP
[1:529] ;wr = correctedRotation - j * stepRotation;
VBC2_PUSH_CONST 29 //wr
VBC3_PUSH_GLOBAL 73 //correctedRotation
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 81 //stepRotation
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:530] ;wl = wr;
VBC2_PUSH_CONST 36 //wl
VBC3_PUSH_GLOBAL 29 //wr
VBC1_POP
LAB3431: //if exit
LAB3431: //if exit
[1:532] ;xtl += dx2;
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 79 //dx2
VBC1_ADD_FF
VBC1_POP
[1:533] ;ytl += dy0Typical;
VBC2_PUSH_CONST 31 //ytl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 72 //dy0Typical
VBC1_ADD_FF
VBC1_POP
[1:536] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 615  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB3459 //if to false
;return;
VBC1_RETURN
LAB3459: //if else
LAB3459: //for step
VBC2_PUSH_CONST 68 //j
VBC1_INC
VBC4_JUMP LAB3071 //to condition
LAB3466: //for exit
[1:542] ;
VBC1_RETURN
;walkPhasa4 <void()>
[1:546] ;dy = correctedSideLenght / (fr2 - 2.0);
VBC2_PUSH_CONST 77 //dy
VBC3_PUSH_GLOBAL 47 //correctedSideLenght
VBC3_PUSH_GLOBAL 42 //fr2
VBC5_PUSH_CONST 1073741824 
VBC1_SUB_IF
VBC1_DIV_FF
VBC1_POP
[1:547] ;if( stepType == 1 ) {
VBC3_PUSH_GLOBAL 55 //stepType
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB3504 //if to false
;
[1:548] ;xtr_plan = 0;
VBC2_PUSH_CONST 83 //xtr_plan
VBC1_PUSH_0 
VBC1_POP_CF
[1:549] ;xtl_plan = 0;
VBC2_PUSH_CONST 82 //xtl_plan
VBC1_PUSH_0 
VBC1_POP_CF
VBC4_JUMP LAB3584 //if to exit
LAB3504: //if else
;
[1:552] ;xtr_plan = correctedStepLenght * (0.5 - (fr1 + fr2) / (2.0 * fr1 + fr2)) + dobavka_x_ot_torsa * fr1 * fr2 / (2.0 * fr1 + fr2);
VBC2_PUSH_CONST 83 //xtr_plan
VBC3_PUSH_GLOBAL 45 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 41 //fr1
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD_FI
VBC1_DIV_IF
VBC1_SUB_FF
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 65 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_MUL_FI
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD_FI
VBC1_DIV_FF
VBC1_ADD_FF
VBC1_POP
[1:553] ;xtl_plan = correctedStepLenght * 0.5 + dx0Typical + dobavka_x_ot_torsa;
VBC2_PUSH_CONST 82 //xtl_plan
VBC3_PUSH_GLOBAL 45 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 71 //dx0Typical
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 65 //dobavka_x_ot_torsa
VBC1_ADD_FF
VBC1_POP
LAB3584: //if exit
[1:555] ;for( j = 0; j < fr2; j ++ ) {
VBC2_PUSH_CONST 68 //j
VBC1_PUSH_0 
VBC1_POP
LAB3588: //for condition
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_LESS
VBC4_FALSE_JUMP LAB4039 //to for exit
;
[1:556] ;ztl = -gaitHeight + stepHeight;
VBC2_PUSH_CONST 32 //ztl
VBC3_PUSH_GLOBAL 43 //gaitHeight
VBC1_NEG_F
VBC3_PUSH_GLOBAL 44 //stepHeight
VBC1_ADD_FF
VBC1_POP
[1:558] ;if( stepType == 1 && j == (fr2 - 1) ) {
VBC3_PUSH_GLOBAL 55 //stepType
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB3633
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_PUSH_1 
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB3633
VBC1_PUSH_1
LAB3633:
VBC4_FALSE_JUMP LAB3694 //if to false
;
[1:559] ;ztl = -gaitHeight;
VBC2_PUSH_CONST 32 //ztl
VBC3_PUSH_GLOBAL 43 //gaitHeight
VBC1_NEG_F
VBC1_POP
[1:560] ;ytl = s + d10;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 74 //s
VBC3_PUSH_GLOBAL 38 //d10
VBC1_ADD_FF
VBC1_POP
[1:561] ;tors_angle = sfFMathASin(sfMathSin(ugol_torsa) - dobavka_x_ot_torsa / svIkA5 * (j + 1) / 2);
VBC2_PUSH_CONST 66 //tors_angle
VBC5_PUSH_CONST 352 | 0x80000000 //import func index sfFMathASin
//alloc addon amount for result
VBC5_PUSH_CONST 301 | 0x80000000 //import func index sfMathSin
//alloc addon amount for result
VBC3_PUSH_GLOBAL 64 //ugol_torsa
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC3_PUSH_GLOBAL 65 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_MUL_FI
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_POP
VBC4_JUMP LAB3728 //if to exit
LAB3694: //if else
;else tors_angle = sfFMathASin(sfMathSin(ugol_torsa) - dobavka_x_ot_torsa / svIkA5 * (j + 1));
VBC2_PUSH_CONST 66 //tors_angle
VBC5_PUSH_CONST 352 | 0x80000000 //import func index sfFMathASin
//alloc addon amount for result
VBC5_PUSH_CONST 301 | 0x80000000 //import func index sfMathSin
//alloc addon amount for result
VBC3_PUSH_GLOBAL 64 //ugol_torsa
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC3_PUSH_GLOBAL 65 //dobavka_x_ot_torsa
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_MUL_FI
VBC1_SUB_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_POP
LAB3728: //if exit
[1:564] ;dx4 = (xtr_plan - xtr) / (fr2 - j);
VBC2_PUSH_CONST 80 //dx4
VBC3_PUSH_GLOBAL 83 //xtr_plan
VBC3_PUSH_GLOBAL 23 //xtr
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 42 //fr2
VBC3_PUSH_GLOBAL 68 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:565] ;if( j == 0 ) {
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB3820 //if to false
;
[1:566] ;xtl += dx4 - dobavka_x_ot_torsa;
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 80 //dx4
VBC3_PUSH_GLOBAL 65 //dobavka_x_ot_torsa
VBC1_SUB_FF
VBC1_ADD_FF
VBC1_POP
[1:567] ;ytl = s + d10 + dy0Typical + (1 - sfMathCos(tors_angle)) * svIkA5;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 74 //s
VBC3_PUSH_GLOBAL 38 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 72 //dy0Typical
VBC1_ADD_FF
VBC1_PUSH_1 
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 66 //tors_angle
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_SUB_IF
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC1_MUL_FF
VBC1_ADD_FF
VBC1_POP
[1:568] ;ztl = -gaitHeight + stepHeight / 2.0;
VBC2_PUSH_CONST 32 //ztl
VBC3_PUSH_GLOBAL 43 //gaitHeight
VBC1_NEG_F
VBC3_PUSH_GLOBAL 44 //stepHeight
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC1_ADD_FF
VBC1_POP
VBC4_JUMP LAB4004 //if to exit
LAB3820: //if else
;else if( j == (fr2 - 1) ) {
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_PUSH_1 
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB3891 //if to false
;
[1:571] ;xtl += dx4 - dobavka_x_ot_torsa;
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 80 //dx4
VBC3_PUSH_GLOBAL 65 //dobavka_x_ot_torsa
VBC1_SUB_FF
VBC1_ADD_FF
VBC1_POP
[1:572] ;ytl  = s + d10 + dy0Typical * 2.0 - correctedSideLenght + (1 - sfMathCos(tors_angle)) * svIkA5;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 74 //s
VBC3_PUSH_GLOBAL 38 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 72 //dy0Typical
VBC5_PUSH_CONST 1073741824 
VBC1_MUL_FF
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 47 //correctedSideLenght
VBC1_SUB_FF
VBC1_PUSH_1 
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 66 //tors_angle
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_SUB_IF
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC1_MUL_FF
VBC1_ADD_FF
VBC1_POP
VBC4_JUMP LAB4004 //if to exit
LAB3891: //if else
;
[1:575] ;if (j == 1)
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB3917 //if to false
;ztl = -gaitHeight + stepHeight / 2.0;
VBC2_PUSH_CONST 32 //ztl
VBC3_PUSH_GLOBAL 43 //gaitHeight
VBC1_NEG_F
VBC3_PUSH_GLOBAL 44 //stepHeight
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC1_ADD_FF
VBC1_POP
LAB3917: //if else
[1:577] ;dx = (xtl_plan - xtl) / (fr2 - j);
VBC2_PUSH_CONST 76 //dx
VBC3_PUSH_GLOBAL 82 //xtl_plan
VBC3_PUSH_GLOBAL 30 //xtl
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 42 //fr2
VBC3_PUSH_GLOBAL 68 //j
VBC1_SUB
VBC1_DIV_FI
VBC1_POP
[1:578] ;xtl += dx;
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 76 //dx
VBC1_ADD_FF
VBC1_POP
[1:579] ;ytl  = s + 64 + dy0Typical - dy * j / 2 + (1 - sfMathCos(tors_angle)) * svIkA5;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 74 //s
VBC2_PUSH_CONST 64 
VBC1_ADD_FI
VBC3_PUSH_GLOBAL 72 //dy0Typical
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 77 //dy
VBC3_PUSH_GLOBAL 68 //j
VBC1_MUL_FI
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_PUSH_1 
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 66 //tors_angle
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_SUB_IF
VBC3_PUSH_GLOBAL 1215 //svIkA5
VBC1_MUL_FF
VBC1_ADD_FF
VBC1_POP
[1:580] ;wr = j * stepRotation - correctedRotation;
VBC2_PUSH_CONST 29 //wr
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 81 //stepRotation
VBC1_MUL_IF
VBC3_PUSH_GLOBAL 73 //correctedRotation
VBC1_SUB_FF
VBC1_POP
[1:581] ;wl = wr;
VBC2_PUSH_CONST 36 //wl
VBC3_PUSH_GLOBAL 29 //wr
VBC1_POP
LAB4004: //if exit
LAB4004: //if exit
[1:583] ;xtr += dx4;
VBC2_PUSH_CONST 23 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 80 //dx4
VBC1_ADD_FF
VBC1_POP
[1:584] ;ytr += dy0Typical;
VBC2_PUSH_CONST 24 //ytr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 72 //dy0Typical
VBC1_ADD_FF
VBC1_POP
[1:587] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 615  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB4032 //if to false
;return;
VBC1_RETURN
LAB4032: //if else
LAB4032: //for step
VBC2_PUSH_CONST 68 //j
VBC1_INC
VBC4_JUMP LAB3588 //to condition
LAB4039: //for exit
[1:597] ;
VBC1_RETURN
;walkCycle <void(,int)>
VBC2_STACK -4//local vars 4
[1:604] ;
[1:604] ;float xrOld = xr;
VBC2_PUSH_B_OFFSET -1 //xrOld
VBC3_PUSH_GLOBAL 26 //xr
VBC1_POP
[1:605] ;
[1:605] ;float yrOld = yr;
VBC2_PUSH_B_OFFSET -2 //yrOld
VBC3_PUSH_GLOBAL 27 //yr
VBC1_POP
[1:606] ;
[1:606] ;float xlOld = xl;
VBC2_PUSH_B_OFFSET -3 //xlOld
VBC3_PUSH_GLOBAL 33 //xl
VBC1_POP
[1:607] ;
[1:607] ;float ylOld = yl;
VBC2_PUSH_B_OFFSET -4 //ylOld
VBC3_PUSH_GLOBAL 34 //yl
VBC1_POP
[1:621] ;walkInit();
VBC3_PUSH_CONST 2259  //func address walkInit
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:622] ;walkPhasa1();
VBC3_PUSH_CONST 2492  //func address walkPhasa1
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:623] ;walkPhasa2();
VBC3_PUSH_CONST 2977  //func address walkPhasa2
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:624] ;if (half == 0){
VBC2_PUSH_LOCAL 2 //half
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB4099 //if to false
;
[1:625] ;walkPhasa3();
VBC3_PUSH_CONST 2739  //func address walkPhasa3
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:626] ;walkPhasa4();
VBC3_PUSH_CONST 3467  //func address walkPhasa4
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB4099: //if else
[1:631] ;xr = xrOld;
VBC2_PUSH_CONST 26 //xr
VBC2_PUSH_LOCAL -1 //xrOld
VBC1_POP
[1:632] ;yr = yrOld;
VBC2_PUSH_CONST 27 //yr
VBC2_PUSH_LOCAL -2 //yrOld
VBC1_POP
[1:633] ;xl = xlOld;
VBC2_PUSH_CONST 33 //xl
VBC2_PUSH_LOCAL -3 //xlOld
VBC1_POP
[1:634] ;yl = ylOld;
VBC2_PUSH_CONST 34 //yl
VBC2_PUSH_LOCAL -4 //ylOld
VBC1_POP
[1:637] ;
VBC1_RETURN
;stabilizeRotationByIMU <void()>
[1:639] ;sfQuaternionToEulerImu();
VBC5_PUSH_CONST 303 | 0x80000000 //import func index sfQuaternionToEulerImu
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:640] ;rotation = -(svEulerYaw - forwardDirection);
VBC2_PUSH_CONST 5 //rotation
VBC3_PUSH_GLOBAL 1025 //svEulerYaw
VBC3_PUSH_GLOBAL 85 //forwardDirection
VBC1_SUB_FF
VBC1_NEG_F
VBC1_POP
[1:641] ;if( rotation > 3.141592654 ) rotation -= 2 * 3.141592654;
VBC3_PUSH_GLOBAL 5 //rotation
VBC5_PUSH_CONST 1078530011 
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB4162 //if to false
;if( rotation > 3.141592654 ) rotation -= 2 * 3.141592654;
VBC2_PUSH_CONST 5 //rotation
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1086918619 
VBC1_SUB_FF
VBC1_POP
LAB4162: //if else
[1:642] ;if( rotation < -3.141592654 ) rotation += 2 * 3.141592654;
VBC3_PUSH_GLOBAL 5 //rotation
VBC5_PUSH_CONST -1068953637 // -
VBC1_LESS_FF
VBC4_FALSE_JUMP LAB4186 //if to false
;if( rotation < -3.141592654 ) rotation += 2 * 3.141592654;
VBC2_PUSH_CONST 5 //rotation
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1086918619 
VBC1_ADD_FF
VBC1_POP
LAB4186: //if else
[1:643] ;if( rotation > 0.7 ) rotation = 0.7;
VBC3_PUSH_GLOBAL 5 //rotation
VBC5_PUSH_CONST 1060320051 
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB4207 //if to false
;if( rotation > 0.7 ) rotation = 0.7;
VBC2_PUSH_CONST 5 //rotation
VBC5_PUSH_CONST 1060320051 
VBC1_POP
LAB4207: //if else
[1:644] ;if( rotation < -0.7 ) rotation = -0.7;
VBC3_PUSH_GLOBAL 5 //rotation
VBC5_PUSH_CONST -1087163597 // -
VBC1_LESS_FF
VBC4_FALSE_JUMP LAB4228 //if to false
;if( rotation < -0.7 ) rotation = -0.7;
VBC2_PUSH_CONST 5 //rotation
VBC5_PUSH_CONST -1087163597 // -
VBC1_POP
LAB4228: //if else
[1:652] ;
VBC1_RETURN
;mixing <void()>
[1:657] ;leftRightFactor = 100;
VBC2_PUSH_CONST 86 //leftRightFactor
VBC2_PUSH_CONST 100 
VBC1_POP
[1:658] ;frontBackFactor = 180;
VBC2_PUSH_CONST 87 //frontBackFactor
VBC3_PUSH_CONST 180 
VBC1_POP
[1:660] ;while(1) {
LAB4240: //while condition
;
[1:662] ;leftFootSideAddonMix = -svImuGyroZ * leftRightFactor >> 10;
VBC3_PUSH_CONST 1117 //leftFootSideAddonMix
VBC3_PUSH_GLOBAL 1008 //svImuGyroZ
VBC1_NEG
VBC3_PUSH_GLOBAL 86 //leftRightFactor
VBC1_MUL
VBC2_PUSH_CONST 10 
VBC1_RSHIFT
VBC1_POP
[1:663] ;rightFootSideAddonMix = svImuGyroZ * leftRightFactor >> 10;
VBC3_PUSH_CONST 1113 //rightFootSideAddonMix
VBC3_PUSH_GLOBAL 1008 //svImuGyroZ
VBC3_PUSH_GLOBAL 86 //leftRightFactor
VBC1_MUL
VBC2_PUSH_CONST 10 
VBC1_RSHIFT
VBC1_POP
[1:666] ;rightFootFrontAddonMix = leftFootFrontAddonMix = -svImuGyroX * frontBackFactor >> 10;
VBC3_PUSH_CONST 1105 //rightFootFrontAddonMix
VBC3_PUSH_CONST 1109 //leftFootFrontAddonMix
VBC3_PUSH_GLOBAL 1006 //svImuGyroX
VBC1_NEG
VBC3_PUSH_GLOBAL 87 //frontBackFactor
VBC1_MUL
VBC2_PUSH_CONST 10 
VBC1_RSHIFT
VBC1_STORE
VBC1_POP
[1:669] ;sfWaitNextFrame();
VBC1_WAIT
VBC4_JUMP LAB4240 //while forever loop
LAB4293: //while exit
[1:679] ;
VBC1_RETURN
;runTest <void()>
VBC1_STACK_DN1//local vars 1
[1:681] ;walkInitialPoseFine();
VBC3_PUSH_CONST 2033  //func address walkInitialPoseFine
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:683] ;stepType = 0;
VBC2_PUSH_CONST 55 //stepType
VBC1_PUSH_0 
VBC1_POP
[1:684] ;stepLength = stepLengthOrder/ 3.0;
VBC2_PUSH_CONST 3 //stepLength
VBC3_PUSH_GLOBAL 6 //stepLengthOrder
VBC5_PUSH_CONST 1077936128 
VBC1_DIV_FF
VBC1_POP
[1:685] ;walkCycle(0);
VBC3_PUSH_CONST 4040  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:688] ;stepType = 2;
VBC2_PUSH_CONST 55 //stepType
VBC1_PUSH_2 
VBC1_POP
[1:689] ;stepLength = stepLengthOrder * 2.0 / 3.0;
VBC2_PUSH_CONST 3 //stepLength
VBC3_PUSH_GLOBAL 6 //stepLengthOrder
VBC5_PUSH_CONST 1073741824 
VBC1_MUL_FF
VBC5_PUSH_CONST 1077936128 
VBC1_DIV_FF
VBC1_POP
[1:690] ;walkCycle(0);
VBC3_PUSH_CONST 4040  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:693] ;stepLength = stepLengthOrder;
VBC2_PUSH_CONST 3 //stepLength
VBC3_PUSH_GLOBAL 6 //stepLengthOrder
VBC1_POP
[1:694] ;
[1:695] ;for( i = 0; i < 19 ; i++ ){
VBC2_PUSH_B_OFFSET -1 //i
VBC1_PUSH_0 
VBC1_POP
LAB4360: //for condition
VBC2_PUSH_LOCAL -1 //i
VBC2_PUSH_CONST 19 
VBC1_LESS
VBC4_FALSE_JUMP LAB4387 //to for exit
;
[1:696] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 4120  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:697] ;walkCycle(0);
VBC3_PUSH_CONST 4040  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB4380: //for step
VBC2_PUSH_B_OFFSET -1 //i
VBC1_INC
VBC4_JUMP LAB4360 //to condition
LAB4387: //for exit
[1:700] ;stepType = 1;
VBC2_PUSH_CONST 55 //stepType
VBC1_PUSH_1 
VBC1_POP
[1:701] ;walkCycle(0);
VBC3_PUSH_CONST 4040  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:704] ;walkFinalPoseFine();
VBC3_PUSH_CONST 2199  //func address walkFinalPoseFine
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:711] ;
VBC1_RETURN
;joystickToStepLength <int()>
[1:713] ;return -svRemoteRightJoystickY * 50 / 100;
VBC3_PUSH_GLOBAL 1197 //svRemoteRightJoystickY
VBC1_NEG
VBC2_PUSH_CONST 50 
VBC1_MUL
VBC2_PUSH_CONST 100 
VBC1_DIV
VBC2_POP_RESULT 2
VBC1_RETURN
;joystickToSideLength <int()>
[1:719] ;side_motion = - svRemoteRightJoystickX * 20.0 / 100.0;
VBC2_PUSH_CONST 15 //side_motion
VBC3_PUSH_GLOBAL 1196 //svRemoteRightJoystickX
VBC1_NEG
VBC5_PUSH_CONST 1101004800 
VBC1_MUL_IF
VBC5_PUSH_CONST 1120403456 
VBC1_DIV_FF
VBC1_POP
[1:720] ;motion_to_right = (side_motion <= 0 ? 1:0);
VBC2_PUSH_CONST 14 //motion_to_right
VBC3_PUSH_GLOBAL 15 //side_motion
VBC1_PUSH_0 
VBC1_LESS_EQU_FI
VBC4_FALSE_JUMP LAB4451
VBC1_PUSH_1 
VBC4_JUMP LAB4452
LAB4451:
VBC1_PUSH_0 
LAB4452:
VBC1_POP
[1:721] ;return sfAbs (side_motion);
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 15 //side_motion
VBC1_F_TO_I
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_POP_RESULT 2
VBC1_RETURN
;joystickToRotation <int()>
[1:727] ;return -svRemoteLeftJoystickX * 260 / 100;
VBC3_PUSH_GLOBAL 1193 //svRemoteLeftJoystickX
VBC1_NEG
VBC3_PUSH_CONST 260 
VBC1_MUL
VBC2_PUSH_CONST 100 
VBC1_DIV
VBC2_POP_RESULT 2
VBC1_RETURN
;walkLoop <void()>
VBC1_STACK_DN1//local vars 1
[1:732] ;
[1:734] ;stepType = 0;
VBC2_PUSH_CONST 55 //stepType
VBC1_PUSH_0 
VBC1_POP
[1:735] ;stepLength = joystickToStepLength() / 3.0;
VBC2_PUSH_CONST 3 //stepLength
VBC3_PUSH_CONST 4403  //func address joystickToStepLength
VBC1_CALL0
//remove call address and params
VBC5_PUSH_CONST 1077936128 
VBC1_DIV_IF
VBC1_POP
[1:736] ;sideLength = joystickToSideLength();
VBC2_PUSH_CONST 4 //sideLength
VBC3_PUSH_CONST 4416  //func address joystickToSideLength
VBC1_CALL0
//remove call address and params
VBC1_POP_CF
[1:737] ;selfFirstLegIsRightLeg = motion_to_right;
VBC2_PUSH_CONST 13 //selfFirstLegIsRightLeg
VBC3_PUSH_GLOBAL 14 //motion_to_right
VBC1_POP
[1:738] ;forwardDirection += joystickToRotation() / 1000.0;
VBC2_PUSH_CONST 85 //forwardDirection
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_CONST 4467  //func address joystickToRotation
VBC1_CALL0
//remove call address and params
VBC5_PUSH_CONST 1148846080 
VBC1_DIV_IF
VBC1_ADD_FF
VBC1_POP
[1:739] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 4120  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:740] ;walkCycle(0);
VBC3_PUSH_CONST 4040  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:741] ;stepNumber -= 1;
VBC2_PUSH_CONST 61 //stepNumber
VBC1_PUSH_TOS
VBC1_LOAD
VBC1_PUSH_1 
VBC1_SUB
VBC1_POP
[1:744] ;if( sfAbs( svRemoteRightJoystickX ) < 10 
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 1196 //svRemoteRightJoystickX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB4637
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 1197 //svRemoteRightJoystickY
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB4637
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 1193 //svRemoteLeftJoystickX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB4637
VBC3_PUSH_GLOBAL 1194 //svRemoteLeftJoystickY
VBC1_PUSH_0 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB4622
VBC3_PUSH_GLOBAL 1191 //svRemoteButton
VBC3_PUSH_CONST 2048 
VBC1_DIV
VBC1_PUSH_2 
VBC1_MOD
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB4622
VBC1_PUSH_1
LAB4622:
VBC1_LNOT
VBC4_FALSE_JUMP_KEEP LAB4637
VBC3_PUSH_GLOBAL 61 //stepNumber
VBC1_PUSH_1 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB4637
VBC1_PUSH_1
LAB4637:
VBC4_FALSE_JUMP LAB4642 //if to false
;return;
VBC1_RETURN
LAB4642: //if else
[1:754] ;stepType = 2;
VBC2_PUSH_CONST 55 //stepType
VBC1_PUSH_2 
VBC1_POP
[1:755] ;stepLength = joystickToStepLength() * 2.0 / 3.0;
VBC2_PUSH_CONST 3 //stepLength
VBC3_PUSH_CONST 4403  //func address joystickToStepLength
VBC1_CALL0
//remove call address and params
VBC5_PUSH_CONST 1073741824 
VBC1_MUL_IF
VBC5_PUSH_CONST 1077936128 
VBC1_DIV_FF
VBC1_POP
[1:756] ;sideLength = joystickToSideLength();
VBC2_PUSH_CONST 4 //sideLength
VBC3_PUSH_CONST 4416  //func address joystickToSideLength
VBC1_CALL0
//remove call address and params
VBC1_POP_CF
[1:757] ;selfFirstLegIsRightLeg = motion_to_right;
VBC2_PUSH_CONST 13 //selfFirstLegIsRightLeg
VBC3_PUSH_GLOBAL 14 //motion_to_right
VBC1_POP
[1:758] ;forwardDirection += joystickToRotation() / 1000.0;
VBC2_PUSH_CONST 85 //forwardDirection
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_CONST 4467  //func address joystickToRotation
VBC1_CALL0
//remove call address and params
VBC5_PUSH_CONST 1148846080 
VBC1_DIV_IF
VBC1_ADD_FF
VBC1_POP
[1:759] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 4120  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:760] ;walkCycle(0);
VBC3_PUSH_CONST 4040  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:761] ;stepNumber -= 1;
VBC2_PUSH_CONST 61 //stepNumber
VBC1_PUSH_TOS
VBC1_LOAD
VBC1_PUSH_1 
VBC1_SUB
VBC1_POP
[1:764] ;if( sfAbs( svRemoteRightJoystickX ) < 10 
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 1196 //svRemoteRightJoystickX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB4803
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 1197 //svRemoteRightJoystickY
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB4803
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 1193 //svRemoteLeftJoystickX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB4803
VBC3_PUSH_GLOBAL 1194 //svRemoteLeftJoystickY
VBC1_PUSH_0 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB4788
VBC3_PUSH_GLOBAL 1191 //svRemoteButton
VBC3_PUSH_CONST 2048 
VBC1_DIV
VBC1_PUSH_2 
VBC1_MOD
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB4788
VBC1_PUSH_1
LAB4788:
VBC1_LNOT
VBC4_FALSE_JUMP_KEEP LAB4803
VBC3_PUSH_GLOBAL 61 //stepNumber
VBC1_PUSH_1 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB4803
VBC1_PUSH_1
LAB4803:
VBC4_FALSE_JUMP LAB4808 //if to false
;return;
VBC1_RETURN
LAB4808: //if else
[1:773] ;while( sfAbs( svRemoteRightJoystickX ) >= 10 || sfAbs( svRemoteRightJoystickY ) >= 10 || sfAbs( svRemoteLeftJoystickX ) >= 10) {
LAB4808: //while condition
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 1196 //svRemoteRightJoystickX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_GREAT_EQU
VBC4_TRUE_JUMP_KEEP LAB4860
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 1197 //svRemoteRightJoystickY
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_GREAT_EQU
VBC4_TRUE_JUMP_KEEP LAB4860
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 1193 //svRemoteLeftJoystickX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_GREAT_EQU
VBC4_TRUE_JUMP_KEEP LAB4860
VBC1_PUSH_0
LAB4860:
VBC4_FALSE_JUMP LAB5050 //while to exit
;
[1:775] ;stepLength = joystickToStepLength();
VBC2_PUSH_CONST 3 //stepLength
VBC3_PUSH_CONST 4403  //func address joystickToStepLength
VBC1_CALL0
//remove call address and params
VBC1_POP_CF
[1:776] ;sideLength = joystickToSideLength();
VBC2_PUSH_CONST 4 //sideLength
VBC3_PUSH_CONST 4416  //func address joystickToSideLength
VBC1_CALL0
//remove call address and params
VBC1_POP_CF
[1:777] ;forwardDirection += joystickToRotation() / 1000.0;
VBC2_PUSH_CONST 85 //forwardDirection
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_CONST 4467  //func address joystickToRotation
VBC1_CALL0
//remove call address and params
VBC5_PUSH_CONST 1148846080 
VBC1_DIV_IF
VBC1_ADD_FF
VBC1_POP
[1:778] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 4120  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:779] ;if (selfFirstLegIsRightLeg != motion_to_right) walkCycle(1); 
VBC3_PUSH_GLOBAL 13 //selfFirstLegIsRightLeg
VBC3_PUSH_GLOBAL 14 //motion_to_right
VBC1_NOT_EQU
VBC4_FALSE_JUMP LAB4916 //if to false
;if (selfFirstLegIsRightLeg != motion_to_right) walkCycle(1); 
VBC3_PUSH_CONST 4040  //func address walkCycle
VBC1_PUSH_1 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB4916: //if else
[1:780] ;selfFirstLegIsRightLeg = motion_to_right;
VBC2_PUSH_CONST 13 //selfFirstLegIsRightLeg
VBC3_PUSH_GLOBAL 14 //motion_to_right
VBC1_POP
[1:781] ;walkCycle(0);
VBC3_PUSH_CONST 4040  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:782] ;stepNumber -= 1;
VBC2_PUSH_CONST 61 //stepNumber
VBC1_PUSH_TOS
VBC1_LOAD
VBC1_PUSH_1 
VBC1_SUB
VBC1_POP
[1:783] ;if ((svRemoteLeftJoystickY < 0 && ((svRemoteButton / 2048) % 2 == 1)) || stepNumber > 0){
VBC3_PUSH_GLOBAL 1194 //svRemoteLeftJoystickY
VBC1_PUSH_0 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB4960
VBC3_PUSH_GLOBAL 1191 //svRemoteButton
VBC3_PUSH_CONST 2048 
VBC1_DIV
VBC1_PUSH_2 
VBC1_MOD
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB4960
VBC1_PUSH_1
LAB4960:
VBC4_TRUE_JUMP_KEEP LAB4974
VBC3_PUSH_GLOBAL 61 //stepNumber
VBC1_PUSH_0 
VBC1_GREAT
VBC4_TRUE_JUMP_KEEP LAB4974
VBC1_PUSH_0
LAB4974:
VBC4_FALSE_JUMP LAB5046 //if to false
;
[1:784] ;if (svRemoteLeftJoystickY < 0 && ((svRemoteButton / 2048) % 2 == 1)) stepNumber = -svRemoteLeftJoystickY;
VBC3_PUSH_GLOBAL 1194 //svRemoteLeftJoystickY
VBC1_PUSH_0 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB5003
VBC3_PUSH_GLOBAL 1191 //svRemoteButton
VBC3_PUSH_CONST 2048 
VBC1_DIV
VBC1_PUSH_2 
VBC1_MOD
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB5003
VBC1_PUSH_1
LAB5003:
VBC4_FALSE_JUMP LAB5014 //if to false
;if (svRemoteLeftJoystickY < 0 && ((svRemoteButton / 2048) % 2 == 1)) stepNumber = -svRemoteLeftJoystickY;
VBC2_PUSH_CONST 61 //stepNumber
VBC3_PUSH_GLOBAL 1194 //svRemoteLeftJoystickY
VBC1_NEG
VBC1_POP
LAB5014: //if else
[1:785] ;for( i = 0; i < stepNumber ; i++ ){
VBC2_PUSH_B_OFFSET -1 //i
VBC1_PUSH_0 
VBC1_POP
LAB5018: //for condition
VBC2_PUSH_LOCAL -1 //i
VBC3_PUSH_GLOBAL 61 //stepNumber
VBC1_LESS
VBC4_FALSE_JUMP LAB5046 //to for exit
;
[1:786] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 4120  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:787] ;walkCycle(0);
VBC3_PUSH_CONST 4040  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB5039: //for step
VBC2_PUSH_B_OFFSET -1 //i
VBC1_INC
VBC4_JUMP LAB5018 //to condition
LAB5046: //for exit
LAB5046: //if else
VBC4_JUMP LAB4808 //while forever loop
LAB5050: //while exit
[1:793] ;
VBC1_RETURN
;kick <void(,int,int)>
VBC2_STACK -11//local vars 11
[1:794] ;
[1:794] ;float gaitHeightKick = 200;
VBC2_PUSH_B_OFFSET -1 //gaitHeightKick
VBC3_PUSH_CONST 200 
VBC1_POP_CF
[1:795] ;
[1:795] ;float stepHeightKick = 40;
VBC2_PUSH_B_OFFSET -2 //stepHeightKick
VBC2_PUSH_CONST 40 
VBC1_POP_CF
[1:796] ;
[1:796] ;float stepLengthKick = 50;
VBC2_PUSH_B_OFFSET -3 //stepLengthKick
VBC2_PUSH_CONST 50 
VBC1_POP_CF
[1:797] ;
[1:797] ;float kick_size = 100;
VBC2_PUSH_B_OFFSET -4 //kick_size
VBC2_PUSH_CONST 100 
VBC1_POP_CF
[1:798] ;
[1:798] ;float bodyTiltAtKick = 0.04;
VBC2_PUSH_B_OFFSET -5 //bodyTiltAtKick
VBC5_PUSH_CONST 1025758986 
VBC1_POP
[1:799] ;
[1:799] ;int pose_taking_cycles = 20;
VBC2_PUSH_B_OFFSET -6 //pose_taking_cycles
VBC2_PUSH_CONST 20 
VBC1_POP
[1:801] ;
[1:801] ;float xrOld = xr;
VBC2_PUSH_B_OFFSET -7 //xrOld
VBC3_PUSH_GLOBAL 26 //xr
VBC1_POP
[1:802] ;
[1:802] ;float yrOld = yr;
VBC2_PUSH_B_OFFSET -8 //yrOld
VBC3_PUSH_GLOBAL 27 //yr
VBC1_POP
[1:803] ;
[1:803] ;float xlOld = xl;
VBC2_PUSH_B_OFFSET -9 //xlOld
VBC3_PUSH_GLOBAL 33 //xl
VBC1_POP
[1:804] ;
[1:804] ;float ylOld = yl;
VBC2_PUSH_B_OFFSET -10 //ylOld
VBC3_PUSH_GLOBAL 34 //yl
VBC1_POP
[1:805] ;if (small == 1) kick_size = -10;
VBC2_PUSH_LOCAL 2 //small
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB5124 //if to false
;if (small == 1) kick_size = -10;
VBC2_PUSH_B_OFFSET -4 //kick_size
VBC2_PUSH_CONST -10 // -
VBC1_POP_CF
LAB5124: //if else
[1:806] ;selfFirstLegIsRightLeg = kickByRight;
VBC2_PUSH_CONST 13 //selfFirstLegIsRightLeg
VBC2_PUSH_LOCAL 3 //kickByRight
VBC1_POP
[1:807] ;dx0Typical = stepLengthKick / (2 * fr1 + fr2 + 2.0 * framestep) * framestep;
VBC2_PUSH_CONST 71 //dx0Typical
VBC2_PUSH_LOCAL -3 //stepLengthKick
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC1_POP
[1:808] ;xr = xl = bodyTiltAtKick;
VBC2_PUSH_CONST 26 //xr
VBC2_PUSH_CONST 33 //xl
VBC2_PUSH_LOCAL -5 //bodyTiltAtKick
VBC1_STORE
VBC1_POP
[1:809] ;yl =  solyLandingSkew;
VBC2_PUSH_CONST 34 //yl
VBC3_PUSH_GLOBAL 59 //solyLandingSkew
VBC1_POP
[1:810] ;yr = -solyLandingSkew;
VBC2_PUSH_CONST 27 //yr
VBC3_PUSH_GLOBAL 59 //solyLandingSkew
VBC1_NEG_F
VBC1_POP
[1:811] ;s = (amplitude / 2 ) * sfMathCos(alpha01 * (fr1 / 2 + 0.5 * framestep));
VBC2_PUSH_CONST 74 //s
VBC3_PUSH_GLOBAL 39 //amplitude
VBC1_PUSH_2 
VBC1_DIV_FI
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 40 //alpha01
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_PUSH_2 
VBC1_DIV
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_MUL_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_MUL_FF
VBC1_POP
[1:812] ;xtr = xtl = 0;
VBC2_PUSH_CONST 23 //xtr
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:815] ;ztr = ztl = -gaitHeightKick;
VBC2_PUSH_CONST 25 //ztr
VBC2_PUSH_CONST 32 //ztl
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:819] ;for( j = 0; j < pose_taking_cycles; j += 1 ){
VBC2_PUSH_CONST 68 //j
VBC1_PUSH_0 
VBC1_POP
LAB5234: //for condition
VBC3_PUSH_GLOBAL 68 //j
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_LESS
VBC4_FALSE_JUMP LAB5320 //to for exit
;
[1:820] ;ztr = ztr0 + j * (-ztr0 - gaitHeightKick) / pose_taking_cycles;
VBC2_PUSH_CONST 25 //ztr
VBC3_PUSH_GLOBAL 49 //ztr0
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 49 //ztr0
VBC1_NEG_F
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_SUB_FF
VBC1_MUL_IF
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_DIV_FI
VBC1_ADD_FF
VBC1_POP
[1:821] ;ztl = ztr;
VBC2_PUSH_CONST 32 //ztl
VBC3_PUSH_GLOBAL 25 //ztr
VBC1_POP
[1:822] ;ytr = -d10 - j * amplitude * 3 /pose_taking_cycles;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 38 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 39 //amplitude
VBC1_MUL_IF
VBC2_PUSH_CONST 3 
VBC1_MUL_FI
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
[1:823] ;ytl =  ytr + 2 * d10;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 24 //ytr
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 38 //d10
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:824] ;computeAlphaForWalk();
VBC3_PUSH_CONST 615  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB5309: //for step
VBC2_PUSH_CONST 68 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB5234 //to condition
LAB5320: //for exit
[1:827] ;ztr = ztl = -gaitHeightKick;
VBC2_PUSH_CONST 25 //ztr
VBC2_PUSH_CONST 32 //ztl
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:828] ;ytr = s - d10;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 74 //s
VBC3_PUSH_GLOBAL 38 //d10
VBC1_SUB_FF
VBC1_POP
[1:829] ;ytl = s + d10;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 74 //s
VBC3_PUSH_GLOBAL 38 //d10
VBC1_ADD_FF
VBC1_POP
[1:831] ;for( j = fr1; j < fr1 + fr2; j += framestep ){
VBC2_PUSH_CONST 68 //j
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_POP
LAB5355: //for condition
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 41 //fr1
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC1_LESS
VBC4_FALSE_JUMP LAB5583 //to for exit
;
[1:832] ;ztr = -gaitHeightKick + stepHeightKick;
VBC2_PUSH_CONST 25 //ztr
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC2_PUSH_LOCAL -2 //stepHeightKick
VBC1_ADD_FF
VBC1_POP
[1:833] ;dx = stepLengthKick / fr2;
VBC2_PUSH_CONST 76 //dx
VBC2_PUSH_LOCAL -3 //stepLengthKick
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_DIV_FI
VBC1_POP
[1:834] ;dx0 = stepLengthKick/( 2 * fr1 + fr2 + 4 ) * framestep;
VBC2_PUSH_CONST 84 //dx0
VBC2_PUSH_LOCAL -3 //stepLengthKick
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC2_PUSH_CONST 4 
VBC1_ADD
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC1_POP
[1:835] ;if (j == fr1 || j == fr1 + fr2 - 2){
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB5439
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 41 //fr1
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC1_PUSH_2 
VBC1_SUB
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB5439
VBC1_PUSH_0
LAB5439:
VBC4_FALSE_JUMP LAB5465 //if to false
;
[1:836] ;xtr -= dx0;
VBC2_PUSH_CONST 23 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 84 //dx0
VBC1_SUB_FF
VBC1_POP
[1:837] ;ytr = s - 64;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 74 //s
VBC2_PUSH_CONST 64 
VBC1_SUB_FI
VBC1_POP
VBC4_JUMP LAB5488 //if to exit
LAB5465: //if else
;xtr += dx * fr2 / (fr2 - 2 * framestep);
VBC2_PUSH_CONST 23 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 76 //dx
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL
VBC1_SUB
VBC1_DIV_FI
VBC1_ADD_FF
VBC1_POP
LAB5488: //if exit
[1:841] ;if (j == fr1 + fr2 - 10)
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 41 //fr1
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC2_PUSH_CONST 10 
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB5514 //if to false
;xtr += kick_size;
VBC2_PUSH_CONST 23 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC2_PUSH_LOCAL -4 //kick_size
VBC1_ADD_FF
VBC1_POP
LAB5514: //if else
[1:843] ;xtl -= kick_size;
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC2_PUSH_LOCAL -4 //kick_size
VBC1_SUB_FF
VBC1_POP
[1:844] ;if (j == fr1 + fr2 - 4)
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 41 //fr1
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC2_PUSH_CONST 4 
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB5548 //if to false
;xtr -= kick_size;
VBC2_PUSH_CONST 23 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC2_PUSH_LOCAL -4 //kick_size
VBC1_SUB_FF
VBC1_POP
LAB5548: //if else
[1:846] ;xtl += kick_size;
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC2_PUSH_LOCAL -4 //kick_size
VBC1_ADD_FF
VBC1_POP
[1:847] ;xtl -= dx0;
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 84 //dx0
VBC1_SUB_FF
VBC1_POP
[1:848] ;computeAlphaForWalk();
VBC3_PUSH_CONST 615  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB5570: //for step
VBC2_PUSH_CONST 68 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB5355 //to condition
LAB5583: //for exit
[1:850] ;for( j = fr1 + fr2; j < 2 * fr1 + fr2; j += framestep ){
VBC2_PUSH_CONST 68 //j
VBC3_PUSH_GLOBAL 41 //fr1
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC1_POP
LAB5593: //for condition
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC1_LESS
VBC4_FALSE_JUMP LAB5717 //to for exit
;
[1:851] ;s = (amplitude / 2 ) * sfMathCos(alpha01 * (j - fr2 + framestep) / 2);
VBC2_PUSH_CONST 74 //s
VBC3_PUSH_GLOBAL 39 //amplitude
VBC1_PUSH_2 
VBC1_DIV_FI
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 40 //alpha01
VBC3_PUSH_GLOBAL 68 //j
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_SUB
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_ADD
VBC1_MUL_FI
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_MUL_FF
VBC1_POP
[1:852] ;ytr = s - d10;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 74 //s
VBC3_PUSH_GLOBAL 38 //d10
VBC1_SUB_FF
VBC1_POP
[1:853] ;ytl = s + d10;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 74 //s
VBC3_PUSH_GLOBAL 38 //d10
VBC1_ADD_FF
VBC1_POP
[1:854] ;ztl = -gaitHeightKick;
VBC2_PUSH_CONST 32 //ztl
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC1_POP
[1:855] ;ztr = -gaitHeightKick;
VBC2_PUSH_CONST 25 //ztr
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC1_POP
[1:856] ;dx0 = dx0Typical;
VBC2_PUSH_CONST 84 //dx0
VBC3_PUSH_GLOBAL 71 //dx0Typical
VBC1_POP
[1:857] ;xtl -= dx0;
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 84 //dx0
VBC1_SUB_FF
VBC1_POP
[1:858] ;xtr -= dx0;
VBC2_PUSH_CONST 23 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 84 //dx0
VBC1_SUB_FF
VBC1_POP
[1:859] ;computeAlphaForWalk();
VBC3_PUSH_CONST 615  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB5704: //for step
VBC2_PUSH_CONST 68 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB5593 //to condition
LAB5717: //for exit
[1:861] ;for( j = 2 * fr1 + fr2; j < 2 * (fr1 + fr2); j += framestep ){
VBC2_PUSH_CONST 68 //j
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC1_POP
LAB5729: //for condition
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 41 //fr1
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC1_MUL
VBC1_LESS
VBC4_FALSE_JUMP LAB5948 //to for exit
;
[1:862] ;ztl = -gaitHeightKick + stepHeightKick;
VBC2_PUSH_CONST 32 //ztl
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC2_PUSH_LOCAL -2 //stepHeightKick
VBC1_ADD_FF
VBC1_POP
[1:863] ;dx0 = dx0Typical * 4 / fr2;
VBC2_PUSH_CONST 84 //dx0
VBC3_PUSH_GLOBAL 71 //dx0Typical
VBC2_PUSH_CONST 4 
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_DIV_FI
VBC1_POP
[1:864] ;dx = (stepLengthKick * (fr1 + fr2) / (4 * fr1) + 2 * dx0) / (fr2 - 2 * framestep) * framestep;
VBC2_PUSH_CONST 76 //dx
VBC2_PUSH_LOCAL -3 //stepLengthKick
VBC3_PUSH_GLOBAL 41 //fr1
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC1_MUL_FI
VBC2_PUSH_CONST 4 
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL
VBC1_DIV_FI
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 84 //dx0
VBC1_MUL_IF
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL
VBC1_SUB
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_MUL_FI
VBC1_POP
[1:865] ;if (j == (2 * fr1 + 2 * fr2 - framestep)){
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_MUL
VBC1_ADD
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB5847 //if to false
;
[1:866] ;ztl = -gaitHeightKick;
VBC2_PUSH_CONST 32 //ztl
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC1_POP
[1:867] ;ytl = s + d10;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 74 //s
VBC3_PUSH_GLOBAL 38 //d10
VBC1_ADD_FF
VBC1_POP
LAB5847: //if else
[1:869] ;if (j == (2 * fr1 + fr2 ) || j == (2 * (fr1 + fr2) - framestep)){
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 41 //fr1
VBC1_MUL
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB5886
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 41 //fr1
VBC3_PUSH_GLOBAL 42 //fr2
VBC1_ADD
VBC1_MUL
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_SUB
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB5886
VBC1_PUSH_0
LAB5886:
VBC4_FALSE_JUMP LAB5912 //if to false
;
[1:870] ;xtl -= dx0;
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 84 //dx0
VBC1_SUB_FF
VBC1_POP
[1:871] ;ytl = s + 64;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 74 //s
VBC2_PUSH_CONST 64 
VBC1_ADD_FI
VBC1_POP
VBC4_JUMP LAB5921 //if to exit
LAB5912: //if else
;xtl += dx;
VBC2_PUSH_CONST 30 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 76 //dx
VBC1_ADD_FF
VBC1_POP
LAB5921: //if exit
[1:875] ;xtr -= dx0;
VBC2_PUSH_CONST 23 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 84 //dx0
VBC1_SUB_FF
VBC1_POP
[1:876] ;computeAlphaForWalk();
VBC3_PUSH_CONST 615  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB5935: //for step
VBC2_PUSH_CONST 68 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 22 //framestep
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB5729 //to condition
LAB5948: //for exit
[1:880] ;pose_taking_cycles = 2;
VBC2_PUSH_B_OFFSET -6 //pose_taking_cycles
VBC1_PUSH_2 
VBC1_POP
[1:881] ;
[1:881] ;int pose_hight_after_kick = ztr0;
VBC2_PUSH_B_OFFSET -11 //pose_hight_after_kick
VBC3_PUSH_GLOBAL 49 //ztr0
VBC1_POP_CI
[1:882] ;for( j = 0; j < pose_taking_cycles; j += 1 ){
VBC2_PUSH_CONST 68 //j
VBC1_PUSH_0 
VBC1_POP
LAB5962: //for condition
VBC3_PUSH_GLOBAL 68 //j
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_LESS
VBC4_FALSE_JUMP LAB6064 //to for exit
;
[1:883] ;ztr = -gaitHeightKick + (j + 1 )*(pose_hight_after_kick + gaitHeightKick) / pose_taking_cycles;
VBC2_PUSH_CONST 25 //ztr
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_1 
VBC1_ADD
VBC2_PUSH_LOCAL -11 //pose_hight_after_kick
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_ADD_IF
VBC1_MUL_IF
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_DIV_FI
VBC1_ADD_FF
VBC1_POP
[1:884] ;ztl = ztr;
VBC2_PUSH_CONST 32 //ztl
VBC3_PUSH_GLOBAL 25 //ztr
VBC1_POP
[1:885] ;ytr = -d10 - (pose_taking_cycles - (j + 1)) * amplitude / 2 / pose_taking_cycles;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 38 //d10
VBC1_NEG_F
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_SUB
VBC3_PUSH_GLOBAL 39 //amplitude
VBC1_MUL_IF
VBC1_PUSH_2 
VBC1_DIV_FI
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
[1:886] ;ytl = d10 - (pose_taking_cycles - (j + 1)) * amplitude / 2 / pose_taking_cycles;
VBC2_PUSH_CONST 31 //ytl
VBC3_PUSH_GLOBAL 38 //d10
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC3_PUSH_GLOBAL 68 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_SUB
VBC3_PUSH_GLOBAL 39 //amplitude
VBC1_MUL_IF
VBC1_PUSH_2 
VBC1_DIV_FI
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
[1:887] ;computeAlphaForWalk();
VBC3_PUSH_CONST 615  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB6053: //for step
VBC2_PUSH_CONST 68 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB5962 //to condition
LAB6064: //for exit
[1:890] ;xr = xrOld;
VBC2_PUSH_CONST 26 //xr
VBC2_PUSH_LOCAL -7 //xrOld
VBC1_POP
[1:891] ;yr = yrOld;
VBC2_PUSH_CONST 27 //yr
VBC2_PUSH_LOCAL -8 //yrOld
VBC1_POP
[1:892] ;xl = xlOld;
VBC2_PUSH_CONST 33 //xl
VBC2_PUSH_LOCAL -9 //xlOld
VBC1_POP
[1:893] ;yl = ylOld;
VBC2_PUSH_CONST 34 //yl
VBC2_PUSH_LOCAL -10 //ylOld
VBC1_POP
[1:896] ;
VBC1_RETURN
;turn <void(,int)>
VBC1_STACK_DN1//local vars 1
[1:897] ;
[1:897] ;int frameCount = 4;
VBC2_PUSH_B_OFFSET -1 //frameCount
VBC2_PUSH_CONST 4 
VBC1_POP
[1:898] ;if (direction == 1){
VBC2_PUSH_LOCAL 2 //direction
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB6129 //if to false
;
[1:899] ;sfPoseGroup( 1024 , -2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 1024 
VBC3_PUSH_CONST -2000 // -
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:900] ;sfPoseGroup( 2048 , 2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 2048 
VBC3_PUSH_CONST 2000 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB6129: //if else
[1:902] ;if (direction == -1){
VBC2_PUSH_LOCAL 2 //direction
VBC2_PUSH_CONST -1 // -
VBC1_EQU
VBC4_FALSE_JUMP LAB6168 //if to false
;
[1:903] ;sfPoseGroup( 1024 , 2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 1024 
VBC3_PUSH_CONST 2000 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:904] ;sfPoseGroup( 2048 , -2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 2048 
VBC3_PUSH_CONST -2000 // -
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
LAB6168: //if else
[1:906] ;sfPoseGroup( 1048576 , 2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_CONST 2000 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:907] ;sfPoseGroup( 2097152 , 2000, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_CONST 2000 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:908] ;sfWaitFrame( frameCount );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:909] ;sfPoseGroup( 1024 , 0, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 1024 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:910] ;sfPoseGroup( 2048 , 0, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC3_PUSH_CONST 2048 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:911] ;sfPoseGroup( 1048576 , 0, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 1048576 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:912] ;sfPoseGroup( 2097152 , 0, frameCount );
VBC5_PUSH_CONST 51 | 0x80000000 //import func index sfPoseGroup
VBC4_PUSH_CONST 2097152 
VBC1_PUSH_0 
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:913] ;sfWaitFrame( frameCount );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL -1 //frameCount
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:914] ;sfWaitFrame( 6 );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_CONST 6 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:917] ;
VBC1_RETURN
;movingRemoteControl <void()>
[1:919] ;while(1) {
LAB6273: //while condition
;
[1:921] ;while( sfAbs( svRemoteRightJoystickX ) < 10  
LAB6273: //while condition
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 1196 //svRemoteRightJoystickX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB6355
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 1197 //svRemoteRightJoystickY
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB6355
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 1193 //svRemoteLeftJoystickX
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC2_PUSH_CONST 10 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB6355
VBC3_PUSH_GLOBAL 1194 //svRemoteLeftJoystickY
VBC1_PUSH_0 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB6349
VBC3_PUSH_GLOBAL 1191 //svRemoteButton
VBC3_PUSH_CONST 2048 
VBC1_DIV
VBC1_PUSH_2 
VBC1_MOD
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB6349
VBC1_PUSH_1
LAB6349:
VBC1_LNOT
VBC4_FALSE_JUMP_KEEP LAB6355
VBC1_PUSH_1
LAB6355:
VBC4_FALSE_JUMP LAB6465 //while to exit
;
[1:926] ;if (svRemoteButton == 262144 || svRemoteButton == 128) kick(1,0); 
VBC3_PUSH_GLOBAL 1191 //svRemoteButton
VBC4_PUSH_CONST 262144 
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB6383
VBC3_PUSH_GLOBAL 1191 //svRemoteButton
VBC3_PUSH_CONST 128 
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB6383
VBC1_PUSH_0
LAB6383:
VBC4_FALSE_JUMP LAB6394 //if to false
;if (svRemoteButton == 262144 || svRemoteButton == 128) kick(1,0); 
VBC3_PUSH_CONST 5051  //func address kick
VBC1_PUSH_1 
VBC1_PUSH_0 
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
LAB6394: //if else
[1:927] ;if (svRemoteButton == 524288 || svRemoteButton == 64) kick(0,0); 
VBC3_PUSH_GLOBAL 1191 //svRemoteButton
VBC4_PUSH_CONST 524288 
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB6417
VBC3_PUSH_GLOBAL 1191 //svRemoteButton
VBC2_PUSH_CONST 64 
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB6417
VBC1_PUSH_0
LAB6417:
VBC4_FALSE_JUMP LAB6428 //if to false
;if (svRemoteButton == 524288 || svRemoteButton == 64) kick(0,0); 
VBC3_PUSH_CONST 5051  //func address kick
VBC1_PUSH_0 
VBC1_PUSH_0 
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
LAB6428: //if else
[1:928] ;if (svRemoteButton == 1) turn(1); 
VBC3_PUSH_GLOBAL 1191 //svRemoteButton
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB6443 //if to false
;if (svRemoteButton == 1) turn(1); 
VBC3_PUSH_CONST 6085  //func address turn
VBC1_PUSH_1 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB6443: //if else
[1:929] ;if (svRemoteButton == 8) turn(-1); 
VBC3_PUSH_GLOBAL 1191 //svRemoteButton
VBC2_PUSH_CONST 8 
VBC1_EQU
VBC4_FALSE_JUMP LAB6460 //if to false
;if (svRemoteButton == 8) turn(-1); 
VBC3_PUSH_CONST 6085  //func address turn
VBC2_PUSH_CONST -1 // -
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB6460: //if else
[1:930] ;sfWaitNextFrame();
VBC1_WAIT
VBC4_JUMP LAB6273 //while forever loop
LAB6465: //while exit
[1:934] ;sideLength = joystickToSideLength();
VBC2_PUSH_CONST 4 //sideLength
VBC3_PUSH_CONST 4416  //func address joystickToSideLength
VBC1_CALL0
//remove call address and params
VBC1_POP_CF
[1:935] ;selfFirstLegIsRightLeg = motion_to_right;
VBC2_PUSH_CONST 13 //selfFirstLegIsRightLeg
VBC3_PUSH_GLOBAL 14 //motion_to_right
VBC1_POP
[1:936] ;if (svRemoteLeftJoystickY < 0 && ((svRemoteButton / 2048) % 2 == 1)) stepNumber = -svRemoteLeftJoystickY;
VBC3_PUSH_GLOBAL 1194 //svRemoteLeftJoystickY
VBC1_PUSH_0 
VBC1_LESS
VBC4_FALSE_JUMP_KEEP LAB6503
VBC3_PUSH_GLOBAL 1191 //svRemoteButton
VBC3_PUSH_CONST 2048 
VBC1_DIV
VBC1_PUSH_2 
VBC1_MOD
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB6503
VBC1_PUSH_1
LAB6503:
VBC4_FALSE_JUMP LAB6514 //if to false
;if (svRemoteLeftJoystickY < 0 && ((svRemoteButton / 2048) % 2 == 1)) stepNumber = -svRemoteLeftJoystickY;
VBC2_PUSH_CONST 61 //stepNumber
VBC3_PUSH_GLOBAL 1194 //svRemoteLeftJoystickY
VBC1_NEG
VBC1_POP
LAB6514: //if else
[1:938] ;walkInitialPoseFine();
VBC3_PUSH_CONST 2033  //func address walkInitialPoseFine
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:939] ;walkLoop();
VBC3_PUSH_CONST 4481  //func address walkLoop
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:942] ;stepType = 1;
VBC2_PUSH_CONST 55 //stepType
VBC1_PUSH_1 
VBC1_POP
[1:943] ;walkCycle(0);
VBC3_PUSH_CONST 4040  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:945] ;walkFinalPoseFine();
VBC3_PUSH_CONST 2199  //func address walkFinalPoseFine
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
VBC4_JUMP LAB6273 //while forever loop
LAB6543: //while exit
[1:949] ;walkFinalPoseFine();
VBC3_PUSH_CONST 2199  //func address walkFinalPoseFine
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:952] ;
VBC1_RETURN
;main <void()>
[1:953] ;slowWalk = 0;
VBC1_PUSH_2 //slowWalk
VBC1_PUSH_0 
VBC1_POP
[1:954] ;setup();
VBC2_PUSH_CONST 70  //func address setup
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:955] ;sideLength = 0;
VBC2_PUSH_CONST 4 //sideLength
VBC1_PUSH_0 
VBC1_POP_CF
[1:956] ;rotation = 0;
VBC2_PUSH_CONST 5 //rotation
VBC1_PUSH_0 
VBC1_POP_CF
[1:959] ;sfWaitFrame( 100 );
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_CONST 100 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:962] ;sfQuaternionToEulerImu();
VBC5_PUSH_CONST 303 | 0x80000000 //import func index sfQuaternionToEulerImu
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:963] ;forwardDirection = svEulerYaw;
VBC2_PUSH_CONST 85 //forwardDirection
VBC3_PUSH_GLOBAL 1025 //svEulerYaw
VBC1_POP
[1:966] ;sfCreateTask( mixing, 20 );
VBC5_PUSH_CONST 2 | 0x80000000 //import func index sfCreateTask
VBC3_PUSH_CONST 4229  //func address mixing
VBC2_PUSH_CONST 20 
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
[1:969] ;runTest(); 
VBC3_PUSH_CONST 4294  //func address runTest
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:974] ;
VBC1_RETURN
//Init table
//Variables
svFrameCount : 1
svImuAccX : 1000
svImuAccY : 1001
svImuAccZ : 1002
svImuAccRawX : 1003
svImuAccRawY : 1004
svImuAccRawZ : 1005
svImuGyroX : 1006
svImuGyroY : 1007
svImuGyroZ : 1008
svImuGyroRawX : 1009
svImuGyroRawY : 1010
svImuGyroRawZ : 1011
svImuQuaterX : 1012
svImuQuaterY : 1013
svImuQuaterZ : 1014
svImuQuaterW : 1015
svImuQuaterAcc : 1016
svImuAccSlowX : 1017
svImuAccSlowY : 1018
svImuAccSlowZ : 1019
svAdc : 1020
svButtonLeft : 1021
svButtonRight : 1022
svButtonPress : 1023
svHeadControlMask : 1024
svEulerYaw F: 1025
svEulerPitch F: 1026
svEulerRoll F: 1027
svRemoteStatus : 1190
svRemoteButton : 1191
svRemoteLeftJoystick : 1192
svRemoteLeftJoystickX : 1193
svRemoteLeftJoystickY : 1194
svRemoteRightJoystick : 1195
svRemoteRightJoystickX : 1196
svRemoteRightJoystickY : 1197
svHumoModelDistPelvic : 1204
svHumoModelLengthPelvicHip : 1205
svHumoModelLengthHipHip : 1206
svHumoModelLengthHipKnee : 1207
svHumoModelLengthKneeFoot : 1208
svHumoModelLengthFootFoot : 1209
svHumoModelDistFootFloor : 1210
svHumoModelFootLength : 1211
svHumoModelFootWidth : 1212
svHumoModelFootCenterBack : 1213
svHumoModelFootCenterInner : 1214
svHumoModelAngPelvic : 1198
svHumoModelAngHipSide : 1200
svHumoModelAngHip : 1199
svHumoModelAngKnee : 1201
svHumoModelAngFoot : 1202
svHumoModelAngFootSide : 1203
svIkA5 F: 1215
svIkB5 F: 1216
svIkC5 F: 1217
svIkA6 F: 1218
svIkA7 F: 1219
svIkA8 F: 1220
svIkA9 F: 1221
svIkA10 F: 1222
svIkB10 F: 1223
svIkC10 F: 1224
svIkLimA5min F: 1225
svIkLimA5max F: 1226
svIkLimA6min F: 1227
svIkLimA6max F: 1228
svIkLimA7min F: 1229
svIkLimA7max F: 1230
svIkLimA8min F: 1231
svIkLimA8max F: 1232
svIkLimA9min F: 1233
svIkLimA9max F: 1234
svIkLimA10min F: 1235
svIkLimA10max F: 1236
svIkOutPresent : 1237
svIkEncA5 : 1238
svIkEncA6 : 1239
svIkEncA7 : 1240
svIkEncA8 : 1241
svIkEncA9 : 1242
svIkEncA10 : 1243
headRotateTarget : 1030
headRotateCurrent : 1031
headRotatePwm : 1032
headRotateAddonMix : 1033
torsoRotateTarget : 1034
torsoRotateCurrent : 1035
torsoRotatePwm : 1036
torsoRotateAddonMix : 1037
rightClavicleTarget : 1038
rightClavicleCurrent : 1039
rightClaviclePwm : 1040
rightClavicleAddonMix : 1041
leftClavicleTarget : 1042
leftClavicleCurrent : 1043
leftClaviclePwm : 1044
leftClavicleAddonMix : 1045
rightShoulderTarget : 1046
rightShoulderCurrent : 1047
rightShoulderPwm : 1048
rightShoulderAddonMix : 1049
leftShoulderTarget : 1050
leftShoulderCurrent : 1051
leftShoulderPwm : 1052
leftShoulderAddonMix : 1053
rightElbowSideTarget : 1054
rightElbowSideCurrent : 1055
rightElbowSidePwm : 1056
rightElbowSideAddonMix : 1057
leftElbowSideTarget : 1058
leftElbowSideCurrent : 1059
leftElbowSidePwm : 1060
leftElbowSideAddonMix : 1061
rightElbowTarget : 1062
rightElbowCurrent : 1063
rightElbowPwm : 1064
rightElbowAddonMix : 1065
leftElbowTarget : 1066
leftElbowCurrent : 1067
leftElbowPwm : 1068
leftElbowAddonMix : 1069
rightPelvicTarget : 1070
rightPelvicCurrent : 1071
rightPelvicPwm : 1072
rightPelvicAddonMix : 1073
leftPelvicTarget : 1074
leftPelvicCurrent : 1075
leftPelvicPwm : 1076
leftPelvicAddonMix : 1077
rightHipSideTarget : 1078
rightHipSideCurrent : 1079
rightHipSidePwm : 1080
rightHipSideAddonMix : 1081
leftHipSideTarget : 1082
leftHipSideCurrent : 1083
leftHipSidePwm : 1084
leftHipSideAddonMix : 1085
rightHipTarget : 1086
rightHipCurrent : 1087
rightHipPwm : 1088
rightHipAddonMix : 1089
leftHipTarget : 1090
leftHipCurrent : 1091
leftHipPwm : 1092
leftHipAddonMix : 1093
rightKneeTarget : 1094
rightKneeCurrent : 1095
rightKneePwm : 1096
rightKneeAddonMix : 1097
leftKneeTarget : 1098
leftKneeCurrent : 1099
leftKneePwm : 1100
leftKneeAddonMix : 1101
rightFootFrontTarget : 1102
rightFootFrontCurrent : 1103
rightFootFrontPwm : 1104
rightFootFrontAddonMix : 1105
leftFootFrontTarget : 1106
leftFootFrontCurrent : 1107
leftFootFrontPwm : 1108
leftFootFrontAddonMix : 1109
rightFootSideTarget : 1110
rightFootSideCurrent : 1111
rightFootSidePwm : 1112
rightFootSideAddonMix : 1113
leftFootSideTarget : 1114
leftFootSideCurrent : 1115
leftFootSidePwm : 1116
leftFootSideAddonMix : 1117
rightHandTarget : 1118
rightHandCurrent : 1119
rightHandPwm : 1120
rightHandAddonMix : 1121
leftHandTarget : 1122
leftHandCurrent : 1123
leftHandPwm : 1124
leftHandAddonMix : 1125
headTiltTarget : 1130
headTiltCurrent : 1131
headTiltPwm : 1132
headTiltAddonMix : 1133
rightKneeBotTarget : 1134
rightKneeBotCurrent : 1135
rightKneeBotPwm : 1136
rightKneeBotAddonMix : 1137
leftKneeBotTarget : 1138
leftKneeBotCurrent : 1139
leftKneeBotPwm : 1140
leftKneeBotAddonMix : 1141
rightClawTarget : 1142
rightClawCurrent : 1143
rightClawPwm : 1144
rightClawAddonMix : 1145
leftClawTarget : 1146
leftClawCurrent : 1147
leftClawPwm : 1148
leftClawAddonMix : 1149
slowWalk : 2
stepLength F: 3
sideLength F: 4
rotation F: 5
stepLengthOrder F: 6
selfMotionShiftCorrectionX F: 7
selfMotionShiftCorrectionY F: 8
selfFirstStepYield F: 9
selfCycleStepYield F: 10
selfSideStepRightYield F: 11
selfSideStepLeftYield F: 12
selfFirstLegIsRightLeg : 13
motion_to_right : 14
side_motion F: 15
selfInitPoses : 16
selfExitFlag : 17
selfFallingFlag : 18
selfNeckPan : 19
rotationYieldRight F: 20
rotationYieldLeft F: 21
framestep : 22
xtr F: 23
ytr F: 24
ztr F: 25
xr F: 26
yr F: 27
zr F: 28
wr F: 29
xtl F: 30
ytl F: 31
ztl F: 32
xl F: 33
yl F: 34
zl F: 35
wl F: 36
e10 F: 37
d10 F: 38
amplitude F: 39
alpha01 F: 40
fr1 : 41
fr2 : 42
gaitHeight F: 43
stepHeight F: 44
correctedStepLenght F: 45
correctedStepLenghtHalf F: 46
correctedSideLenght F: 47
correctedSideLenghtHalf F: 48
ztr0 F: 49
ztl0 F: 50
stepZtr F: 51
stepZtl F: 52
stepYtr F: 53
stepYtl F: 54
stepType : 55
fps : 56
timeStep : 57
bodyTiltAtWalk F: 58
solyLandingSkew F: 59
hipTilt : 60
stepNumber : 61
flag : 62
flag_event : 63
ugol_torsa F: 64
dobavka_x_ot_torsa F: 65
tors_angle F: 66
torsoAdd : 67
j : 68
xtl0 F: 69
xtr0 F: 70
dx0Typical F: 71
dy0Typical F: 72
correctedRotation F: 73
s F: 74
fase_offset F: 75
dx F: 76
dy F: 77
dx1 F: 78
dx2 F: 79
dx4 F: 80
stepRotation F: 81
xtl_plan F: 82
xtr_plan F: 83
dx0 F: 84
forwardDirection F: 85
leftRightFactor : 86
frontBackFactor : 87
