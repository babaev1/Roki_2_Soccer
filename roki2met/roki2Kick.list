//====================================================================
//      SvCompiler V9.06
//By A.Sibilev
//====================================================================
//cblock

;sfVpuVersion <int()>
;sfCreateTask <int(,*<void()>,int)>
;sfLog <void(,cstring,int,int,int)>
;sfLogOpen <void(,cstring)>
;sfLogClose <void()>
;sfWaitFrameOut <void(,int)>
;sfIsFrameOut <int(,int)>
;sfWaitNextFrame <void()>
;sfSlotIndex <int(,cstring)>
;sfSoundIndex <int(,cstring)>
;sfAbs <int(,int)>
;sfIMin <int(,int,int)>
;sfIMax <int(,int,int)>
;sfUMin <int(,int,int)>
;sfUMax <int(,int,int)>
;sfILimit <int(,int,int,int)>
;sfStop <void()>
;sfStartSlot <void(,int)>
;sfBip <void(,int,int)>
;sfWriteFlash <void()>
;sfSoundPlay <void(,int)>
;sfSoundIsPlay <int()>
;sfFreeGroup <void(,int)>
;sfPoseGroup <void(,int,int,int)>
;sfPoseGroupDelay <void(,int,int,int,int)>
;sfPoseCorrect <void(,int,int)>
;sfQueueGroup <void(,int,int,int)>
;sfPoseIdx <void(,int,int,int)>
;sfPoseGroupLin <void(,int,int,int)>
;sfStrainGroup <void(,int)>
;sfPlaySamples <void(,int,int,int,*cblock)>
;sfPlayWSamples <void(,int,int,int,*cwblock)>
;sfAccumSetup1 <void(,*int)>
;sfAccumSetup2 <void(,*int,*int)>
;sfAccumSetup3 <void(,*int,*int,*int)>
;sfAccumSetup4 <void(,*int,*int,*int,*int)>
;sfAccumTrigger <void()>
;sfAccumReset <void()>
;sfUnitParamQueryRead <int(,int,int)>
;sfUnitParamQueryWrite <int(,int,int,int)>
;sfUnitParamStatusRead <int(,int,int,*int)>
;sfMathAcos <int(,int,int)>
;sfMathSqrti <int(,int)>
;sfMathAngleOfTriangle <int(,int,int,int)>
;sfMathAngleOfKnee <int(,int,int,int)>
;sfMathCathetOfSquareTriangle <int(,int,int)>
;sfMathHypotenuseOfSquareTriangle <int(,int,int)>
;sfMathTableSin <int(,int,int)>
;sfHumoModelSetup <void()>
;sfHumoModelFootAtFloor <void(,int,int,int)>
;sfHumoModelFootPush <void(,int,int,int)>
;sfIndexOfMask <int(,int)>
;sfQueueIdxAppend <int(,int,int,int)>
;sfQueueIdxOffsets <int(,int,int,*cblock,int)>
;sfQueueIdxSinMove <int(,int,int,int,int)>
;sfQueueIdxLast <int(,int)>
;sfQueueIdxCount <int(,int)>
;sfQueueMax <int()>
;sfIkSetup <void()>
;sfIkAngle <void(,float,float,float,float,float,float,float)>
;sfMathCos <float(,float)>
;sfMathSin <float(,float)>
;sfQuaternionToEuler <void(,float,float,float,float)>
;sfQuaternionToEulerImu <void()>
;sfFMathACos <float(,float)>
;sfFMathASin <float(,float)>
;sfFMathATan <float(,float)>
;sfFMathATan2 <float(,float,float)>
;sfFMathCos <float(,float)>
;sfFMathSin <float(,float)>
;sfFMathTan <float(,float)>
;sfFMathCosh <float(,float)>
;sfFMathSinh <float(,float)>
;sfFMathTanh <float(,float)>
;sfFMathExp <float(,float)>
;sfFMathFrExp <float(,float,*int)>
;sfFMathLdExp <float(,float,int)>
;sfFMathLog <float(,float)>
;sfFMathLog10 <float(,float)>
;sfFMathModf <float(,float,*float)>
;sfFMathPow <float(,float,float)>
;sfFMathSqrt <float(,float)>
;sfFMathCeil <float(,float)>
;sfFMathFAbs <float(,float)>
;sfFMathFloor <float(,float)>
;sfFMathFMod <float(,float,float)>
;sfQuaternionToMatrix <void(,*:SfMatrix3x3,float,float,float,float)>
;sfQuaternionToMatrixImu <void(,*:SfMatrix3x3)>
;sfGravityVector <void(,*:SfVector3)>
;sfVec3Set <void(,*:SfVector3,float,float,float)>
;sfVec3Sum <void(,*:SfVector3,*:SfVector3,*:SfVector3)>
;sfVec3Diff <void(,*:SfVector3,*:SfVector3,*:SfVector3)>
;sfVec3MulRowColCx <float(,*:SfVector3,float,float,float)>
;sfVec3MulRowCol <float(,*:SfVector3,*:SfVector3)>
;sfVec3ScSum <void(,*:SfVector3,*:SfVector3,float)>
;sfVec3ScDiff <void(,*:SfVector3,*:SfVector3,float)>
;sfVec3ScMul <void(,*:SfVector3,*:SfVector3,float)>
;sfVec3ScDiv <void(,*:SfVector3,*:SfVector3,float)>
;sfMat3x3Set <void(,*:SfMatrix3x3,float,float,float,float,float,float,float,float,float)>
;sfMat3x3SetAll <void(,*:SfMatrix3x3,float)>
;sfMat3x3SetDiag <void(,*:SfMatrix3x3,float)>
;sfMat3x3Copy <void(,*:SfMatrix3x3,*:SfMatrix3x3)>
;sfMat3x3Transpose <void(,*:SfMatrix3x3,*:SfMatrix3x3)>
;sfMat3x3Mul <void(,*:SfMatrix3x3,*:SfMatrix3x3,*:SfMatrix3x3)>
;sfMat3x3ScMul <void(,*:SfMatrix3x3,*:SfMatrix3x3,float)>
;sfMat3x3MulCol <void(,*:SfVector3,*:SfMatrix3x3,*:SfVector3)>
;sfMat3x3RowMul <void(,*:SfVector3,*:SfVector3,*:SfMatrix3x3)>
;sfWaitFrame <void(,int)>
[3:491] ;sfWaitFrameOut( frame + svFrameCount );
VBC5_PUSH_CONST 17 | 0x80000000 //import func index sfWaitFrameOut
VBC2_PUSH_LOCAL 2 //frame
VBC3_PUSH_GLOBAL 1 //svFrameCount
VBC1_ADD
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[3:497] ;
VBC1_RETURN
;sfUnitParamRead <int(,int,int,*int)>
[3:499] ;if( !sfUnitParamQueryRead( devId, paramIndex ) )
VBC5_PUSH_CONST 66 | 0x80000000 //import func index sfUnitParamQueryRead
VBC2_PUSH_LOCAL 4 //devId
VBC2_PUSH_LOCAL 3 //paramIndex
VBC1_CALL2
VBC1_STACK_UP2//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB90 //if to false
;return 0;
VBC1_PUSH_0 
VBC2_POP_RESULT 5
VBC1_RETURN
LAB90: //if else
[3:503] ;sfWaitNextFrame();
VBC1_WAIT
[3:504] ;sfWaitNextFrame();
VBC1_WAIT
[3:505] ;return sfUnitParamStatusRead( devId, paramIndex, paramValue );
VBC5_PUSH_CONST 68 | 0x80000000 //import func index sfUnitParamStatusRead
VBC2_PUSH_LOCAL 4 //devId
VBC2_PUSH_LOCAL 3 //paramIndex
VBC2_PUSH_LOCAL 2 //paramValue
VBC1_CALL3
VBC1_STACK_UP3//remove call address and params
VBC2_POP_RESULT 5
VBC1_RETURN
;quaternion_to_euler_angle <void()>
VBC2_STACK -9//local vars 9
[1:99] ;
[1:99] ;float w = svImuQuaterW / 16384.0;
VBC2_PUSH_B_OFFSET -1 //w
VBC3_PUSH_GLOBAL 2575 //svImuQuaterW
VBC5_PUSH_CONST 1182793728 
VBC1_DIV_IF
VBC1_POP
[1:100] ;
[1:100] ;float x = svImuQuaterX / 16384.0;
VBC2_PUSH_B_OFFSET -2 //x
VBC3_PUSH_GLOBAL 2572 //svImuQuaterX
VBC5_PUSH_CONST 1182793728 
VBC1_DIV_IF
VBC1_POP
[1:101] ;
[1:101] ;float y = svImuQuaterY / 16384.0;
VBC2_PUSH_B_OFFSET -3 //y
VBC3_PUSH_GLOBAL 2573 //svImuQuaterY
VBC5_PUSH_CONST 1182793728 
VBC1_DIV_IF
VBC1_POP
[1:102] ;
[1:102] ;float z = svImuQuaterZ / 16384.0;
VBC2_PUSH_B_OFFSET -4 //z
VBC3_PUSH_GLOBAL 2574 //svImuQuaterZ
VBC5_PUSH_CONST 1182793728 
VBC1_DIV_IF
VBC1_POP
[1:103] ;
[1:103] ;float t0 = +2.0 * (w * x + y * z);
VBC2_PUSH_B_OFFSET -5 //t0
VBC5_PUSH_CONST 1073741824 
VBC2_PUSH_LOCAL -1 //w
VBC2_PUSH_LOCAL -2 //x
VBC1_MUL_FF
VBC2_PUSH_LOCAL -3 //y
VBC2_PUSH_LOCAL -4 //z
VBC1_MUL_FF
VBC1_ADD_FF
VBC1_MUL_FF
VBC1_POP
[1:104] ;
[1:104] ;float t1 = +1.0 - 2.0 * (x * x + y * y);
VBC2_PUSH_B_OFFSET -6 //t1
VBC5_PUSH_CONST 1065353216 
VBC5_PUSH_CONST 1073741824 
VBC2_PUSH_LOCAL -2 //x
VBC2_PUSH_LOCAL -2 //x
VBC1_MUL_FF
VBC2_PUSH_LOCAL -3 //y
VBC2_PUSH_LOCAL -3 //y
VBC1_MUL_FF
VBC1_ADD_FF
VBC1_MUL_FF
VBC1_SUB_FF
VBC1_POP
[1:105] ;
[1:105] ;float t2 = +2.0 * (w * y - z * x);
VBC2_PUSH_B_OFFSET -7 //t2
VBC5_PUSH_CONST 1073741824 
VBC2_PUSH_LOCAL -1 //w
VBC2_PUSH_LOCAL -3 //y
VBC1_MUL_FF
VBC2_PUSH_LOCAL -4 //z
VBC2_PUSH_LOCAL -2 //x
VBC1_MUL_FF
VBC1_SUB_FF
VBC1_MUL_FF
VBC1_POP
[1:106] ;t2 = (t2 > +1.0 ? 1.0 : t2);
VBC2_PUSH_B_OFFSET -7 //t2
VBC2_PUSH_LOCAL -7 //t2
VBC5_PUSH_CONST 1065353216 
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB247
VBC5_PUSH_CONST 1065353216 
VBC4_JUMP LAB249
LAB247:
VBC2_PUSH_LOCAL -7 //t2
LAB249:
VBC1_POP
[1:107] ;t2 = (t2 < -1.0 ? -1.0 : t2);
VBC2_PUSH_B_OFFSET -7 //t2
VBC2_PUSH_LOCAL -7 //t2
VBC5_PUSH_CONST -1082130432 // -
VBC1_LESS_FF
VBC4_FALSE_JUMP LAB273
VBC5_PUSH_CONST -1082130432 // -
VBC4_JUMP LAB275
LAB273:
VBC2_PUSH_LOCAL -7 //t2
LAB275:
VBC1_POP
[1:108] ;
[1:108] ;float t3 = +2.0 * (w * z + x * y);
VBC2_PUSH_B_OFFSET -8 //t3
VBC5_PUSH_CONST 1073741824 
VBC2_PUSH_LOCAL -1 //w
VBC2_PUSH_LOCAL -4 //z
VBC1_MUL_FF
VBC2_PUSH_LOCAL -2 //x
VBC2_PUSH_LOCAL -3 //y
VBC1_MUL_FF
VBC1_ADD_FF
VBC1_MUL_FF
VBC1_POP
[1:109] ;
[1:109] ;float t4 = +1.0 - 2.0 * (y * y + z * z);
VBC2_PUSH_B_OFFSET -9 //t4
VBC5_PUSH_CONST 1065353216 
VBC5_PUSH_CONST 1073741824 
VBC2_PUSH_LOCAL -3 //y
VBC2_PUSH_LOCAL -3 //y
VBC1_MUL_FF
VBC2_PUSH_LOCAL -4 //z
VBC2_PUSH_LOCAL -4 //z
VBC1_MUL_FF
VBC1_ADD_FF
VBC1_MUL_FF
VBC1_SUB_FF
VBC1_POP
[1:110] ;pitch = sfFMathATan2(t0, t1) - 1.5708;
VBC2_PUSH_CONST 70 //pitch
VBC5_PUSH_CONST 354 | 0x80000000 //import func index sfFMathATan2
//alloc addon amount for result
VBC2_PUSH_LOCAL -5 //t0
VBC2_PUSH_LOCAL -6 //t1
VBC1_CALL2
VBC1_STACK_UP2//remove call address and params
VBC5_PUSH_CONST 1070141433 
VBC1_SUB_FF
VBC1_POP
[1:111] ;roll = sfFMathASin(t2);
VBC2_PUSH_CONST 71 //roll
VBC5_PUSH_CONST 352 | 0x80000000 //import func index sfFMathASin
//alloc addon amount for result
VBC2_PUSH_LOCAL -7 //t2
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_POP
[1:112] ;yaw = sfFMathATan2(t3, t4);
VBC2_PUSH_CONST 69 //yaw
VBC5_PUSH_CONST 354 | 0x80000000 //import func index sfFMathATan2
//alloc addon amount for result
VBC2_PUSH_LOCAL -8 //t3
VBC2_PUSH_LOCAL -9 //t4
VBC1_CALL2
VBC1_STACK_UP2//remove call address and params
VBC1_POP
[1:115] ;
VBC1_RETURN
;get_yaw <float()>
[1:116] ;quaternion_to_euler_angle();
VBC2_PUSH_CONST 108  //func address quaternion_to_euler_angle
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:117] ;return yaw;
VBC3_PUSH_GLOBAL 69 //yaw
VBC2_POP_RESULT 2
VBC1_RETURN
;setup <void()>
[1:121] ;rotationYieldRight = 0.23;
VBC2_PUSH_CONST 16 //rotationYieldRight
VBC5_PUSH_CONST 1047233823 
VBC1_POP
[1:122] ;rotationYieldLeft = 0.23;
VBC2_PUSH_CONST 17 //rotationYieldLeft
VBC5_PUSH_CONST 1047233823 
VBC1_POP
[1:124] ;svIkA5 = 40.2; 
VBC3_PUSH_CONST 3275 //svIkA5
VBC5_PUSH_CONST 1109445837 
VBC1_POP
[1:125] ;svIkB5 = 0; 
VBC3_PUSH_CONST 3276 //svIkB5
VBC1_PUSH_0 
VBC1_POP_CF
[1:126] ;svIkC5 = 0;    
VBC3_PUSH_CONST 3277 //svIkC5
VBC1_PUSH_0 
VBC1_POP_CF
[1:127] ;svIkA6 = 0;   
VBC3_PUSH_CONST 3278 //svIkA6
VBC1_PUSH_0 
VBC1_POP_CF
[1:128] ;svIkA7 = 99;   
VBC3_PUSH_CONST 3279 //svIkA7
VBC2_PUSH_CONST 99 
VBC1_POP_CF
[1:129] ;svIkA8 = 99;   
VBC3_PUSH_CONST 3280 //svIkA8
VBC2_PUSH_CONST 99 
VBC1_POP_CF
[1:130] ;svIkA9 = 0;   
VBC3_PUSH_CONST 3281 //svIkA9
VBC1_PUSH_0 
VBC1_POP_CF
[1:131] ;svIkA10 = 13.7;  
VBC3_PUSH_CONST 3282 //svIkA10
VBC5_PUSH_CONST 1096495923 
VBC1_POP
[1:132] ;svIkB10 = 23.8;  
VBC3_PUSH_CONST 3283 //svIkB10
VBC5_PUSH_CONST 1102997094 
VBC1_POP
[1:133] ;svIkC10 = 0;   
VBC3_PUSH_CONST 3284 //svIkC10
VBC1_PUSH_0 
VBC1_POP_CF
[1:135] ;e10 = 55;      
VBC2_PUSH_CONST 45 //e10
VBC2_PUSH_CONST 55 
VBC1_POP_CF
[1:136] ;d10 = 62;      
VBC2_PUSH_CONST 46 //d10
VBC2_PUSH_CONST 62 
VBC1_POP_CF
[1:139] ;svIkLimA5min = -150 * 0.017453293;
VBC3_PUSH_CONST 3285 //svIkLimA5min
VBC5_PUSH_CONST -1071149770 
VBC1_POP
[1:140] ;svIkLimA5max = 150 * 0.017453293;
VBC3_PUSH_CONST 3286 //svIkLimA5max
VBC5_PUSH_CONST 1076333878 
VBC1_POP
[1:143] ;svIkLimA6min = -108 * 0.017453293;
VBC3_PUSH_CONST 3287 //svIkLimA6min
VBC5_PUSH_CONST -1074706887 
VBC1_POP
[1:144] ;svIkLimA6max = 15 * 0.017453293;
VBC3_PUSH_CONST 3288 //svIkLimA6max
VBC5_PUSH_CONST 1048971922 
VBC1_POP
[1:146] ;svIkLimA7min = -130 * 0.017453293;
VBC3_PUSH_CONST 3289 //svIkLimA7min
VBC5_PUSH_CONST -1072613858 
VBC1_POP
[1:147] ;svIkLimA7max = 50 * 0.017453293;
VBC3_PUSH_CONST 3290 //svIkLimA7max
VBC5_PUSH_CONST 1063216883 
VBC1_POP
[1:150] ;svIkLimA8min = -180 * 0.017453293;
VBC3_PUSH_CONST 3291 //svIkLimA8min
VBC5_PUSH_CONST -1068953637 
VBC1_POP
[1:151] ;svIkLimA8max = 8 * 0.017453293;
VBC3_PUSH_CONST 3292 //svIkLimA8max
VBC5_PUSH_CONST 1041168949 
VBC1_POP
[1:154] ;svIkLimA9min = -45 * 0.017453293;
VBC3_PUSH_CONST 3293 //svIkLimA9min
VBC5_PUSH_CONST -1085730853 
VBC1_POP
[1:155] ;svIkLimA9max = 78 * 0.017453293;
VBC3_PUSH_CONST 3294 //svIkLimA9max
VBC5_PUSH_CONST 1068384497 
VBC1_POP
[1:158] ;svIkLimA10min = -24 * 0.017453293;
VBC3_PUSH_CONST 3295 //svIkLimA10min
VBC5_PUSH_CONST -1093241008 
VBC1_POP
[1:159] ;svIkLimA10max = 24 * 0.017453293;
VBC3_PUSH_CONST 3296 //svIkLimA10max
VBC5_PUSH_CONST 1054242640 
VBC1_POP
[1:160] ;sfIkSetup();
VBC5_PUSH_CONST 200 | 0x80000000 //import func index sfIkSetup
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:162] ;framestep = 2;
VBC2_PUSH_CONST 18 //framestep
VBC1_PUSH_2 
VBC1_POP
[1:164] ;gaitHeight = 170;  
VBC2_PUSH_CONST 51 //gaitHeight
VBC3_PUSH_CONST 170 
VBC1_POP_CF
[1:165] ;stepHeight = 40.0; 
VBC2_PUSH_CONST 52 //stepHeight
VBC5_PUSH_CONST 1109393408 
VBC1_POP
[1:167] ;selfMotionShiftCorrectionX = 50.0 / 21.0;
VBC2_PUSH_CONST 6 //selfMotionShiftCorrectionX
VBC5_PUSH_CONST 1075339654 
VBC1_POP
[1:168] ;selfMotionShiftCorrectionY = 0.0 / 21.0;
VBC2_PUSH_CONST 7 //selfMotionShiftCorrectionY
VBC1_PUSH_0 
VBC1_POP
[1:171] ;ztr0 = -(svIkC5+svIkA6+svIkA7+svIkA8+svIkA9+svIkB10 - 1); 
VBC2_PUSH_CONST 57 //ztr0
VBC3_PUSH_GLOBAL 3277 //svIkC5
VBC3_PUSH_GLOBAL 3278 //svIkA6
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3279 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3280 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3281 //svIkA9
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3283 //svIkB10
VBC1_ADD_FF
VBC1_PUSH_1 
VBC1_SUB_FI
VBC1_NEG_F
VBC1_POP
[1:172] ;ztl0 = -(svIkC5+svIkA6+svIkA7+svIkA8+svIkA9+svIkB10 - 1); 
VBC2_PUSH_CONST 58 //ztl0
VBC3_PUSH_GLOBAL 3277 //svIkC5
VBC3_PUSH_GLOBAL 3278 //svIkA6
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3279 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3280 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3281 //svIkA9
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3283 //svIkB10
VBC1_ADD_FF
VBC1_PUSH_1 
VBC1_SUB_FI
VBC1_NEG_F
VBC1_POP
[1:174] ;x_cap = 1; 
VBC2_PUSH_CONST 19 //x_cap
VBC1_PUSH_1 
VBC1_POP
[1:175] ;y_cap = 1; 
VBC2_PUSH_CONST 20 //y_cap
VBC1_PUSH_1 
VBC1_POP
[1:176] ;side_cap = 0;
VBC2_PUSH_CONST 38 //side_cap
VBC1_PUSH_0 
VBC1_POP_CF
[1:177] ;xtr_cap = 0; 
VBC2_PUSH_CONST 22 //xtr_cap
VBC1_PUSH_0 
VBC1_POP_CF
[1:178] ;xtl_cap = 0; 
VBC2_PUSH_CONST 32 //xtl_cap
VBC1_PUSH_0 
VBC1_POP_CF
[1:179] ;ytr_cap = 0; 
VBC2_PUSH_CONST 25 //ytr_cap
VBC1_PUSH_0 
VBC1_POP_CF
[1:180] ;ytl_cap = 0; 
VBC2_PUSH_CONST 37 //ytl_cap
VBC1_PUSH_0 
VBC1_POP_CF
[1:181] ;xt_cap_limit = 30.0;
VBC2_PUSH_CONST 34 //xt_cap_limit
VBC5_PUSH_CONST 1106247680 
VBC1_POP
[1:182] ;yt_cap_limit = 30.0;
VBC2_PUSH_CONST 39 //yt_cap_limit
VBC5_PUSH_CONST 1106247680 
VBC1_POP
[1:183] ;xr_cap = 0;         
VBC2_PUSH_CONST 23 //xr_cap
VBC1_PUSH_0 
VBC1_POP_CF
[1:184] ;xl_cap = 0;         
VBC2_PUSH_CONST 33 //xl_cap
VBC1_PUSH_0 
VBC1_POP_CF
[1:185] ;x_cap_limit = 0.17;
VBC2_PUSH_CONST 35 //x_cap_limit
VBC5_PUSH_CONST 1043207291 
VBC1_POP
[1:187] ;zr = zl = -1;
VBC2_PUSH_CONST 29 //zr
VBC2_PUSH_CONST 43 //zl
VBC2_PUSH_CONST -1 // -
VBC1_STORE_CF
VBC1_POP
[1:189] ;stepLength = 0.0;    
VBC2_PUSH_CONST 3 //stepLength
VBC1_PUSH_0 
VBC1_POP
[1:190] ;sideLength = 0.0;    
VBC2_PUSH_CONST 4 //sideLength
VBC1_PUSH_0 
VBC1_POP
[1:191] ;rotation = 0;        
VBC2_PUSH_CONST 5 //rotation
VBC1_PUSH_0 
VBC1_POP_CF
[1:192] ;selfFirstLegIsRightLeg = 1; 
VBC2_PUSH_CONST 12 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_POP
[1:193] ;motion_to_right = 1;
VBC2_PUSH_CONST 13 //motion_to_right
VBC1_PUSH_1 
VBC1_POP
[1:194] ;side_motion = 0.0;
VBC2_PUSH_CONST 14 //side_motion
VBC1_PUSH_0 
VBC1_POP
[1:195] ;selfInitPoses = 10; 
VBC2_PUSH_CONST 15 //selfInitPoses
VBC2_PUSH_CONST 10 
VBC1_POP
[1:197] ;stepZtr = (ztr0 + gaitHeight) / selfInitPoses;
VBC2_PUSH_CONST 59 //stepZtr
VBC3_PUSH_GLOBAL 57 //ztr0
VBC3_PUSH_GLOBAL 51 //gaitHeight
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 15 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:198] ;stepZtl = (ztl0 + gaitHeight) / selfInitPoses;
VBC2_PUSH_CONST 60 //stepZtl
VBC3_PUSH_GLOBAL 58 //ztl0
VBC3_PUSH_GLOBAL 51 //gaitHeight
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 15 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:200] ;bodyTiltAtWalk = 0.01;
VBC2_PUSH_CONST 66 //bodyTiltAtWalk
VBC5_PUSH_CONST 1008981770 
VBC1_POP
[1:201] ;solyLandingSkew = 0.01;
VBC2_PUSH_CONST 67 //solyLandingSkew
VBC5_PUSH_CONST 1008981770 
VBC1_POP
[1:203] ;fr1 = 8; 
VBC2_PUSH_CONST 49 //fr1
VBC2_PUSH_CONST 8 
VBC1_POP
[1:204] ;fr2 = 12; 
VBC2_PUSH_CONST 50 //fr2
VBC2_PUSH_CONST 12 
VBC1_POP
[1:205] ;amplitude = 20;    
VBC2_PUSH_CONST 47 //amplitude
VBC2_PUSH_CONST 20 
VBC1_POP_CF
[1:207] ;stepYtr = amplitude / 2.0 / selfInitPoses;
VBC2_PUSH_CONST 61 //stepYtr
VBC3_PUSH_GLOBAL 47 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 15 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:208] ;stepYtl = amplitude / 2.0 / selfInitPoses;
VBC2_PUSH_CONST 62 //stepYtl
VBC3_PUSH_GLOBAL 47 //amplitude
VBC5_PUSH_CONST 1073741824 
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 15 //selfInitPoses
VBC1_DIV_FI
VBC1_POP
[1:209] ;alpha01 = 3.141592654;
VBC2_PUSH_CONST 48 //alpha01
VBC5_PUSH_CONST 1078530011 
VBC1_POP
[1:210] ;if( fr1 != 0 )
VBC3_PUSH_GLOBAL 49 //fr1
VBC1_PUSH_0 
VBC1_NOT_EQU
VBC4_FALSE_JUMP LAB889 //if to false
;alpha01 = alpha01 * 2 / fr1;
VBC2_PUSH_CONST 48 //alpha01
VBC3_PUSH_GLOBAL 48 //alpha01
VBC1_PUSH_2 
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 49 //fr1
VBC1_DIV_FI
VBC1_POP
LAB889: //if else
[1:217] ;fps = 5;
VBC2_PUSH_CONST 64 //fps
VBC2_PUSH_CONST 5 
VBC1_POP
[1:218] ;walking_frame = 2;
VBC2_PUSH_CONST 65 //walking_frame
VBC1_PUSH_2 
VBC1_POP
[1:222] ;
VBC1_RETURN
;computeAlphaForWalk <int()>
[1:224] ;if (selfFirstLegIsRightLeg == 1) sfIkAngle( xtr, ytr, ztr, xr, yr, zr, wr );
VBC3_PUSH_GLOBAL 12 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB940 //if to false
;if (selfFirstLegIsRightLeg == 1) sfIkAngle( xtr, ytr, ztr, xr, yr, zr, wr );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 21 //xtr
VBC3_PUSH_GLOBAL 24 //ytr
VBC3_PUSH_GLOBAL 26 //ztr
VBC3_PUSH_GLOBAL 27 //xr
VBC3_PUSH_GLOBAL 28 //yr
VBC3_PUSH_GLOBAL 29 //zr
VBC3_PUSH_GLOBAL 30 //wr
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
VBC4_JUMP LAB971 //if to exit
LAB940: //if else
;else sfIkAngle(xtl, -ytl, ztl, xl, -yl, zl, -wl);
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 31 //xtl
VBC3_PUSH_GLOBAL 36 //ytl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 40 //ztl
VBC3_PUSH_GLOBAL 41 //xl
VBC3_PUSH_GLOBAL 42 //yl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 43 //zl
VBC3_PUSH_GLOBAL 44 //wl
VBC1_NEG_F
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
LAB971: //if exit
[1:226] ;if (svIkOutPresent) {
VBC3_PUSH_GLOBAL 3297 //svIkOutPresent
VBC4_FALSE_JUMP LAB1125 //if to false
;
[1:228] ;sfPoseGroupLin(1024 , -svIkEncA5, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 3298 //svIkEncA5
VBC1_NEG
VBC3_PUSH_GLOBAL 64 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:229] ;sfPoseGroupLin(4096 , -svIkEncA6, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 3299 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 64 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:230] ;sfPoseGroupLin(16384 , -svIkEncA7, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 3300 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 64 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:231] ;sfPoseGroupLin(65536 , -svIkEncA8 / 2, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 64 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:232] ;sfPoseGroupLin(67108864 , -svIkEncA8 / 2, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 67108864 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 64 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:233] ;sfPoseGroupLin(262144 , svIkEncA9, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 3302 //svIkEncA9
VBC3_PUSH_GLOBAL 64 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:234] ;sfPoseGroupLin(1048576 , -svIkEncA10, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 3303 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 64 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:235] ;sfPoseGroupLin( 256 , 5145, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 256 
VBC3_PUSH_CONST 5145 
VBC3_PUSH_GLOBAL 64 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB1127 //if to exit
LAB1125: //if else
;else IKerr++;
VBC1_PUSH_2 //IKerr
VBC1_INC
LAB1127: //if exit
[1:239] ;if (selfFirstLegIsRightLeg == 1) sfIkAngle( xtl, -ytl, ztl, xl, -yl, zl, wl );
VBC3_PUSH_GLOBAL 12 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB1170 //if to false
;if (selfFirstLegIsRightLeg == 1) sfIkAngle( xtl, -ytl, ztl, xl, -yl, zl, wl );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 31 //xtl
VBC3_PUSH_GLOBAL 36 //ytl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 40 //ztl
VBC3_PUSH_GLOBAL 41 //xl
VBC3_PUSH_GLOBAL 42 //yl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 43 //zl
VBC3_PUSH_GLOBAL 44 //wl
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
VBC4_JUMP LAB1199 //if to exit
LAB1170: //if else
;else sfIkAngle(xtr, ytr, ztr, xr, yr, zr, -wr);
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 21 //xtr
VBC3_PUSH_GLOBAL 24 //ytr
VBC3_PUSH_GLOBAL 26 //ztr
VBC3_PUSH_GLOBAL 27 //xr
VBC3_PUSH_GLOBAL 28 //yr
VBC3_PUSH_GLOBAL 29 //zr
VBC3_PUSH_GLOBAL 30 //wr
VBC1_NEG_F
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
LAB1199: //if exit
[1:241] ;if (svIkOutPresent) {
VBC3_PUSH_GLOBAL 3297 //svIkOutPresent
VBC4_FALSE_JUMP LAB1354 //if to false
;
[1:243] ;sfPoseGroupLin(2048 , -svIkEncA5, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 3298 //svIkEncA5
VBC1_NEG
VBC3_PUSH_GLOBAL 64 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:244] ;sfPoseGroupLin(8192 , -svIkEncA6, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 3299 //svIkEncA6
VBC1_NEG
VBC3_PUSH_GLOBAL 64 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:245] ;sfPoseGroupLin(32768 , -svIkEncA7, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 3300 //svIkEncA7
VBC1_NEG
VBC3_PUSH_GLOBAL 64 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:246] ;sfPoseGroupLin(131072 , -svIkEncA8 / 2, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 64 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:247] ;sfPoseGroupLin(134217728 , -svIkEncA8 / 2, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 134217728 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC3_PUSH_GLOBAL 64 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:248] ;sfPoseGroupLin(524288 , svIkEncA9, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 3302 //svIkEncA9
VBC3_PUSH_GLOBAL 64 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:249] ;sfPoseGroupLin(2097152 , -svIkEncA10, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 3303 //svIkEncA10
VBC1_NEG
VBC3_PUSH_GLOBAL 64 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:250] ;sfPoseGroupLin(512 , 5145, fps);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 512 
VBC3_PUSH_CONST 5145 
VBC3_PUSH_GLOBAL 64 //fps
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB1356 //if to exit
LAB1354: //if else
;else IKerr++;
VBC1_PUSH_2 //IKerr
VBC1_INC
LAB1356: //if exit
[1:254] ;sfWaitFrame(walking_frame);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC3_PUSH_GLOBAL 65 //walking_frame
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:255] ;return 1;
VBC1_PUSH_1 
VBC2_POP_RESULT 2
VBC1_RETURN
;computeAlphaForWalkFine <void(,int)>
[1:260] ;if (selfFirstLegIsRightLeg == 1) sfIkAngle( xtr, ytr, ztr, xr, yr, zr, wr );
VBC3_PUSH_GLOBAL 12 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB1408 //if to false
;if (selfFirstLegIsRightLeg == 1) sfIkAngle( xtr, ytr, ztr, xr, yr, zr, wr );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 21 //xtr
VBC3_PUSH_GLOBAL 24 //ytr
VBC3_PUSH_GLOBAL 26 //ztr
VBC3_PUSH_GLOBAL 27 //xr
VBC3_PUSH_GLOBAL 28 //yr
VBC3_PUSH_GLOBAL 29 //zr
VBC3_PUSH_GLOBAL 30 //wr
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
VBC4_JUMP LAB1439 //if to exit
LAB1408: //if else
;else sfIkAngle(xtl, -ytl, ztl, xl, -yl, zl, -wl);
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 31 //xtl
VBC3_PUSH_GLOBAL 36 //ytl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 40 //ztl
VBC3_PUSH_GLOBAL 41 //xl
VBC3_PUSH_GLOBAL 42 //yl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 43 //zl
VBC3_PUSH_GLOBAL 44 //wl
VBC1_NEG_F
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
LAB1439: //if exit
[1:263] ;if (svIkOutPresent) {
VBC3_PUSH_GLOBAL 3297 //svIkOutPresent
VBC4_FALSE_JUMP LAB1585 //if to false
;
[1:265] ;sfPoseGroupLin(1024 , -svIkEncA5, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 1024 
VBC3_PUSH_GLOBAL 3298 //svIkEncA5
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:266] ;sfPoseGroupLin(4096 , -svIkEncA6, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 4096 
VBC3_PUSH_GLOBAL 3299 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:267] ;sfPoseGroupLin(16384 , -svIkEncA7, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 16384 
VBC3_PUSH_GLOBAL 3300 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:268] ;sfPoseGroupLin(65536 , -svIkEncA8 / 2, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 65536 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:269] ;sfPoseGroupLin(67108864 , -svIkEncA8 / 2, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 67108864 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:270] ;sfPoseGroupLin(262144 , svIkEncA9, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 262144 
VBC3_PUSH_GLOBAL 3302 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:271] ;sfPoseGroupLin(1048576 , -svIkEncA10, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 1048576 
VBC3_PUSH_GLOBAL 3303 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:272] ;sfPoseGroupLin( 256 , 5145, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 256 
VBC3_PUSH_CONST 5145 
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB1587 //if to exit
LAB1585: //if else
;else IKerr++;
VBC1_PUSH_2 //IKerr
VBC1_INC
LAB1587: //if exit
[1:276] ;if (selfFirstLegIsRightLeg == 1) sfIkAngle( xtl, -ytl, ztl, xl, -yl, zl, wl );
VBC3_PUSH_GLOBAL 12 //selfFirstLegIsRightLeg
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB1630 //if to false
;if (selfFirstLegIsRightLeg == 1) sfIkAngle( xtl, -ytl, ztl, xl, -yl, zl, wl );
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 31 //xtl
VBC3_PUSH_GLOBAL 36 //ytl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 40 //ztl
VBC3_PUSH_GLOBAL 41 //xl
VBC3_PUSH_GLOBAL 42 //yl
VBC1_NEG_F
VBC3_PUSH_GLOBAL 43 //zl
VBC3_PUSH_GLOBAL 44 //wl
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
VBC4_JUMP LAB1659 //if to exit
LAB1630: //if else
;else sfIkAngle(xtr, ytr, ztr, xr, yr, zr, -wr);
VBC5_PUSH_CONST 201 | 0x80000000 //import func index sfIkAngle
VBC3_PUSH_GLOBAL 21 //xtr
VBC3_PUSH_GLOBAL 24 //ytr
VBC3_PUSH_GLOBAL 26 //ztr
VBC3_PUSH_GLOBAL 27 //xr
VBC3_PUSH_GLOBAL 28 //yr
VBC3_PUSH_GLOBAL 29 //zr
VBC3_PUSH_GLOBAL 30 //wr
VBC1_NEG_F
VBC1_CALL7
VBC1_STACK_UP8//remove result, call address and params
LAB1659: //if exit
[1:278] ;if (svIkOutPresent) {
VBC3_PUSH_GLOBAL 3297 //svIkOutPresent
VBC4_FALSE_JUMP LAB1806 //if to false
;
[1:280] ;sfPoseGroupLin(2048 , -svIkEncA5, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 2048 
VBC3_PUSH_GLOBAL 3298 //svIkEncA5
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:281] ;sfPoseGroupLin(8192 , -svIkEncA6, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 8192 
VBC3_PUSH_GLOBAL 3299 //svIkEncA6
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:282] ;sfPoseGroupLin(32768 , -svIkEncA7, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 32768 
VBC3_PUSH_GLOBAL 3300 //svIkEncA7
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:283] ;sfPoseGroupLin(131072 , -svIkEncA8 / 2, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 131072 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:284] ;sfPoseGroupLin(134217728 , -svIkEncA8 / 2, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC5_PUSH_CONST 134217728 
VBC3_PUSH_GLOBAL 3301 //svIkEncA8
VBC1_NEG
VBC1_PUSH_2 
VBC1_DIV
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:285] ;sfPoseGroupLin(524288 , svIkEncA9, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 524288 
VBC3_PUSH_GLOBAL 3302 //svIkEncA9
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:286] ;sfPoseGroupLin(2097152 , -svIkEncA10, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC4_PUSH_CONST 2097152 
VBC3_PUSH_GLOBAL 3303 //svIkEncA10
VBC1_NEG
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
[1:287] ;sfPoseGroupLin(512 , 5145, frames);
VBC5_PUSH_CONST 56 | 0x80000000 //import func index sfPoseGroupLin
VBC3_PUSH_CONST 512 
VBC3_PUSH_CONST 5145 
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL3
VBC1_STACK_UP4//remove result, call address and params
VBC4_JUMP LAB1808 //if to exit
LAB1806: //if else
;else IKerr++;
VBC1_PUSH_2 //IKerr
VBC1_INC
LAB1808: //if exit
[1:291] ;sfWaitFrame(frames);
VBC2_PUSH_CONST 56  //func address sfWaitFrame
VBC2_PUSH_LOCAL 2 //frames
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:294] ;
VBC1_RETURN
;walkInitialPose <void()>
[1:299] ;xtr = xtl = 0;
VBC2_PUSH_CONST 21 //xtr
VBC2_PUSH_CONST 31 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:300] ;xtr_cap = xtl_cap = 0;
VBC2_PUSH_CONST 22 //xtr_cap
VBC2_PUSH_CONST 32 //xtl_cap
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:301] ;for( j = 0; j < selfInitPoses; j++ ) {
VBC2_PUSH_CONST 72 //j
VBC1_PUSH_0 
VBC1_POP
LAB1833: //for condition
VBC3_PUSH_GLOBAL 72 //j
VBC3_PUSH_GLOBAL 15 //selfInitPoses
VBC1_LESS
VBC4_FALSE_JUMP LAB1913 //to for exit
;
[1:303] ;ztr = ztr0 - j * stepZtr;
VBC2_PUSH_CONST 26 //ztr
VBC3_PUSH_GLOBAL 57 //ztr0
VBC3_PUSH_GLOBAL 72 //j
VBC3_PUSH_GLOBAL 59 //stepZtr
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:304] ;ztl = ztl0 - j * stepZtl;
VBC2_PUSH_CONST 40 //ztl
VBC3_PUSH_GLOBAL 58 //ztl0
VBC3_PUSH_GLOBAL 72 //j
VBC3_PUSH_GLOBAL 60 //stepZtl
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:305] ;ytr = -d10 - j * stepYtr;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 46 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 72 //j
VBC3_PUSH_GLOBAL 61 //stepYtr
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:306] ;ytl =  d10 - j * stepYtl;
VBC2_PUSH_CONST 36 //ytl
VBC3_PUSH_GLOBAL 46 //d10
VBC3_PUSH_GLOBAL 72 //j
VBC3_PUSH_GLOBAL 62 //stepYtl
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:308] ;computeAlphaForWalk();
VBC3_PUSH_CONST 899  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB1906: //for step
VBC2_PUSH_CONST 72 //j
VBC1_INC
VBC4_JUMP LAB1833 //to condition
LAB1913: //for exit
[1:317] ;
VBC1_RETURN
;walkInitialPoseFine <void()>
[1:318] ;xtr = xtl = 0;
VBC2_PUSH_CONST 21 //xtr
VBC2_PUSH_CONST 31 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:319] ;ztr = ztl = -gaitHeight;
VBC2_PUSH_CONST 26 //ztr
VBC2_PUSH_CONST 40 //ztl
VBC3_PUSH_GLOBAL 51 //gaitHeight
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:320] ;ytr = -d10 - amplitude / 4.0;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 46 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 47 //amplitude
VBC5_PUSH_CONST 1082130432 
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:321] ;ytl =  d10 - amplitude / 4.0;
VBC2_PUSH_CONST 36 //ytl
VBC3_PUSH_GLOBAL 46 //d10
VBC3_PUSH_GLOBAL 47 //amplitude
VBC5_PUSH_CONST 1082130432 
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_POP
[1:322] ;computeAlphaForWalkFine( 40 );
VBC3_PUSH_CONST 1367  //func address computeAlphaForWalkFine
VBC2_PUSH_CONST 40 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:326] ;
VBC1_RETURN
;walkFinalPose <void()>
[1:327] ;for( j = 0; j < selfInitPoses; j++ ) {
VBC2_PUSH_CONST 72 //j
VBC1_PUSH_0 
VBC1_POP
LAB1976: //for condition
VBC3_PUSH_GLOBAL 72 //j
VBC3_PUSH_GLOBAL 15 //selfInitPoses
VBC1_LESS
VBC4_FALSE_JUMP LAB2079 //to for exit
;
[1:329] ;ztr = -gaitHeight + (j+1) * stepZtr;
VBC2_PUSH_CONST 26 //ztr
VBC3_PUSH_GLOBAL 51 //gaitHeight
VBC1_NEG_F
VBC3_PUSH_GLOBAL 72 //j
VBC1_PUSH_1 
VBC1_ADD
VBC3_PUSH_GLOBAL 59 //stepZtr
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:330] ;ztl = -gaitHeight + (j+1) * stepZtr;
VBC2_PUSH_CONST 40 //ztl
VBC3_PUSH_GLOBAL 51 //gaitHeight
VBC1_NEG_F
VBC3_PUSH_GLOBAL 72 //j
VBC1_PUSH_1 
VBC1_ADD
VBC3_PUSH_GLOBAL 59 //stepZtr
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:331] ;ytr = -d10 + (selfInitPoses - (j+1)) * stepYtr;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 46 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 15 //selfInitPoses
VBC3_PUSH_GLOBAL 72 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_SUB
VBC3_PUSH_GLOBAL 61 //stepYtr
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:332] ;ytl =  d10 + (selfInitPoses - (j+1)) * stepYtl;
VBC2_PUSH_CONST 36 //ytl
VBC3_PUSH_GLOBAL 46 //d10
VBC3_PUSH_GLOBAL 15 //selfInitPoses
VBC3_PUSH_GLOBAL 72 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_SUB
VBC3_PUSH_GLOBAL 62 //stepYtl
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:334] ;if( !computeAlphaForWalk() )
VBC3_PUSH_CONST 899  //func address computeAlphaForWalk
VBC1_CALL0
//remove call address and params
VBC1_LNOT
VBC4_FALSE_JUMP LAB2072 //if to false
;return;
VBC1_RETURN
LAB2072: //if else
LAB2072: //for step
VBC2_PUSH_CONST 72 //j
VBC1_INC
VBC4_JUMP LAB1976 //to condition
LAB2079: //for exit
[1:339] ;
VBC1_RETURN
;walkFinalPoseFine <void()>
[1:340] ;xtr = xtl = 0;
VBC2_PUSH_CONST 21 //xtr
VBC2_PUSH_CONST 31 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:341] ;ztr = ztl = -(svIkC5+svIkA6+svIkA7+svIkA8+svIkA9+svIkB10 - 1);
VBC2_PUSH_CONST 26 //ztr
VBC2_PUSH_CONST 40 //ztl
VBC3_PUSH_GLOBAL 3277 //svIkC5
VBC3_PUSH_GLOBAL 3278 //svIkA6
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3279 //svIkA7
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3280 //svIkA8
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3281 //svIkA9
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 3283 //svIkB10
VBC1_ADD_FF
VBC1_PUSH_1 
VBC1_SUB_FI
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:342] ;ytr = -d10;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 46 //d10
VBC1_NEG_F
VBC1_POP
[1:343] ;ytl =  d10;
VBC2_PUSH_CONST 36 //ytl
VBC3_PUSH_GLOBAL 46 //d10
VBC1_POP
[1:344] ;computeAlphaForWalkFine( 40 );
VBC3_PUSH_CONST 1367  //func address computeAlphaForWalkFine
VBC2_PUSH_CONST 40 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:347] ;
VBC1_RETURN
;walkInit <void()>
[1:358] ;correctedStepLenght = stepLength + selfMotionShiftCorrectionX;
VBC2_PUSH_CONST 53 //correctedStepLenght
VBC3_PUSH_GLOBAL 3 //stepLength
VBC3_PUSH_GLOBAL 6 //selfMotionShiftCorrectionX
VBC1_ADD_FF
VBC1_POP
[1:359] ;correctedStepLenghtHalf = correctedStepLenght / 2;
VBC2_PUSH_CONST 54 //correctedStepLenghtHalf
VBC3_PUSH_GLOBAL 53 //correctedStepLenght
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_POP
[1:360] ;correctedSideLenght = sideLength - selfMotionShiftCorrectionY;
VBC2_PUSH_CONST 55 //correctedSideLenght
VBC3_PUSH_GLOBAL 4 //sideLength
VBC3_PUSH_GLOBAL 7 //selfMotionShiftCorrectionY
VBC1_SUB_FF
VBC1_POP
[1:361] ;correctedSideLenghtHalf = correctedSideLenght / 2;
VBC2_PUSH_CONST 56 //correctedSideLenghtHalf
VBC3_PUSH_GLOBAL 55 //correctedSideLenght
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_POP
[1:364] ;correctedRotation = -rotation *0.25 * 0.23 / ( rotation <= 0 ? rotationYieldRight : rotationYieldLeft);
VBC2_PUSH_CONST 77 //correctedRotation
VBC3_PUSH_GLOBAL 5 //rotation
VBC1_NEG_F
VBC5_PUSH_CONST 1048576000 
VBC1_MUL_FF
VBC5_PUSH_CONST 1047233823 
VBC1_MUL_FF
VBC3_PUSH_GLOBAL 5 //rotation
VBC1_PUSH_0 
VBC1_LESS_EQU_FI
VBC4_FALSE_JUMP LAB2210
VBC3_PUSH_GLOBAL 16 //rotationYieldRight
VBC4_JUMP LAB2213
LAB2210:
VBC3_PUSH_GLOBAL 17 //rotationYieldLeft
LAB2213:
VBC1_DIV_FF
VBC1_POP
[1:366] ;xtl0 = correctedStepLenght * (1 - (fr1 + fr2 + 2.0 * framestep) / (2 * fr1 + fr2 + 2.0 * framestep)) * 1.5;
VBC2_PUSH_CONST 73 //xtl0
VBC3_PUSH_GLOBAL 53 //correctedStepLenght
VBC1_PUSH_1 
VBC3_PUSH_GLOBAL 49 //fr1
VBC3_PUSH_GLOBAL 50 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 49 //fr1
VBC1_MUL
VBC3_PUSH_GLOBAL 50 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_DIV_FF
VBC1_SUB_IF
VBC1_MUL_FF
VBC5_PUSH_CONST 1069547520 
VBC1_MUL_FF
VBC1_POP
[1:367] ;xtr0 = correctedStepLenght * (0.5 - (fr1 + fr2 + 2.0 * framestep) / (2 * fr1 + fr2 + 2.0 * framestep));
VBC2_PUSH_CONST 74 //xtr0
VBC3_PUSH_GLOBAL 53 //correctedStepLenght
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 49 //fr1
VBC3_PUSH_GLOBAL 50 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 49 //fr1
VBC1_MUL
VBC3_PUSH_GLOBAL 50 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_DIV_FF
VBC1_SUB_FF
VBC1_MUL_FF
VBC1_POP
[1:368] ;dx0Typical = correctedStepLenght / (2 * fr1 + fr2 + 2.0 * framestep) * framestep;
VBC2_PUSH_CONST 75 //dx0Typical
VBC3_PUSH_GLOBAL 53 //correctedStepLenght
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 49 //fr1
VBC1_MUL
VBC3_PUSH_GLOBAL 50 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_MUL_FI
VBC1_POP
[1:369] ;dy0Typical = correctedSideLenght / (2.0 * fr2) * framestep;
VBC2_PUSH_CONST 76 //dy0Typical
VBC3_PUSH_GLOBAL 55 //correctedSideLenght
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 50 //fr2
VBC1_MUL_FI
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_MUL_FI
VBC1_POP
[1:372] ;xr = xl = bodyTiltAtWalk;
VBC2_PUSH_CONST 27 //xr
VBC2_PUSH_CONST 41 //xl
VBC3_PUSH_GLOBAL 66 //bodyTiltAtWalk
VBC1_STORE
VBC1_POP
[1:373] ;yl =  solyLandingSkew;
VBC2_PUSH_CONST 42 //yl
VBC3_PUSH_GLOBAL 67 //solyLandingSkew
VBC1_POP
[1:374] ;yr = -solyLandingSkew;
VBC2_PUSH_CONST 28 //yr
VBC3_PUSH_GLOBAL 67 //solyLandingSkew
VBC1_NEG_F
VBC1_POP
[1:375] ;fase_offset = 0.7;
VBC2_PUSH_CONST 79 //fase_offset
VBC5_PUSH_CONST 1060320051 
VBC1_POP
[1:380] ;
VBC1_RETURN
;walkPhasa1 <void()>
[1:381] ;ztl = ztr = -gaitHeight;
VBC2_PUSH_CONST 40 //ztl
VBC2_PUSH_CONST 26 //ztr
VBC3_PUSH_GLOBAL 51 //gaitHeight
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:382] ;for( j = 0; j < fr1; j += framestep ) {
VBC2_PUSH_CONST 72 //j
VBC1_PUSH_0 
VBC1_POP
LAB2412: //for condition
VBC3_PUSH_GLOBAL 72 //j
VBC3_PUSH_GLOBAL 49 //fr1
VBC1_LESS
VBC4_FALSE_JUMP LAB2593 //to for exit
;
[1:383] ;if (j == framestep && x_cap ) xl = bodyTiltAtWalk;
VBC3_PUSH_GLOBAL 72 //j
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB2442
VBC3_PUSH_GLOBAL 19 //x_cap
VBC4_FALSE_JUMP_KEEP LAB2442
VBC1_PUSH_1
LAB2442:
VBC4_FALSE_JUMP LAB2452 //if to false
;if (j == framestep && x_cap ) xl = bodyTiltAtWalk;
VBC2_PUSH_CONST 41 //xl
VBC3_PUSH_GLOBAL 66 //bodyTiltAtWalk
VBC1_POP
LAB2452: //if else
[1:384] ;s = amplitude * (0.5 - (j * 1.0 + framestep) / fr1);
VBC2_PUSH_CONST 78 //s
VBC3_PUSH_GLOBAL 47 //amplitude
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 72 //j
VBC5_PUSH_CONST 1065353216 
VBC1_MUL_IF
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_ADD_FI
VBC3_PUSH_GLOBAL 49 //fr1
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_MUL_FF
VBC1_POP
[1:385] ;ytr = s - d10 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 78 //s
VBC3_PUSH_GLOBAL 46 //d10
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 56 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
[1:386] ;ytl = s + d10 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 36 //ytl
VBC3_PUSH_GLOBAL 78 //s
VBC3_PUSH_GLOBAL 46 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 56 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
[1:387] ;if( stepType == 0 ) continue;
VBC3_PUSH_GLOBAL 63 //stepType
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB2523 //if to false
;if( stepType == 0 ) continue;
VBC4_JUMP LAB2580 //to loop condition
LAB2523: //if else
[1:388] ;xtl = xtl0 - dx0Typical - dx0Typical * j / framestep + xtl_cap;
VBC2_PUSH_CONST 31 //xtl
VBC3_PUSH_GLOBAL 73 //xtl0
VBC3_PUSH_GLOBAL 75 //dx0Typical
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 75 //dx0Typical
VBC3_PUSH_GLOBAL 72 //j
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_DIV_FI
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 32 //xtl_cap
VBC1_ADD_FF
VBC1_POP
[1:389] ;xtr = xtr0 - dx0Typical - dx0Typical * j / framestep + xtr_cap;
VBC2_PUSH_CONST 21 //xtr
VBC3_PUSH_GLOBAL 74 //xtr0
VBC3_PUSH_GLOBAL 75 //dx0Typical
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 75 //dx0Typical
VBC3_PUSH_GLOBAL 72 //j
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_DIV_FI
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 22 //xtr_cap
VBC1_ADD_FF
VBC1_POP
[1:391] ;computeAlphaForWalk();
VBC3_PUSH_CONST 899  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB2580: //for step
VBC2_PUSH_CONST 72 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB2412 //to condition
LAB2593: //for exit
[1:400] ;
VBC1_RETURN
;walkPhasa3 <void()>
[1:401] ;ztl = ztr = -gaitHeight;
VBC2_PUSH_CONST 40 //ztl
VBC2_PUSH_CONST 26 //ztr
VBC3_PUSH_GLOBAL 51 //gaitHeight
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:402] ;for( j = 0; j < fr1; j += framestep ) {
VBC2_PUSH_CONST 72 //j
VBC1_PUSH_0 
VBC1_POP
LAB2608: //for condition
VBC3_PUSH_GLOBAL 72 //j
VBC3_PUSH_GLOBAL 49 //fr1
VBC1_LESS
VBC4_FALSE_JUMP LAB2743 //to for exit
;
[1:403] ;if (j == framestep && x_cap) xr = bodyTiltAtWalk;
VBC3_PUSH_GLOBAL 72 //j
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB2638
VBC3_PUSH_GLOBAL 19 //x_cap
VBC4_FALSE_JUMP_KEEP LAB2638
VBC1_PUSH_1
LAB2638:
VBC4_FALSE_JUMP LAB2648 //if to false
;if (j == framestep && x_cap) xr = bodyTiltAtWalk;
VBC2_PUSH_CONST 27 //xr
VBC3_PUSH_GLOBAL 66 //bodyTiltAtWalk
VBC1_POP
LAB2648: //if else
[1:404] ;s = -amplitude * (0.5 - (j * 1.0 + framestep) / fr1);
VBC2_PUSH_CONST 78 //s
VBC3_PUSH_GLOBAL 47 //amplitude
VBC1_NEG_F
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 72 //j
VBC5_PUSH_CONST 1065353216 
VBC1_MUL_IF
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_ADD_FI
VBC3_PUSH_GLOBAL 49 //fr1
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_MUL_FF
VBC1_POP
[1:405] ;ytr = s - d10 - correctedSideLenghtHalf;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 78 //s
VBC3_PUSH_GLOBAL 46 //d10
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 56 //correctedSideLenghtHalf
VBC1_SUB_FF
VBC1_POP
[1:406] ;ytl = s + d10 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 36 //ytl
VBC3_PUSH_GLOBAL 78 //s
VBC3_PUSH_GLOBAL 46 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 56 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
[1:407] ;xtl -= dx0Typical;
VBC2_PUSH_CONST 31 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 75 //dx0Typical
VBC1_SUB_FF
VBC1_POP
[1:408] ;xtr -= dx0Typical;
VBC2_PUSH_CONST 21 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 75 //dx0Typical
VBC1_SUB_FF
VBC1_POP
[1:410] ;computeAlphaForWalk();
VBC3_PUSH_CONST 899  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB2730: //for step
VBC2_PUSH_CONST 72 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB2608 //to condition
LAB2743: //for exit
[1:418] ;
VBC1_RETURN
;walkPhasa2 <void()>
[1:423] ;ztr = -gaitHeight + stepHeight;
VBC2_PUSH_CONST 26 //ztr
VBC3_PUSH_GLOBAL 51 //gaitHeight
VBC1_NEG_F
VBC3_PUSH_GLOBAL 52 //stepHeight
VBC1_ADD_FF
VBC1_POP
[1:424] ;dy = correctedSideLenght * framestep / (fr2 - 2.0 * framestep);
VBC2_PUSH_CONST 81 //dy
VBC3_PUSH_GLOBAL 55 //correctedSideLenght
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 50 //fr2
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_DIV_FF
VBC1_POP
[1:425] ;stepRotation = correctedRotation / (fr2 - 2.0 * framestep) * 2;
VBC2_PUSH_CONST 82 //stepRotation
VBC3_PUSH_GLOBAL 77 //correctedRotation
VBC3_PUSH_GLOBAL 50 //fr2
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_DIV_FF
VBC1_PUSH_2 
VBC1_MUL_FI
VBC1_POP
[1:427] ;if( stepType == 0 )
VBC3_PUSH_GLOBAL 63 //stepType
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB2840 //if to false
;dx = correctedStepLenght / (fr2 - 2.0 * framestep) * framestep / 2;
VBC2_PUSH_CONST 80 //dx
VBC3_PUSH_GLOBAL 53 //correctedStepLenght
VBC3_PUSH_GLOBAL 50 //fr2
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_MUL_FI
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_POP
VBC4_JUMP LAB2864 //if to exit
LAB2840: //if else
;dx = correctedStepLenght / (fr2 - 2.0 * framestep) * framestep;
VBC2_PUSH_CONST 80 //dx
VBC3_PUSH_GLOBAL 53 //correctedStepLenght
VBC3_PUSH_GLOBAL 50 //fr2
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_MUL_FI
VBC1_POP
LAB2864: //if exit
[1:432] ;for( j = 0; j < fr2; j += framestep ) {
VBC2_PUSH_CONST 72 //j
VBC1_PUSH_0 
VBC1_POP
LAB2868: //for condition
VBC3_PUSH_GLOBAL 72 //j
VBC3_PUSH_GLOBAL 50 //fr2
VBC1_LESS
VBC4_FALSE_JUMP LAB3198 //to for exit
;
[1:433] ;if( j == 0 ) {
VBC3_PUSH_GLOBAL 72 //j
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB2915 //if to false
;
[1:434] ;xtr -= dx0Typical;
VBC2_PUSH_CONST 21 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 75 //dx0Typical
VBC1_SUB_FF
VBC1_POP
[1:435] ;ytr  = s - d10 + dy0Typical;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 78 //s
VBC3_PUSH_GLOBAL 46 //d10
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 76 //dy0Typical
VBC1_ADD_FF
VBC1_POP
VBC4_JUMP LAB3162 //if to exit
LAB2915: //if else
;else if( j == (fr2 - framestep) ) {
VBC3_PUSH_GLOBAL 72 //j
VBC3_PUSH_GLOBAL 50 //fr2
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB2967 //if to false
;
[1:438] ;xtr -= dx0Typical;
VBC2_PUSH_CONST 21 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 75 //dx0Typical
VBC1_SUB_FF
VBC1_POP
[1:439] ;ytr  = s - d10 + 2 * dy0Typical - correctedSideLenght + ytr_cap;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 78 //s
VBC3_PUSH_GLOBAL 46 //d10
VBC1_SUB_FF
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 76 //dy0Typical
VBC1_MUL_IF
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 55 //correctedSideLenght
VBC1_SUB_FF
VBC3_PUSH_GLOBAL 25 //ytr_cap
VBC1_ADD_FF
VBC1_POP
VBC4_JUMP LAB3162 //if to exit
LAB2967: //if else
;
[1:442] ;xtr += dx;
VBC2_PUSH_CONST 21 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 80 //dx
VBC1_ADD_FF
VBC1_POP
[1:443] ;if (j == (fr2 - framestep * 2) && x_cap) {
VBC3_PUSH_GLOBAL 72 //j
VBC3_PUSH_GLOBAL 50 //fr2
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_PUSH_2 
VBC1_MUL
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB3001
VBC3_PUSH_GLOBAL 19 //x_cap
VBC4_FALSE_JUMP_KEEP LAB3001
VBC1_PUSH_1
LAB3001:
VBC4_FALSE_JUMP LAB3119 //if to false
;
[1:444] ;quaternion_to_euler_angle();
VBC2_PUSH_CONST 108  //func address quaternion_to_euler_angle
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:445] ;xtr_cap = (pitch > 0.0 ? pitch * gaitHeight : 0.0);
VBC2_PUSH_CONST 22 //xtr_cap
VBC3_PUSH_GLOBAL 70 //pitch
VBC1_PUSH_0 
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB3031
VBC3_PUSH_GLOBAL 70 //pitch
VBC3_PUSH_GLOBAL 51 //gaitHeight
VBC1_MUL_FF
VBC4_JUMP LAB3032
LAB3031:
VBC1_PUSH_0 
LAB3032:
VBC1_POP
[1:446] ;xtr_cap = (xtr_cap > xt_cap_limit ? xt_cap_limit : xtr_cap);
VBC2_PUSH_CONST 22 //xtr_cap
VBC3_PUSH_GLOBAL 22 //xtr_cap
VBC3_PUSH_GLOBAL 34 //xt_cap_limit
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB3053
VBC3_PUSH_GLOBAL 34 //xt_cap_limit
VBC4_JUMP LAB3056
LAB3053:
VBC3_PUSH_GLOBAL 22 //xtr_cap
LAB3056:
VBC1_POP
[1:447] ;xtr += xtr_cap;
VBC2_PUSH_CONST 21 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 22 //xtr_cap
VBC1_ADD_FF
VBC1_POP
[1:448] ;xr_cap = (pitch > 0.0 ? pitch : 0.0);
VBC2_PUSH_CONST 23 //xr_cap
VBC3_PUSH_GLOBAL 70 //pitch
VBC1_PUSH_0 
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB3084
VBC3_PUSH_GLOBAL 70 //pitch
VBC4_JUMP LAB3085
LAB3084:
VBC1_PUSH_0 
LAB3085:
VBC1_POP
[1:449] ;xr_cap = (xr_cap > x_cap_limit ? x_cap_limit : xr_cap);
VBC2_PUSH_CONST 23 //xr_cap
VBC3_PUSH_GLOBAL 23 //xr_cap
VBC3_PUSH_GLOBAL 35 //x_cap_limit
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB3106
VBC3_PUSH_GLOBAL 35 //x_cap_limit
VBC4_JUMP LAB3109
LAB3106:
VBC3_PUSH_GLOBAL 23 //xr_cap
LAB3109:
VBC1_POP
[1:450] ;xr += xr_cap;
VBC2_PUSH_CONST 27 //xr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 23 //xr_cap
VBC1_ADD_FF
VBC1_POP
LAB3119: //if else
[1:458] ;ytr  = s - 64 + dy0Typical - dy * (j / 2);
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 78 //s
VBC2_PUSH_CONST 64 
VBC1_SUB_FI
VBC3_PUSH_GLOBAL 76 //dy0Typical
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 81 //dy
VBC3_PUSH_GLOBAL 72 //j
VBC1_PUSH_2 
VBC1_DIV
VBC1_MUL_FI
VBC1_SUB_FF
VBC1_POP
[1:459] ;wr = correctedRotation - j * stepRotation;
VBC2_PUSH_CONST 30 //wr
VBC3_PUSH_GLOBAL 77 //correctedRotation
VBC3_PUSH_GLOBAL 72 //j
VBC3_PUSH_GLOBAL 82 //stepRotation
VBC1_MUL_IF
VBC1_SUB_FF
VBC1_POP
[1:460] ;wl = wr;
VBC2_PUSH_CONST 44 //wl
VBC3_PUSH_GLOBAL 30 //wr
VBC1_POP
LAB3162: //if exit
LAB3162: //if exit
[1:462] ;xtl -= dx0Typical;
VBC2_PUSH_CONST 31 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 75 //dx0Typical
VBC1_SUB_FF
VBC1_POP
[1:463] ;ytl += dy0Typical;
VBC2_PUSH_CONST 36 //ytl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 76 //dy0Typical
VBC1_ADD_FF
VBC1_POP
[1:466] ;computeAlphaForWalk();
VBC3_PUSH_CONST 899  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB3185: //for step
VBC2_PUSH_CONST 72 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB2868 //to condition
LAB3198: //for exit
[1:470] ;
VBC1_RETURN
;walkPhasa4 <void()>
[1:474] ;stepRotation = correctedRotation / (fr2 - 2.0 * framestep) * 2;
VBC2_PUSH_CONST 82 //stepRotation
VBC3_PUSH_GLOBAL 77 //correctedRotation
VBC3_PUSH_GLOBAL 50 //fr2
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_DIV_FF
VBC1_PUSH_2 
VBC1_MUL_FI
VBC1_POP
[1:475] ;ztl = -gaitHeight + stepHeight;
VBC2_PUSH_CONST 40 //ztl
VBC3_PUSH_GLOBAL 51 //gaitHeight
VBC1_NEG_F
VBC3_PUSH_GLOBAL 52 //stepHeight
VBC1_ADD_FF
VBC1_POP
[1:476] ;if( stepType == 1 ) {
VBC3_PUSH_GLOBAL 63 //stepType
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP LAB3313 //if to false
;
[1:477] ;dx0 = dx0Typical * 4 / fr2;
VBC2_PUSH_CONST 83 //dx0
VBC3_PUSH_GLOBAL 75 //dx0Typical
VBC2_PUSH_CONST 4 
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 50 //fr2
VBC1_DIV_FI
VBC1_POP
[1:478] ;dx = (correctedStepLenght * (fr1 + fr2) / (4 * fr1) + 2.0 * dx0) / (fr2 - 2.0 * framestep) * framestep / 1.23076941;
VBC2_PUSH_CONST 80 //dx
VBC3_PUSH_GLOBAL 53 //correctedStepLenght
VBC3_PUSH_GLOBAL 49 //fr1
VBC3_PUSH_GLOBAL 50 //fr2
VBC1_ADD
VBC1_MUL_FI
VBC2_PUSH_CONST 4 
VBC3_PUSH_GLOBAL 49 //fr1
VBC1_MUL
VBC1_DIV_FI
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 83 //dx0
VBC1_MUL_FF
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 50 //fr2
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_MUL_FI
VBC5_PUSH_CONST 1067289050 
VBC1_DIV_FF
VBC1_POP
VBC4_JUMP LAB3343 //if to exit
LAB3313: //if else
;
[1:481] ;dx = correctedStepLenght / (fr2 - 2.0 * framestep) * framestep;
VBC2_PUSH_CONST 80 //dx
VBC3_PUSH_GLOBAL 53 //correctedStepLenght
VBC3_PUSH_GLOBAL 50 //fr2
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_MUL_FI
VBC1_SUB_IF
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_MUL_FI
VBC1_POP
[1:482] ;dx0 = dx0Typical;
VBC2_PUSH_CONST 83 //dx0
VBC3_PUSH_GLOBAL 75 //dx0Typical
VBC1_POP
LAB3343: //if exit
[1:484] ;for( j = 0; j < fr2; j += framestep ) {
VBC2_PUSH_CONST 72 //j
VBC1_PUSH_0 
VBC1_POP
LAB3347: //for condition
VBC3_PUSH_GLOBAL 72 //j
VBC3_PUSH_GLOBAL 50 //fr2
VBC1_LESS
VBC4_FALSE_JUMP LAB3702 //to for exit
;
[1:485] ;if( stepType == 1 && j == (fr2 - framestep) ) {
VBC3_PUSH_GLOBAL 63 //stepType
VBC1_PUSH_1 
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB3383
VBC3_PUSH_GLOBAL 72 //j
VBC3_PUSH_GLOBAL 50 //fr2
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB3383
VBC1_PUSH_1
LAB3383:
VBC4_FALSE_JUMP LAB3404 //if to false
;
[1:486] ;ztl = -gaitHeight;
VBC2_PUSH_CONST 40 //ztl
VBC3_PUSH_GLOBAL 51 //gaitHeight
VBC1_NEG_F
VBC1_POP
[1:487] ;ytl = s + d10;
VBC2_PUSH_CONST 36 //ytl
VBC3_PUSH_GLOBAL 78 //s
VBC3_PUSH_GLOBAL 46 //d10
VBC1_ADD_FF
VBC1_POP
LAB3404: //if else
[1:489] ;if( j == 0 ) {
VBC3_PUSH_GLOBAL 72 //j
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB3439 //if to false
;
[1:490] ;xtl -= dx0;
VBC2_PUSH_CONST 31 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 83 //dx0
VBC1_SUB_FF
VBC1_POP
[1:491] ;ytl  = s + 64 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 36 //ytl
VBC3_PUSH_GLOBAL 78 //s
VBC2_PUSH_CONST 64 
VBC1_ADD_FI
VBC3_PUSH_GLOBAL 56 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
VBC4_JUMP LAB3666 //if to exit
LAB3439: //if else
;else if( j == (fr2 - framestep)) {
VBC3_PUSH_GLOBAL 72 //j
VBC3_PUSH_GLOBAL 50 //fr2
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB3481 //if to false
;
[1:494] ;xtl -= dx0;
VBC2_PUSH_CONST 31 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 83 //dx0
VBC1_SUB_FF
VBC1_POP
[1:495] ;ytl  = s + d10 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 36 //ytl
VBC3_PUSH_GLOBAL 78 //s
VBC3_PUSH_GLOBAL 46 //d10
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 56 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
VBC4_JUMP LAB3666 //if to exit
LAB3481: //if else
;
[1:498] ;xtl += dx;
VBC2_PUSH_CONST 31 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 80 //dx
VBC1_ADD_FF
VBC1_POP
[1:499] ;if (j == (fr2 - framestep * 2) && x_cap) {
VBC3_PUSH_GLOBAL 72 //j
VBC3_PUSH_GLOBAL 50 //fr2
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_PUSH_2 
VBC1_MUL
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP_KEEP LAB3515
VBC3_PUSH_GLOBAL 19 //x_cap
VBC4_FALSE_JUMP_KEEP LAB3515
VBC1_PUSH_1
LAB3515:
VBC4_FALSE_JUMP LAB3633 //if to false
;
[1:500] ;quaternion_to_euler_angle();
VBC2_PUSH_CONST 108  //func address quaternion_to_euler_angle
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:501] ;xtl_cap = (pitch > 0.0 ? pitch * gaitHeight : 0.0);
VBC2_PUSH_CONST 32 //xtl_cap
VBC3_PUSH_GLOBAL 70 //pitch
VBC1_PUSH_0 
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB3545
VBC3_PUSH_GLOBAL 70 //pitch
VBC3_PUSH_GLOBAL 51 //gaitHeight
VBC1_MUL_FF
VBC4_JUMP LAB3546
LAB3545:
VBC1_PUSH_0 
LAB3546:
VBC1_POP
[1:502] ;xtl_cap = (xtl_cap > xt_cap_limit ? xt_cap_limit : xtl_cap);
VBC2_PUSH_CONST 32 //xtl_cap
VBC3_PUSH_GLOBAL 32 //xtl_cap
VBC3_PUSH_GLOBAL 34 //xt_cap_limit
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB3567
VBC3_PUSH_GLOBAL 34 //xt_cap_limit
VBC4_JUMP LAB3570
LAB3567:
VBC3_PUSH_GLOBAL 32 //xtl_cap
LAB3570:
VBC1_POP
[1:503] ;xtl += xtl_cap;
VBC2_PUSH_CONST 31 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 32 //xtl_cap
VBC1_ADD_FF
VBC1_POP
[1:504] ;xl_cap = (pitch > 0.0 ? pitch : 0.0);
VBC2_PUSH_CONST 33 //xl_cap
VBC3_PUSH_GLOBAL 70 //pitch
VBC1_PUSH_0 
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB3598
VBC3_PUSH_GLOBAL 70 //pitch
VBC4_JUMP LAB3599
LAB3598:
VBC1_PUSH_0 
LAB3599:
VBC1_POP
[1:505] ;xl_cap = (xl_cap > x_cap_limit ? x_cap_limit : xl_cap);
VBC2_PUSH_CONST 33 //xl_cap
VBC3_PUSH_GLOBAL 33 //xl_cap
VBC3_PUSH_GLOBAL 35 //x_cap_limit
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB3620
VBC3_PUSH_GLOBAL 35 //x_cap_limit
VBC4_JUMP LAB3623
LAB3620:
VBC3_PUSH_GLOBAL 33 //xl_cap
LAB3623:
VBC1_POP
[1:506] ;xl += xl_cap;
VBC2_PUSH_CONST 41 //xl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 33 //xl_cap
VBC1_ADD_FF
VBC1_POP
LAB3633: //if else
[1:508] ;ytl  = s + 64 + correctedSideLenghtHalf;
VBC2_PUSH_CONST 36 //ytl
VBC3_PUSH_GLOBAL 78 //s
VBC2_PUSH_CONST 64 
VBC1_ADD_FI
VBC3_PUSH_GLOBAL 56 //correctedSideLenghtHalf
VBC1_ADD_FF
VBC1_POP
[1:509] ;wr = j * stepRotation - correctedRotation;
VBC2_PUSH_CONST 30 //wr
VBC3_PUSH_GLOBAL 72 //j
VBC3_PUSH_GLOBAL 82 //stepRotation
VBC1_MUL_IF
VBC3_PUSH_GLOBAL 77 //correctedRotation
VBC1_SUB_FF
VBC1_POP
[1:510] ;wl = wr;
VBC2_PUSH_CONST 44 //wl
VBC3_PUSH_GLOBAL 30 //wr
VBC1_POP
LAB3666: //if exit
LAB3666: //if exit
[1:512] ;xtr -= dx0;
VBC2_PUSH_CONST 21 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 83 //dx0
VBC1_SUB_FF
VBC1_POP
[1:513] ;ytr += dy0Typical;
VBC2_PUSH_CONST 24 //ytr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 76 //dy0Typical
VBC1_ADD_FF
VBC1_POP
[1:516] ;computeAlphaForWalk();
VBC3_PUSH_CONST 899  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB3689: //for step
VBC2_PUSH_CONST 72 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB3347 //to condition
LAB3702: //for exit
[1:520] ;
VBC1_RETURN
;walkCycle <void(,int)>
VBC2_STACK -4//local vars 4
[1:524] ;
[1:524] ;float xrOld = xr;
VBC2_PUSH_B_OFFSET -1 //xrOld
VBC3_PUSH_GLOBAL 27 //xr
VBC1_POP
[1:525] ;
[1:525] ;float yrOld = yr;
VBC2_PUSH_B_OFFSET -2 //yrOld
VBC3_PUSH_GLOBAL 28 //yr
VBC1_POP
[1:526] ;
[1:526] ;float xlOld = xl;
VBC2_PUSH_B_OFFSET -3 //xlOld
VBC3_PUSH_GLOBAL 41 //xl
VBC1_POP
[1:527] ;
[1:527] ;float ylOld = yl;
VBC2_PUSH_B_OFFSET -4 //ylOld
VBC3_PUSH_GLOBAL 42 //yl
VBC1_POP
[1:530] ;walkInit();
VBC3_PUSH_CONST 2140  //func address walkInit
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:531] ;walkPhasa1();
VBC3_PUSH_CONST 2398  //func address walkPhasa1
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:532] ;walkPhasa2();
VBC3_PUSH_CONST 2744  //func address walkPhasa2
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:533] ;if (half == 0){
VBC2_PUSH_LOCAL 2 //half
VBC1_PUSH_0 
VBC1_EQU
VBC4_FALSE_JUMP LAB3762 //if to false
;
[1:534] ;walkPhasa3();
VBC3_PUSH_CONST 2594  //func address walkPhasa3
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:535] ;walkPhasa4();
VBC3_PUSH_CONST 3199  //func address walkPhasa4
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB3762: //if else
[1:539] ;xr = xrOld;
VBC2_PUSH_CONST 27 //xr
VBC2_PUSH_LOCAL -1 //xrOld
VBC1_POP
[1:540] ;yr = yrOld;
VBC2_PUSH_CONST 28 //yr
VBC2_PUSH_LOCAL -2 //yrOld
VBC1_POP
[1:541] ;xl = xlOld;
VBC2_PUSH_CONST 41 //xl
VBC2_PUSH_LOCAL -3 //xlOld
VBC1_POP
[1:542] ;yl = ylOld;
VBC2_PUSH_CONST 42 //yl
VBC2_PUSH_LOCAL -4 //ylOld
VBC1_POP
[1:545] ;
VBC1_RETURN
;stabilizeRotationByIMU <void()>
[1:547] ;sfQuaternionToEulerImu();
VBC5_PUSH_CONST 303 | 0x80000000 //import func index sfQuaternionToEulerImu
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:549] ;rotation = forwardDirection - get_yaw();
VBC2_PUSH_CONST 5 //rotation
VBC3_PUSH_GLOBAL 84 //forwardDirection
VBC3_PUSH_CONST 369  //func address get_yaw
//alloc addon amount for result
VBC1_CALL0
//remove call address and params
VBC1_SUB_FF
VBC1_POP
[1:550] ;if( rotation > 3.141592654 ) rotation -= 2 * 3.141592654;
VBC3_PUSH_GLOBAL 5 //rotation
VBC5_PUSH_CONST 1078530011 
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB3825 //if to false
;if( rotation > 3.141592654 ) rotation -= 2 * 3.141592654;
VBC2_PUSH_CONST 5 //rotation
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1086918619 
VBC1_SUB_FF
VBC1_POP
LAB3825: //if else
[1:551] ;if( rotation < -3.141592654 ) rotation += 2 * 3.141592654;
VBC3_PUSH_GLOBAL 5 //rotation
VBC5_PUSH_CONST -1068953637 // -
VBC1_LESS_FF
VBC4_FALSE_JUMP LAB3849 //if to false
;if( rotation < -3.141592654 ) rotation += 2 * 3.141592654;
VBC2_PUSH_CONST 5 //rotation
VBC1_PUSH_TOS
VBC1_LOAD
VBC5_PUSH_CONST 1086918619 
VBC1_ADD_FF
VBC1_POP
LAB3849: //if else
[1:552] ;if( rotation > 0.7 ) rotation = 0.7;
VBC3_PUSH_GLOBAL 5 //rotation
VBC5_PUSH_CONST 1060320051 
VBC1_GREAT_FF
VBC4_FALSE_JUMP LAB3870 //if to false
;if( rotation > 0.7 ) rotation = 0.7;
VBC2_PUSH_CONST 5 //rotation
VBC5_PUSH_CONST 1060320051 
VBC1_POP
LAB3870: //if else
[1:553] ;if( rotation < -0.7 ) rotation = -0.7;
VBC3_PUSH_GLOBAL 5 //rotation
VBC5_PUSH_CONST -1087163597 // -
VBC1_LESS_FF
VBC4_FALSE_JUMP LAB3891 //if to false
;if( rotation < -0.7 ) rotation = -0.7;
VBC2_PUSH_CONST 5 //rotation
VBC5_PUSH_CONST -1087163597 // -
VBC1_POP
LAB3891: //if else
[1:558] ;
VBC1_RETURN
;mixing <void()>
[1:563] ;leftRightFactor = 100;
VBC2_PUSH_CONST 85 //leftRightFactor
VBC2_PUSH_CONST 100 
VBC1_POP
[1:564] ;frontBackFactor = 100;
VBC2_PUSH_CONST 86 //frontBackFactor
VBC2_PUSH_CONST 100 
VBC1_POP
[1:566] ;while(1) {
LAB3902: //while condition
;
[1:568] ;leftFootSideAddonMix = -svImuGyroZ * leftRightFactor >> 10;
VBC3_PUSH_CONST 2953 //leftFootSideAddonMix
VBC3_PUSH_GLOBAL 2568 //svImuGyroZ
VBC1_NEG
VBC3_PUSH_GLOBAL 85 //leftRightFactor
VBC1_MUL
VBC2_PUSH_CONST 10 
VBC1_RSHIFT
VBC1_POP
[1:569] ;rightFootSideAddonMix = svImuGyroZ * leftRightFactor >> 10;
VBC3_PUSH_CONST 2937 //rightFootSideAddonMix
VBC3_PUSH_GLOBAL 2568 //svImuGyroZ
VBC3_PUSH_GLOBAL 85 //leftRightFactor
VBC1_MUL
VBC2_PUSH_CONST 10 
VBC1_RSHIFT
VBC1_POP
[1:572] ;rightFootFrontAddonMix = leftFootFrontAddonMix = -svImuGyroX * frontBackFactor >> 10;
VBC3_PUSH_CONST 2905 //rightFootFrontAddonMix
VBC3_PUSH_CONST 2921 //leftFootFrontAddonMix
VBC3_PUSH_GLOBAL 2566 //svImuGyroX
VBC1_NEG
VBC3_PUSH_GLOBAL 86 //frontBackFactor
VBC1_MUL
VBC2_PUSH_CONST 10 
VBC1_RSHIFT
VBC1_STORE
VBC1_POP
[1:575] ;sfWaitNextFrame();
VBC1_WAIT
VBC4_JUMP LAB3902 //while forever loop
LAB3955: //while exit
[1:579] ;
VBC1_RETURN
;kick <void(,int)>
VBC2_STACK -11//local vars 11
[1:580] ;
[1:580] ;float gaitHeightKick = 200;
VBC2_PUSH_B_OFFSET -1 //gaitHeightKick
VBC3_PUSH_CONST 200 
VBC1_POP_CF
[1:581] ;
[1:581] ;float stepHeightKick = 40;
VBC2_PUSH_B_OFFSET -2 //stepHeightKick
VBC2_PUSH_CONST 40 
VBC1_POP_CF
[1:582] ;
[1:582] ;float stepLengthKick = 50 * invert;
VBC2_PUSH_B_OFFSET -3 //stepLengthKick
VBC2_PUSH_CONST 50 
VBC2_PUSH_LOCAL 2 //invert
VBC1_MUL
VBC1_POP_CF
[1:583] ;
[1:583] ;float kick_size = kick_power * invert;
VBC2_PUSH_B_OFFSET -4 //kick_size
VBC3_PUSH_GLOBAL 1028 //kick_power
VBC2_PUSH_LOCAL 2 //invert
VBC1_MUL
VBC1_POP_CF
[1:584] ;
[1:584] ;float bodyTiltAtKick = 0.04;
VBC2_PUSH_B_OFFSET -5 //bodyTiltAtKick
VBC5_PUSH_CONST 1025758986 
VBC1_POP
[1:585] ;
[1:585] ;int pose_taking_cycles = 20;
VBC2_PUSH_B_OFFSET -6 //pose_taking_cycles
VBC2_PUSH_CONST 20 
VBC1_POP
[1:587] ;
[1:587] ;float xrOld = xr;
VBC2_PUSH_B_OFFSET -7 //xrOld
VBC3_PUSH_GLOBAL 27 //xr
VBC1_POP
[1:588] ;
[1:588] ;float yrOld = yr;
VBC2_PUSH_B_OFFSET -8 //yrOld
VBC3_PUSH_GLOBAL 28 //yr
VBC1_POP
[1:589] ;
[1:589] ;float xlOld = xl;
VBC2_PUSH_B_OFFSET -9 //xlOld
VBC3_PUSH_GLOBAL 41 //xl
VBC1_POP
[1:590] ;
[1:590] ;float ylOld = yl;
VBC2_PUSH_B_OFFSET -10 //ylOld
VBC3_PUSH_GLOBAL 42 //yl
VBC1_POP
[1:592] ;selfFirstLegIsRightLeg = kick_by_right;
VBC2_PUSH_CONST 12 //selfFirstLegIsRightLeg
VBC3_PUSH_GLOBAL 1029 //kick_by_right
VBC1_POP
[1:593] ;dx0Typical = stepLengthKick / (2 * fr1 + fr2 + 2.0 * framestep) * framestep;
VBC2_PUSH_CONST 75 //dx0Typical
VBC2_PUSH_LOCAL -3 //stepLengthKick
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 49 //fr1
VBC1_MUL
VBC3_PUSH_GLOBAL 50 //fr2
VBC1_ADD
VBC5_PUSH_CONST 1073741824 
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_DIV_FF
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_MUL_FI
VBC1_POP
[1:594] ;xr = xl = bodyTiltAtKick;
VBC2_PUSH_CONST 27 //xr
VBC2_PUSH_CONST 41 //xl
VBC2_PUSH_LOCAL -5 //bodyTiltAtKick
VBC1_STORE
VBC1_POP
[1:595] ;yl = solyLandingSkew;
VBC2_PUSH_CONST 42 //yl
VBC3_PUSH_GLOBAL 67 //solyLandingSkew
VBC1_POP
[1:596] ;yr = -solyLandingSkew;
VBC2_PUSH_CONST 28 //yr
VBC3_PUSH_GLOBAL 67 //solyLandingSkew
VBC1_NEG_F
VBC1_POP
[1:597] ;s = (amplitude / 2) * sfMathCos(alpha01 * (fr1 / 2 + 0.5 * framestep));
VBC2_PUSH_CONST 78 //s
VBC3_PUSH_GLOBAL 47 //amplitude
VBC1_PUSH_2 
VBC1_DIV_FI
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 48 //alpha01
VBC3_PUSH_GLOBAL 49 //fr1
VBC1_PUSH_2 
VBC1_DIV
VBC5_PUSH_CONST 1056964608 
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_MUL_FI
VBC1_ADD_IF
VBC1_MUL_FF
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_MUL_FF
VBC1_POP
[1:598] ;xtr = xtl = 0;
VBC2_PUSH_CONST 21 //xtr
VBC2_PUSH_CONST 31 //xtl
VBC1_PUSH_0 
VBC1_STORE_CF
VBC1_POP
[1:601] ;ztr = ztl = -gaitHeightKick;
VBC2_PUSH_CONST 26 //ztr
VBC2_PUSH_CONST 40 //ztl
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:605] ;for (j = 0; j < pose_taking_cycles; j += 1) {
VBC2_PUSH_CONST 72 //j
VBC1_PUSH_0 
VBC1_POP
LAB4134: //for condition
VBC3_PUSH_GLOBAL 72 //j
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_LESS
VBC4_FALSE_JUMP LAB4220 //to for exit
;
[1:606] ;ztr = ztr0 + j * (-ztr0 - gaitHeightKick) / pose_taking_cycles;
VBC2_PUSH_CONST 26 //ztr
VBC3_PUSH_GLOBAL 57 //ztr0
VBC3_PUSH_GLOBAL 72 //j
VBC3_PUSH_GLOBAL 57 //ztr0
VBC1_NEG_F
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_SUB_FF
VBC1_MUL_IF
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_DIV_FI
VBC1_ADD_FF
VBC1_POP
[1:607] ;ztl = ztr;
VBC2_PUSH_CONST 40 //ztl
VBC3_PUSH_GLOBAL 26 //ztr
VBC1_POP
[1:608] ;ytr = -d10 - j * amplitude * 3 / pose_taking_cycles;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 46 //d10
VBC1_NEG_F
VBC3_PUSH_GLOBAL 72 //j
VBC3_PUSH_GLOBAL 47 //amplitude
VBC1_MUL_IF
VBC2_PUSH_CONST 3 
VBC1_MUL_FI
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
[1:609] ;ytl = ytr + 2 * d10;
VBC2_PUSH_CONST 36 //ytl
VBC3_PUSH_GLOBAL 24 //ytr
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 46 //d10
VBC1_MUL_IF
VBC1_ADD_FF
VBC1_POP
[1:610] ;computeAlphaForWalk();
VBC3_PUSH_CONST 899  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB4209: //for step
VBC2_PUSH_CONST 72 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB4134 //to condition
LAB4220: //for exit
[1:613] ;ztr = ztl = -gaitHeightKick;
VBC2_PUSH_CONST 26 //ztr
VBC2_PUSH_CONST 40 //ztl
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC1_STORE
VBC1_POP
[1:614] ;ytr = s - d10;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 78 //s
VBC3_PUSH_GLOBAL 46 //d10
VBC1_SUB_FF
VBC1_POP
[1:615] ;ytl = s + d10;
VBC2_PUSH_CONST 36 //ytl
VBC3_PUSH_GLOBAL 78 //s
VBC3_PUSH_GLOBAL 46 //d10
VBC1_ADD_FF
VBC1_POP
[1:617] ;for (j = fr1; j < fr1 + fr2; j += framestep) {
VBC2_PUSH_CONST 72 //j
VBC3_PUSH_GLOBAL 49 //fr1
VBC1_POP
LAB4255: //for condition
VBC3_PUSH_GLOBAL 72 //j
VBC3_PUSH_GLOBAL 49 //fr1
VBC3_PUSH_GLOBAL 50 //fr2
VBC1_ADD
VBC1_LESS
VBC4_FALSE_JUMP LAB4487 //to for exit
;
[1:618] ;ztr = -gaitHeightKick + stepHeightKick;
VBC2_PUSH_CONST 26 //ztr
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC2_PUSH_LOCAL -2 //stepHeightKick
VBC1_ADD_FF
VBC1_POP
[1:619] ;dx = stepLengthKick / fr2;
VBC2_PUSH_CONST 80 //dx
VBC2_PUSH_LOCAL -3 //stepLengthKick
VBC3_PUSH_GLOBAL 50 //fr2
VBC1_DIV_FI
VBC1_POP
[1:620] ;dx0 = stepLengthKick / (2 * fr1 + fr2 + 4) * framestep;
VBC2_PUSH_CONST 83 //dx0
VBC2_PUSH_LOCAL -3 //stepLengthKick
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 49 //fr1
VBC1_MUL
VBC3_PUSH_GLOBAL 50 //fr2
VBC1_ADD
VBC2_PUSH_CONST 4 
VBC1_ADD
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_MUL_FI
VBC1_POP
[1:621] ;if (j == fr1 || j == fr1 + fr2 - 2) {
VBC3_PUSH_GLOBAL 72 //j
VBC3_PUSH_GLOBAL 49 //fr1
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB4339
VBC3_PUSH_GLOBAL 72 //j
VBC3_PUSH_GLOBAL 49 //fr1
VBC3_PUSH_GLOBAL 50 //fr2
VBC1_ADD
VBC1_PUSH_2 
VBC1_SUB
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB4339
VBC1_PUSH_0
LAB4339:
VBC4_FALSE_JUMP LAB4369 //if to false
;
[1:622] ;xtr -= dx0;
VBC2_PUSH_CONST 21 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 83 //dx0
VBC1_SUB_FF
VBC1_POP
[1:623] ;ytr = s - (64 + kick_offset);
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 78 //s
VBC2_PUSH_CONST 64 
VBC3_PUSH_GLOBAL 1030 //kick_offset
VBC1_ADD
VBC1_SUB_FI
VBC1_POP
VBC4_JUMP LAB4392 //if to exit
LAB4369: //if else
;xtr += dx * fr2 / (fr2 - 2 * framestep);
VBC2_PUSH_CONST 21 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 80 //dx
VBC3_PUSH_GLOBAL 50 //fr2
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 50 //fr2
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_MUL
VBC1_SUB
VBC1_DIV_FI
VBC1_ADD_FF
VBC1_POP
LAB4392: //if exit
[1:627] ;if (j == fr1 + fr2 - 10)
VBC3_PUSH_GLOBAL 72 //j
VBC3_PUSH_GLOBAL 49 //fr1
VBC3_PUSH_GLOBAL 50 //fr2
VBC1_ADD
VBC2_PUSH_CONST 10 
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB4418 //if to false
;xtr += kick_size;
VBC2_PUSH_CONST 21 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC2_PUSH_LOCAL -4 //kick_size
VBC1_ADD_FF
VBC1_POP
LAB4418: //if else
[1:629] ;xtl -= kick_size;
VBC2_PUSH_CONST 31 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC2_PUSH_LOCAL -4 //kick_size
VBC1_SUB_FF
VBC1_POP
[1:630] ;if (j == fr1 + fr2 - 4)
VBC3_PUSH_GLOBAL 72 //j
VBC3_PUSH_GLOBAL 49 //fr1
VBC3_PUSH_GLOBAL 50 //fr2
VBC1_ADD
VBC2_PUSH_CONST 4 
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB4452 //if to false
;xtr -= kick_size;
VBC2_PUSH_CONST 21 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC2_PUSH_LOCAL -4 //kick_size
VBC1_SUB_FF
VBC1_POP
LAB4452: //if else
[1:632] ;xtl += kick_size;
VBC2_PUSH_CONST 31 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC2_PUSH_LOCAL -4 //kick_size
VBC1_ADD_FF
VBC1_POP
[1:633] ;xtl -= dx0;
VBC2_PUSH_CONST 31 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 83 //dx0
VBC1_SUB_FF
VBC1_POP
[1:634] ;computeAlphaForWalk();
VBC3_PUSH_CONST 899  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB4474: //for step
VBC2_PUSH_CONST 72 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB4255 //to condition
LAB4487: //for exit
[1:636] ;for (j = fr1 + fr2; j < 2 * fr1 + fr2; j += framestep) {
VBC2_PUSH_CONST 72 //j
VBC3_PUSH_GLOBAL 49 //fr1
VBC3_PUSH_GLOBAL 50 //fr2
VBC1_ADD
VBC1_POP
LAB4497: //for condition
VBC3_PUSH_GLOBAL 72 //j
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 49 //fr1
VBC1_MUL
VBC3_PUSH_GLOBAL 50 //fr2
VBC1_ADD
VBC1_LESS
VBC4_FALSE_JUMP LAB4621 //to for exit
;
[1:637] ;s = (amplitude / 2) * sfMathCos(alpha01 * (j - fr2 + framestep) / 2);
VBC2_PUSH_CONST 78 //s
VBC3_PUSH_GLOBAL 47 //amplitude
VBC1_PUSH_2 
VBC1_DIV_FI
VBC5_PUSH_CONST 300 | 0x80000000 //import func index sfMathCos
//alloc addon amount for result
VBC3_PUSH_GLOBAL 48 //alpha01
VBC3_PUSH_GLOBAL 72 //j
VBC3_PUSH_GLOBAL 50 //fr2
VBC1_SUB
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_ADD
VBC1_MUL_FI
VBC1_PUSH_2 
VBC1_DIV_FI
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC1_MUL_FF
VBC1_POP
[1:638] ;ytr = s - d10;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 78 //s
VBC3_PUSH_GLOBAL 46 //d10
VBC1_SUB_FF
VBC1_POP
[1:639] ;ytl = s + d10;
VBC2_PUSH_CONST 36 //ytl
VBC3_PUSH_GLOBAL 78 //s
VBC3_PUSH_GLOBAL 46 //d10
VBC1_ADD_FF
VBC1_POP
[1:640] ;ztl = -gaitHeightKick;
VBC2_PUSH_CONST 40 //ztl
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC1_POP
[1:641] ;ztr = -gaitHeightKick;
VBC2_PUSH_CONST 26 //ztr
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC1_POP
[1:642] ;dx0 = dx0Typical;
VBC2_PUSH_CONST 83 //dx0
VBC3_PUSH_GLOBAL 75 //dx0Typical
VBC1_POP
[1:643] ;xtl -= dx0;
VBC2_PUSH_CONST 31 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 83 //dx0
VBC1_SUB_FF
VBC1_POP
[1:644] ;xtr -= dx0;
VBC2_PUSH_CONST 21 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 83 //dx0
VBC1_SUB_FF
VBC1_POP
[1:645] ;computeAlphaForWalk();
VBC3_PUSH_CONST 899  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB4608: //for step
VBC2_PUSH_CONST 72 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB4497 //to condition
LAB4621: //for exit
[1:647] ;for (j = 2 * fr1 + fr2; j < 2 * (fr1 + fr2); j += framestep) {
VBC2_PUSH_CONST 72 //j
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 49 //fr1
VBC1_MUL
VBC3_PUSH_GLOBAL 50 //fr2
VBC1_ADD
VBC1_POP
LAB4633: //for condition
VBC3_PUSH_GLOBAL 72 //j
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 49 //fr1
VBC3_PUSH_GLOBAL 50 //fr2
VBC1_ADD
VBC1_MUL
VBC1_LESS
VBC4_FALSE_JUMP LAB4852 //to for exit
;
[1:648] ;ztl = -gaitHeightKick + stepHeightKick;
VBC2_PUSH_CONST 40 //ztl
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC2_PUSH_LOCAL -2 //stepHeightKick
VBC1_ADD_FF
VBC1_POP
[1:649] ;dx0 = dx0Typical * 4 / fr2;
VBC2_PUSH_CONST 83 //dx0
VBC3_PUSH_GLOBAL 75 //dx0Typical
VBC2_PUSH_CONST 4 
VBC1_MUL_FI
VBC3_PUSH_GLOBAL 50 //fr2
VBC1_DIV_FI
VBC1_POP
[1:650] ;dx = (stepLengthKick * (fr1 + fr2) / (4 * fr1) + 2 * dx0) / (fr2 - 2 * framestep) * framestep;
VBC2_PUSH_CONST 80 //dx
VBC2_PUSH_LOCAL -3 //stepLengthKick
VBC3_PUSH_GLOBAL 49 //fr1
VBC3_PUSH_GLOBAL 50 //fr2
VBC1_ADD
VBC1_MUL_FI
VBC2_PUSH_CONST 4 
VBC3_PUSH_GLOBAL 49 //fr1
VBC1_MUL
VBC1_DIV_FI
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 83 //dx0
VBC1_MUL_IF
VBC1_ADD_FF
VBC3_PUSH_GLOBAL 50 //fr2
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_MUL
VBC1_SUB
VBC1_DIV_FI
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_MUL_FI
VBC1_POP
[1:651] ;if (j == (2 * fr1 + 2 * fr2 - framestep)) {
VBC3_PUSH_GLOBAL 72 //j
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 49 //fr1
VBC1_MUL
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 50 //fr2
VBC1_MUL
VBC1_ADD
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_SUB
VBC1_EQU
VBC4_FALSE_JUMP LAB4751 //if to false
;
[1:652] ;ztl = -gaitHeightKick;
VBC2_PUSH_CONST 40 //ztl
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC1_POP
[1:653] ;ytl = s + d10;
VBC2_PUSH_CONST 36 //ytl
VBC3_PUSH_GLOBAL 78 //s
VBC3_PUSH_GLOBAL 46 //d10
VBC1_ADD_FF
VBC1_POP
LAB4751: //if else
[1:655] ;if (j == (2 * fr1 + fr2) || j == (2 * (fr1 + fr2) - framestep)) {
VBC3_PUSH_GLOBAL 72 //j
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 49 //fr1
VBC1_MUL
VBC3_PUSH_GLOBAL 50 //fr2
VBC1_ADD
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB4790
VBC3_PUSH_GLOBAL 72 //j
VBC1_PUSH_2 
VBC3_PUSH_GLOBAL 49 //fr1
VBC3_PUSH_GLOBAL 50 //fr2
VBC1_ADD
VBC1_MUL
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_SUB
VBC1_EQU
VBC4_TRUE_JUMP_KEEP LAB4790
VBC1_PUSH_0
LAB4790:
VBC4_FALSE_JUMP LAB4816 //if to false
;
[1:656] ;xtl -= dx0;
VBC2_PUSH_CONST 31 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 83 //dx0
VBC1_SUB_FF
VBC1_POP
[1:657] ;ytl = s + 64;
VBC2_PUSH_CONST 36 //ytl
VBC3_PUSH_GLOBAL 78 //s
VBC2_PUSH_CONST 64 
VBC1_ADD_FI
VBC1_POP
VBC4_JUMP LAB4825 //if to exit
LAB4816: //if else
;xtl += dx;
VBC2_PUSH_CONST 31 //xtl
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 80 //dx
VBC1_ADD_FF
VBC1_POP
LAB4825: //if exit
[1:661] ;xtr -= dx0;
VBC2_PUSH_CONST 21 //xtr
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 83 //dx0
VBC1_SUB_FF
VBC1_POP
[1:662] ;computeAlphaForWalk();
VBC3_PUSH_CONST 899  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB4839: //for step
VBC2_PUSH_CONST 72 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC3_PUSH_GLOBAL 18 //framestep
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB4633 //to condition
LAB4852: //for exit
[1:666] ;pose_taking_cycles = 5;
VBC2_PUSH_B_OFFSET -6 //pose_taking_cycles
VBC2_PUSH_CONST 5 
VBC1_POP
[1:667] ;
[1:667] ;int pose_hight_after_kick = -130; 
VBC2_PUSH_B_OFFSET -11 //pose_hight_after_kick
VBC3_PUSH_CONST -130 // -
VBC1_POP
[1:668] ;for (j = 0; j < pose_taking_cycles; j += 1) {
VBC2_PUSH_CONST 72 //j
VBC1_PUSH_0 
VBC1_POP
LAB4867: //for condition
VBC3_PUSH_GLOBAL 72 //j
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_LESS
VBC4_FALSE_JUMP LAB4969 //to for exit
;
[1:669] ;ztr = -gaitHeightKick + (j + 1) * (pose_hight_after_kick + gaitHeightKick) / pose_taking_cycles;
VBC2_PUSH_CONST 26 //ztr
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_NEG_F
VBC3_PUSH_GLOBAL 72 //j
VBC1_PUSH_1 
VBC1_ADD
VBC2_PUSH_LOCAL -11 //pose_hight_after_kick
VBC2_PUSH_LOCAL -1 //gaitHeightKick
VBC1_ADD_IF
VBC1_MUL_IF
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_DIV_FI
VBC1_ADD_FF
VBC1_POP
[1:670] ;ztl = ztr;
VBC2_PUSH_CONST 40 //ztl
VBC3_PUSH_GLOBAL 26 //ztr
VBC1_POP
[1:671] ;ytr = -d10 - (pose_taking_cycles - (j + 1)) * amplitude / 2 / pose_taking_cycles;
VBC2_PUSH_CONST 24 //ytr
VBC3_PUSH_GLOBAL 46 //d10
VBC1_NEG_F
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC3_PUSH_GLOBAL 72 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_SUB
VBC3_PUSH_GLOBAL 47 //amplitude
VBC1_MUL_IF
VBC1_PUSH_2 
VBC1_DIV_FI
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
[1:672] ;ytl = d10 - (pose_taking_cycles - (j + 1)) * amplitude / 2 / pose_taking_cycles;
VBC2_PUSH_CONST 36 //ytl
VBC3_PUSH_GLOBAL 46 //d10
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC3_PUSH_GLOBAL 72 //j
VBC1_PUSH_1 
VBC1_ADD
VBC1_SUB
VBC3_PUSH_GLOBAL 47 //amplitude
VBC1_MUL_IF
VBC1_PUSH_2 
VBC1_DIV_FI
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_DIV_FI
VBC1_SUB_FF
VBC1_POP
[1:673] ;computeAlphaForWalk();
VBC3_PUSH_CONST 899  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB4958: //for step
VBC2_PUSH_CONST 72 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB4867 //to condition
LAB4969: //for exit
[1:675] ;pose_taking_cycles = 50;
VBC2_PUSH_B_OFFSET -6 //pose_taking_cycles
VBC2_PUSH_CONST 50 
VBC1_POP
[1:676] ;for (j = 0; j < pose_taking_cycles; j += 1) {
VBC2_PUSH_CONST 72 //j
VBC1_PUSH_0 
VBC1_POP
LAB4978: //for condition
VBC3_PUSH_GLOBAL 72 //j
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_LESS
VBC4_FALSE_JUMP LAB5031 //to for exit
;
[1:677] ;ztr = pose_hight_after_kick + (j + 1) * (ztr0 - pose_hight_after_kick) / pose_taking_cycles;
VBC2_PUSH_CONST 26 //ztr
VBC2_PUSH_LOCAL -11 //pose_hight_after_kick
VBC3_PUSH_GLOBAL 72 //j
VBC1_PUSH_1 
VBC1_ADD
VBC3_PUSH_GLOBAL 57 //ztr0
VBC2_PUSH_LOCAL -11 //pose_hight_after_kick
VBC1_SUB_FI
VBC1_MUL_IF
VBC2_PUSH_LOCAL -6 //pose_taking_cycles
VBC1_DIV_FI
VBC1_ADD_IF
VBC1_POP
[1:678] ;ztl = ztr;
VBC2_PUSH_CONST 40 //ztl
VBC3_PUSH_GLOBAL 26 //ztr
VBC1_POP
[1:679] ;computeAlphaForWalk();
VBC3_PUSH_CONST 899  //func address computeAlphaForWalk
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
LAB5020: //for step
VBC2_PUSH_CONST 72 //j
VBC1_PUSH_TOS
VBC1_LOAD
VBC1_PUSH_1 
VBC1_ADD
VBC1_POP
VBC4_JUMP LAB4978 //to condition
LAB5031: //for exit
[1:682] ;xr = xrOld;
VBC2_PUSH_CONST 27 //xr
VBC2_PUSH_LOCAL -7 //xrOld
VBC1_POP
[1:683] ;yr = yrOld;
VBC2_PUSH_CONST 28 //yr
VBC2_PUSH_LOCAL -8 //yrOld
VBC1_POP
[1:684] ;xl = xlOld;
VBC2_PUSH_CONST 41 //xl
VBC2_PUSH_LOCAL -9 //xlOld
VBC1_POP
[1:685] ;yl = ylOld;
VBC2_PUSH_CONST 42 //yl
VBC2_PUSH_LOCAL -10 //ylOld
VBC1_POP
[1:691] ;
VBC1_RETURN
;runTest <void()>
VBC1_STACK_DN1//local vars 1
[1:694] ;walkInitialPose();
VBC3_PUSH_CONST 1815  //func address walkInitialPose
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:696] ;stepType = 0;
VBC2_PUSH_CONST 63 //stepType
VBC1_PUSH_0 
VBC1_POP
[1:697] ;stepLength = 70 / 3.0;
VBC2_PUSH_CONST 3 //stepLength
VBC5_PUSH_CONST 1102752427 
VBC1_POP
[1:698] ;walkCycle(0);
VBC3_PUSH_CONST 3703  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:701] ;stepType = 2;
VBC2_PUSH_CONST 63 //stepType
VBC1_PUSH_2 
VBC1_POP
[1:702] ;stepLength = 70 * 2.0 / 3.0;
VBC2_PUSH_CONST 3 //stepLength
VBC5_PUSH_CONST 1111141035 
VBC1_POP
[1:703] ;walkCycle(0);
VBC3_PUSH_CONST 3703  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:706] ;stepLength = 70;
VBC2_PUSH_CONST 3 //stepLength
VBC2_PUSH_CONST 70 
VBC1_POP_CF
[1:707] ;
[1:708] ;for( i = 0; i < 15 ; i++ ){
VBC2_PUSH_B_OFFSET -1 //i
VBC1_PUSH_0 
VBC1_POP
LAB5103: //for condition
VBC2_PUSH_LOCAL -1 //i
VBC2_PUSH_CONST 15 
VBC1_LESS
VBC4_FALSE_JUMP LAB5189 //to for exit
;
[1:709] ;stabilizeRotationByIMU();
VBC3_PUSH_CONST 3783  //func address stabilizeRotationByIMU
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:710] ;if (sfAbs(roll) > 0.1 && y_cap) {
VBC5_PUSH_CONST 20 | 0x80000000 //import func index sfAbs
VBC3_PUSH_GLOBAL 71 //roll
VBC1_F_TO_I
VBC1_CALL1
VBC1_STACK_UP1//remove call address and params
VBC5_PUSH_CONST 1036831949 
VBC1_GREAT_IF
VBC4_FALSE_JUMP_KEEP LAB5146
VBC3_PUSH_GLOBAL 20 //y_cap
VBC4_FALSE_JUMP_KEEP LAB5146
VBC1_PUSH_1
LAB5146:
VBC4_FALSE_JUMP LAB5166 //if to false
;
[1:711] ;side_cap = roll * gaitHeight * 2;
VBC2_PUSH_CONST 38 //side_cap
VBC3_PUSH_GLOBAL 71 //roll
VBC3_PUSH_GLOBAL 51 //gaitHeight
VBC1_MUL_FF
VBC1_PUSH_2 
VBC1_MUL_FI
VBC1_POP
VBC4_JUMP LAB5170 //if to exit
LAB5166: //if else
;else side_cap = 0;
VBC2_PUSH_CONST 38 //side_cap
VBC1_PUSH_0 
VBC1_POP_CF
LAB5170: //if exit
[1:714] ;sideLength = side_cap;
VBC2_PUSH_CONST 4 //sideLength
VBC3_PUSH_GLOBAL 38 //side_cap
VBC1_POP
[1:715] ;walkCycle(0);
VBC3_PUSH_CONST 3703  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
LAB5182: //for step
VBC2_PUSH_B_OFFSET -1 //i
VBC1_INC
VBC4_JUMP LAB5103 //to condition
LAB5189: //for exit
[1:718] ;stepLength = 70 * 2.0 / 3.0;
VBC2_PUSH_CONST 3 //stepLength
VBC5_PUSH_CONST 1111141035 
VBC1_POP
[1:719] ;walkCycle(0);
VBC3_PUSH_CONST 3703  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:721] ;stepLength = 70 / 3.0;
VBC2_PUSH_CONST 3 //stepLength
VBC5_PUSH_CONST 1102752427 
VBC1_POP
[1:722] ;stepType = 1;
VBC2_PUSH_CONST 63 //stepType
VBC1_PUSH_1 
VBC1_POP
[1:723] ;walkCycle(0);
VBC3_PUSH_CONST 3703  //func address walkCycle
VBC1_PUSH_0 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:726] ;walkFinalPoseFine();
VBC3_PUSH_CONST 2080  //func address walkFinalPoseFine
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:729] ;
VBC1_RETURN
;main <void()>
[1:730] ;setup();
VBC3_PUSH_CONST 379  //func address setup
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:731] ;sideLength = 0;
VBC2_PUSH_CONST 4 //sideLength
VBC1_PUSH_0 
VBC1_POP_CF
[1:732] ;rotation = 0;
VBC2_PUSH_CONST 5 //rotation
VBC1_PUSH_0 
VBC1_POP_CF
[1:733] ;IKerr = 0;
VBC1_PUSH_2 //IKerr
VBC1_PUSH_0 
VBC1_POP
[1:736] ;sfQuaternionToEulerImu();
VBC5_PUSH_CONST 303 | 0x80000000 //import func index sfQuaternionToEulerImu
VBC1_CALL0
VBC1_STACK_UP1//remove result, call address and params
[1:738] ;forwardDirection = get_yaw();
VBC2_PUSH_CONST 84 //forwardDirection
VBC3_PUSH_CONST 369  //func address get_yaw
//alloc addon amount for result
VBC1_CALL0
//remove call address and params
VBC1_POP
[1:741] ;sfCreateTask( mixing, 20 );
VBC5_PUSH_CONST 2 | 0x80000000 //import func index sfCreateTask
VBC3_PUSH_CONST 3892  //func address mixing
VBC2_PUSH_CONST 20 
VBC1_CALL2
VBC1_STACK_UP3//remove result, call address and params
[1:743] ;kick(1);
VBC3_PUSH_CONST 3956  //func address kick
VBC1_PUSH_1 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:747] ;sfStartSlot( sfSlotIndex("roki2TenseUp.cpp") );
VBC5_PUSH_CONST 42 | 0x80000000 //import func index sfStartSlot
VBC1_PUSH_1 
VBC1_CALL1
VBC1_STACK_UP2//remove result, call address and params
[1:748] ;
VBC1_RETURN
//Init table
//Variables
svFrameCount : 1
svImuAccX : 2560
svImuAccY : 2561
svImuAccZ : 2562
svImuAccRawX : 2563
svImuAccRawY : 2564
svImuAccRawZ : 2565
svImuGyroX : 2566
svImuGyroY : 2567
svImuGyroZ : 2568
svImuGyroRawX : 2569
svImuGyroRawY : 2570
svImuGyroRawZ : 2571
svImuQuaterX : 2572
svImuQuaterY : 2573
svImuQuaterZ : 2574
svImuQuaterW : 2575
svImuQuaterAcc : 2576
svImuAccSlowX : 2577
svImuAccSlowY : 2578
svImuAccSlowZ : 2579
svAdc : 2580
svButtonLeft : 2581
svButtonRight : 2582
svButtonPress : 2583
svHeadControlMask : 2584
svDefFrameCount : 2585
svEulerYaw F: 2600
svEulerPitch F: 2601
svEulerRoll F: 2602
svRemoteStatus : 3250
svRemoteButton : 3251
svRemoteLeftJoystick : 3252
svRemoteLeftJoystickX : 3253
svRemoteLeftJoystickY : 3254
svRemoteRightJoystick : 3255
svRemoteRightJoystickX : 3256
svRemoteRightJoystickY : 3257
svDebug0 : 2603
svDebug1 : 2604
svDebug2 : 2605
svDebug3 : 2606
svHumoModelDistPelvic : 3264
svHumoModelLengthPelvicHip : 3265
svHumoModelLengthHipHip : 3266
svHumoModelLengthHipKnee : 3267
svHumoModelLengthKneeFoot : 3268
svHumoModelLengthFootFoot : 3269
svHumoModelDistFootFloor : 3270
svHumoModelFootLength : 3271
svHumoModelFootWidth : 3272
svHumoModelFootCenterBack : 3273
svHumoModelFootCenterInner : 3274
svHumoModelAngPelvic : 3258
svHumoModelAngHipSide : 3260
svHumoModelAngHip : 3259
svHumoModelAngKnee : 3261
svHumoModelAngFoot : 3262
svHumoModelAngFootSide : 3263
svIkA5 F: 3275
svIkB5 F: 3276
svIkC5 F: 3277
svIkA6 F: 3278
svIkA7 F: 3279
svIkA8 F: 3280
svIkA9 F: 3281
svIkA10 F: 3282
svIkB10 F: 3283
svIkC10 F: 3284
svIkLimA5min F: 3285
svIkLimA5max F: 3286
svIkLimA6min F: 3287
svIkLimA6max F: 3288
svIkLimA7min F: 3289
svIkLimA7max F: 3290
svIkLimA8min F: 3291
svIkLimA8max F: 3292
svIkLimA9min F: 3293
svIkLimA9max F: 3294
svIkLimA10min F: 3295
svIkLimA10max F: 3296
svIkOutPresent : 3297
svIkEncA5 : 3298
svIkEncA6 : 3299
svIkEncA7 : 3300
svIkEncA8 : 3301
svIkEncA9 : 3302
svIkEncA10 : 3303
headRotateTarget : 2610
headRotateCurrent : 2611
headRotatePwm : 2612
headRotateVelo : 2613
headRotateFlags : 2615
headRotateAddonMix : 2617
torsoRotateTarget : 2626
torsoRotateCurrent : 2627
torsoRotatePwm : 2628
torsoRotateVelo : 2629
torsoRotateFlags : 2631
torsoRotateAddonMix : 2633
rightClavicleTarget : 2642
rightClavicleCurrent : 2643
rightClaviclePwm : 2644
rightClavicleVelo : 2645
rightClavicleFlags : 2647
rightClavicleAddonMix : 2649
leftClavicleTarget : 2658
leftClavicleCurrent : 2659
leftClaviclePwm : 2660
leftClavicleVelo : 2661
leftClavicleFlags : 2663
leftClavicleAddonMix : 2665
rightShoulderTarget : 2674
rightShoulderCurrent : 2675
rightShoulderPwm : 2676
rightShoulderVelo : 2677
rightShoulderFlags : 2679
rightShoulderAddonMix : 2681
leftShoulderTarget : 2690
leftShoulderCurrent : 2691
leftShoulderPwm : 2692
leftShoulderVelo : 2693
leftShoulderFlags : 2695
leftShoulderAddonMix : 2697
rightElbowSideTarget : 2706
rightElbowSideCurrent : 2707
rightElbowSidePwm : 2708
rightElbowSideVelo : 2709
rightElbowSideFlags : 2711
rightElbowSideAddonMix : 2713
leftElbowSideTarget : 2722
leftElbowSideCurrent : 2723
leftElbowSidePwm : 2724
leftElbowSideVelo : 2725
leftElbowSideFlags : 2727
leftElbowSideAddonMix : 2729
rightElbowTarget : 2738
rightElbowCurrent : 2739
rightElbowPwm : 2740
rightElbowVelo : 2741
rightElbowFlags : 2743
rightElbowAddonMix : 2745
leftElbowTarget : 2754
leftElbowCurrent : 2755
leftElbowPwm : 2756
leftElbowVelo : 2757
leftElbowFlags : 2759
leftElbowAddonMix : 2761
rightPelvicTarget : 2770
rightPelvicCurrent : 2771
rightPelvicPwm : 2772
rightPelvicVelo : 2773
rightPelvicFlags : 2775
rightPelvicAddonMix : 2777
leftPelvicTarget : 2786
leftPelvicCurrent : 2787
leftPelvicPwm : 2788
leftPelvicVelo : 2789
leftPelvicFlags : 2791
leftPelvicAddonMix : 2793
rightHipSideTarget : 2802
rightHipSideCurrent : 2803
rightHipSidePwm : 2804
rightHipSideVelo : 2805
rightHipSideFlags : 2807
rightHipSideAddonMix : 2809
leftHipSideTarget : 2818
leftHipSideCurrent : 2819
leftHipSidePwm : 2820
leftHipSideVelo : 2821
leftHipSideFlags : 2823
leftHipSideAddonMix : 2825
rightHipTarget : 2834
rightHipCurrent : 2835
rightHipPwm : 2836
rightHipVelo : 2837
rightHipFlags : 2839
rightHipAddonMix : 2841
leftHipTarget : 2850
leftHipCurrent : 2851
leftHipPwm : 2852
leftHipVelo : 2853
leftHipFlags : 2855
leftHipAddonMix : 2857
rightKneeTarget : 2866
rightKneeCurrent : 2867
rightKneePwm : 2868
rightKneeVelo : 2869
rightKneeFlags : 2871
rightKneeAddonMix : 2873
leftKneeTarget : 2882
leftKneeCurrent : 2883
leftKneePwm : 2884
leftKneeVelo : 2885
leftKneeFlags : 2887
leftKneeAddonMix : 2889
rightFootFrontTarget : 2898
rightFootFrontCurrent : 2899
rightFootFrontPwm : 2900
rightFootFrontVelo : 2901
rightFootFrontFlags : 2903
rightFootFrontAddonMix : 2905
leftFootFrontTarget : 2914
leftFootFrontCurrent : 2915
leftFootFrontPwm : 2916
leftFootFrontVelo : 2917
leftFootFrontFlags : 2919
leftFootFrontAddonMix : 2921
rightFootSideTarget : 2930
rightFootSideCurrent : 2931
rightFootSidePwm : 2932
rightFootSideVelo : 2933
rightFootSideFlags : 2935
rightFootSideAddonMix : 2937
leftFootSideTarget : 2946
leftFootSideCurrent : 2947
leftFootSidePwm : 2948
leftFootSideVelo : 2949
leftFootSideFlags : 2951
leftFootSideAddonMix : 2953
rightHandTarget : 2962
rightHandCurrent : 2963
rightHandPwm : 2964
rightHandVelo : 2965
rightHandFlags : 2967
rightHandAddonMix : 2969
leftHandTarget : 2978
leftHandCurrent : 2979
leftHandPwm : 2980
leftHandVelo : 2981
leftHandFlags : 2983
leftHandAddonMix : 2985
headTiltTarget : 3010
headTiltCurrent : 3011
headTiltPwm : 3012
headTiltVelo : 3013
headTiltFlags : 3015
headTiltAddonMix : 3017
rightKneeBotTarget : 3026
rightKneeBotCurrent : 3027
rightKneeBotPwm : 3028
rightKneeBotVelo : 3029
rightKneeBotFlags : 3031
rightKneeBotAddonMix : 3033
leftKneeBotTarget : 3042
leftKneeBotCurrent : 3043
leftKneeBotPwm : 3044
leftKneeBotVelo : 3045
leftKneeBotFlags : 3047
leftKneeBotAddonMix : 3049
rightClawTarget : 3058
rightClawCurrent : 3059
rightClawPwm : 3060
rightClawVelo : 3061
rightClawFlags : 3063
rightClawAddonMix : 3065
leftClawTarget : 3074
leftClawCurrent : 3075
leftClawPwm : 3076
leftClawVelo : 3077
leftClawFlags : 3079
leftClawAddonMix : 3081
jump_mode : 1024
robot_Serial_Number : 1025
splits_Mode : 1026
lowest_ntc : 1027
kick_power : 1028
kick_by_right : 1029
kick_offset : 1030
IKerr : 2
stepLength F: 3
sideLength F: 4
rotation F: 5
selfMotionShiftCorrectionX F: 6
selfMotionShiftCorrectionY F: 7
selfFirstStepYield F: 8
selfCycleStepYield F: 9
selfSideStepRightYield F: 10
selfSideStepLeftYield F: 11
selfFirstLegIsRightLeg : 12
motion_to_right : 13
side_motion F: 14
selfInitPoses : 15
rotationYieldRight F: 16
rotationYieldLeft F: 17
framestep : 18
x_cap : 19
y_cap : 20
xtr F: 21
xtr_cap F: 22
xr_cap F: 23
ytr F: 24
ytr_cap F: 25
ztr F: 26
xr F: 27
yr F: 28
zr F: 29
wr F: 30
xtl F: 31
xtl_cap F: 32
xl_cap F: 33
xt_cap_limit F: 34
x_cap_limit F: 35
ytl F: 36
ytl_cap F: 37
side_cap F: 38
yt_cap_limit F: 39
ztl F: 40
xl F: 41
yl F: 42
zl F: 43
wl F: 44
e10 F: 45
d10 F: 46
amplitude F: 47
alpha01 F: 48
fr1 : 49
fr2 : 50
gaitHeight F: 51
stepHeight F: 52
correctedStepLenght F: 53
correctedStepLenghtHalf F: 54
correctedSideLenght F: 55
correctedSideLenghtHalf F: 56
ztr0 F: 57
ztl0 F: 58
stepZtr F: 59
stepZtl F: 60
stepYtr F: 61
stepYtl F: 62
stepType : 63
fps : 64
walking_frame : 65
bodyTiltAtWalk F: 66
solyLandingSkew F: 67
stepNumber : 68
yaw F: 69
pitch F: 70
roll F: 71
j : 72
xtl0 F: 73
xtr0 F: 74
dx0Typical F: 75
dy0Typical F: 76
correctedRotation F: 77
s F: 78
fase_offset F: 79
dx F: 80
dy F: 81
stepRotation F: 82
dx0 F: 83
forwardDirection F: 84
leftRightFactor : 85
frontBackFactor : 86
